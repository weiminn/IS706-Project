{
    "spring-websocket-5.3.18.jar": [
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager$1.onSuccess(org.springframework.web.socket.WebSocketSession)",
            "public void onSuccess(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager$1.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager$1.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.client.ConnectionManagerSupport",
            "org.springframework.web.socket.client.ConnectionManagerSupport(java.lang.String, java.lang.Object...)",
            "public org.springframework.web.socket.client.ConnectionManagerSupport(java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.ConnectionManagerSupport.setAutoStartup(boolean)",
            "public void setAutoStartup(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.client.ConnectionManagerSupport.isAutoStartup()",
            "public boolean isAutoStartup()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.ConnectionManagerSupport.setPhase(int)",
            "public void setPhase(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.client.ConnectionManagerSupport.getPhase()",
            "public int getPhase()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.ConnectionManagerSupport.start()",
            "public final void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.ConnectionManagerSupport.stop()",
            "public final void stop()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.ConnectionManagerSupport.stop(java.lang.Runnable)",
            "public final void stop(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.client.ConnectionManagerSupport.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.web.socket.client.AbstractWebSocketClient",
            "org.springframework.web.socket.client.AbstractWebSocketClient()",
            "public org.springframework.web.socket.client.AbstractWebSocketClient()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.client.AbstractWebSocketClient.doHandshake(org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> doHandshake(org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.client.AbstractWebSocketClient.doHandshake(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.WebSocketHttpHeaders, java.net.URI)",
            "public final org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> doHandshake(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.WebSocketHttpHeaders, java.net.URI)"
        ],
        [
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient()",
            "public org.springframework.web.socket.client.jetty.JettyWebSocketClient()"
        ],
        [
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient(org.eclipse.jetty.websocket.client.WebSocketClient)",
            "public org.springframework.web.socket.client.jetty.JettyWebSocketClient(org.eclipse.jetty.websocket.client.WebSocketClient)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor)"
        ],
        [
            "org.springframework.core.task.AsyncListenableTaskExecutor",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.getTaskExecutor()",
            "public org.springframework.core.task.AsyncListenableTaskExecutor getTaskExecutor()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.doHandshake(org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> doHandshake(org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient.doHandshakeInternal(org.springframework.web.socket.WebSocketHandler, org.springframework.http.HttpHeaders, java.net.URI, java.util.List<java.lang.String>, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> doHandshakeInternal(org.springframework.web.socket.WebSocketHandler, org.springframework.http.HttpHeaders, java.net.URI, java.util.List<java.lang.String>, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.concurrent.Future<org.eclipse.jetty.websocket.api.Session>",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient$Jetty9UpgradeHelper.connect(org.eclipse.jetty.websocket.client.WebSocketClient, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)",
            "public java.util.concurrent.Future<org.eclipse.jetty.websocket.api.Session> connect(org.eclipse.jetty.websocket.client.WebSocketClient, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession) throws java.io.IOException"
        ],
        [
            "java.util.concurrent.Future<org.eclipse.jetty.websocket.api.Session>",
            "org.springframework.web.socket.client.jetty.JettyWebSocketClient$Jetty10UpgradeHelper.connect(org.eclipse.jetty.websocket.client.WebSocketClient, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)",
            "public java.util.concurrent.Future<org.eclipse.jetty.websocket.api.Session> connect(org.eclipse.jetty.websocket.client.WebSocketClient, java.net.URI, org.eclipse.jetty.websocket.client.ClientUpgradeRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)"
        ],
        [
            "org.springframework.web.socket.client.WebSocketConnectionManager",
            "org.springframework.web.socket.client.WebSocketConnectionManager(org.springframework.web.socket.client.WebSocketClient, org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)",
            "public org.springframework.web.socket.client.WebSocketConnectionManager(org.springframework.web.socket.client.WebSocketClient, org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager.setSubProtocols(java.util.List<java.lang.String>)",
            "public void setSubProtocols(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.client.WebSocketConnectionManager.getSubProtocols()",
            "public java.util.List<java.lang.String> getSubProtocols()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager.setOrigin(java.lang.String)",
            "public void setOrigin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.client.WebSocketConnectionManager.getOrigin()",
            "public java.lang.String getOrigin()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager.setHeaders(org.springframework.http.HttpHeaders)",
            "public void setHeaders(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.client.WebSocketConnectionManager.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager.startInternal()",
            "public void startInternal()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.WebSocketConnectionManager.stopInternal()",
            "public void stopInternal() throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.client.standard.StandardWebSocketClient$StandardWebSocketClientConfigurator",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient$StandardWebSocketClientConfigurator(org.springframework.web.socket.client.standard.StandardWebSocketClient, org.springframework.http.HttpHeaders)",
            "public org.springframework.web.socket.client.standard.StandardWebSocketClient$StandardWebSocketClientConfigurator(org.springframework.web.socket.client.standard.StandardWebSocketClient, org.springframework.http.HttpHeaders)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient$StandardWebSocketClientConfigurator.beforeRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public void beforeRequest(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient$StandardWebSocketClientConfigurator.afterResponse(javax.websocket.HandshakeResponse)",
            "public void afterResponse(javax.websocket.HandshakeResponse)"
        ],
        [
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager(java.lang.Object, java.lang.String, java.lang.Object...)",
            "public org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager(java.lang.Object, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager(java.lang.Class<?>, java.lang.String, java.lang.Object...)",
            "public org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager(java.lang.Class<?>, java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager.setWebSocketContainer(javax.websocket.WebSocketContainer)",
            "public void setWebSocketContainer(javax.websocket.WebSocketContainer)"
        ],
        [
            "javax.websocket.WebSocketContainer",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager.getWebSocketContainer()",
            "public javax.websocket.WebSocketContainer getWebSocketContainer()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager.setTaskExecutor(org.springframework.core.task.TaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager.getTaskExecutor()",
            "public org.springframework.core.task.TaskExecutor getTaskExecutor()"
        ],
        [
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean()",
            "public org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.setAsyncSendTimeout(long)",
            "public void setAsyncSendTimeout(long)"
        ],
        [
            "long",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getAsyncSendTimeout()",
            "public long getAsyncSendTimeout()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.setMaxSessionIdleTimeout(long)",
            "public void setMaxSessionIdleTimeout(long)"
        ],
        [
            "long",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getMaxSessionIdleTimeout()",
            "public long getMaxSessionIdleTimeout()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.setMaxTextMessageBufferSize(int)",
            "public void setMaxTextMessageBufferSize(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getMaxTextMessageBufferSize()",
            "public int getMaxTextMessageBufferSize()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.setMaxBinaryMessageBufferSize(int)",
            "public void setMaxBinaryMessageBufferSize(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getMaxBinaryMessageBufferSize()",
            "public int getMaxBinaryMessageBufferSize()"
        ],
        [
            "javax.websocket.WebSocketContainer",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getObject()",
            "public javax.websocket.WebSocketContainer getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.client.standard.WebSocketContainerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.client.standard.StandardWebSocketClient",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient()",
            "public org.springframework.web.socket.client.standard.StandardWebSocketClient()"
        ],
        [
            "org.springframework.web.socket.client.standard.StandardWebSocketClient",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient(javax.websocket.WebSocketContainer)",
            "public org.springframework.web.socket.client.standard.StandardWebSocketClient(javax.websocket.WebSocketContainer)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient.setUserProperties(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setUserProperties(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient.getUserProperties()",
            "public java.util.Map<java.lang.String, java.lang.Object> getUserProperties()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient.setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor)"
        ],
        [
            "org.springframework.core.task.AsyncListenableTaskExecutor",
            "org.springframework.web.socket.client.standard.StandardWebSocketClient.getTaskExecutor()",
            "public org.springframework.core.task.AsyncListenableTaskExecutor getTaskExecutor()"
        ],
        [
            "org.springframework.web.socket.client.standard.EndpointConnectionManager",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager(javax.websocket.Endpoint, java.lang.String, java.lang.Object...)",
            "public org.springframework.web.socket.client.standard.EndpointConnectionManager(javax.websocket.Endpoint, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.socket.client.standard.EndpointConnectionManager",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager(java.lang.Class<? extends javax.websocket.Endpoint>, java.lang.String, java.lang.Object...)",
            "public org.springframework.web.socket.client.standard.EndpointConnectionManager(java.lang.Class<? extends javax.websocket.Endpoint>, java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setSupportedProtocols(java.lang.String...)",
            "public void setSupportedProtocols(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setExtensions(javax.websocket.Extension...)",
            "public void setExtensions(javax.websocket.Extension...)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setEncoders(java.util.List<java.lang.Class<? extends javax.websocket.Encoder>>)",
            "public void setEncoders(java.util.List<java.lang.Class<? extends javax.websocket.Encoder>>)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setDecoders(java.util.List<java.lang.Class<? extends javax.websocket.Decoder>>)",
            "public void setDecoders(java.util.List<java.lang.Class<? extends javax.websocket.Decoder>>)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setConfigurator(javax.websocket.ClientEndpointConfig$Configurator)",
            "public void setConfigurator(javax.websocket.ClientEndpointConfig$Configurator)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setWebSocketContainer(javax.websocket.WebSocketContainer)",
            "public void setWebSocketContainer(javax.websocket.WebSocketContainer)"
        ],
        [
            "javax.websocket.WebSocketContainer",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.getWebSocketContainer()",
            "public javax.websocket.WebSocketContainer getWebSocketContainer()"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.setTaskExecutor(org.springframework.core.task.TaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.web.socket.client.standard.EndpointConnectionManager.getTaskExecutor()",
            "public org.springframework.core.task.TaskExecutor getTaskExecutor()"
        ],
        [
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler(org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel)",
            "public org.springframework.web.socket.messaging.SubProtocolWebSocketHandler(org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.setProtocolHandlers(java.util.List<org.springframework.web.socket.messaging.SubProtocolHandler>)",
            "public void setProtocolHandlers(java.util.List<org.springframework.web.socket.messaging.SubProtocolHandler>)"
        ],
        [
            "java.util.List<org.springframework.web.socket.messaging.SubProtocolHandler>",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getProtocolHandlers()",
            "public java.util.List<org.springframework.web.socket.messaging.SubProtocolHandler> getProtocolHandlers()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.addProtocolHandler(org.springframework.web.socket.messaging.SubProtocolHandler)",
            "public void addProtocolHandler(org.springframework.web.socket.messaging.SubProtocolHandler)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.web.socket.messaging.SubProtocolHandler>",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getProtocolHandlerMap()",
            "public java.util.Map<java.lang.String, org.springframework.web.socket.messaging.SubProtocolHandler> getProtocolHandlerMap()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.setDefaultProtocolHandler(org.springframework.web.socket.messaging.SubProtocolHandler)",
            "public void setDefaultProtocolHandler(org.springframework.web.socket.messaging.SubProtocolHandler)"
        ],
        [
            "org.springframework.web.socket.messaging.SubProtocolHandler",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getDefaultProtocolHandler()",
            "public org.springframework.web.socket.messaging.SubProtocolHandler getDefaultProtocolHandler()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getSubProtocols()",
            "public java.util.List<java.lang.String> getSubProtocols()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.setSendTimeLimit(int)",
            "public void setSendTimeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getSendTimeLimit()",
            "public int getSendTimeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.setSendBufferSizeLimit(int)",
            "public void setSendBufferSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getSendBufferSizeLimit()",
            "public int getSendBufferSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.setTimeToFirstMessage(int)",
            "public void setTimeToFirstMessage(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getTimeToFirstMessage()",
            "public int getTimeToFirstMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getStatsInfo()",
            "public java.lang.String getStatsInfo()"
        ],
        [
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$Stats",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.getStats()",
            "public org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$Stats getStats()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.start()",
            "public final void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.stop()",
            "public final void stop()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.stop(java.lang.Runnable)",
            "public final void stop(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.isRunning()",
            "public final boolean isRunning()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(org.springframework.messaging.Message<?>)",
            "public void handleMessage(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.supportsPartialMessages()",
            "public boolean supportsPartialMessages()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter(org.springframework.messaging.tcp.TcpConnectionHandler<byte[]>)",
            "public org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter(org.springframework.messaging.tcp.TcpConnectionHandler<byte[]>)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.onSuccess(org.springframework.web.socket.WebSocketSession)",
            "public void onSuccess(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.supportsPartialMessages()",
            "public boolean supportsPartialMessages()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.send(org.springframework.messaging.Message<byte[]>)",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> send(org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.onReadInactivity(java.lang.Runnable, long)",
            "public void onReadInactivity(java.lang.Runnable, long)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.onWriteInactivity(java.lang.Runnable, long)",
            "public void onWriteInactivity(java.lang.Runnable, long)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.close()",
            "public void close()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.messaging.WebSocketStompClient$StompWebSocketMessageCodec",
            "org.springframework.web.socket.messaging.WebSocketStompClient$StompWebSocketMessageCodec(int)",
            "public org.springframework.web.socket.messaging.WebSocketStompClient$StompWebSocketMessageCodec(int)"
        ],
        [
            "java.util.List<org.springframework.messaging.Message<byte[]>>",
            "org.springframework.web.socket.messaging.WebSocketStompClient$StompWebSocketMessageCodec.decode(org.springframework.web.socket.WebSocketMessage<?>)",
            "public java.util.List<org.springframework.messaging.Message<byte[]>> decode(org.springframework.web.socket.WebSocketMessage<?>)"
        ],
        [
            "org.springframework.web.socket.WebSocketMessage<?>",
            "org.springframework.web.socket.messaging.WebSocketStompClient$StompWebSocketMessageCodec.encode(org.springframework.messaging.Message<byte[]>, java.lang.Class<? extends org.springframework.web.socket.WebSocketSession>)",
            "public org.springframework.web.socket.WebSocketMessage<?> encode(org.springframework.messaging.Message<byte[]>, java.lang.Class<? extends org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionConnectEvent",
            "org.springframework.web.socket.messaging.SessionConnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)",
            "public org.springframework.web.socket.messaging.SessionConnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionConnectEvent",
            "org.springframework.web.socket.messaging.SessionConnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)",
            "public org.springframework.web.socket.messaging.SessionConnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)"
        ],
        [
            "org.springframework.web.socket.messaging.WebSocketStompClient",
            "org.springframework.web.socket.messaging.WebSocketStompClient(org.springframework.web.socket.client.WebSocketClient)",
            "public org.springframework.web.socket.messaging.WebSocketStompClient(org.springframework.web.socket.client.WebSocketClient)"
        ],
        [
            "org.springframework.web.socket.client.WebSocketClient",
            "org.springframework.web.socket.messaging.WebSocketStompClient.getWebSocketClient()",
            "public org.springframework.web.socket.client.WebSocketClient getWebSocketClient()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient.setInboundMessageSizeLimit(int)",
            "public void setInboundMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.WebSocketStompClient.getInboundMessageSizeLimit()",
            "public int getInboundMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient.setAutoStartup(boolean)",
            "public void setAutoStartup(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.WebSocketStompClient.isAutoStartup()",
            "public boolean isAutoStartup()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient.setPhase(int)",
            "public void setPhase(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.WebSocketStompClient.getPhase()",
            "public int getPhase()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketStompClient.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.WebSocketStompClient.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.web.socket.messaging.WebSocketStompClient.connect(java.lang.String, org.springframework.messaging.simp.stomp.StompSessionHandler, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> connect(java.lang.String, org.springframework.messaging.simp.stomp.StompSessionHandler, java.lang.Object...)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.web.socket.messaging.WebSocketStompClient.connect(java.lang.String, org.springframework.web.socket.WebSocketHttpHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> connect(java.lang.String, org.springframework.web.socket.WebSocketHttpHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler, java.lang.Object...)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.web.socket.messaging.WebSocketStompClient.connect(java.lang.String, org.springframework.web.socket.WebSocketHttpHeaders, org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> connect(java.lang.String, org.springframework.web.socket.WebSocketHttpHeaders, org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler, java.lang.Object...)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.web.socket.messaging.WebSocketStompClient.connect(java.net.URI, org.springframework.web.socket.WebSocketHttpHeaders, org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> connect(java.net.URI, org.springframework.web.socket.WebSocketHttpHeaders, org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionUnsubscribeEvent",
            "org.springframework.web.socket.messaging.SessionUnsubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)",
            "public org.springframework.web.socket.messaging.SessionUnsubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionUnsubscribeEvent",
            "org.springframework.web.socket.messaging.SessionUnsubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)",
            "public org.springframework.web.socket.messaging.SessionUnsubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getTotalSessions()",
            "public int getTotalSessions()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getWebSocketSessions()",
            "public int getWebSocketSessions()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getHttpStreamingSessions()",
            "public int getHttpStreamingSessions()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getHttpPollingSessions()",
            "public int getHttpPollingSessions()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getLimitExceededSessions()",
            "public int getLimitExceededSessions()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getNoMessagesReceivedSessions()",
            "public int getNoMessagesReceivedSessions()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.getTransportErrorSessions()",
            "public int getTransportErrorSessions()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$DefaultStats.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry()",
            "public org.springframework.web.socket.messaging.DefaultSimpUserRegistry()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.getOrder()",
            "public int getOrder()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.supportsEventType(java.lang.Class<? extends org.springframework.context.ApplicationEvent>)",
            "public boolean supportsEventType(java.lang.Class<? extends org.springframework.context.ApplicationEvent>)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.supportsSourceType(java.lang.Class<?>)",
            "public boolean supportsSourceType(java.lang.Class<?>)"
        ],
        [
            "org.springframework.messaging.simp.user.SimpUser",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.getUser(java.lang.String)",
            "public org.springframework.messaging.simp.user.SimpUser getUser(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpUser>",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.getUsers()",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpUser> getUsers()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.getUserCount()",
            "public int getUserCount()"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSubscription>",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher)",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription(java.lang.String, java.lang.String, org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession)",
            "public org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription(java.lang.String, java.lang.String, org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.getSession()",
            "public org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession getSession()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.getDestination()",
            "public java.lang.String getDestination()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.SimpSession",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSubscription.getSession()",
            "public org.springframework.messaging.simp.user.SimpSession getSession()"
        ],
        [
            "org.springframework.web.socket.messaging.StompSubProtocolHandler",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler()",
            "public org.springframework.web.socket.messaging.StompSubProtocolHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.setErrorHandler(org.springframework.web.socket.messaging.StompSubProtocolErrorHandler)",
            "public void setErrorHandler(org.springframework.web.socket.messaging.StompSubProtocolErrorHandler)"
        ],
        [
            "org.springframework.web.socket.messaging.StompSubProtocolErrorHandler",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.getErrorHandler()",
            "public org.springframework.web.socket.messaging.StompSubProtocolErrorHandler getErrorHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.setMessageSizeLimit(int)",
            "public void setMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.getMessageSizeLimit()",
            "public int getMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.setEncoder(org.springframework.messaging.simp.stomp.StompEncoder)",
            "public void setEncoder(org.springframework.messaging.simp.stomp.StompEncoder)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.setDecoder(org.springframework.messaging.simp.stomp.StompDecoder)",
            "public void setDecoder(org.springframework.messaging.simp.stomp.StompDecoder)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.getSupportedProtocols()",
            "public java.util.List<java.lang.String> getSupportedProtocols()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)",
            "public void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.getStatsInfo()",
            "public java.lang.String getStatsInfo()"
        ],
        [
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$Stats",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.getStats()",
            "public org.springframework.web.socket.messaging.StompSubProtocolHandler$Stats getStats()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>, org.springframework.messaging.MessageChannel)",
            "public void handleMessageFromClient(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageToClient(org.springframework.web.socket.WebSocketSession, org.springframework.messaging.Message<?>)",
            "public void handleMessageToClient(org.springframework.web.socket.WebSocketSession, org.springframework.messaging.Message<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.resolveSessionId(org.springframework.messaging.Message<?>)",
            "public java.lang.String resolveSessionId(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.afterSessionStarted(org.springframework.web.socket.WebSocketSession, org.springframework.messaging.MessageChannel)",
            "public void afterSessionStarted(org.springframework.web.socket.WebSocketSession, org.springframework.messaging.MessageChannel)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.afterSessionEnded(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus, org.springframework.messaging.MessageChannel)",
            "public void afterSessionEnded(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus, org.springframework.messaging.MessageChannel)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser(java.lang.String, java.security.Principal)",
            "public org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser(java.lang.String, java.security.Principal)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.hasSessions()",
            "public boolean hasSessions()"
        ],
        [
            "org.springframework.messaging.simp.user.SimpSession",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.getSession(java.lang.String)",
            "public org.springframework.messaging.simp.user.SimpSession getSession(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSession>",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.getSessions()",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSession> getSessions()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.SessionSubscribeEvent",
            "org.springframework.web.socket.messaging.SessionSubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)",
            "public org.springframework.web.socket.messaging.SessionSubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionSubscribeEvent",
            "org.springframework.web.socket.messaging.SessionSubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)",
            "public org.springframework.web.socket.messaging.SessionSubscribeEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionDisconnectEvent",
            "org.springframework.web.socket.messaging.SessionDisconnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.lang.String, org.springframework.web.socket.CloseStatus)",
            "public org.springframework.web.socket.messaging.SessionDisconnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.lang.String, org.springframework.web.socket.CloseStatus)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionDisconnectEvent",
            "org.springframework.web.socket.messaging.SessionDisconnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.lang.String, org.springframework.web.socket.CloseStatus, java.security.Principal)",
            "public org.springframework.web.socket.messaging.SessionDisconnectEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.lang.String, org.springframework.web.socket.CloseStatus, java.security.Principal)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.SessionDisconnectEvent.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "org.springframework.web.socket.CloseStatus",
            "org.springframework.web.socket.messaging.SessionDisconnectEvent.getCloseStatus()",
            "public org.springframework.web.socket.CloseStatus getCloseStatus()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.SessionDisconnectEvent.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.Message<byte[]>",
            "org.springframework.web.socket.messaging.AbstractSubProtocolEvent.getMessage()",
            "public org.springframework.messaging.Message<byte[]> getMessage()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.messaging.AbstractSubProtocolEvent.getUser()",
            "public java.security.Principal getUser()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.AbstractSubProtocolEvent.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.SessionConnectedEvent",
            "org.springframework.web.socket.messaging.SessionConnectedEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)",
            "public org.springframework.web.socket.messaging.SessionConnectedEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "org.springframework.web.socket.messaging.SessionConnectedEvent",
            "org.springframework.web.socket.messaging.SessionConnectedEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)",
            "public org.springframework.web.socket.messaging.SessionConnectedEvent(java.lang.Object, org.springframework.messaging.Message<byte[]>, java.security.Principal)"
        ],
        [
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.simp.SimpMessageSendingOperations)",
            "public org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.simp.SimpMessageSendingOperations)"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.incrementConnectCount()",
            "public void incrementConnectCount()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.incrementConnectedCount()",
            "public void incrementConnectedCount()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.incrementDisconnectCount()",
            "public void incrementDisconnectCount()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.getTotalConnect()",
            "public int getTotalConnect()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.getTotalConnected()",
            "public int getTotalConnected()"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.getTotalDisconnect()",
            "public int getTotalDisconnect()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.StompSubProtocolHandler$DefaultStats.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder(org.springframework.web.socket.WebSocketSession)",
            "public org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "org.springframework.web.socket.WebSocketSession",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder.getSession()",
            "public org.springframework.web.socket.WebSocketSession getSession()"
        ],
        [
            "long",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder.getCreateTime()",
            "public long getCreateTime()"
        ],
        [
            "void",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder.setHasHandledMessages()",
            "public void setHasHandledMessages()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder.hasHandledMessages()",
            "public boolean hasHandledMessages()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.SubProtocolWebSocketHandler$WebSocketSessionHolder.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession(java.lang.String, org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser)",
            "public org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession(java.lang.String, org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.getUser()",
            "public org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpUser getUser()"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSubscription>",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.getSubscriptions()",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> getSubscriptions()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.SimpUser",
            "org.springframework.web.socket.messaging.DefaultSimpUserRegistry$LocalSimpSession.getUser()",
            "public org.springframework.messaging.simp.user.SimpUser getUser()"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.MessagingAdviceBean>",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler$MessagingControllerAdviceBean.createFromList(java.util.List<org.springframework.web.method.ControllerAdviceBean>)",
            "public static java.util.List<org.springframework.messaging.handler.MessagingAdviceBean> createFromList(java.util.List<org.springframework.web.method.ControllerAdviceBean>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler$MessagingControllerAdviceBean.getBeanType()",
            "public java.lang.Class<?> getBeanType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler$MessagingControllerAdviceBean.resolveBean()",
            "public java.lang.Object resolveBean()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler$MessagingControllerAdviceBean.isApplicableToBeanType(java.lang.Class<?>)",
            "public boolean isApplicableToBeanType(java.lang.Class<?>)"
        ],
        [
            "int",
            "org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler$MessagingControllerAdviceBean.getOrder()",
            "public int getOrder()"
        ],
        [
            "org.springframework.web.socket.messaging.StompSubProtocolErrorHandler",
            "org.springframework.web.socket.messaging.StompSubProtocolErrorHandler()",
            "public org.springframework.web.socket.messaging.StompSubProtocolErrorHandler()"
        ],
        [
            "org.springframework.messaging.Message<byte[]>",
            "org.springframework.web.socket.messaging.StompSubProtocolErrorHandler.handleClientMessageProcessingError(org.springframework.messaging.Message<byte[]>, java.lang.Throwable)",
            "public org.springframework.messaging.Message<byte[]> handleClientMessageProcessingError(org.springframework.messaging.Message<byte[]>, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.Message<byte[]>",
            "org.springframework.web.socket.messaging.StompSubProtocolErrorHandler.handleErrorMessageToClient(org.springframework.messaging.Message<byte[]>)",
            "public org.springframework.messaging.Message<byte[]> handleErrorMessageToClient(org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator",
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator(org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator(org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.tryCloseWithError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable, org.apache.commons.logging.Log)",
            "public static void tryCloseWithError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable, org.apache.commons.logging.Log)"
        ],
        [
            "org.springframework.web.socket.handler.WebSocketSessionDecorator",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator(org.springframework.web.socket.WebSocketSession)",
            "public org.springframework.web.socket.handler.WebSocketSessionDecorator(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "org.springframework.web.socket.WebSocketSession",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getDelegate()",
            "public org.springframework.web.socket.WebSocketSession getDelegate()"
        ],
        [
            "org.springframework.web.socket.WebSocketSession",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getLastSession()",
            "public org.springframework.web.socket.WebSocketSession getLastSession()"
        ],
        [
            "org.springframework.web.socket.WebSocketSession",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.unwrap(org.springframework.web.socket.WebSocketSession)",
            "public static org.springframework.web.socket.WebSocketSession unwrap(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.sendMessage(org.springframework.web.socket.WebSocketMessage<?>)",
            "public void sendMessage(org.springframework.web.socket.WebSocketMessage<?>) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.close(org.springframework.web.socket.CloseStatus)",
            "public void close(org.springframework.web.socket.CloseStatus) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.WebSocketSessionDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.handler.SessionLimitExceededException",
            "org.springframework.web.socket.handler.SessionLimitExceededException(java.lang.String, org.springframework.web.socket.CloseStatus)",
            "public org.springframework.web.socket.handler.SessionLimitExceededException(java.lang.String, org.springframework.web.socket.CloseStatus)"
        ],
        [
            "org.springframework.web.socket.CloseStatus",
            "org.springframework.web.socket.handler.SessionLimitExceededException.getStatus()",
            "public org.springframework.web.socket.CloseStatus getStatus()"
        ],
        [
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider",
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider(java.lang.Class<? extends T>)",
            "public org.springframework.web.socket.handler.BeanCreatingHandlerProvider(java.lang.Class<? extends T>)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider.destroy(T)",
            "public void destroy(T)"
        ],
        [
            "java.lang.Class<? extends T>",
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider.getHandlerType()",
            "public java.lang.Class<? extends T> getHandlerType()"
        ],
        [
            "T",
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider.getHandler()",
            "public T getHandler()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.BeanCreatingHandlerProvider.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator(org.springframework.web.socket.WebSocketSession, int, int)",
            "public org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator(org.springframework.web.socket.WebSocketSession, int, int)"
        ],
        [
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator(org.springframework.web.socket.WebSocketSession, int, int, org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy)",
            "public org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator(org.springframework.web.socket.WebSocketSession, int, int, org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy)"
        ],
        [
            "int",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.getSendTimeLimit()",
            "public int getSendTimeLimit()"
        ],
        [
            "int",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.getBufferSizeLimit()",
            "public int getBufferSizeLimit()"
        ],
        [
            "int",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.getBufferSize()",
            "public int getBufferSize()"
        ],
        [
            "long",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.getTimeSinceSendStarted()",
            "public long getTimeSinceSendStarted()"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.setMessageCallback(java.util.function.Consumer<org.springframework.web.socket.WebSocketMessage<?>>)",
            "public void setMessageCallback(java.util.function.Consumer<org.springframework.web.socket.WebSocketMessage<?>>)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.sendMessage(org.springframework.web.socket.WebSocketMessage<?>)",
            "public void sendMessage(org.springframework.web.socket.WebSocketMessage<?>) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.close(org.springframework.web.socket.CloseStatus)",
            "public void close(org.springframework.web.socket.CloseStatus) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.handler.TextWebSocketHandler",
            "org.springframework.web.socket.handler.TextWebSocketHandler()",
            "public org.springframework.web.socket.handler.TextWebSocketHandler()"
        ],
        [
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy[]",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy.values()",
            "public static org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy[] values()"
        ],
        [
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy",
            "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy.valueOf(java.lang.String)",
            "public static org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator$OverflowStrategy valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.handler.BinaryWebSocketHandler",
            "org.springframework.web.socket.handler.BinaryWebSocketHandler()",
            "public org.springframework.web.socket.handler.BinaryWebSocketHandler()"
        ],
        [
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler(java.lang.Class<? extends org.springframework.web.socket.WebSocketHandler>)",
            "public org.springframework.web.socket.handler.PerConnectionWebSocketHandler(java.lang.Class<? extends org.springframework.web.socket.WebSocketHandler>)"
        ],
        [
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler(java.lang.Class<? extends org.springframework.web.socket.WebSocketHandler>, boolean)",
            "public org.springframework.web.socket.handler.PerConnectionWebSocketHandler(java.lang.Class<? extends org.springframework.web.socket.WebSocketHandler>, boolean)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.supportsPartialMessages()",
            "public boolean supportsPartialMessages()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.PerConnectionWebSocketHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator",
            "org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator(org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator(org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator(org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.web.socket.handler.WebSocketHandlerDecorator(org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.getDelegate()",
            "public org.springframework.web.socket.WebSocketHandler getDelegate()"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.getLastHandler()",
            "public org.springframework.web.socket.WebSocketHandler getLastHandler()"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.unwrap(org.springframework.web.socket.WebSocketHandler)",
            "public static org.springframework.web.socket.WebSocketHandler unwrap(org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.supportsPartialMessages()",
            "public boolean supportsPartialMessages()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.handler.WebSocketHandlerDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.handler.AbstractWebSocketHandler",
            "org.springframework.web.socket.handler.AbstractWebSocketHandler()",
            "public org.springframework.web.socket.handler.AbstractWebSocketHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.AbstractWebSocketHandler.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.AbstractWebSocketHandler.handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>)",
            "public void handleMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.WebSocketMessage<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.AbstractWebSocketHandler.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.handler.AbstractWebSocketHandler.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.socket.handler.AbstractWebSocketHandler.supportsPartialMessages()",
            "public boolean supportsPartialMessages()"
        ],
        [
            "org.springframework.web.socket.CloseStatus",
            "org.springframework.web.socket.CloseStatus(int)",
            "public org.springframework.web.socket.CloseStatus(int)"
        ],
        [
            "org.springframework.web.socket.CloseStatus",
            "org.springframework.web.socket.CloseStatus(int, java.lang.String)",
            "public org.springframework.web.socket.CloseStatus(int, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.web.socket.CloseStatus.getCode()",
            "public int getCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.CloseStatus.getReason()",
            "public java.lang.String getReason()"
        ],
        [
            "org.springframework.web.socket.CloseStatus",
            "org.springframework.web.socket.CloseStatus.withReason(java.lang.String)",
            "public org.springframework.web.socket.CloseStatus withReason(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.CloseStatus.equalsCode(org.springframework.web.socket.CloseStatus)",
            "public boolean equalsCode(org.springframework.web.socket.CloseStatus)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.CloseStatus.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.CloseStatus.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.CloseStatus.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.WebSocketHttpHeaders",
            "org.springframework.web.socket.WebSocketHttpHeaders()",
            "public org.springframework.web.socket.WebSocketHttpHeaders()"
        ],
        [
            "org.springframework.web.socket.WebSocketHttpHeaders",
            "org.springframework.web.socket.WebSocketHttpHeaders(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.socket.WebSocketHttpHeaders(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.web.socket.WebSocketHttpHeaders",
            "org.springframework.web.socket.WebSocketHttpHeaders.readOnlyWebSocketHttpHeaders(org.springframework.web.socket.WebSocketHttpHeaders)",
            "public static org.springframework.web.socket.WebSocketHttpHeaders readOnlyWebSocketHttpHeaders(org.springframework.web.socket.WebSocketHttpHeaders)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setSecWebSocketAccept(java.lang.String)",
            "public void setSecWebSocketAccept(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketAccept()",
            "public java.lang.String getSecWebSocketAccept()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getSecWebSocketExtensions()"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setSecWebSocketExtensions(java.util.List<org.springframework.web.socket.WebSocketExtension>)",
            "public void setSecWebSocketExtensions(java.util.List<org.springframework.web.socket.WebSocketExtension>)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setSecWebSocketKey(java.lang.String)",
            "public void setSecWebSocketKey(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketKey()",
            "public java.lang.String getSecWebSocketKey()"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setSecWebSocketProtocol(java.lang.String)",
            "public void setSecWebSocketProtocol(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setSecWebSocketProtocol(java.util.List<java.lang.String>)",
            "public void setSecWebSocketProtocol(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketProtocol()",
            "public java.util.List<java.lang.String> getSecWebSocketProtocol()"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setSecWebSocketVersion(java.lang.String)",
            "public void setSecWebSocketVersion(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketHttpHeaders.getSecWebSocketVersion()",
            "public java.lang.String getSecWebSocketVersion()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketHttpHeaders.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.socket.WebSocketHttpHeaders.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.web.socket.WebSocketHttpHeaders.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.WebSocketHttpHeaders.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.WebSocketHttpHeaders.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.WebSocketHttpHeaders.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.WebSocketHttpHeaders.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.WebSocketHttpHeaders.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.WebSocketHttpHeaders.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.web.socket.WebSocketHttpHeaders.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.web.socket.WebSocketHttpHeaders.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.web.socket.WebSocketHttpHeaders.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.WebSocketHttpHeaders.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.WebSocketHttpHeaders.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketHttpHeaders.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.socket.WebSocketHttpHeaders.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.WebSocketHttpHeaders.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.WebSocketHttpHeaders.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.WebSocketHttpHeaders.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.WebSocketHttpHeaders.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.PingMessage",
            "org.springframework.web.socket.PingMessage()",
            "public org.springframework.web.socket.PingMessage()"
        ],
        [
            "org.springframework.web.socket.PingMessage",
            "org.springframework.web.socket.PingMessage(java.nio.ByteBuffer)",
            "public org.springframework.web.socket.PingMessage(java.nio.ByteBuffer)"
        ],
        [
            "int",
            "org.springframework.web.socket.PingMessage.getPayloadLength()",
            "public int getPayloadLength()"
        ],
        [
            "org.springframework.web.socket.config.WebSocketNamespaceHandler",
            "org.springframework.web.socket.config.WebSocketNamespaceHandler()",
            "public org.springframework.web.socket.config.WebSocketNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean",
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean(org.springframework.web.socket.WebSocketHandler, java.util.List<org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory>)",
            "public org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean(org.springframework.web.socket.WebSocketHandler, java.util.List<org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory>)"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean.getObject()",
            "public org.springframework.web.socket.WebSocketHandler getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser$DecoratingFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser$SockJsHandlerMappingStrategy",
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser$SockJsHandlerMappingStrategy(org.springframework.beans.factory.config.RuntimeBeanReference)",
            "public org.springframework.web.socket.config.HandlersBeanDefinitionParser$SockJsHandlerMappingStrategy(org.springframework.beans.factory.config.RuntimeBeanReference)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser$SockJsHandlerMappingStrategy.addMapping(org.w3c.dom.Element, org.springframework.beans.factory.support.ManagedMap<java.lang.String, java.lang.Object>, org.springframework.beans.factory.xml.ParserContext)",
            "public void addMapping(org.w3c.dom.Element, org.springframework.beans.factory.support.ManagedMap<java.lang.String, java.lang.Object>, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats()",
            "public org.springframework.web.socket.config.WebSocketMessageBrokerStats()"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.setSubProtocolWebSocketHandler(org.springframework.web.socket.messaging.SubProtocolWebSocketHandler)",
            "public void setSubProtocolWebSocketHandler(org.springframework.web.socket.messaging.SubProtocolWebSocketHandler)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.setStompBrokerRelay(org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler)",
            "public void setStompBrokerRelay(org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.setInboundChannelExecutor(org.springframework.core.task.TaskExecutor)",
            "public void setInboundChannelExecutor(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.setOutboundChannelExecutor(org.springframework.core.task.TaskExecutor)",
            "public void setOutboundChannelExecutor(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.setSockJsTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setSockJsTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.setLoggingPeriod(long)",
            "public void setLoggingPeriod(long)"
        ],
        [
            "long",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getLoggingPeriod()",
            "public long getLoggingPeriod()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getWebSocketSessionStatsInfo()",
            "public java.lang.String getWebSocketSessionStatsInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getStompSubProtocolStatsInfo()",
            "public java.lang.String getStompSubProtocolStatsInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getStompBrokerRelayStatsInfo()",
            "public java.lang.String getStompBrokerRelayStatsInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getClientInboundExecutorStatsInfo()",
            "public java.lang.String getClientInboundExecutorStatsInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getClientOutboundExecutorStatsInfo()",
            "public java.lang.String getClientOutboundExecutorStatsInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.getSockJsTaskSchedulerStatsInfo()",
            "public java.lang.String getSockJsTaskSchedulerStatsInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration",
            "org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration()",
            "public org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration()"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration.setConfigurers(java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer>)",
            "public void setConfigurers(java.util.List<org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer>)"
        ],
        [
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer()",
            "public org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer()"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.configureWebSocketTransport(org.springframework.web.socket.config.annotation.WebSocketTransportRegistration)",
            "public void configureWebSocketTransport(org.springframework.web.socket.config.annotation.WebSocketTransportRegistration)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.configureClientInboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)",
            "public void configureClientInboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.configureClientOutboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)",
            "public void configureClientOutboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.configureMessageConverters(java.util.List<org.springframework.messaging.converter.MessageConverter>)",
            "public boolean configureMessageConverters(java.util.List<org.springframework.messaging.converter.MessageConverter>)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.addArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public void addArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.addReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)",
            "public void addReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer.configureMessageBroker(org.springframework.messaging.simp.config.MessageBrokerRegistry)",
            "public void configureMessageBroker(org.springframework.messaging.simp.config.MessageBrokerRegistry)"
        ],
        [
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration()",
            "public org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration()"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration.addHandler(org.springframework.web.socket.WebSocketHandler, java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration addHandler(org.springframework.web.socket.WebSocketHandler, java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration.setHandshakeHandler(org.springframework.web.socket.server.HandshakeHandler)",
            "public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration setHandshakeHandler(org.springframework.web.socket.server.HandshakeHandler)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration.addInterceptors(org.springframework.web.socket.server.HandshakeInterceptor...)",
            "public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration addInterceptors(org.springframework.web.socket.server.HandshakeInterceptor...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration.setAllowedOrigins(java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration setAllowedOrigins(java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration.setAllowedOriginPatterns(java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration setAllowedOriginPatterns(java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.AbstractWebSocketHandlerRegistration.withSockJS()",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration withSockJS()"
        ],
        [
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry()",
            "public org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry()"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry.addHandler(org.springframework.web.socket.WebSocketHandler, java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration addHandler(org.springframework.web.socket.WebSocketHandler, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry.setUrlPathHelper(org.springframework.web.util.UrlPathHelper)",
            "public void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)"
        ],
        [
            "org.springframework.web.util.UrlPathHelper",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry.getUrlPathHelper()",
            "public org.springframework.web.util.UrlPathHelper getUrlPathHelper()"
        ],
        [
            "org.springframework.web.servlet.handler.AbstractHandlerMapping",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry.getHandlerMapping()",
            "public org.springframework.web.servlet.handler.AbstractHandlerMapping getHandlerMapping()"
        ],
        [
            "org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration",
            "org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration()",
            "public org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration()"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration.setConfigurers(java.util.List<org.springframework.web.socket.config.annotation.WebSocketConfigurer>)",
            "public void setConfigurers(java.util.List<org.springframework.web.socket.config.annotation.WebSocketConfigurer>)"
        ],
        [
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration",
            "org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration()",
            "public org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistration()"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport()",
            "public org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport()"
        ],
        [
            "org.springframework.web.servlet.HandlerMapping",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport.stompWebSocketHandlerMapping(org.springframework.web.socket.WebSocketHandler, org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.servlet.HandlerMapping stompWebSocketHandlerMapping(org.springframework.web.socket.WebSocketHandler, org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport.subProtocolWebSocketHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)",
            "public org.springframework.web.socket.WebSocketHandler subProtocolWebSocketHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)"
        ],
        [
            "org.springframework.beans.factory.config.CustomScopeConfigurer",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport.webSocketScopeConfigurer()",
            "public static org.springframework.beans.factory.config.CustomScopeConfigurer webSocketScopeConfigurer()"
        ],
        [
            "org.springframework.web.socket.config.WebSocketMessageBrokerStats",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurationSupport.webSocketMessageBrokerStats(org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler, org.springframework.web.socket.WebSocketHandler, org.springframework.core.task.TaskExecutor, org.springframework.core.task.TaskExecutor, org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.socket.config.WebSocketMessageBrokerStats webSocketMessageBrokerStats(org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler, org.springframework.web.socket.WebSocketHandler, org.springframework.core.task.TaskExecutor, org.springframework.core.task.TaskExecutor, org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry",
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.config.annotation.WebSocketTransportRegistration, org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.config.annotation.WebSocketTransportRegistration, org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry.addEndpoint(java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration addEndpoint(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry.setUrlPathHelper(org.springframework.web.util.UrlPathHelper)",
            "public void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry",
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry.setErrorHandler(org.springframework.web.socket.messaging.StompSubProtocolErrorHandler)",
            "public org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry setErrorHandler(org.springframework.web.socket.messaging.StompSubProtocolErrorHandler)"
        ],
        [
            "org.springframework.web.servlet.handler.AbstractHandlerMapping",
            "org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry.getHandlerMapping()",
            "public org.springframework.web.servlet.handler.AbstractHandlerMapping getHandlerMapping()"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration(java.lang.String[], org.springframework.web.socket.WebSocketHandler, org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration(java.lang.String[], org.springframework.web.socket.WebSocketHandler, org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.setHandshakeHandler(org.springframework.web.socket.server.HandshakeHandler)",
            "public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration setHandshakeHandler(org.springframework.web.socket.server.HandshakeHandler)"
        ],
        [
            "org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.addInterceptors(org.springframework.web.socket.server.HandshakeInterceptor...)",
            "public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration addInterceptors(org.springframework.web.socket.server.HandshakeInterceptor...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.setAllowedOrigins(java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration setAllowedOrigins(java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.setAllowedOriginPatterns(java.lang.String...)",
            "public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration setAllowedOriginPatterns(java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.withSockJS()",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration withSockJS()"
        ],
        [
            "org.springframework.util.MultiValueMap<org.springframework.web.HttpRequestHandler, java.lang.String>",
            "org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.getMappings()",
            "public final org.springframework.util.MultiValueMap<org.springframework.web.HttpRequestHandler, java.lang.String> getMappings()"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void registerStompEndpoints(org.springframework.web.socket.config.annotation.StompEndpointRegistry)",
            "public default void registerStompEndpoints(org.springframework.web.socket.config.annotation.StompEndpointRegistry)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void configureWebSocketTransport(org.springframework.web.socket.config.annotation.WebSocketTransportRegistration)",
            "public default void configureWebSocketTransport(org.springframework.web.socket.config.annotation.WebSocketTransportRegistration)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void configureClientInboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)",
            "public default void configureClientInboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void configureClientOutboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)",
            "public default void configureClientOutboundChannel(org.springframework.messaging.simp.config.ChannelRegistration)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void addArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public default void addArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void addReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)",
            "public default void addReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.boolean configureMessageConverters(java.util.List<org.springframework.messaging.converter.MessageConverter>)",
            "public default boolean configureMessageConverters(java.util.List<org.springframework.messaging.converter.MessageConverter>)"
        ],
        [
            "default",
            "org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer.void configureMessageBroker(org.springframework.messaging.simp.config.MessageBrokerRegistry)",
            "public default void configureMessageBroker(org.springframework.messaging.simp.config.MessageBrokerRegistry)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration()",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration()"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setClientLibraryUrl(java.lang.String)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setClientLibraryUrl(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setStreamBytesLimit(int)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setStreamBytesLimit(int)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setSessionCookieNeeded(boolean)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setSessionCookieNeeded(boolean)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setHeartbeatTime(long)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setHeartbeatTime(long)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setDisconnectDelay(long)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setDisconnectDelay(long)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setHttpMessageCacheSize(int)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setHttpMessageCacheSize(int)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setWebSocketEnabled(boolean)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setWebSocketEnabled(boolean)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setTransportHandlers(org.springframework.web.socket.sockjs.transport.TransportHandler...)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setTransportHandlers(org.springframework.web.socket.sockjs.transport.TransportHandler...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setTransportHandlerOverrides(org.springframework.web.socket.sockjs.transport.TransportHandler...)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setTransportHandlerOverrides(org.springframework.web.socket.sockjs.transport.TransportHandler...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setInterceptors(org.springframework.web.socket.server.HandshakeInterceptor...)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setInterceptors(org.springframework.web.socket.server.HandshakeInterceptor...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setSupressCors(boolean)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setSupressCors(boolean)"
        ],
        [
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration",
            "org.springframework.web.socket.config.annotation.SockJsServiceRegistration.setMessageCodec(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)",
            "public org.springframework.web.socket.config.annotation.SockJsServiceRegistration setMessageCodec(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport",
            "org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport()",
            "public org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport()"
        ],
        [
            "org.springframework.web.servlet.HandlerMapping",
            "org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport.webSocketHandlerMapping(org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.servlet.HandlerMapping webSocketHandlerMapping(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.web.socket.config.annotation.WebSocketConfigurationSupport.defaultSockJsTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler defaultSockJsTaskScheduler()"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration()",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration()"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration.setMessageSizeLimit(int)",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration setMessageSizeLimit(int)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration.setSendTimeLimit(int)",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration setSendTimeLimit(int)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration.setSendBufferSizeLimit(int)",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration setSendBufferSizeLimit(int)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration.setTimeToFirstMessage(int)",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration setTimeToFirstMessage(int)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration.setDecoratorFactories(org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory...)",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration setDecoratorFactories(org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory...)"
        ],
        [
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration",
            "org.springframework.web.socket.config.annotation.WebSocketTransportRegistration.addDecoratorFactory(org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory)",
            "public org.springframework.web.socket.config.annotation.WebSocketTransportRegistration addDecoratorFactory(org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory)"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.web.socket.config.WebSocketNamespaceUtils.registerHandshakeHandler(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, java.lang.Object)",
            "public static org.springframework.beans.factory.config.RuntimeBeanReference registerHandshakeHandler(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.web.socket.config.WebSocketNamespaceUtils.registerSockJsService(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.xml.ParserContext, java.lang.Object)",
            "public static org.springframework.beans.factory.config.RuntimeBeanReference registerSockJsService(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.xml.ParserContext, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.web.socket.config.WebSocketNamespaceUtils.registerScheduler(java.lang.String, org.springframework.beans.factory.xml.ParserContext, java.lang.Object)",
            "public static org.springframework.beans.factory.config.RuntimeBeanReference registerScheduler(java.lang.String, org.springframework.beans.factory.xml.ParserContext, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.ManagedList<java.lang.Object>",
            "org.springframework.web.socket.config.WebSocketNamespaceUtils.parseBeanSubElements(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public static org.springframework.beans.factory.support.ManagedList<java.lang.Object> parseBeanSubElements(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser$WebSocketHandlerMappingStrategy",
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser$WebSocketHandlerMappingStrategy(org.springframework.beans.factory.config.RuntimeBeanReference, org.springframework.beans.factory.support.ManagedList<?>)",
            "public org.springframework.web.socket.config.HandlersBeanDefinitionParser$WebSocketHandlerMappingStrategy(org.springframework.beans.factory.config.RuntimeBeanReference, org.springframework.beans.factory.support.ManagedList<?>)"
        ],
        [
            "void",
            "org.springframework.web.socket.config.HandlersBeanDefinitionParser$WebSocketHandlerMappingStrategy.addMapping(org.w3c.dom.Element, org.springframework.beans.factory.support.ManagedMap<java.lang.String, java.lang.Object>, org.springframework.beans.factory.xml.ParserContext)",
            "public void addMapping(org.w3c.dom.Element, org.springframework.beans.factory.support.ManagedMap<java.lang.String, java.lang.Object>, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.web.socket.PongMessage",
            "org.springframework.web.socket.PongMessage()",
            "public org.springframework.web.socket.PongMessage()"
        ],
        [
            "org.springframework.web.socket.PongMessage",
            "org.springframework.web.socket.PongMessage(java.nio.ByteBuffer)",
            "public org.springframework.web.socket.PongMessage(java.nio.ByteBuffer)"
        ],
        [
            "int",
            "org.springframework.web.socket.PongMessage.getPayloadLength()",
            "public int getPayloadLength()"
        ],
        [
            "org.springframework.web.socket.server.RequestUpgradeStrategy",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.getRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.RequestUpgradeStrategy getRequestUpgradeStrategy()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.setSupportedProtocols(java.lang.String...)",
            "public void setSupportedProtocols(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.getSupportedProtocols()",
            "public java.lang.String[] getSupportedProtocols()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.AbstractHandshakeHandler.doHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public final boolean doHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor()",
            "public org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor()"
        ],
        [
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor(java.util.Collection<java.lang.String>)",
            "public org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.getAttributeNames()",
            "public java.util.Collection<java.lang.String> getAttributeNames()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.setCopyAllAttributes(boolean)",
            "public void setCopyAllAttributes(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.isCopyAllAttributes()",
            "public boolean isCopyAllAttributes()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.setCopyHttpSessionId(boolean)",
            "public void setCopyHttpSessionId(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.isCopyHttpSessionId()",
            "public boolean isCopyHttpSessionId()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.setCreateSession(boolean)",
            "public void setCreateSession(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.isCreateSession()",
            "public boolean isCreateSession()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.beforeHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public boolean beforeHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor.afterHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.lang.Exception)",
            "public void afterHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.lang.Exception)"
        ],
        [
            "org.springframework.web.socket.server.support.DefaultHandshakeHandler",
            "org.springframework.web.socket.server.support.DefaultHandshakeHandler()",
            "public org.springframework.web.socket.server.support.DefaultHandshakeHandler()"
        ],
        [
            "org.springframework.web.socket.server.support.DefaultHandshakeHandler",
            "org.springframework.web.socket.server.support.DefaultHandshakeHandler(org.springframework.web.socket.server.RequestUpgradeStrategy)",
            "public org.springframework.web.socket.server.support.DefaultHandshakeHandler(org.springframework.web.socket.server.RequestUpgradeStrategy)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.DefaultHandshakeHandler.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler(org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.web.socket.server.support.WebSocketHttpRequestHandler(org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.server.HandshakeHandler)",
            "public org.springframework.web.socket.server.support.WebSocketHttpRequestHandler(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.server.HandshakeHandler)"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.getWebSocketHandler()",
            "public org.springframework.web.socket.WebSocketHandler getWebSocketHandler()"
        ],
        [
            "org.springframework.web.socket.server.HandshakeHandler",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.getHandshakeHandler()",
            "public org.springframework.web.socket.server.HandshakeHandler getHandshakeHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.setHandshakeInterceptors(java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>)",
            "public void setHandshakeInterceptors(java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>)"
        ],
        [
            "java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.getHandshakeInterceptors()",
            "public java.util.List<org.springframework.web.socket.server.HandshakeInterceptor> getHandshakeInterceptors()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public void handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.web.socket.server.support.WebSocketHandlerMapping",
            "org.springframework.web.socket.server.support.WebSocketHandlerMapping()",
            "public org.springframework.web.socket.server.support.WebSocketHandlerMapping()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHandlerMapping.setWebSocketUpgradeMatch(boolean)",
            "public void setWebSocketUpgradeMatch(boolean)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHandlerMapping.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.WebSocketHandlerMapping.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.WebSocketHandlerMapping.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.web.socket.server.support.HandshakeInterceptorChain",
            "org.springframework.web.socket.server.support.HandshakeInterceptorChain(java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>, org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.web.socket.server.support.HandshakeInterceptorChain(java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>, org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyBeforeHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public boolean applyBeforeHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.HandshakeInterceptorChain.applyAfterHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.Exception)",
            "public void applyAfterHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.Exception)"
        ],
        [
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor()",
            "public org.springframework.web.socket.server.support.OriginHandshakeInterceptor()"
        ],
        [
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor(java.util.Collection<java.lang.String>)",
            "public org.springframework.web.socket.server.support.OriginHandshakeInterceptor(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor.setAllowedOrigins(java.util.Collection<java.lang.String>)",
            "public void setAllowedOrigins(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor.getAllowedOrigins()",
            "public java.util.Collection<java.lang.String> getAllowedOrigins()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor.setAllowedOriginPatterns(java.util.Collection<java.lang.String>)",
            "public void setAllowedOriginPatterns(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor.getAllowedOriginPatterns()",
            "public java.util.Collection<java.lang.String> getAllowedOriginPatterns()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor.beforeHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public boolean beforeHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.server.support.OriginHandshakeInterceptor.afterHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.lang.Exception)",
            "public void afterHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.lang.Exception)"
        ],
        [
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor",
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor(org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter, java.lang.String)",
            "public org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor(org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy$WebSocketCreatorInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)"
        ],
        [
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy()"
        ],
        [
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy(org.eclipse.jetty.websocket.api.WebSocketPolicy)",
            "public org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy(org.eclipse.jetty.websocket.api.WebSocketPolicy)"
        ],
        [
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy(org.eclipse.jetty.websocket.server.WebSocketServerFactory)",
            "public org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy(org.eclipse.jetty.websocket.server.WebSocketServerFactory)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.getSupportedVersions()",
            "public java.lang.String[] getSupportedVersions()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.getSupportedExtensions(org.springframework.http.server.ServerHttpRequest)",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getSupportedExtensions(org.springframework.http.server.ServerHttpRequest)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.upgrade(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.security.Principal, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void upgrade(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.security.Principal, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy$WebSocketHandlerContainer",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy$WebSocketHandlerContainer(org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>)",
            "public org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy$WebSocketHandlerContainer(org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>)"
        ],
        [
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy$WebSocketHandlerContainer.getHandler()",
            "public org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter getHandler()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy$WebSocketHandlerContainer.getSelectedProtocol()",
            "public java.lang.String getSelectedProtocol()"
        ],
        [
            "java.util.List<org.eclipse.jetty.websocket.api.extensions.ExtensionConfig>",
            "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy$WebSocketHandlerContainer.getExtensionConfigs()",
            "public java.util.List<org.eclipse.jetty.websocket.api.extensions.ExtensionConfig> getExtensionConfigs()"
        ],
        [
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy",
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy.getSupportedVersions()",
            "public java.lang.String[] getSupportedVersions()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy.getSupportedExtensions(org.springframework.http.server.ServerHttpRequest)",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getSupportedExtensions(org.springframework.http.server.ServerHttpRequest)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.jetty.Jetty10RequestUpgradeStrategy.upgrade(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.security.Principal, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void upgrade(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.security.Principal, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.server.HandshakeFailureException",
            "org.springframework.web.socket.server.HandshakeFailureException(java.lang.String)",
            "public org.springframework.web.socket.server.HandshakeFailureException(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.server.HandshakeFailureException",
            "org.springframework.web.socket.server.HandshakeFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.socket.server.HandshakeFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy",
            "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy()"
        ],
        [
            "org.springframework.web.socket.server.standard.ServerEndpointExporter",
            "org.springframework.web.socket.server.standard.ServerEndpointExporter()",
            "public org.springframework.web.socket.server.standard.ServerEndpointExporter()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointExporter.setAnnotatedEndpointClasses(java.lang.Class<?>...)",
            "public void setAnnotatedEndpointClasses(java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointExporter.setServerContainer(javax.websocket.server.ServerContainer)",
            "public void setServerContainer(javax.websocket.server.ServerContainer)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointExporter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointExporter.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "org.springframework.web.socket.server.standard.WebSphereRequestUpgradeStrategy",
            "org.springframework.web.socket.server.standard.WebSphereRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.WebSphereRequestUpgradeStrategy()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.standard.WebSphereRequestUpgradeStrategy.getSupportedVersions()",
            "public java.lang.String[] getSupportedVersions()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.WebSphereRequestUpgradeStrategy.upgradeInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<javax.websocket.Extension>, javax.websocket.Endpoint)",
            "public void upgradeInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<javax.websocket.Extension>, javax.websocket.Endpoint) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.server.standard.GlassFishRequestUpgradeStrategy",
            "org.springframework.web.socket.server.standard.GlassFishRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.GlassFishRequestUpgradeStrategy()"
        ],
        [
            "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy$SubjectHelper",
            "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy$SubjectHelper()",
            "public org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy$SubjectHelper()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy$SubjectHelper.getSubject(javax.servlet.http.HttpServletRequest)",
            "public java.lang.Object getSubject(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy",
            "org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy.getSupportedVersions()",
            "public java.lang.String[] getSupportedVersions()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.AbstractTyrusRequestUpgradeStrategy.upgradeInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<javax.websocket.Extension>, javax.websocket.Endpoint)",
            "public void upgradeInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<javax.websocket.Extension>, javax.websocket.Endpoint) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration(java.lang.String, javax.websocket.Endpoint)",
            "public org.springframework.web.socket.server.standard.ServerEndpointRegistration(java.lang.String, javax.websocket.Endpoint)"
        ],
        [
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration(java.lang.String, java.lang.Class<? extends javax.websocket.Endpoint>)",
            "public org.springframework.web.socket.server.standard.ServerEndpointRegistration(java.lang.String, java.lang.Class<? extends javax.websocket.Endpoint>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.lang.Class<? extends javax.websocket.Endpoint>",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getEndpointClass()",
            "public java.lang.Class<? extends javax.websocket.Endpoint> getEndpointClass()"
        ],
        [
            "javax.websocket.Endpoint",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getEndpoint()",
            "public javax.websocket.Endpoint getEndpoint()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.setSubprotocols(java.util.List<java.lang.String>)",
            "public void setSubprotocols(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getSubprotocols()",
            "public java.util.List<java.lang.String> getSubprotocols()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.setExtensions(java.util.List<javax.websocket.Extension>)",
            "public void setExtensions(java.util.List<javax.websocket.Extension>)"
        ],
        [
            "java.util.List<javax.websocket.Extension>",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getExtensions()",
            "public java.util.List<javax.websocket.Extension> getExtensions()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.setEncoders(java.util.List<java.lang.Class<? extends javax.websocket.Encoder>>)",
            "public void setEncoders(java.util.List<java.lang.Class<? extends javax.websocket.Encoder>>)"
        ],
        [
            "java.util.List<java.lang.Class<? extends javax.websocket.Encoder>>",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getEncoders()",
            "public java.util.List<java.lang.Class<? extends javax.websocket.Encoder>> getEncoders()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.setDecoders(java.util.List<java.lang.Class<? extends javax.websocket.Decoder>>)",
            "public void setDecoders(java.util.List<java.lang.Class<? extends javax.websocket.Decoder>>)"
        ],
        [
            "java.util.List<java.lang.Class<? extends javax.websocket.Decoder>>",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getDecoders()",
            "public java.util.List<java.lang.Class<? extends javax.websocket.Decoder>> getDecoders()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.setUserProperties(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setUserProperties(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getUserProperties()",
            "public java.util.Map<java.lang.String, java.lang.Object> getUserProperties()"
        ],
        [
            "javax.websocket.server.ServerEndpointConfig$Configurator",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getConfigurator()",
            "public javax.websocket.server.ServerEndpointConfig$Configurator getConfigurator()"
        ],
        [
            "<T> T",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.getEndpointInstance(java.lang.Class<T>)",
            "public final <T> T getEndpointInstance(java.lang.Class<T>) throws java.lang.InstantiationException"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.modifyHandshake(javax.websocket.server.ServerEndpointConfig, javax.websocket.server.HandshakeRequest, javax.websocket.HandshakeResponse)",
            "public void modifyHandshake(javax.websocket.server.ServerEndpointConfig, javax.websocket.server.HandshakeRequest, javax.websocket.HandshakeResponse)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.server.standard.ServerEndpointRegistration.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.server.standard.SpringConfigurator",
            "org.springframework.web.socket.server.standard.SpringConfigurator()",
            "public org.springframework.web.socket.server.standard.SpringConfigurator()"
        ],
        [
            "<T> T",
            "org.springframework.web.socket.server.standard.SpringConfigurator.getEndpointInstance(java.lang.Class<T>)",
            "public <T> T getEndpointInstance(java.lang.Class<T>) throws java.lang.InstantiationException"
        ],
        [
            "org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy",
            "org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy.getSupportedExtensions(org.springframework.http.server.ServerHttpRequest)",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getSupportedExtensions(org.springframework.http.server.ServerHttpRequest)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy.upgrade(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.security.Principal, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void upgrade(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<org.springframework.web.socket.WebSocketExtension>, java.security.Principal, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy",
            "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy.getSupportedVersions()",
            "public java.lang.String[] getSupportedVersions()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy.upgradeInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<javax.websocket.Extension>, javax.websocket.Endpoint)",
            "public void upgradeInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, java.util.List<javax.websocket.Extension>, javax.websocket.Endpoint) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.apache.tomcat.websocket.server.WsServerContainer",
            "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy.getContainer(javax.servlet.http.HttpServletRequest)",
            "public org.apache.tomcat.websocket.server.WsServerContainer getContainer(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "javax.websocket.server.ServerContainer",
            "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy.getContainer(javax.servlet.http.HttpServletRequest)",
            "public javax.websocket.server.ServerContainer getContainer(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean()",
            "public org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.setAsyncSendTimeout(java.lang.Long)",
            "public void setAsyncSendTimeout(java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getAsyncSendTimeout()",
            "public java.lang.Long getAsyncSendTimeout()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.setMaxSessionIdleTimeout(java.lang.Long)",
            "public void setMaxSessionIdleTimeout(java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getMaxSessionIdleTimeout()",
            "public java.lang.Long getMaxSessionIdleTimeout()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.setMaxTextMessageBufferSize(java.lang.Integer)",
            "public void setMaxTextMessageBufferSize(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getMaxTextMessageBufferSize()",
            "public java.lang.Integer getMaxTextMessageBufferSize()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.setMaxBinaryMessageBufferSize(java.lang.Integer)",
            "public void setMaxBinaryMessageBufferSize(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getMaxBinaryMessageBufferSize()",
            "public java.lang.Integer getMaxBinaryMessageBufferSize()"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.websocket.server.ServerContainer",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getObject()",
            "public javax.websocket.server.ServerContainer getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy",
            "org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy()",
            "public org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.getSupportedVersions()",
            "public java.lang.String[] getSupportedVersions()"
        ],
        [
            "io.undertow.websockets.jsr.ServerWebSocketContainer",
            "org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.getContainer(javax.servlet.http.HttpServletRequest)",
            "public io.undertow.websockets.jsr.ServerWebSocketContainer getContainer(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "javax.websocket.server.ServerContainer",
            "org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.getContainer(javax.servlet.http.HttpServletRequest)",
            "public javax.websocket.server.ServerContainer getContainer(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.adapter.jetty.JettyWebSocketSession(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession(java.util.Map<java.lang.String, java.lang.Object>, java.security.Principal)",
            "public org.springframework.web.socket.adapter.jetty.JettyWebSocketSession(java.util.Map<java.lang.String, java.lang.Object>, java.security.Principal)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.initializeNativeSession(org.eclipse.jetty.websocket.api.Session)",
            "public void initializeNativeSession(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.initializeNativeSession(java.lang.Object)",
            "public void initializeNativeSession(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)",
            "public org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)",
            "public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketText(java.lang.String)",
            "public void onWebSocketText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketBinary(byte[], int, int)",
            "public void onWebSocketBinary(byte[], int, int)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame)",
            "public void onWebSocketFrame(org.eclipse.jetty.websocket.api.extensions.Frame)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketClose(int, java.lang.String)",
            "public void onWebSocketClose(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter.onWebSocketError(java.lang.Throwable)",
            "public void onWebSocketError(java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.adapter.jetty.WebSocketToJettyExtensionConfigAdapter",
            "org.springframework.web.socket.adapter.jetty.WebSocketToJettyExtensionConfigAdapter(org.springframework.web.socket.WebSocketExtension)",
            "public org.springframework.web.socket.adapter.jetty.WebSocketToJettyExtensionConfigAdapter(org.springframework.web.socket.WebSocketExtension)"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty9SessionHelper.getExtensions(org.eclipse.jetty.websocket.api.Session)",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty9SessionHelper.getTextMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)",
            "public int getTextMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty9SessionHelper.getBinaryMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)",
            "public int getBinaryMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty9SessionHelper.getRemoteAddress(org.eclipse.jetty.websocket.api.Session)",
            "public java.net.InetSocketAddress getRemoteAddress(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty9SessionHelper.getLocalAddress(org.eclipse.jetty.websocket.api.Session)",
            "public java.net.InetSocketAddress getLocalAddress(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty10SessionHelper.getExtensions(org.eclipse.jetty.websocket.api.Session)",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty10SessionHelper.getTextMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)",
            "public int getTextMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty10SessionHelper.getBinaryMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)",
            "public int getBinaryMessageSizeLimit(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty10SessionHelper.getRemoteAddress(org.eclipse.jetty.websocket.api.Session)",
            "public java.net.InetSocketAddress getRemoteAddress(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession$Jetty10SessionHelper.getLocalAddress(org.eclipse.jetty.websocket.api.Session)",
            "public java.net.InetSocketAddress getLocalAddress(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter",
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)",
            "public org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.jetty.JettyWebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter.onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)",
            "public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter.onWebSocketText(java.lang.String)",
            "public void onWebSocketText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter.onWebSocketBinary(byte[], int, int)",
            "public void onWebSocketBinary(byte[], int, int)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter.onWebSocketClose(int, java.lang.String)",
            "public void onWebSocketClose(int, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.jetty.Jetty10WebSocketHandlerAdapter.onWebSocketError(java.lang.Throwable)",
            "public void onWebSocketError(java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.adapter.AbstractWebSocketSession",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.adapter.AbstractWebSocketSession(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "T",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.getNativeSession()",
            "public T getNativeSession()"
        ],
        [
            "<R> R",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.getNativeSession(java.lang.Class<R>)",
            "public <R> R getNativeSession(java.lang.Class<R>)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.initializeNativeSession(T)",
            "public void initializeNativeSession(T)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.sendMessage(org.springframework.web.socket.WebSocketMessage<?>)",
            "public final void sendMessage(org.springframework.web.socket.WebSocketMessage<?>) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.close()",
            "public final void close() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.close(org.springframework.web.socket.CloseStatus)",
            "public final void close(org.springframework.web.socket.CloseStatus) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.AbstractWebSocketSession.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$5.onMessage(javax.websocket.PongMessage)",
            "public void onMessage(javax.websocket.PongMessage)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$5.onMessage(java.lang.Object)",
            "public void onMessage(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter$1.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter$1.getValue()",
            "public java.lang.String getValue()"
        ],
        [
            "org.springframework.web.socket.adapter.standard.StandardToWebSocketExtensionAdapter",
            "org.springframework.web.socket.adapter.standard.StandardToWebSocketExtensionAdapter(javax.websocket.Extension)",
            "public org.springframework.web.socket.adapter.standard.StandardToWebSocketExtensionAdapter(javax.websocket.Extension)"
        ],
        [
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryEncoder",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryEncoder()",
            "public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryEncoder()"
        ],
        [
            "java.nio.ByteBuffer",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryEncoder.encode(java.lang.Object)",
            "public java.nio.ByteBuffer encode(java.lang.Object) throws javax.websocket.EncodeException"
        ],
        [
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.standard.StandardWebSocketSession)",
            "public org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.adapter.standard.StandardWebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onOpen(javax.websocket.Session, javax.websocket.EndpointConfig)",
            "public void onOpen(javax.websocket.Session, javax.websocket.EndpointConfig)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onClose(javax.websocket.Session, javax.websocket.CloseReason)",
            "public void onClose(javax.websocket.Session, javax.websocket.CloseReason)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onError(javax.websocket.Session, java.lang.Throwable)",
            "public void onError(javax.websocket.Session, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport()",
            "public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport.init(javax.websocket.EndpointConfig)",
            "public void init(javax.websocket.EndpointConfig)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport.destroy()",
            "public void destroy()"
        ],
        [
            "M",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport.encode(T)",
            "public M encode(T) throws javax.websocket.EncodeException"
        ],
        [
            "boolean",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport.willDecode(M)",
            "public boolean willDecode(M)"
        ],
        [
            "T",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport.decode(M)",
            "public T decode(M) throws javax.websocket.DecodeException"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$2.onMessage(java.nio.ByteBuffer, boolean)",
            "public void onMessage(java.nio.ByteBuffer, boolean)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$2.onMessage(java.lang.Object, boolean)",
            "public void onMessage(java.lang.Object, boolean)"
        ],
        [
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextEncoder",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextEncoder()",
            "public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextEncoder()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextEncoder.encode(java.lang.Object)",
            "public java.lang.String encode(java.lang.Object) throws javax.websocket.EncodeException"
        ],
        [
            "org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter",
            "org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter(org.springframework.web.socket.WebSocketExtension)",
            "public org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter(org.springframework.web.socket.WebSocketExtension)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.util.List<javax.websocket.Extension$Parameter>",
            "org.springframework.web.socket.adapter.standard.WebSocketToStandardExtensionAdapter.getParameters()",
            "public java.util.List<javax.websocket.Extension$Parameter> getParameters()"
        ],
        [
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession(org.springframework.http.HttpHeaders, java.util.Map<java.lang.String, java.lang.Object>, java.net.InetSocketAddress, java.net.InetSocketAddress)",
            "public org.springframework.web.socket.adapter.standard.StandardWebSocketSession(org.springframework.http.HttpHeaders, java.util.Map<java.lang.String, java.lang.Object>, java.net.InetSocketAddress, java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession(org.springframework.http.HttpHeaders, java.util.Map<java.lang.String, java.lang.Object>, java.net.InetSocketAddress, java.net.InetSocketAddress, java.security.Principal)",
            "public org.springframework.web.socket.adapter.standard.StandardWebSocketSession(org.springframework.http.HttpHeaders, java.util.Map<java.lang.String, java.lang.Object>, java.net.InetSocketAddress, java.net.InetSocketAddress, java.security.Principal)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.initializeNativeSession(javax.websocket.Session)",
            "public void initializeNativeSession(javax.websocket.Session)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.initializeNativeSession(java.lang.Object)",
            "public void initializeNativeSession(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(java.lang.String)",
            "public void onMessage(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(java.lang.Object)",
            "public void onMessage(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryDecoder",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryDecoder()",
            "public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryDecoder()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryDecoder.willDecode(java.nio.ByteBuffer)",
            "public boolean willDecode(java.nio.ByteBuffer)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$BinaryDecoder.decode(java.nio.ByteBuffer)",
            "public java.lang.Object decode(java.nio.ByteBuffer) throws javax.websocket.DecodeException"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$1.onMessage(java.lang.String, boolean)",
            "public void onMessage(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$1.onMessage(java.lang.Object, boolean)",
            "public void onMessage(java.lang.Object, boolean)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$4.onMessage(java.nio.ByteBuffer)",
            "public void onMessage(java.nio.ByteBuffer)"
        ],
        [
            "void",
            "org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$4.onMessage(java.lang.Object)",
            "public void onMessage(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextDecoder",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextDecoder()",
            "public org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextDecoder()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextDecoder.willDecode(java.lang.String)",
            "public boolean willDecode(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.adapter.standard.ConvertingEncoderDecoderSupport$TextDecoder.decode(java.lang.String)",
            "public java.lang.Object decode(java.lang.String) throws javax.websocket.DecodeException"
        ],
        [
            "org.springframework.web.socket.TextMessage",
            "org.springframework.web.socket.TextMessage(java.lang.CharSequence)",
            "public org.springframework.web.socket.TextMessage(java.lang.CharSequence)"
        ],
        [
            "org.springframework.web.socket.TextMessage",
            "org.springframework.web.socket.TextMessage(byte[])",
            "public org.springframework.web.socket.TextMessage(byte[])"
        ],
        [
            "org.springframework.web.socket.TextMessage",
            "org.springframework.web.socket.TextMessage(java.lang.CharSequence, boolean)",
            "public org.springframework.web.socket.TextMessage(java.lang.CharSequence, boolean)"
        ],
        [
            "int",
            "org.springframework.web.socket.TextMessage.getPayloadLength()",
            "public int getPayloadLength()"
        ],
        [
            "byte[]",
            "org.springframework.web.socket.TextMessage.asBytes()",
            "public byte[] asBytes()"
        ],
        [
            "org.springframework.web.socket.BinaryMessage",
            "org.springframework.web.socket.BinaryMessage(java.nio.ByteBuffer)",
            "public org.springframework.web.socket.BinaryMessage(java.nio.ByteBuffer)"
        ],
        [
            "org.springframework.web.socket.BinaryMessage",
            "org.springframework.web.socket.BinaryMessage(java.nio.ByteBuffer, boolean)",
            "public org.springframework.web.socket.BinaryMessage(java.nio.ByteBuffer, boolean)"
        ],
        [
            "org.springframework.web.socket.BinaryMessage",
            "org.springframework.web.socket.BinaryMessage(byte[])",
            "public org.springframework.web.socket.BinaryMessage(byte[])"
        ],
        [
            "org.springframework.web.socket.BinaryMessage",
            "org.springframework.web.socket.BinaryMessage(byte[], boolean)",
            "public org.springframework.web.socket.BinaryMessage(byte[], boolean)"
        ],
        [
            "org.springframework.web.socket.BinaryMessage",
            "org.springframework.web.socket.BinaryMessage(byte[], int, int, boolean)",
            "public org.springframework.web.socket.BinaryMessage(byte[], int, int, boolean)"
        ],
        [
            "int",
            "org.springframework.web.socket.BinaryMessage.getPayloadLength()",
            "public int getPayloadLength()"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsMessageDeliveryException",
            "org.springframework.web.socket.sockjs.SockJsMessageDeliveryException(java.lang.String, java.util.List<java.lang.String>, java.lang.Throwable)",
            "public org.springframework.web.socket.sockjs.SockJsMessageDeliveryException(java.lang.String, java.util.List<java.lang.String>, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsMessageDeliveryException",
            "org.springframework.web.socket.sockjs.SockJsMessageDeliveryException(java.lang.String, java.util.List<java.lang.String>, java.lang.String)",
            "public org.springframework.web.socket.sockjs.SockJsMessageDeliveryException(java.lang.String, java.util.List<java.lang.String>, java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.sockjs.SockJsMessageDeliveryException.getUndeliveredMessages()",
            "public java.util.List<java.lang.String> getUndeliveredMessages()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.SockJsClient$ServerInfo",
            "org.springframework.web.socket.sockjs.client.SockJsClient$ServerInfo(java.lang.String, long)",
            "public org.springframework.web.socket.sockjs.client.SockJsClient$ServerInfo(java.lang.String, long)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.SockJsClient$ServerInfo.isWebSocketEnabled()",
            "public boolean isWebSocketEnabled()"
        ],
        [
            "long",
            "org.springframework.web.socket.sockjs.client.SockJsClient$ServerInfo.getRetransmissionTimeout()",
            "public long getRetransmissionTimeout()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport()",
            "public org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport(org.springframework.web.client.RestOperations)",
            "public org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport(org.springframework.web.client.RestOperations)"
        ],
        [
            "org.springframework.web.client.RestOperations",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.getRestTemplate()",
            "public org.springframework.web.client.RestOperations getRestTemplate()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.setTaskExecutor(org.springframework.core.task.TaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.getTaskExecutor()",
            "public org.springframework.core.task.TaskExecutor getTaskExecutor()"
        ],
        [
            "org.springframework.http.ResponseEntity<java.lang.String>",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.executeSendRequestInternal(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage)",
            "public org.springframework.http.ResponseEntity<java.lang.String> executeSendRequestInternal(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.client.XhrTransport, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)",
            "public org.springframework.web.socket.sockjs.client.XhrClientSockJsSession(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.client.XhrTransport, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.sockjs.client.XhrClientSockJsSession.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback(org.springframework.http.HttpHeaders)",
            "public org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback(org.springframework.http.HttpHeaders, java.lang.String)",
            "public org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback(org.springframework.http.HttpHeaders, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrRequestCallback.doWithRequest(org.springframework.http.client.ClientHttpRequest)",
            "public void doWithRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo(java.net.URI)",
            "public org.springframework.web.socket.sockjs.client.SockJsUrlInfo(java.net.URI)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo.getSockJsUrl()",
            "public java.net.URI getSockJsUrl()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo.getServerId()",
            "public java.lang.String getServerId()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo.getInfoUrl()",
            "public java.net.URI getInfoUrl()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo.getTransportUrl(org.springframework.web.socket.sockjs.transport.TransportType)",
            "public java.net.URI getTransportUrl(org.springframework.web.socket.sockjs.transport.TransportType)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$1.completed(io.undertow.client.ClientConnection)",
            "public void completed(io.undertow.client.ClientConnection)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$1.failed(java.io.IOException)",
            "public void failed(java.io.IOException)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$1.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener(org.springframework.web.socket.sockjs.client.TransportRequest, io.undertow.client.ClientConnection, java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.sockjs.client.XhrClientSockJsSession, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)",
            "public org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener(org.springframework.web.socket.sockjs.client.TransportRequest, io.undertow.client.ClientConnection, java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.sockjs.client.XhrClientSockJsSession, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener.setup(org.xnio.channels.StreamSourceChannel)",
            "public void setup(org.xnio.channels.StreamSourceChannel)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener.handleEvent(org.xnio.channels.StreamSourceChannel)",
            "public void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener.onSuccess()",
            "public void onSuccess()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$SockJsResponseListener.handleEvent(java.nio.channels.Channel)",
            "public void handleEvent(java.nio.channels.Channel)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport()",
            "public org.springframework.web.socket.sockjs.client.AbstractXhrTransport()"
        ],
        [
            "java.util.List<org.springframework.web.socket.sockjs.transport.TransportType>",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport.getTransportTypes()",
            "public java.util.List<org.springframework.web.socket.sockjs.transport.TransportType> getTransportTypes()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport.setXhrStreamingDisabled(boolean)",
            "public void setXhrStreamingDisabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport.isXhrStreamingDisabled()",
            "public boolean isXhrStreamingDisabled()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport.connect(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> connect(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport.executeInfoRequest(java.net.URI, org.springframework.http.HttpHeaders)",
            "public java.lang.String executeInfoRequest(java.net.URI, org.springframework.http.HttpHeaders)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractXhrTransport.executeSendRequest(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage)",
            "public void executeSendRequest(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler(org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession)",
            "public org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler(org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler.handleTextMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.TextMessage)",
            "public void handleTextMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.TextMessage) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport()",
            "public org.springframework.web.socket.sockjs.client.UndertowXhrTransport() throws java.io.IOException"
        ],
        [
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport(org.xnio.OptionMap)",
            "public org.springframework.web.socket.sockjs.client.UndertowXhrTransport(org.xnio.OptionMap) throws java.io.IOException"
        ],
        [
            "io.undertow.client.UndertowClient",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport.getHttpClient()",
            "public io.undertow.client.UndertowClient getHttpClient()"
        ],
        [
            "org.xnio.XnioWorker",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport.getWorker()",
            "public org.xnio.XnioWorker getWorker()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$3.completed(io.undertow.client.ClientExchange)",
            "public void completed(io.undertow.client.ClientExchange)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$3.failed(java.io.IOException)",
            "public void failed(java.io.IOException)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$3.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$State[]",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$State.values()",
            "public static org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$State[] values()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$State",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$State.valueOf(java.lang.String)",
            "public static org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.sockjs.client.XhrClientSockJsSession, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)",
            "public org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.sockjs.client.XhrClientSockJsSession, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener.onBegin(org.eclipse.jetty.client.api.Response)",
            "public void onBegin(org.eclipse.jetty.client.api.Response)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener.onHeaders(org.eclipse.jetty.client.api.Response)",
            "public void onHeaders(org.eclipse.jetty.client.api.Response)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener.onContent(org.eclipse.jetty.client.api.Response, java.nio.ByteBuffer)",
            "public void onContent(org.eclipse.jetty.client.api.Response, java.nio.ByteBuffer)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener.onSuccess(org.eclipse.jetty.client.api.Response)",
            "public void onSuccess(org.eclipse.jetty.client.api.Response)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport$SockJsResponseListener.onFailure(org.eclipse.jetty.client.api.Response, java.lang.Throwable)",
            "public void onFailure(org.eclipse.jetty.client.api.Response, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession$1.run()",
            "public void run()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$1.onSuccess(org.springframework.web.socket.WebSocketSession)",
            "public void onSuccess(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$1.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport$1.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsMessageCodec",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getMessageCodec()",
            "public org.springframework.web.socket.sockjs.frame.SockJsMessageCodec getMessageCodec()"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.getWebSocketHandler()",
            "public org.springframework.web.socket.WebSocketHandler getWebSocketHandler()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.isDisconnected()",
            "public boolean isDisconnected()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.sendMessage(org.springframework.web.socket.WebSocketMessage<?>)",
            "public final void sendMessage(org.springframework.web.socket.WebSocketMessage<?>) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.close()",
            "public final void close() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.close(org.springframework.web.socket.CloseStatus)",
            "public final void close(org.springframework.web.socket.CloseStatus) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.handleFrame(java.lang.String)",
            "public void handleFrame(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.handleTransportError(java.lang.Throwable)",
            "public void handleTransportError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.afterTransportClosed(org.springframework.web.socket.CloseStatus)",
            "public void afterTransportClosed(org.springframework.web.socket.CloseStatus)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$3$1.completed(io.undertow.client.ClientExchange)",
            "public void completed(io.undertow.client.ClientExchange)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$3$1.failed(java.io.IOException)",
            "public void failed(java.io.IOException)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$3$1.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrReceiveExtractor",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrReceiveExtractor(org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport, org.springframework.web.socket.sockjs.client.XhrClientSockJsSession)",
            "public org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrReceiveExtractor(org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport, org.springframework.web.socket.sockjs.client.XhrClientSockJsSession)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport$XhrReceiveExtractor.extractData(org.springframework.http.client.ClientHttpResponse)",
            "public java.lang.Object extractData(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback(org.springframework.web.socket.WebSocketHandler, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)",
            "public org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback(org.springframework.web.socket.WebSocketHandler, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback.onSuccess(org.springframework.web.socket.WebSocketSession)",
            "public void onSuccess(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback.run()",
            "public void run()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.WebSocketTransport",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport(org.springframework.web.socket.client.WebSocketClient)",
            "public org.springframework.web.socket.sockjs.client.WebSocketTransport(org.springframework.web.socket.client.WebSocketClient)"
        ],
        [
            "org.springframework.web.socket.client.WebSocketClient",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.getWebSocketClient()",
            "public org.springframework.web.socket.client.WebSocketClient getWebSocketClient()"
        ],
        [
            "java.util.List<org.springframework.web.socket.sockjs.transport.TransportType>",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.getTransportTypes()",
            "public java.util.List<org.springframework.web.socket.sockjs.transport.TransportType> getTransportTypes()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.connect(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> connect(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.WebSocketTransport.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)",
            "public org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession(org.springframework.web.socket.sockjs.client.TransportRequest, org.springframework.web.socket.WebSocketHandler, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getNativeSession()",
            "public java.lang.Object getNativeSession()"
        ],
        [
            "<T> T",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getNativeSession(java.lang.Class<T>)",
            "public <T> T getNativeSession(java.lang.Class<T>)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.WebSocketClientSockJsSession.initializeDelegateSession(org.springframework.web.socket.WebSocketSession)",
            "public void initializeDelegateSession(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$2.completed(io.undertow.client.ClientExchange)",
            "public void completed(io.undertow.client.ClientExchange)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$2.failed(java.io.IOException)",
            "public void failed(java.io.IOException)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$2.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport(org.eclipse.jetty.client.HttpClient)",
            "public org.springframework.web.socket.sockjs.client.JettyXhrTransport(org.eclipse.jetty.client.HttpClient)"
        ],
        [
            "org.eclipse.jetty.client.HttpClient",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport.getHttpClient()",
            "public org.eclipse.jetty.client.HttpClient getHttpClient()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.http.ResponseEntity<java.lang.String>",
            "org.springframework.web.socket.sockjs.client.JettyXhrTransport.executeSendRequestInternal(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage)",
            "public org.springframework.http.ResponseEntity<java.lang.String> executeSendRequestInternal(java.net.URI, org.springframework.http.HttpHeaders, org.springframework.web.socket.TextMessage)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest(org.springframework.web.socket.sockjs.client.SockJsUrlInfo, org.springframework.http.HttpHeaders, org.springframework.http.HttpHeaders, org.springframework.web.socket.sockjs.client.Transport, org.springframework.web.socket.sockjs.transport.TransportType, org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)",
            "public org.springframework.web.socket.sockjs.client.DefaultTransportRequest(org.springframework.web.socket.sockjs.client.SockJsUrlInfo, org.springframework.http.HttpHeaders, org.springframework.http.HttpHeaders, org.springframework.web.socket.sockjs.client.Transport, org.springframework.web.socket.sockjs.transport.TransportType, org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.SockJsUrlInfo",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.getSockJsUrlInfo()",
            "public org.springframework.web.socket.sockjs.client.SockJsUrlInfo getSockJsUrlInfo()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.getHttpRequestHeaders()",
            "public org.springframework.http.HttpHeaders getHttpRequestHeaders()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.getTransportUrl()",
            "public java.net.URI getTransportUrl()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.setUser(java.security.Principal)",
            "public void setUser(java.security.Principal)"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.getUser()",
            "public java.security.Principal getUser()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsMessageCodec",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.getMessageCodec()",
            "public org.springframework.web.socket.sockjs.frame.SockJsMessageCodec getMessageCodec()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.setTimeoutValue(long)",
            "public void setTimeoutValue(long)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.setTimeoutScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTimeoutScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.addTimeoutTask(java.lang.Runnable)",
            "public void addTimeoutTask(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.setFallbackRequest(org.springframework.web.socket.sockjs.client.DefaultTransportRequest)",
            "public void setFallbackRequest(org.springframework.web.socket.sockjs.client.DefaultTransportRequest)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(org.springframework.web.socket.WebSocketHandler, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)",
            "public void connect(org.springframework.web.socket.WebSocketHandler, org.springframework.util.concurrent.SettableListenableFuture<org.springframework.web.socket.WebSocketSession>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.client.DefaultTransportRequest.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.sockjs.client.SockJsClient",
            "org.springframework.web.socket.sockjs.client.SockJsClient(java.util.List<org.springframework.web.socket.sockjs.client.Transport>)",
            "public org.springframework.web.socket.sockjs.client.SockJsClient(java.util.List<org.springframework.web.socket.sockjs.client.Transport>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.setHttpHeaderNames(java.lang.String...)",
            "public void setHttpHeaderNames(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.sockjs.client.SockJsClient.getHttpHeaderNames()",
            "public java.lang.String[] getHttpHeaderNames()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.setInfoReceiver(org.springframework.web.socket.sockjs.client.InfoReceiver)",
            "public void setInfoReceiver(org.springframework.web.socket.sockjs.client.InfoReceiver)"
        ],
        [
            "org.springframework.web.socket.sockjs.client.InfoReceiver",
            "org.springframework.web.socket.sockjs.client.SockJsClient.getInfoReceiver()",
            "public org.springframework.web.socket.sockjs.client.InfoReceiver getInfoReceiver()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.setMessageCodec(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)",
            "public void setMessageCodec(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsMessageCodec",
            "org.springframework.web.socket.sockjs.client.SockJsClient.getMessageCodec()",
            "public org.springframework.web.socket.sockjs.frame.SockJsMessageCodec getMessageCodec()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.setConnectTimeoutScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setConnectTimeoutScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.client.SockJsClient.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.sockjs.client.SockJsClient.doHandshake(org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> doHandshake(org.springframework.web.socket.WebSocketHandler, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession>",
            "org.springframework.web.socket.sockjs.client.SockJsClient.doHandshake(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.WebSocketHttpHeaders, java.net.URI)",
            "public final org.springframework.util.concurrent.ListenableFuture<org.springframework.web.socket.WebSocketSession> doHandshake(org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.WebSocketHttpHeaders, java.net.URI)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.SockJsClient.clearServerInfoCache()",
            "public void clearServerInfoCache()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$2$1.completed(io.undertow.client.ClientExchange)",
            "public void completed(io.undertow.client.ClientExchange)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$2$1.failed(java.io.IOException)",
            "public void failed(java.io.IOException)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.client.UndertowXhrTransport$2$1.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrameType[]",
            "org.springframework.web.socket.sockjs.frame.SockJsFrameType.values()",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrameType[] values()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrameType",
            "org.springframework.web.socket.sockjs.frame.SockJsFrameType.valueOf(java.lang.String)",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrameType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec",
            "org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec()",
            "public org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec",
            "org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec(com.fasterxml.jackson.databind.ObjectMapper)",
            "public org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec.decode(java.lang.String)",
            "public java.lang.String[] decode(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec.decodeInputStream(java.io.InputStream)",
            "public java.lang.String[] decodeInputStream(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame(java.lang.String)",
            "public org.springframework.web.socket.sockjs.frame.SockJsFrame(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrameType",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.getType()",
            "public org.springframework.web.socket.sockjs.frame.SockJsFrameType getType()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.getContent()",
            "public java.lang.String getContent()"
        ],
        [
            "byte[]",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.getContentBytes()",
            "public byte[] getContentBytes()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.getFrameData()",
            "public java.lang.String getFrameData()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.openFrame()",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrame openFrame()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.heartbeatFrame()",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrame heartbeatFrame()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.messageFrame(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec, java.lang.String...)",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrame messageFrame(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec, java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.closeFrameGoAway()",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrame closeFrameGoAway()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.closeFrameAnotherConnectionOpen()",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrame closeFrameAnotherConnectionOpen()"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsFrame",
            "org.springframework.web.socket.sockjs.frame.SockJsFrame.closeFrame(int, java.lang.String)",
            "public static org.springframework.web.socket.sockjs.frame.SockJsFrame closeFrame(int, java.lang.String)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat",
            "org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat(java.lang.String)",
            "public org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.frame.DefaultSockJsFrameFormat.format(org.springframework.web.socket.sockjs.frame.SockJsFrame)",
            "public java.lang.String format(org.springframework.web.socket.sockjs.frame.SockJsFrame)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.AbstractSockJsMessageCodec",
            "org.springframework.web.socket.sockjs.frame.AbstractSockJsMessageCodec()",
            "public org.springframework.web.socket.sockjs.frame.AbstractSockJsMessageCodec()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.frame.AbstractSockJsMessageCodec.encode(java.lang.String...)",
            "public java.lang.String encode(java.lang.String...)"
        ],
        [
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler(org.springframework.web.socket.sockjs.SockJsService, org.springframework.web.socket.WebSocketHandler)",
            "public org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler(org.springframework.web.socket.sockjs.SockJsService, org.springframework.web.socket.WebSocketHandler)"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsService",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.getSockJsService()",
            "public org.springframework.web.socket.sockjs.SockJsService getSockJsService()"
        ],
        [
            "org.springframework.web.socket.WebSocketHandler",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.getWebSocketHandler()",
            "public org.springframework.web.socket.WebSocketHandler getWebSocketHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public void handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.getCorsConfiguration(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService$IframeHandler.handle(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse)",
            "public void handle(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService$InfoHandler.handle(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse)",
            "public void handle(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService(org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.socket.sockjs.support.AbstractSockJsService(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler getTaskScheduler()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getName()",
            "public java.lang.String getName()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setSockJsClientLibraryUrl(java.lang.String)",
            "public void setSockJsClientLibraryUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getSockJsClientLibraryUrl()",
            "public java.lang.String getSockJsClientLibraryUrl()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setStreamBytesLimit(int)",
            "public void setStreamBytesLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getStreamBytesLimit()",
            "public int getStreamBytesLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setSessionCookieNeeded(boolean)",
            "public void setSessionCookieNeeded(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.isSessionCookieNeeded()",
            "public boolean isSessionCookieNeeded()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setHeartbeatTime(long)",
            "public void setHeartbeatTime(long)"
        ],
        [
            "long",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getHeartbeatTime()",
            "public long getHeartbeatTime()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setDisconnectDelay(long)",
            "public void setDisconnectDelay(long)"
        ],
        [
            "long",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getDisconnectDelay()",
            "public long getDisconnectDelay()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setHttpMessageCacheSize(int)",
            "public void setHttpMessageCacheSize(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getHttpMessageCacheSize()",
            "public int getHttpMessageCacheSize()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setWebSocketEnabled(boolean)",
            "public void setWebSocketEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.isWebSocketEnabled()",
            "public boolean isWebSocketEnabled()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setSuppressCors(boolean)",
            "public void setSuppressCors(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.shouldSuppressCors()",
            "public boolean shouldSuppressCors()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setAllowedOrigins(java.util.Collection<java.lang.String>)",
            "public void setAllowedOrigins(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getAllowedOrigins()",
            "public java.util.Collection<java.lang.String> getAllowedOrigins()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.setAllowedOriginPatterns(java.util.Collection<java.lang.String>)",
            "public void setAllowedOriginPatterns(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getAllowedOriginPatterns()",
            "public java.util.Collection<java.lang.String> getAllowedOriginPatterns()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, org.springframework.web.socket.WebSocketHandler)",
            "public final void handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, java.lang.String, org.springframework.web.socket.WebSocketHandler) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.socket.sockjs.support.AbstractSockJsService.getCorsConfiguration(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler$EventSourceStreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler$EventSourceStreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler$EventSourceStreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler",
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler(org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession)",
            "public org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler(org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.getSubProtocols()",
            "public java.util.List<java.lang.String> getSubProtocols()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)",
            "public void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.handleTextMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.TextMessage)",
            "public void handleTextMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.TextMessage) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus)",
            "public void afterConnectionClosed(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.web.socket.WebSocketSession, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler.checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public boolean checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler.handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public final void handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.SockJsSession) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler.getTransportType()",
            "public org.springframework.web.socket.sockjs.transport.TransportType getTransportType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler.checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public boolean checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)",
            "public org.springframework.web.socket.sockjs.transport.SockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler(org.springframework.web.socket.server.HandshakeHandler)",
            "public org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler(org.springframework.web.socket.server.HandshakeHandler)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.getTransportType()",
            "public org.springframework.web.socket.sockjs.transport.TransportType getTransportType()"
        ],
        [
            "org.springframework.web.socket.server.HandshakeHandler",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.getHandshakeHandler()",
            "public org.springframework.web.socket.server.HandshakeHandler getHandshakeHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public boolean checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public void handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.SockJsSession) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.doHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public boolean doHandshake(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.web.socket.server.HandshakeFailureException"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)",
            "public org.springframework.web.socket.sockjs.transport.SockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService",
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService(org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService",
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService(org.springframework.scheduling.TaskScheduler, org.springframework.web.socket.sockjs.transport.TransportHandler...)",
            "public org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService(org.springframework.scheduling.TaskScheduler, org.springframework.web.socket.sockjs.transport.TransportHandler...)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService",
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService(org.springframework.scheduling.TaskScheduler, java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler>)",
            "public org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService(org.springframework.scheduling.TaskScheduler, java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler.getTransportType()",
            "public org.springframework.web.socket.sockjs.transport.TransportType getTransportType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler.checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public boolean checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler.handleRequestInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession)",
            "public void handleRequestInternal(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)",
            "public org.springframework.web.socket.sockjs.transport.SockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler.getTransportType()",
            "public org.springframework.web.socket.sockjs.transport.TransportType getTransportType()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.AbstractTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.AbstractTransportHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractTransportHandler.initialize(org.springframework.web.socket.sockjs.transport.SockJsServiceConfig)",
            "public void initialize(org.springframework.web.socket.sockjs.transport.SockJsServiceConfig)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsServiceConfig",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractTransportHandler.getServiceConfig()",
            "public org.springframework.web.socket.sockjs.transport.SockJsServiceConfig getServiceConfig()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler.getTransportType()",
            "public org.springframework.web.socket.sockjs.transport.TransportType getTransportType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler.checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public boolean checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.XhrPollingTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)",
            "public org.springframework.web.socket.sockjs.transport.SockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler$HtmlFileStreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler$HtmlFileStreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.handler.HtmlFileTransportHandler$HtmlFileStreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler$XhrStreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler$XhrStreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler$XhrStreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler.getTransportType()",
            "public org.springframework.web.socket.sockjs.transport.TransportType getTransportType()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler.checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public boolean checkSessionType(org.springframework.web.socket.sockjs.transport.SockJsSession)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsSession",
            "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler.createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)",
            "public org.springframework.web.socket.sockjs.transport.SockJsSession createSession(java.lang.String, org.springframework.web.socket.WebSocketHandler, java.util.Map)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler()",
            "public org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.handler.AbstractHttpSendingTransportHandler.handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.SockJsSession)",
            "public final void handleRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.WebSocketHandler, org.springframework.web.socket.sockjs.transport.SockJsSession) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType[]",
            "org.springframework.web.socket.sockjs.transport.TransportType.values()",
            "public static org.springframework.web.socket.sockjs.transport.TransportType[] values()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.TransportType.valueOf(java.lang.String)",
            "public static org.springframework.web.socket.sockjs.transport.TransportType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportType",
            "org.springframework.web.socket.sockjs.transport.TransportType.fromValue(java.lang.String)",
            "public static org.springframework.web.socket.sockjs.transport.TransportType fromValue(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.transport.TransportType.value()",
            "public java.lang.String value()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.socket.sockjs.transport.TransportType.getHttpMethod()",
            "public org.springframework.http.HttpMethod getHttpMethod()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.TransportType.sendsNoCacheInstruction()",
            "public boolean sendsNoCacheInstruction()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.TransportType.sendsSessionCookie()",
            "public boolean sendsSessionCookie()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.TransportType.supportsCors()",
            "public boolean supportsCors()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.TransportType.supportsOrigin()",
            "public boolean supportsOrigin()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.transport.TransportType.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService(org.springframework.scheduling.TaskScheduler, org.springframework.web.socket.sockjs.transport.TransportHandler...)",
            "public org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService(org.springframework.scheduling.TaskScheduler, org.springframework.web.socket.sockjs.transport.TransportHandler...)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService(org.springframework.scheduling.TaskScheduler, java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler>)",
            "public org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService(org.springframework.scheduling.TaskScheduler, java.util.Collection<org.springframework.web.socket.sockjs.transport.TransportHandler>)"
        ],
        [
            "java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType, org.springframework.web.socket.sockjs.transport.TransportHandler>",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.getTransportHandlers()",
            "public java.util.Map<org.springframework.web.socket.sockjs.transport.TransportType, org.springframework.web.socket.sockjs.transport.TransportHandler> getTransportHandlers()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.setMessageCodec(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)",
            "public void setMessageCodec(org.springframework.web.socket.sockjs.frame.SockJsMessageCodec)"
        ],
        [
            "org.springframework.web.socket.sockjs.frame.SockJsMessageCodec",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.getMessageCodec()",
            "public org.springframework.web.socket.sockjs.frame.SockJsMessageCodec getMessageCodec()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.setHandshakeInterceptors(java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>)",
            "public void setHandshakeInterceptors(java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>)"
        ],
        [
            "java.util.List<org.springframework.web.socket.server.HandshakeInterceptor>",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.getHandshakeInterceptors()",
            "public java.util.List<org.springframework.web.socket.server.HandshakeInterceptor> getHandshakeInterceptors()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.StreamingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getNativeSession()",
            "public java.lang.Object getNativeSession()"
        ],
        [
            "<T> T",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.getNativeSession(java.lang.Class<T>)",
            "public <T> T getNativeSession(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.initializeDelegateSession(org.springframework.web.socket.WebSocketSession)",
            "public void initializeDelegateSession(org.springframework.web.socket.WebSocketSession)"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.isActive()",
            "public boolean isActive()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage(org.springframework.web.socket.TextMessage, org.springframework.web.socket.WebSocketSession)",
            "public void handleMessage(org.springframework.web.socket.TextMessage, org.springframework.web.socket.WebSocketSession) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.sendMessageInternal(java.lang.String)",
            "public void sendMessageInternal(java.lang.String) throws org.springframework.web.socket.sockjs.SockJsTransportFailureException"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getUri()",
            "public java.net.URI getUri()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getHandshakeHeaders()",
            "public org.springframework.http.HttpHeaders getHandshakeHeaders()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setAcceptedProtocol(java.lang.String)",
            "public void setAcceptedProtocol(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getAcceptedProtocol()",
            "public java.lang.String getAcceptedProtocol()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.isActive()",
            "public boolean isActive()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setTextMessageSizeLimit(int)",
            "public void setTextMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getTextMessageSizeLimit()",
            "public int getTextMessageSizeLimit()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.setBinaryMessageSizeLimit(int)",
            "public void setBinaryMessageSizeLimit(int)"
        ],
        [
            "int",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getBinaryMessageSizeLimit()",
            "public int getBinaryMessageSizeLimit()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.getExtensions()",
            "public java.util.List<org.springframework.web.socket.WebSocketExtension> getExtensions()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat)",
            "public void handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession.handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat)",
            "public void handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat) throws org.springframework.web.socket.sockjs.SockJsException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$HeartbeatTask.run()",
            "public void run()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.SockJsServiceConfig",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.getSockJsServiceConfig()",
            "public org.springframework.web.socket.sockjs.transport.SockJsServiceConfig getSockJsServiceConfig()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(org.springframework.web.socket.WebSocketMessage<?>)",
            "public final void sendMessage(org.springframework.web.socket.WebSocketMessage<?>) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.isNew()",
            "public boolean isNew()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.isClosed()",
            "public boolean isClosed()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.close()",
            "public final void close() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.close(org.springframework.web.socket.CloseStatus)",
            "public final void close(org.springframework.web.socket.CloseStatus) throws java.io.IOException"
        ],
        [
            "long",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.getTimeSinceLastActive()",
            "public long getTimeSinceLastActive()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.disableHeartbeat()",
            "public void disableHeartbeat()"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateConnectionEstablished()",
            "public void delegateConnectionEstablished() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateMessages(java.lang.String...)",
            "public void delegateMessages(java.lang.String...) throws org.springframework.web.socket.sockjs.SockJsMessageDeliveryException"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateConnectionClosed(org.springframework.web.socket.CloseStatus)",
            "public final void delegateConnectionClosed(org.springframework.web.socket.CloseStatus) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.tryCloseWithSockJsTransportError(java.lang.Throwable, org.springframework.web.socket.CloseStatus)",
            "public void tryCloseWithSockJsTransportError(java.lang.Throwable, org.springframework.web.socket.CloseStatus)"
        ],
        [
            "void",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateError(java.lang.Throwable)",
            "public void delegateError(java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$State[]",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$State.values()",
            "public static org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$State[] values()"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$State",
            "org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$State.valueOf(java.lang.String)",
            "public static org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession",
            "org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.socket.sockjs.transport.session.PollingSockJsSession(java.lang.String, org.springframework.web.socket.sockjs.transport.SockJsServiceConfig, org.springframework.web.socket.WebSocketHandler, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsTransportFailureException",
            "org.springframework.web.socket.sockjs.SockJsTransportFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.socket.sockjs.SockJsTransportFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsTransportFailureException",
            "org.springframework.web.socket.sockjs.SockJsTransportFailureException(java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.socket.sockjs.SockJsTransportFailureException(java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsException",
            "org.springframework.web.socket.sockjs.SockJsException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.socket.sockjs.SockJsException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.socket.sockjs.SockJsException",
            "org.springframework.web.socket.sockjs.SockJsException(java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.socket.sockjs.SockJsException(java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.sockjs.SockJsException.getSockJsSessionId()",
            "public java.lang.String getSockJsSessionId()"
        ],
        [
            "org.springframework.web.socket.WebSocketExtension",
            "org.springframework.web.socket.WebSocketExtension(java.lang.String)",
            "public org.springframework.web.socket.WebSocketExtension(java.lang.String)"
        ],
        [
            "org.springframework.web.socket.WebSocketExtension",
            "org.springframework.web.socket.WebSocketExtension(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.web.socket.WebSocketExtension(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketExtension.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.socket.WebSocketExtension.getParameters()",
            "public java.util.Map<java.lang.String, java.lang.String> getParameters()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.WebSocketExtension.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.WebSocketExtension.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.WebSocketExtension.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.List<org.springframework.web.socket.WebSocketExtension>",
            "org.springframework.web.socket.WebSocketExtension.parseExtensions(java.lang.String)",
            "public static java.util.List<org.springframework.web.socket.WebSocketExtension> parseExtensions(java.lang.String)"
        ],
        [
            "T",
            "org.springframework.web.socket.AbstractWebSocketMessage.getPayload()",
            "public T getPayload()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.AbstractWebSocketMessage.isLast()",
            "public boolean isLast()"
        ],
        [
            "boolean",
            "org.springframework.web.socket.AbstractWebSocketMessage.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.socket.AbstractWebSocketMessage.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.socket.AbstractWebSocketMessage.toString()",
            "public java.lang.String toString()"
        ]
    ]
}