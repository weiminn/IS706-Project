{"guava-18.0.jar": [["boolean", "com.google.common.base.Absent.isPresent()", "public boolean isPresent()"], ["T", "com.google.common.base.Absent.get()", "public T get()"], ["T", "com.google.common.base.Absent.or(T)", "public T or(T)"], ["com.google.common.base.Optional<T>", "com.google.common.base.Absent.or(com.google.common.base.Optional<? extends T>)", "public com.google.common.base.Optional<T> or(com.google.common.base.Optional<? extends T>)"], ["T", "com.google.common.base.Absent.or(com.google.common.base.Supplier<? extends T>)", "public T or(com.google.common.base.Supplier<? extends T>)"], ["T", "com.google.common.base.Absent.orNull()", "public T orNull()"], ["java.util.Set<T>", "com.google.common.base.Absent.asSet()", "public java.util.Set<T> asSet()"], ["<V> com.google.common.base.Optional<V>", "com.google.common.base.Absent.transform(com.google.common.base.Function<? super T, V>)", "public <V> com.google.common.base.Optional<V> transform(com.google.common.base.Function<? super T, V>)"], ["boolean", "com.google.common.base.Absent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Absent.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Absent.toString()", "public java.lang.String toString()"], ["com.google.common.base.AbstractIterator$State[]", "com.google.common.base.AbstractIterator$State.values()", "public static com.google.common.base.AbstractIterator$State[] values()"], ["com.google.common.base.AbstractIterator$State", "com.google.common.base.AbstractIterator$State.valueOf(java.lang.String)", "public static com.google.common.base.AbstractIterator$State valueOf(java.lang.String)"], ["boolean", "com.google.common.base.AbstractIterator.hasNext()", "public final boolean hasNext()"], ["T", "com.google.common.base.AbstractIterator.next()", "public final T next()"], ["void", "com.google.common.base.AbstractIterator.remove()", "public final void remove()"], ["java.lang.String", "com.google.common.base.Ascii.toLowerCase(java.lang.String)", "public static java.lang.String toLowerCase(java.lang.String)"], ["java.lang.String", "com.google.common.base.Ascii.toLowerCase(java.lang.CharSequence)", "public static java.lang.String toLowerCase(java.lang.CharSequence)"], ["char", "com.google.common.base.Ascii.toLowerCase(char)", "public static char toLowerCase(char)"], ["java.lang.String", "com.google.common.base.Ascii.toUpperCase(java.lang.String)", "public static java.lang.String toUpperCase(java.lang.String)"], ["java.lang.String", "com.google.common.base.Ascii.toUpperCase(java.lang.CharSequence)", "public static java.lang.String toUpperCase(java.lang.CharSequence)"], ["char", "com.google.common.base.Ascii.toUpperCase(char)", "public static char toUpperCase(char)"], ["boolean", "com.google.common.base.Ascii.isLowerCase(char)", "public static boolean isLowerCase(char)"], ["boolean", "com.google.common.base.Ascii.isUpperCase(char)", "public static boolean isUpperCase(char)"], ["java.lang.String", "com.google.common.base.Ascii.truncate(java.lang.CharSequence, int, java.lang.String)", "public static java.lang.String truncate(java.lang.CharSequence, int, java.lang.String)"], ["boolean", "com.google.common.base.Ascii.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)", "public static boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)"], ["boolean", "com.google.common.base.CaseFormat$StringConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.CaseFormat$StringConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.CaseFormat$StringConverter.toString()", "public java.lang.String toString()"], ["com.google.common.base.CaseFormat[]", "com.google.common.base.CaseFormat.values()", "public static com.google.common.base.CaseFormat[] values()"], ["com.google.common.base.CaseFormat", "com.google.common.base.CaseFormat.valueOf(java.lang.String)", "public static com.google.common.base.CaseFormat valueOf(java.lang.String)"], ["java.lang.String", "com.google.common.base.CaseFormat.to(com.google.common.base.CaseFormat, java.lang.String)", "public final java.lang.String to(com.google.common.base.CaseFormat, java.lang.String)"], ["com.google.common.base.Converter<java.lang.String, java.lang.String>", "com.google.common.base.CaseFormat.converterTo(com.google.common.base.CaseFormat)", "public com.google.common.base.Converter<java.lang.String, java.lang.String> converterTo(com.google.common.base.CaseFormat)"], ["boolean", "com.google.common.base.CharMatcher$1.matches(char)", "public boolean matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$1.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.CharMatcher$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$10.matches(char)", "public boolean matches(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$10.and(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$10.or(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$10.negate()", "public com.google.common.base.CharMatcher negate()"], ["boolean", "com.google.common.base.CharMatcher$11.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$11.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$12.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$13.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$14.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$14.apply(java.lang.Character)", "public boolean apply(java.lang.Character)"], ["boolean", "com.google.common.base.CharMatcher$14.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$15.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$2.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$3.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$3.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$4.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$4.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$5.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$5.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$6.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$6.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$7.matches(char)", "public boolean matches(char)"], ["int", "com.google.common.base.CharMatcher$7.indexIn(java.lang.CharSequence)", "public int indexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$7.indexIn(java.lang.CharSequence, int)", "public int indexIn(java.lang.CharSequence, int)"], ["int", "com.google.common.base.CharMatcher$7.lastIndexIn(java.lang.CharSequence)", "public int lastIndexIn(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$7.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$7.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$7.removeFrom(java.lang.CharSequence)", "public java.lang.String removeFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$7.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$7.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)", "public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$7.collapseFrom(java.lang.CharSequence, char)", "public java.lang.String collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$7.trimFrom(java.lang.CharSequence)", "public java.lang.String trimFrom(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$7.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$7.and(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$7.or(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$7.negate()", "public com.google.common.base.CharMatcher negate()"], ["boolean", "com.google.common.base.CharMatcher$8.matches(char)", "public boolean matches(char)"], ["int", "com.google.common.base.CharMatcher$8.indexIn(java.lang.CharSequence)", "public int indexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$8.indexIn(java.lang.CharSequence, int)", "public int indexIn(java.lang.CharSequence, int)"], ["int", "com.google.common.base.CharMatcher$8.lastIndexIn(java.lang.CharSequence)", "public int lastIndexIn(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$8.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$8.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.removeFrom(java.lang.CharSequence)", "public java.lang.String removeFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)", "public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.collapseFrom(java.lang.CharSequence, char)", "public java.lang.String collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.trimFrom(java.lang.CharSequence)", "public java.lang.String trimFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.trimLeadingFrom(java.lang.CharSequence)", "public java.lang.String trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$8.trimTrailingFrom(java.lang.CharSequence)", "public java.lang.String trimTrailingFrom(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$8.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$8.and(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$8.or(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$8.negate()", "public com.google.common.base.CharMatcher negate()"], ["boolean", "com.google.common.base.CharMatcher$9.matches(char)", "public boolean matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$9.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$9.and(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$9.or(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$9.negate()", "public com.google.common.base.CharMatcher negate()"], ["boolean", "com.google.common.base.CharMatcher$And.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$And.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$BitSetMatcher.matches(char)", "public boolean matches(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$FastMatcher.precomputed()", "public final com.google.common.base.CharMatcher precomputed()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$FastMatcher.negate()", "public com.google.common.base.CharMatcher negate()"], ["boolean", "com.google.common.base.CharMatcher$FastMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$NegatedFastMatcher.precomputed()", "public final com.google.common.base.CharMatcher precomputed()"], ["boolean", "com.google.common.base.CharMatcher$NegatedMatcher.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$NegatedMatcher.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$NegatedMatcher.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$NegatedMatcher.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$NegatedMatcher.negate()", "public com.google.common.base.CharMatcher negate()"], ["boolean", "com.google.common.base.CharMatcher$NegatedMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$Or.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$Or.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.CharMatcher$RangesMatcher.matches(char)", "public boolean matches(char)"], ["boolean", "com.google.common.base.CharMatcher$RangesMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.is(char)", "public static com.google.common.base.CharMatcher is(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.isNot(char)", "public static com.google.common.base.CharMatcher isNot(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.anyOf(java.lang.CharSequence)", "public static com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.noneOf(java.lang.CharSequence)", "public static com.google.common.base.CharMatcher noneOf(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.inRange(char, char)", "public static com.google.common.base.CharMatcher inRange(char, char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.forPredicate(com.google.common.base.Predicate<? super java.lang.Character>)", "public static com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate<? super java.lang.Character>)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.negate()", "public com.google.common.base.CharMatcher negate()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.and(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.or(com.google.common.base.CharMatcher)", "public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.precomputed()", "public com.google.common.base.CharMatcher precomputed()"], ["boolean", "com.google.common.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)", "public boolean matchesAnyOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)", "public int indexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, int)", "public int indexIn(java.lang.CharSequence, int)"], ["int", "com.google.common.base.CharMatcher.lastIndexIn(java.lang.CharSequence)", "public int lastIndexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)", "public java.lang.String removeFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.retainFrom(java.lang.CharSequence)", "public java.lang.String retainFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)", "public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimFrom(java.lang.CharSequence)", "public java.lang.String trimFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)", "public java.lang.String trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)", "public java.lang.String trimTrailingFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.collapseFrom(java.lang.CharSequence, char)", "public java.lang.String collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence, char)", "public java.lang.String trimAndCollapseFrom(java.lang.CharSequence, char)"], ["boolean", "com.google.common.base.CharMatcher.apply(java.lang.Character)", "public boolean apply(java.lang.Character)"], ["java.lang.String", "com.google.common.base.CharMatcher.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.CharMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.Converter$1$1.hasNext()", "public boolean hasNext()"], ["B", "com.google.common.base.Converter$1$1.next()", "public B next()"], ["void", "com.google.common.base.Converter$1$1.remove()", "public void remove()"], ["java.util.Iterator<B>", "com.google.common.base.Converter$1.iterator()", "public java.util.Iterator<B> iterator()"], ["boolean", "com.google.common.base.Converter$ConverterComposition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Converter$ConverterComposition.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Converter$ConverterComposition.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Converter$FunctionBasedConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Converter$FunctionBasedConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Converter$FunctionBasedConverter.toString()", "public java.lang.String toString()"], ["com.google.common.base.Converter$IdentityConverter<T>", "com.google.common.base.Converter$IdentityConverter.reverse()", "public com.google.common.base.Converter$IdentityConverter<T> reverse()"], ["java.lang.String", "com.google.common.base.Converter$IdentityConverter.toString()", "public java.lang.String toString()"], ["com.google.common.base.Converter", "com.google.common.base.Converter$IdentityConverter.reverse()", "public com.google.common.base.Converter reverse()"], ["com.google.common.base.Converter<A, B>", "com.google.common.base.Converter$ReverseConverter.reverse()", "public com.google.common.base.Converter<A, B> reverse()"], ["boolean", "com.google.common.base.Converter$ReverseConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Converter$ReverseConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Converter$ReverseConverter.toString()", "public java.lang.String toString()"], ["B", "com.google.common.base.Converter.convert(A)", "public final B convert(A)"], ["java.lang.Iterable<B>", "com.google.common.base.Converter.convertAll(java.lang.Iterable<? extends A>)", "public java.lang.Iterable<B> convertAll(java.lang.Iterable<? extends A>)"], ["com.google.common.base.Converter<B, A>", "com.google.common.base.Converter.reverse()", "public com.google.common.base.Converter<B, A> reverse()"], ["<C> com.google.common.base.Converter<A, C>", "com.google.common.base.Converter.andThen(com.google.common.base.Converter<B, C>)", "public final <C> com.google.common.base.Converter<A, C> andThen(com.google.common.base.Converter<B, C>)"], ["B", "com.google.common.base.Converter.apply(A)", "public final B apply(A)"], ["boolean", "com.google.common.base.Converter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["<A, B> com.google.common.base.Converter<A, B>", "com.google.common.base.Converter.from(com.google.common.base.Function<? super A, ? extends B>, com.google.common.base.Function<? super B, ? extends A>)", "public static <A, B> com.google.common.base.Converter<A, B> from(com.google.common.base.Function<? super A, ? extends B>, com.google.common.base.Function<? super B, ? extends A>)"], ["<T> com.google.common.base.Converter<T, T>", "com.google.common.base.Converter.identity()", "public static <T> com.google.common.base.Converter<T, T> identity()"], ["<T> T", "com.google.common.base.Defaults.defaultValue(java.lang.Class<T>)", "public static <T> T defaultValue(java.lang.Class<T>)"], ["boolean", "com.google.common.base.Enums$StringConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Enums$StringConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Enums$StringConverter.toString()", "public java.lang.String toString()"], ["java.lang.reflect.Field", "com.google.common.base.Enums.getField(java.lang.Enum<?>)", "public static java.lang.reflect.Field getField(java.lang.Enum<?>)"], ["<T extends java.lang.Enum<T>> com.google.common.base.Optional<T>", "com.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)", "public static <T extends java.lang.Enum<T>> com.google.common.base.Optional<T> getIfPresent(java.lang.Class<T>, java.lang.String)"], ["<T extends java.lang.Enum<T>> com.google.common.base.Converter<java.lang.String, T>", "com.google.common.base.Enums.stringConverter(java.lang.Class<T>)", "public static <T extends java.lang.Enum<T>> com.google.common.base.Converter<java.lang.String, T> stringConverter(java.lang.Class<T>)"], ["boolean", "com.google.common.base.Equivalence$EquivalentToPredicate.apply(T)", "public boolean apply(T)"], ["boolean", "com.google.common.base.Equivalence$EquivalentToPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Equivalence$EquivalentToPredicate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Equivalence$EquivalentToPredicate.toString()", "public java.lang.String toString()"], ["T", "com.google.common.base.Equivalence$Wrapper.get()", "public T get()"], ["boolean", "com.google.common.base.Equivalence$Wrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Equivalence$Wrapper.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Equivalence$Wrapper.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Equivalence.equivalent(T, T)", "public final boolean equivalent(T, T)"], ["int", "com.google.common.base.Equivalence.hash(T)", "public final int hash(T)"], ["<F> com.google.common.base.Equivalence<F>", "com.google.common.base.Equivalence.onResultOf(com.google.common.base.Function<F, ? extends T>)", "public final <F> com.google.common.base.Equivalence<F> onResultOf(com.google.common.base.Function<F, ? extends T>)"], ["<S extends T> com.google.common.base.Equivalence$Wrapper<S>", "com.google.common.base.Equivalence.wrap(S)", "public final <S extends T> com.google.common.base.Equivalence$Wrapper<S> wrap(S)"], ["<S extends T> com.google.common.base.Equivalence<java.lang.Iterable<S>>", "com.google.common.base.Equivalence.pairwise()", "public final <S extends T> com.google.common.base.Equivalence<java.lang.Iterable<S>> pairwise()"], ["com.google.common.base.Predicate<T>", "com.google.common.base.Equivalence.equivalentTo(T)", "public final com.google.common.base.Predicate<T> equivalentTo(T)"], ["com.google.common.base.Equivalence<java.lang.Object>", "com.google.common.base.Equivalence.equals()", "public static com.google.common.base.Equivalence<java.lang.Object> equals()"], ["com.google.common.base.Equivalence<java.lang.Object>", "com.google.common.base.Equivalence.identity()", "public static com.google.common.base.Equivalence<java.lang.Object> identity()"], ["java.lang.Class<?>", "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader.loadFinalizer()", "public java.lang.Class<?> loadFinalizer()"], ["java.lang.Class<?>", "com.google.common.base.FinalizableReferenceQueue$DirectLoader.loadFinalizer()", "public java.lang.Class<?> loadFinalizer()"], ["java.lang.Class<?>", "com.google.common.base.FinalizableReferenceQueue$SystemLoader.loadFinalizer()", "public java.lang.Class<?> loadFinalizer()"], ["com.google.common.base.FinalizableReferenceQueue", "com.google.common.base.FinalizableReferenceQueue()", "public com.google.common.base.FinalizableReferenceQueue()"], ["void", "com.google.common.base.FinalizableReferenceQueue.close()", "public void close()"], ["boolean", "com.google.common.base.FunctionalEquivalence.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.FunctionalEquivalence.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.FunctionalEquivalence.toString()", "public java.lang.String toString()"], ["com.google.common.base.Functions$ConstantFunction", "com.google.common.base.Functions$ConstantFunction(E)", "public com.google.common.base.Functions$ConstantFunction(E)"], ["E", "com.google.common.base.Functions$ConstantFunction.apply(java.lang.Object)", "public E apply(java.lang.Object)"], ["boolean", "com.google.common.base.Functions$ConstantFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$ConstantFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Functions$ConstantFunction.toString()", "public java.lang.String toString()"], ["V", "com.google.common.base.Functions$ForMapWithDefault.apply(K)", "public V apply(K)"], ["boolean", "com.google.common.base.Functions$ForMapWithDefault.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$ForMapWithDefault.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Functions$ForMapWithDefault.toString()", "public java.lang.String toString()"], ["com.google.common.base.Functions$FunctionComposition", "com.google.common.base.Functions$FunctionComposition(com.google.common.base.Function<B, C>, com.google.common.base.Function<A, ? extends B>)", "public com.google.common.base.Functions$FunctionComposition(com.google.common.base.Function<B, C>, com.google.common.base.Function<A, ? extends B>)"], ["C", "com.google.common.base.Functions$FunctionComposition.apply(A)", "public C apply(A)"], ["boolean", "com.google.common.base.Functions$FunctionComposition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$FunctionComposition.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Functions$FunctionComposition.toString()", "public java.lang.String toString()"], ["V", "com.google.common.base.Functions$FunctionForMapNoDefault.apply(K)", "public V apply(K)"], ["boolean", "com.google.common.base.Functions$FunctionForMapNoDefault.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$FunctionForMapNoDefault.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Functions$FunctionForMapNoDefault.toString()", "public java.lang.String toString()"], ["com.google.common.base.Functions$IdentityFunction[]", "com.google.common.base.Functions$IdentityFunction.values()", "public static com.google.common.base.Functions$IdentityFunction[] values()"], ["com.google.common.base.Functions$IdentityFunction", "com.google.common.base.Functions$IdentityFunction.valueOf(java.lang.String)", "public static com.google.common.base.Functions$IdentityFunction valueOf(java.lang.String)"], ["java.lang.Object", "com.google.common.base.Functions$IdentityFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Functions$IdentityFunction.toString()", "public java.lang.String toString()"], ["java.lang.Boolean", "com.google.common.base.Functions$PredicateFunction.apply(T)", "public java.lang.Boolean apply(T)"], ["boolean", "com.google.common.base.Functions$PredicateFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$PredicateFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Functions$PredicateFunction.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.base.Functions$PredicateFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["T", "com.google.common.base.Functions$SupplierFunction.apply(java.lang.Object)", "public T apply(java.lang.Object)"], ["boolean", "com.google.common.base.Functions$SupplierFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$SupplierFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Functions$SupplierFunction.toString()", "public java.lang.String toString()"], ["com.google.common.base.Functions$ToStringFunction[]", "com.google.common.base.Functions$ToStringFunction.values()", "public static com.google.common.base.Functions$ToStringFunction[] values()"], ["com.google.common.base.Functions$ToStringFunction", "com.google.common.base.Functions$ToStringFunction.valueOf(java.lang.String)", "public static com.google.common.base.Functions$ToStringFunction valueOf(java.lang.String)"], ["java.lang.String", "com.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)", "public java.lang.String apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Functions$ToStringFunction.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.google.common.base.Function<java.lang.Object, java.lang.String>", "com.google.common.base.Functions.toStringFunction()", "public static com.google.common.base.Function<java.lang.Object, java.lang.String> toStringFunction()"], ["<E> com.google.common.base.Function<E, E>", "com.google.common.base.Functions.identity()", "public static <E> com.google.common.base.Function<E, E> identity()"], ["<K, V> com.google.common.base.Function<K, V>", "com.google.common.base.Functions.forMap(java.util.Map<K, V>)", "public static <K, V> com.google.common.base.Function<K, V> forMap(java.util.Map<K, V>)"], ["<K, V> com.google.common.base.Function<K, V>", "com.google.common.base.Functions.forMap(java.util.Map<K, ? extends V>, V)", "public static <K, V> com.google.common.base.Function<K, V> forMap(java.util.Map<K, ? extends V>, V)"], ["<A, B, C> com.google.common.base.Function<A, C>", "com.google.common.base.Functions.compose(com.google.common.base.Function<B, C>, com.google.common.base.Function<A, ? extends B>)", "public static <A, B, C> com.google.common.base.Function<A, C> compose(com.google.common.base.Function<B, C>, com.google.common.base.Function<A, ? extends B>)"], ["<T> com.google.common.base.Function<T, java.lang.Boolean>", "com.google.common.base.Functions.forPredicate(com.google.common.base.Predicate<T>)", "public static <T> com.google.common.base.Function<T, java.lang.Boolean> forPredicate(com.google.common.base.Predicate<T>)"], ["<E> com.google.common.base.Function<java.lang.Object, E>", "com.google.common.base.Functions.constant(E)", "public static <E> com.google.common.base.Function<java.lang.Object, E> constant(E)"], ["<T> com.google.common.base.Function<java.lang.Object, T>", "com.google.common.base.Functions.forSupplier(com.google.common.base.Supplier<T>)", "public static <T> com.google.common.base.Function<java.lang.Object, T> forSupplier(com.google.common.base.Supplier<T>)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner$1.useForNull(java.lang.String)", "public com.google.common.base.Joiner useForNull(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner$1.skipNulls()", "public com.google.common.base.Joiner skipNulls()"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$2.appendTo(A, java.util.Iterator<?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Iterator<?>) throws java.io.IOException"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner$2.useForNull(java.lang.String)", "public com.google.common.base.Joiner useForNull(java.lang.String)"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner$2.withKeyValueSeparator(java.lang.String)", "public com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)"], ["int", "com.google.common.base.Joiner$3.size()", "public int size()"], ["java.lang.Object", "com.google.common.base.Joiner$3.get(int)", "public java.lang.Object get(int)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Map<?, ?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Map<?, ?>) throws java.io.IOException"], ["java.lang.StringBuilder", "com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Map<?, ?>)", "public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Map<?, ?>)"], ["java.lang.String", "com.google.common.base.Joiner$MapJoiner.join(java.util.Map<?, ?>)", "public java.lang.String join(java.util.Map<?, ?>)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$MapJoiner.appendTo(A, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)", "public <A extends java.lang.Appendable> A appendTo(A, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>) throws java.io.IOException"], ["java.lang.StringBuilder", "com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "com.google.common.base.Joiner$MapJoiner.join(java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.String join(java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "com.google.common.base.Joiner$MapJoiner.join(java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.String join(java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner$MapJoiner.useForNull(java.lang.String)", "public com.google.common.base.Joiner$MapJoiner useForNull(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.on(java.lang.String)", "public static com.google.common.base.Joiner on(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.on(char)", "public static com.google.common.base.Joiner on(char)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.lang.Iterable<?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.lang.Iterable<?>) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.util.Iterator<?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Iterator<?>) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.lang.Object[])", "public final <A extends java.lang.Appendable> A appendTo(A, java.lang.Object[]) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...)", "public final <A extends java.lang.Appendable> A appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...) throws java.io.IOException"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<?>)", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable<?>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.util.Iterator<?>)", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator<?>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object[])", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object[])"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.lang.String", "com.google.common.base.Joiner.join(java.lang.Iterable<?>)", "public final java.lang.String join(java.lang.Iterable<?>)"], ["java.lang.String", "com.google.common.base.Joiner.join(java.util.Iterator<?>)", "public final java.lang.String join(java.util.Iterator<?>)"], ["java.lang.String", "com.google.common.base.Joiner.join(java.lang.Object[])", "public final java.lang.String join(java.lang.Object[])"], ["java.lang.String", "com.google.common.base.Joiner.join(java.lang.Object, java.lang.Object, java.lang.Object...)", "public final java.lang.String join(java.lang.Object, java.lang.Object, java.lang.Object...)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.useForNull(java.lang.String)", "public com.google.common.base.Joiner useForNull(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.skipNulls()", "public com.google.common.base.Joiner skipNulls()"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner.withKeyValueSeparator(java.lang.String)", "public com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.omitNullValues()", "public com.google.common.base.MoreObjects$ToStringHelper omitNullValues()"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, java.lang.Object)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, java.lang.Object)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, boolean)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, boolean)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, char)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, char)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, double)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, double)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, float)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, float)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, int)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, int)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, long)", "public com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, long)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(java.lang.Object)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(boolean)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(boolean)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(char)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(char)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(double)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(double)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(float)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(float)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(int)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(int)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(long)", "public com.google.common.base.MoreObjects$ToStringHelper addValue(long)"], ["java.lang.String", "com.google.common.base.MoreObjects$ToStringHelper.toString()", "public java.lang.String toString()"], ["<T> T", "com.google.common.base.MoreObjects.firstNonNull(T, T)", "public static <T> T firstNonNull(T, T)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects.toStringHelper(java.lang.Object)", "public static com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects.toStringHelper(java.lang.Class<?>)", "public static com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Class<?>)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects.toStringHelper(java.lang.String)", "public static com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.omitNullValues()", "public com.google.common.base.Objects$ToStringHelper omitNullValues()"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, java.lang.Object)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, java.lang.Object)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, boolean)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, boolean)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, char)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, char)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, double)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, double)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, float)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, float)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, int)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, int)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.add(java.lang.String, long)", "public com.google.common.base.Objects$ToStringHelper add(java.lang.String, long)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(java.lang.Object)", "public com.google.common.base.Objects$ToStringHelper addValue(java.lang.Object)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(boolean)", "public com.google.common.base.Objects$ToStringHelper addValue(boolean)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(char)", "public com.google.common.base.Objects$ToStringHelper addValue(char)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(double)", "public com.google.common.base.Objects$ToStringHelper addValue(double)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(float)", "public com.google.common.base.Objects$ToStringHelper addValue(float)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(int)", "public com.google.common.base.Objects$ToStringHelper addValue(int)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects$ToStringHelper.addValue(long)", "public com.google.common.base.Objects$ToStringHelper addValue(long)"], ["java.lang.String", "com.google.common.base.Objects$ToStringHelper.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)", "public static boolean equal(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.base.Objects.hashCode(java.lang.Object...)", "public static int hashCode(java.lang.Object...)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects.toStringHelper(java.lang.Object)", "public static com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Object)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects.toStringHelper(java.lang.Class<?>)", "public static com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Class<?>)"], ["com.google.common.base.Objects$ToStringHelper", "com.google.common.base.Objects.toStringHelper(java.lang.String)", "public static com.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)"], ["<T> T", "com.google.common.base.Objects.firstNonNull(T, T)", "public static <T> T firstNonNull(T, T)"], ["java.util.Iterator<T>", "com.google.common.base.Optional$1.iterator()", "public java.util.Iterator<T> iterator()"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.absent()", "public static <T> com.google.common.base.Optional<T> absent()"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.of(T)", "public static <T> com.google.common.base.Optional<T> of(T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.fromNullable(T)", "public static <T> com.google.common.base.Optional<T> fromNullable(T)"], ["<T> java.lang.Iterable<T>", "com.google.common.base.Optional.presentInstances(java.lang.Iterable<? extends com.google.common.base.Optional<? extends T>>)", "public static <T> java.lang.Iterable<T> presentInstances(java.lang.Iterable<? extends com.google.common.base.Optional<? extends T>>)"], ["boolean", "com.google.common.base.PairwiseEquivalence.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.PairwiseEquivalence.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.PairwiseEquivalence.toString()", "public java.lang.String toString()"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean)", "public static void checkArgument(boolean)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.Object)", "public static void checkArgument(boolean, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object...)", "public static void checkArgument(boolean, java.lang.String, java.lang.Object...)"], ["void", "com.google.common.base.Preconditions.checkState(boolean)", "public static void checkState(boolean)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.Object)", "public static void checkState(boolean, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object...)", "public static void checkState(boolean, java.lang.String, java.lang.Object...)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T)", "public static <T> T checkNotNull(T)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.Object)", "public static <T> T checkNotNull(T, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object...)", "public static <T> T checkNotNull(T, java.lang.String, java.lang.Object...)"], ["int", "com.google.common.base.Preconditions.checkElementIndex(int, int)", "public static int checkElementIndex(int, int)"], ["int", "com.google.common.base.Preconditions.checkElementIndex(int, int, java.lang.String)", "public static int checkElementIndex(int, int, java.lang.String)"], ["int", "com.google.common.base.Preconditions.checkPositionIndex(int, int)", "public static int checkPositionIndex(int, int)"], ["int", "com.google.common.base.Preconditions.checkPositionIndex(int, int, java.lang.String)", "public static int checkPositionIndex(int, int, java.lang.String)"], ["void", "com.google.common.base.Preconditions.checkPositionIndexes(int, int, int)", "public static void checkPositionIndexes(int, int, int)"], ["boolean", "com.google.common.base.Predicates$AndPredicate.apply(T)", "public boolean apply(T)"], ["int", "com.google.common.base.Predicates$AndPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$AndPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$AndPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$AssignableFromPredicate.apply(java.lang.Class<?>)", "public boolean apply(java.lang.Class<?>)"], ["int", "com.google.common.base.Predicates$AssignableFromPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$AssignableFromPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$AssignableFromPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$AssignableFromPredicate.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.Predicates$CompositionPredicate.apply(A)", "public boolean apply(A)"], ["boolean", "com.google.common.base.Predicates$CompositionPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Predicates$CompositionPredicate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Predicates$CompositionPredicate.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.base.Predicates$ContainsPatternFromStringPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.CharSequence)", "public boolean apply(java.lang.CharSequence)"], ["int", "com.google.common.base.Predicates$ContainsPatternPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$ContainsPatternPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ContainsPatternPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.base.Predicates$InPredicate.apply(T)", "public boolean apply(T)"], ["boolean", "com.google.common.base.Predicates$InPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Predicates$InPredicate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Predicates$InPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$InstanceOfPredicate.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["int", "com.google.common.base.Predicates$InstanceOfPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$InstanceOfPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$InstanceOfPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$IsEqualToPredicate.apply(T)", "public boolean apply(T)"], ["int", "com.google.common.base.Predicates$IsEqualToPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$IsEqualToPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$IsEqualToPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$NotPredicate.apply(T)", "public boolean apply(T)"], ["int", "com.google.common.base.Predicates$NotPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$NotPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$NotPredicate.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$1.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$2.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$3.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$3.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$4.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$4.toString()", "public java.lang.String toString()"], ["com.google.common.base.Predicates$ObjectPredicate[]", "com.google.common.base.Predicates$ObjectPredicate.values()", "public static com.google.common.base.Predicates$ObjectPredicate[] values()"], ["com.google.common.base.Predicates$ObjectPredicate", "com.google.common.base.Predicates$ObjectPredicate.valueOf(java.lang.String)", "public static com.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String)"], ["boolean", "com.google.common.base.Predicates$OrPredicate.apply(T)", "public boolean apply(T)"], ["int", "com.google.common.base.Predicates$OrPredicate.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.base.Predicates$OrPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$OrPredicate.toString()", "public java.lang.String toString()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.alwaysTrue()", "public static <T> com.google.common.base.Predicate<T> alwaysTrue()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.alwaysFalse()", "public static <T> com.google.common.base.Predicate<T> alwaysFalse()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.isNull()", "public static <T> com.google.common.base.Predicate<T> isNull()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.notNull()", "public static <T> com.google.common.base.Predicate<T> notNull()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.not(com.google.common.base.Predicate<T>)", "public static <T> com.google.common.base.Predicate<T> not(com.google.common.base.Predicate<T>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.and(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)", "public static <T> com.google.common.base.Predicate<T> and(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.and(com.google.common.base.Predicate<? super T>...)", "public static <T> com.google.common.base.Predicate<T> and(com.google.common.base.Predicate<? super T>...)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.and(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)", "public static <T> com.google.common.base.Predicate<T> and(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.or(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)", "public static <T> com.google.common.base.Predicate<T> or(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.or(com.google.common.base.Predicate<? super T>...)", "public static <T> com.google.common.base.Predicate<T> or(com.google.common.base.Predicate<? super T>...)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.or(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)", "public static <T> com.google.common.base.Predicate<T> or(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.equalTo(T)", "public static <T> com.google.common.base.Predicate<T> equalTo(T)"], ["com.google.common.base.Predicate<java.lang.Object>", "com.google.common.base.Predicates.instanceOf(java.lang.Class<?>)", "public static com.google.common.base.Predicate<java.lang.Object> instanceOf(java.lang.Class<?>)"], ["com.google.common.base.Predicate<java.lang.Class<?>>", "com.google.common.base.Predicates.assignableFrom(java.lang.Class<?>)", "public static com.google.common.base.Predicate<java.lang.Class<?>> assignableFrom(java.lang.Class<?>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.in(java.util.Collection<? extends T>)", "public static <T> com.google.common.base.Predicate<T> in(java.util.Collection<? extends T>)"], ["<A, B> com.google.common.base.Predicate<A>", "com.google.common.base.Predicates.compose(com.google.common.base.Predicate<B>, com.google.common.base.Function<A, ? extends B>)", "public static <A, B> com.google.common.base.Predicate<A> compose(com.google.common.base.Predicate<B>, com.google.common.base.Function<A, ? extends B>)"], ["com.google.common.base.Predicate<java.lang.CharSequence>", "com.google.common.base.Predicates.containsPattern(java.lang.String)", "public static com.google.common.base.Predicate<java.lang.CharSequence> containsPattern(java.lang.String)"], ["com.google.common.base.Predicate<java.lang.CharSequence>", "com.google.common.base.Predicates.contains(java.util.regex.Pattern)", "public static com.google.common.base.Predicate<java.lang.CharSequence> contains(java.util.regex.Pattern)"], ["boolean", "com.google.common.base.Present.isPresent()", "public boolean isPresent()"], ["T", "com.google.common.base.Present.get()", "public T get()"], ["T", "com.google.common.base.Present.or(T)", "public T or(T)"], ["com.google.common.base.Optional<T>", "com.google.common.base.Present.or(com.google.common.base.Optional<? extends T>)", "public com.google.common.base.Optional<T> or(com.google.common.base.Optional<? extends T>)"], ["T", "com.google.common.base.Present.or(com.google.common.base.Supplier<? extends T>)", "public T or(com.google.common.base.Supplier<? extends T>)"], ["T", "com.google.common.base.Present.orNull()", "public T orNull()"], ["java.util.Set<T>", "com.google.common.base.Present.asSet()", "public java.util.Set<T> asSet()"], ["<V> com.google.common.base.Optional<V>", "com.google.common.base.Present.transform(com.google.common.base.Function<? super T, V>)", "public <V> com.google.common.base.Optional<V> transform(com.google.common.base.Function<? super T, V>)"], ["boolean", "com.google.common.base.Present.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Present.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Present.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.base.SmallCharMatcher.matches(char)", "public boolean matches(char)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$1.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$1.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "com.google.common.base.Splitter$2$1.separatorStart(int)", "public int separatorStart(int)"], ["int", "com.google.common.base.Splitter$2$1.separatorEnd(int)", "public int separatorEnd(int)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$2.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$2.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "com.google.common.base.Splitter$3$1.separatorStart(int)", "public int separatorStart(int)"], ["int", "com.google.common.base.Splitter$3$1.separatorEnd(int)", "public int separatorEnd(int)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$3.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$3.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "com.google.common.base.Splitter$4$1.separatorStart(int)", "public int separatorStart(int)"], ["int", "com.google.common.base.Splitter$4$1.separatorEnd(int)", "public int separatorEnd(int)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$4.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$4.iterator(com.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator<java.lang.String>", "com.google.common.base.Splitter$5.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["java.lang.String", "com.google.common.base.Splitter$5.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "com.google.common.base.Splitter$MapSplitter.split(java.lang.CharSequence)", "public java.util.Map<java.lang.String, java.lang.String> split(java.lang.CharSequence)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(char)", "public static com.google.common.base.Splitter on(char)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(com.google.common.base.CharMatcher)", "public static com.google.common.base.Splitter on(com.google.common.base.CharMatcher)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(java.lang.String)", "public static com.google.common.base.Splitter on(java.lang.String)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(java.util.regex.Pattern)", "public static com.google.common.base.Splitter on(java.util.regex.Pattern)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.onPattern(java.lang.String)", "public static com.google.common.base.Splitter onPattern(java.lang.String)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.fixedLength(int)", "public static com.google.common.base.Splitter fixedLength(int)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.omitEmptyStrings()", "public com.google.common.base.Splitter omitEmptyStrings()"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.limit(int)", "public com.google.common.base.Splitter limit(int)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.trimResults()", "public com.google.common.base.Splitter trimResults()"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.trimResults(com.google.common.base.CharMatcher)", "public com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher)"], ["java.lang.Iterable<java.lang.String>", "com.google.common.base.Splitter.split(java.lang.CharSequence)", "public java.lang.Iterable<java.lang.String> split(java.lang.CharSequence)"], ["java.util.List<java.lang.String>", "com.google.common.base.Splitter.splitToList(java.lang.CharSequence)", "public java.util.List<java.lang.String> splitToList(java.lang.CharSequence)"], ["com.google.common.base.Splitter$MapSplitter", "com.google.common.base.Splitter.withKeyValueSeparator(java.lang.String)", "public com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String)"], ["com.google.common.base.Splitter$MapSplitter", "com.google.common.base.Splitter.withKeyValueSeparator(char)", "public com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(char)"], ["com.google.common.base.Splitter$MapSplitter", "com.google.common.base.Splitter.withKeyValueSeparator(com.google.common.base.Splitter)", "public com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(com.google.common.base.Splitter)"], ["com.google.common.base.StandardSystemProperty[]", "com.google.common.base.StandardSystemProperty.values()", "public static com.google.common.base.StandardSystemProperty[] values()"], ["com.google.common.base.StandardSystemProperty", "com.google.common.base.StandardSystemProperty.valueOf(java.lang.String)", "public static com.google.common.base.StandardSystemProperty valueOf(java.lang.String)"], ["java.lang.String", "com.google.common.base.StandardSystemProperty.key()", "public java.lang.String key()"], ["java.lang.String", "com.google.common.base.StandardSystemProperty.value()", "public java.lang.String value()"], ["java.lang.String", "com.google.common.base.StandardSystemProperty.toString()", "public java.lang.String toString()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createUnstarted()", "public static com.google.common.base.Stopwatch createUnstarted()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createUnstarted(com.google.common.base.Ticker)", "public static com.google.common.base.Stopwatch createUnstarted(com.google.common.base.Ticker)"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createStarted()", "public static com.google.common.base.Stopwatch createStarted()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createStarted(com.google.common.base.Ticker)", "public static com.google.common.base.Stopwatch createStarted(com.google.common.base.Ticker)"], ["boolean", "com.google.common.base.Stopwatch.isRunning()", "public boolean isRunning()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.start()", "public com.google.common.base.Stopwatch start()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.stop()", "public com.google.common.base.Stopwatch stop()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.reset()", "public com.google.common.base.Stopwatch reset()"], ["long", "com.google.common.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)", "public long elapsed(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.base.Stopwatch.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.base.Strings.nullToEmpty(java.lang.String)", "public static java.lang.String nullToEmpty(java.lang.String)"], ["java.lang.String", "com.google.common.base.Strings.emptyToNull(java.lang.String)", "public static java.lang.String emptyToNull(java.lang.String)"], ["boolean", "com.google.common.base.Strings.isNullOrEmpty(java.lang.String)", "public static boolean isNullOrEmpty(java.lang.String)"], ["java.lang.String", "com.google.common.base.Strings.padStart(java.lang.String, int, char)", "public static java.lang.String padStart(java.lang.String, int, char)"], ["java.lang.String", "com.google.common.base.Strings.padEnd(java.lang.String, int, char)", "public static java.lang.String padEnd(java.lang.String, int, char)"], ["java.lang.String", "com.google.common.base.Strings.repeat(java.lang.String, int)", "public static java.lang.String repeat(java.lang.String, int)"], ["java.lang.String", "com.google.common.base.Strings.commonPrefix(java.lang.CharSequence, java.lang.CharSequence)", "public static java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.Strings.commonSuffix(java.lang.CharSequence, java.lang.CharSequence)", "public static java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence)"], ["T", "com.google.common.base.Suppliers$ExpiringMemoizingSupplier.get()", "public T get()"], ["java.lang.String", "com.google.common.base.Suppliers$ExpiringMemoizingSupplier.toString()", "public java.lang.String toString()"], ["T", "com.google.common.base.Suppliers$MemoizingSupplier.get()", "public T get()"], ["java.lang.String", "com.google.common.base.Suppliers$MemoizingSupplier.toString()", "public java.lang.String toString()"], ["T", "com.google.common.base.Suppliers$SupplierComposition.get()", "public T get()"], ["boolean", "com.google.common.base.Suppliers$SupplierComposition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Suppliers$SupplierComposition.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Suppliers$SupplierComposition.toString()", "public java.lang.String toString()"], ["com.google.common.base.Suppliers$SupplierFunctionImpl[]", "com.google.common.base.Suppliers$SupplierFunctionImpl.values()", "public static com.google.common.base.Suppliers$SupplierFunctionImpl[] values()"], ["com.google.common.base.Suppliers$SupplierFunctionImpl", "com.google.common.base.Suppliers$SupplierFunctionImpl.valueOf(java.lang.String)", "public static com.google.common.base.Suppliers$SupplierFunctionImpl valueOf(java.lang.String)"], ["java.lang.Object", "com.google.common.base.Suppliers$SupplierFunctionImpl.apply(com.google.common.base.Supplier<java.lang.Object>)", "public java.lang.Object apply(com.google.common.base.Supplier<java.lang.Object>)"], ["java.lang.String", "com.google.common.base.Suppliers$SupplierFunctionImpl.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.base.Suppliers$SupplierFunctionImpl.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["T", "com.google.common.base.Suppliers$SupplierOfInstance.get()", "public T get()"], ["boolean", "com.google.common.base.Suppliers$SupplierOfInstance.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.base.Suppliers$SupplierOfInstance.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.base.Suppliers$SupplierOfInstance.toString()", "public java.lang.String toString()"], ["T", "com.google.common.base.Suppliers$ThreadSafeSupplier.get()", "public T get()"], ["java.lang.String", "com.google.common.base.Suppliers$ThreadSafeSupplier.toString()", "public java.lang.String toString()"], ["<F, T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.compose(com.google.common.base.Function<? super F, T>, com.google.common.base.Supplier<F>)", "public static <F, T> com.google.common.base.Supplier<T> compose(com.google.common.base.Function<? super F, T>, com.google.common.base.Supplier<F>)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.memoize(com.google.common.base.Supplier<T>)", "public static <T> com.google.common.base.Supplier<T> memoize(com.google.common.base.Supplier<T>)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.memoizeWithExpiration(com.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)", "public static <T> com.google.common.base.Supplier<T> memoizeWithExpiration(com.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.ofInstance(T)", "public static <T> com.google.common.base.Supplier<T> ofInstance(T)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.synchronizedSupplier(com.google.common.base.Supplier<T>)", "public static <T> com.google.common.base.Supplier<T> synchronizedSupplier(com.google.common.base.Supplier<T>)"], ["<T> com.google.common.base.Function<com.google.common.base.Supplier<T>, T>", "com.google.common.base.Suppliers.supplierFunction()", "public static <T> com.google.common.base.Function<com.google.common.base.Supplier<T>, T> supplierFunction()"], ["<X extends java.lang.Throwable> void", "com.google.common.base.Throwables.propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>)", "public static <X extends java.lang.Throwable> void propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>) throws X"], ["void", "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable)", "public static void propagateIfPossible(java.lang.Throwable)"], ["<X extends java.lang.Throwable> void", "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)", "public static <X extends java.lang.Throwable> void propagateIfPossible(java.lang.Throwable, java.lang.Class<X>) throws X"], ["<X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void", "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)", "public static <X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>) throws X1, X2"], ["java.lang.RuntimeException", "com.google.common.base.Throwables.propagate(java.lang.Throwable)", "public static java.lang.RuntimeException propagate(java.lang.Throwable)"], ["java.lang.Throwable", "com.google.common.base.Throwables.getRootCause(java.lang.Throwable)", "public static java.lang.Throwable getRootCause(java.lang.Throwable)"], ["java.util.List<java.lang.Throwable>", "com.google.common.base.Throwables.getCausalChain(java.lang.Throwable)", "public static java.util.List<java.lang.Throwable> getCausalChain(java.lang.Throwable)"], ["java.lang.String", "com.google.common.base.Throwables.getStackTraceAsString(java.lang.Throwable)", "public static java.lang.String getStackTraceAsString(java.lang.Throwable)"], ["long", "com.google.common.base.Ticker$1.read()", "public long read()"], ["com.google.common.base.Ticker", "com.google.common.base.Ticker.systemTicker()", "public static com.google.common.base.Ticker systemTicker()"], ["int", "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)", "public static int encodedLength(java.lang.CharSequence)"], ["boolean", "com.google.common.base.Utf8.isWellFormed(byte[])", "public static boolean isWellFormed(byte[])"], ["boolean", "com.google.common.base.Utf8.isWellFormed(byte[], int, int)", "public static boolean isWellFormed(byte[], int, int)"], ["void", "com.google.common.base.Verify.verify(boolean)", "public static void verify(boolean)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object...)", "public static void verify(boolean, java.lang.String, java.lang.Object...)"], ["<T> T", "com.google.common.base.Verify.verifyNotNull(T)", "public static <T> T verifyNotNull(T)"], ["<T> T", "com.google.common.base.Verify.verifyNotNull(T, java.lang.String, java.lang.Object...)", "public static <T> T verifyNotNull(T, java.lang.String, java.lang.Object...)"], ["com.google.common.base.VerifyException", "com.google.common.base.VerifyException()", "public com.google.common.base.VerifyException()"], ["com.google.common.base.VerifyException", "com.google.common.base.VerifyException(java.lang.String)", "public com.google.common.base.VerifyException(java.lang.String)"], ["void", "com.google.common.base.internal.Finalizer.startFinalizer(java.lang.Class<?>, java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.ref.PhantomReference<java.lang.Object>)", "public static void startFinalizer(java.lang.Class<?>, java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.ref.PhantomReference<java.lang.Object>)"], ["void", "com.google.common.base.internal.Finalizer.run()", "public void run()"], ["java.lang.reflect.Field", "com.google.common.base.internal.Finalizer.getInheritableThreadLocalsField()", "public static java.lang.reflect.Field getInheritableThreadLocalsField()"], ["com.google.common.cache.AbstractCache$SimpleStatsCounter", "com.google.common.cache.AbstractCache$SimpleStatsCounter()", "public com.google.common.cache.AbstractCache$SimpleStatsCounter()"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordHits(int)", "public void recordHits(int)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordMisses(int)", "public void recordMisses(int)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadSuccess(long)", "public void recordLoadSuccess(long)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadException(long)", "public void recordLoadException(long)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordEviction()", "public void recordEviction()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.AbstractCache$SimpleStatsCounter.snapshot()", "public com.google.common.cache.CacheStats snapshot()"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.incrementBy(com.google.common.cache.AbstractCache$StatsCounter)", "public void incrementBy(com.google.common.cache.AbstractCache$StatsCounter)"], ["V", "com.google.common.cache.AbstractCache.get(K, java.util.concurrent.Callable<? extends V>)", "public V get(K, java.util.concurrent.Callable<? extends V>) throws java.util.concurrent.ExecutionException"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.AbstractCache.getAllPresent(java.lang.Iterable<?>)", "public com.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.AbstractCache.put(K, V)", "public void put(K, V)"], ["void", "com.google.common.cache.AbstractCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.cache.AbstractCache.cleanUp()", "public void cleanUp()"], ["long", "com.google.common.cache.AbstractCache.size()", "public long size()"], ["void", "com.google.common.cache.AbstractCache.invalidate(java.lang.Object)", "public void invalidate(java.lang.Object)"], ["void", "com.google.common.cache.AbstractCache.invalidateAll(java.lang.Iterable<?>)", "public void invalidateAll(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.AbstractCache.invalidateAll()", "public void invalidateAll()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.AbstractCache.stats()", "public com.google.common.cache.CacheStats stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.cache.AbstractCache.asMap()", "public java.util.concurrent.ConcurrentMap<K, V> asMap()"], ["V", "com.google.common.cache.AbstractLoadingCache.getUnchecked(K)", "public V getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.AbstractLoadingCache.getAll(java.lang.Iterable<? extends K>)", "public com.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.AbstractLoadingCache.apply(K)", "public final V apply(K)"], ["void", "com.google.common.cache.AbstractLoadingCache.refresh(K)", "public void refresh(K)"], ["void", "com.google.common.cache.CacheBuilder$1.recordHits(int)", "public void recordHits(int)"], ["void", "com.google.common.cache.CacheBuilder$1.recordMisses(int)", "public void recordMisses(int)"], ["void", "com.google.common.cache.CacheBuilder$1.recordLoadSuccess(long)", "public void recordLoadSuccess(long)"], ["void", "com.google.common.cache.CacheBuilder$1.recordLoadException(long)", "public void recordLoadException(long)"], ["void", "com.google.common.cache.CacheBuilder$1.recordEviction()", "public void recordEviction()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheBuilder$1.snapshot()", "public com.google.common.cache.CacheStats snapshot()"], ["com.google.common.cache.AbstractCache$StatsCounter", "com.google.common.cache.CacheBuilder$2.get()", "public com.google.common.cache.AbstractCache$StatsCounter get()"], ["java.lang.Object", "com.google.common.cache.CacheBuilder$2.get()", "public java.lang.Object get()"], ["long", "com.google.common.cache.CacheBuilder$3.read()", "public long read()"], ["com.google.common.cache.CacheBuilder$NullListener[]", "com.google.common.cache.CacheBuilder$NullListener.values()", "public static com.google.common.cache.CacheBuilder$NullListener[] values()"], ["com.google.common.cache.CacheBuilder$NullListener", "com.google.common.cache.CacheBuilder$NullListener.valueOf(java.lang.String)", "public static com.google.common.cache.CacheBuilder$NullListener valueOf(java.lang.String)"], ["void", "com.google.common.cache.CacheBuilder$NullListener.onRemoval(com.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)", "public void onRemoval(com.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.CacheBuilder$OneWeigher[]", "com.google.common.cache.CacheBuilder$OneWeigher.values()", "public static com.google.common.cache.CacheBuilder$OneWeigher[] values()"], ["com.google.common.cache.CacheBuilder$OneWeigher", "com.google.common.cache.CacheBuilder$OneWeigher.valueOf(java.lang.String)", "public static com.google.common.cache.CacheBuilder$OneWeigher valueOf(java.lang.String)"], ["int", "com.google.common.cache.CacheBuilder$OneWeigher.weigh(java.lang.Object, java.lang.Object)", "public int weigh(java.lang.Object, java.lang.Object)"], ["com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "com.google.common.cache.CacheBuilder.newBuilder()", "public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> newBuilder()"], ["com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "com.google.common.cache.CacheBuilder.from(com.google.common.cache.CacheBuilderSpec)", "public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> from(com.google.common.cache.CacheBuilderSpec)"], ["com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "com.google.common.cache.CacheBuilder.from(java.lang.String)", "public static com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> from(java.lang.String)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.initialCapacity(int)", "public com.google.common.cache.CacheBuilder<K, V> initialCapacity(int)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.concurrencyLevel(int)", "public com.google.common.cache.CacheBuilder<K, V> concurrencyLevel(int)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.maximumSize(long)", "public com.google.common.cache.CacheBuilder<K, V> maximumSize(long)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.maximumWeight(long)", "public com.google.common.cache.CacheBuilder<K, V> maximumWeight(long)"], ["<K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1>", "com.google.common.cache.CacheBuilder.weigher(com.google.common.cache.Weigher<? super K1, ? super V1>)", "public <K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1> weigher(com.google.common.cache.Weigher<? super K1, ? super V1>)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.weakKeys()", "public com.google.common.cache.CacheBuilder<K, V> weakKeys()"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.weakValues()", "public com.google.common.cache.CacheBuilder<K, V> weakValues()"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.softValues()", "public com.google.common.cache.CacheBuilder<K, V> softValues()"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.expireAfterWrite(long, java.util.concurrent.TimeUnit)", "public com.google.common.cache.CacheBuilder<K, V> expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.expireAfterAccess(long, java.util.concurrent.TimeUnit)", "public com.google.common.cache.CacheBuilder<K, V> expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.refreshAfterWrite(long, java.util.concurrent.TimeUnit)", "public com.google.common.cache.CacheBuilder<K, V> refreshAfterWrite(long, java.util.concurrent.TimeUnit)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.ticker(com.google.common.base.Ticker)", "public com.google.common.cache.CacheBuilder<K, V> ticker(com.google.common.base.Ticker)"], ["<K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1>", "com.google.common.cache.CacheBuilder.removalListener(com.google.common.cache.RemovalListener<? super K1, ? super V1>)", "public <K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1> removalListener(com.google.common.cache.RemovalListener<? super K1, ? super V1>)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.recordStats()", "public com.google.common.cache.CacheBuilder<K, V> recordStats()"], ["<K1 extends K, V1 extends V> com.google.common.cache.LoadingCache<K1, V1>", "com.google.common.cache.CacheBuilder.build(com.google.common.cache.CacheLoader<? super K1, V1>)", "public <K1 extends K, V1 extends V> com.google.common.cache.LoadingCache<K1, V1> build(com.google.common.cache.CacheLoader<? super K1, V1>)"], ["<K1 extends K, V1 extends V> com.google.common.cache.Cache<K1, V1>", "com.google.common.cache.CacheBuilder.build()", "public <K1 extends K, V1 extends V> com.google.common.cache.Cache<K1, V1> build()"], ["java.lang.String", "com.google.common.cache.CacheBuilder.toString()", "public java.lang.String toString()"], ["void", "com.google.common.cache.CacheBuilderSpec$DurationParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "com.google.common.cache.CacheBuilderSpec$IntegerParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser(com.google.common.cache.LocalCache$Strength)", "public com.google.common.cache.CacheBuilderSpec$KeyStrengthParser(com.google.common.cache.LocalCache$Strength)"], ["void", "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "com.google.common.cache.CacheBuilderSpec$LongParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "com.google.common.cache.CacheBuilderSpec$RecordStatsParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser(com.google.common.cache.LocalCache$Strength)", "public com.google.common.cache.CacheBuilderSpec$ValueStrengthParser(com.google.common.cache.LocalCache$Strength)"], ["void", "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec", "com.google.common.cache.CacheBuilderSpec.parse(java.lang.String)", "public static com.google.common.cache.CacheBuilderSpec parse(java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec", "com.google.common.cache.CacheBuilderSpec.disableCaching()", "public static com.google.common.cache.CacheBuilderSpec disableCaching()"], ["java.lang.String", "com.google.common.cache.CacheBuilderSpec.toParsableString()", "public java.lang.String toParsableString()"], ["java.lang.String", "com.google.common.cache.CacheBuilderSpec.toString()", "public java.lang.String toString()"], ["int", "com.google.common.cache.CacheBuilderSpec.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.cache.CacheBuilderSpec.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["V", "com.google.common.cache.CacheLoader$1$1.call()", "public V call() throws java.lang.Exception"], ["V", "com.google.common.cache.CacheLoader$1.load(K)", "public V load(K) throws java.lang.Exception"], ["com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.cache.CacheLoader$1.reload(K, V)", "public com.google.common.util.concurrent.ListenableFuture<V> reload(K, V) throws java.lang.Exception"], ["java.util.Map<K, V>", "com.google.common.cache.CacheLoader$1.loadAll(java.lang.Iterable<? extends K>)", "public java.util.Map<K, V> loadAll(java.lang.Iterable<? extends K>) throws java.lang.Exception"], ["com.google.common.cache.CacheLoader$FunctionToCacheLoader", "com.google.common.cache.CacheLoader$FunctionToCacheLoader(com.google.common.base.Function<K, V>)", "public com.google.common.cache.CacheLoader$FunctionToCacheLoader(com.google.common.base.Function<K, V>)"], ["V", "com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(K)", "public V load(K)"], ["com.google.common.cache.CacheLoader$InvalidCacheLoadException", "com.google.common.cache.CacheLoader$InvalidCacheLoadException(java.lang.String)", "public com.google.common.cache.CacheLoader$InvalidCacheLoadException(java.lang.String)"], ["com.google.common.cache.CacheLoader$SupplierToCacheLoader", "com.google.common.cache.CacheLoader$SupplierToCacheLoader(com.google.common.base.Supplier<V>)", "public com.google.common.cache.CacheLoader$SupplierToCacheLoader(com.google.common.base.Supplier<V>)"], ["V", "com.google.common.cache.CacheLoader$SupplierToCacheLoader.load(java.lang.Object)", "public V load(java.lang.Object)"], ["com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.cache.CacheLoader.reload(K, V)", "public com.google.common.util.concurrent.ListenableFuture<V> reload(K, V) throws java.lang.Exception"], ["java.util.Map<K, V>", "com.google.common.cache.CacheLoader.loadAll(java.lang.Iterable<? extends K>)", "public java.util.Map<K, V> loadAll(java.lang.Iterable<? extends K>) throws java.lang.Exception"], ["<K, V> com.google.common.cache.CacheLoader<K, V>", "com.google.common.cache.CacheLoader.from(com.google.common.base.Function<K, V>)", "public static <K, V> com.google.common.cache.CacheLoader<K, V> from(com.google.common.base.Function<K, V>)"], ["<V> com.google.common.cache.CacheLoader<java.lang.Object, V>", "com.google.common.cache.CacheLoader.from(com.google.common.base.Supplier<V>)", "public static <V> com.google.common.cache.CacheLoader<java.lang.Object, V> from(com.google.common.base.Supplier<V>)"], ["<K, V> com.google.common.cache.CacheLoader<K, V>", "com.google.common.cache.CacheLoader.asyncReloading(com.google.common.cache.CacheLoader<K, V>, java.util.concurrent.Executor)", "public static <K, V> com.google.common.cache.CacheLoader<K, V> asyncReloading(com.google.common.cache.CacheLoader<K, V>, java.util.concurrent.Executor)"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheStats(long, long, long, long, long, long)", "public com.google.common.cache.CacheStats(long, long, long, long, long, long)"], ["long", "com.google.common.cache.CacheStats.requestCount()", "public long requestCount()"], ["long", "com.google.common.cache.CacheStats.hitCount()", "public long hitCount()"], ["double", "com.google.common.cache.CacheStats.hitRate()", "public double hitRate()"], ["long", "com.google.common.cache.CacheStats.missCount()", "public long missCount()"], ["double", "com.google.common.cache.CacheStats.missRate()", "public double missRate()"], ["long", "com.google.common.cache.CacheStats.loadCount()", "public long loadCount()"], ["long", "com.google.common.cache.CacheStats.loadSuccessCount()", "public long loadSuccessCount()"], ["long", "com.google.common.cache.CacheStats.loadExceptionCount()", "public long loadExceptionCount()"], ["double", "com.google.common.cache.CacheStats.loadExceptionRate()", "public double loadExceptionRate()"], ["long", "com.google.common.cache.CacheStats.totalLoadTime()", "public long totalLoadTime()"], ["double", "com.google.common.cache.CacheStats.averageLoadPenalty()", "public double averageLoadPenalty()"], ["long", "com.google.common.cache.CacheStats.evictionCount()", "public long evictionCount()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheStats.minus(com.google.common.cache.CacheStats)", "public com.google.common.cache.CacheStats minus(com.google.common.cache.CacheStats)"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheStats.plus(com.google.common.cache.CacheStats)", "public com.google.common.cache.CacheStats plus(com.google.common.cache.CacheStats)"], ["int", "com.google.common.cache.CacheStats.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.cache.CacheStats.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.cache.CacheStats.toString()", "public java.lang.String toString()"], ["V", "com.google.common.cache.ForwardingCache.getIfPresent(java.lang.Object)", "public V getIfPresent(java.lang.Object)"], ["V", "com.google.common.cache.ForwardingCache.get(K, java.util.concurrent.Callable<? extends V>)", "public V get(K, java.util.concurrent.Callable<? extends V>) throws java.util.concurrent.ExecutionException"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.ForwardingCache.getAllPresent(java.lang.Iterable<?>)", "public com.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.ForwardingCache.put(K, V)", "public void put(K, V)"], ["void", "com.google.common.cache.ForwardingCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.cache.ForwardingCache.invalidate(java.lang.Object)", "public void invalidate(java.lang.Object)"], ["void", "com.google.common.cache.ForwardingCache.invalidateAll(java.lang.Iterable<?>)", "public void invalidateAll(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.ForwardingCache.invalidateAll()", "public void invalidateAll()"], ["long", "com.google.common.cache.ForwardingCache.size()", "public long size()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.ForwardingCache.stats()", "public com.google.common.cache.CacheStats stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.cache.ForwardingCache.asMap()", "public java.util.concurrent.ConcurrentMap<K, V> asMap()"], ["void", "com.google.common.cache.ForwardingCache.cleanUp()", "public void cleanUp()"], ["V", "com.google.common.cache.ForwardingLoadingCache.get(K)", "public V get(K) throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.ForwardingLoadingCache.getUnchecked(K)", "public V getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.ForwardingLoadingCache.getAll(java.lang.Iterable<? extends K>)", "public com.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.ForwardingLoadingCache.apply(K)", "public V apply(K)"], ["void", "com.google.common.cache.ForwardingLoadingCache.refresh(K)", "public void refresh(K)"], ["java.lang.Object", "com.google.common.cache.LocalCache$1.get()", "public java.lang.Object get()"], ["int", "com.google.common.cache.LocalCache$1.getWeight()", "public int getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$1.getEntry()", "public com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getEntry()"], ["com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object> copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "com.google.common.cache.LocalCache$1.isLoading()", "public boolean isLoading()"], ["boolean", "com.google.common.cache.LocalCache$1.isActive()", "public boolean isActive()"], ["java.lang.Object", "com.google.common.cache.LocalCache$1.waitForValue()", "public java.lang.Object waitForValue()"], ["void", "com.google.common.cache.LocalCache$1.notifyNewValue(java.lang.Object)", "public void notifyNewValue(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$2.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["java.lang.Object", "com.google.common.cache.LocalCache$2.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "com.google.common.cache.LocalCache$2.poll()", "public java.lang.Object poll()"], ["int", "com.google.common.cache.LocalCache$2.size()", "public int size()"], ["java.util.Iterator<java.lang.Object>", "com.google.common.cache.LocalCache$2.iterator()", "public java.util.Iterator<java.lang.Object> iterator()"], ["int", "com.google.common.cache.LocalCache$AbstractCacheSet.size()", "public int size()"], ["boolean", "com.google.common.cache.LocalCache$AbstractCacheSet.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.cache.LocalCache$AbstractCacheSet.clear()", "public void clear()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getValueReference()", "public com.google.common.cache.LocalCache$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)", "public void setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getNext()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNext()"], ["int", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getHash()", "public int getHash()"], ["K", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getKey()", "public K getKey()"], ["long", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$AccessQueue$1.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$AccessQueue$1.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue$1.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AccessQueue$1.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue$1.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AccessQueue$1.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.offer(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public boolean offer(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue.peek()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> peek()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue.poll()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> poll()"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.cache.LocalCache$AccessQueue.size()", "public int size()"], ["void", "com.google.common.cache.LocalCache$AccessQueue.clear()", "public void clear()"], ["java.util.Iterator<com.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "com.google.common.cache.LocalCache$AccessQueue.iterator()", "public java.util.Iterator<com.google.common.cache.LocalCache$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "com.google.common.cache.LocalCache$AccessQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "com.google.common.cache.LocalCache$AccessQueue.poll()", "public java.lang.Object poll()"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["com.google.common.cache.LocalCache$EntryFactory[]", "com.google.common.cache.LocalCache$EntryFactory.values()", "public static com.google.common.cache.LocalCache$EntryFactory[] values()"], ["com.google.common.cache.LocalCache$EntryFactory", "com.google.common.cache.LocalCache$EntryFactory.valueOf(java.lang.String)", "public static com.google.common.cache.LocalCache$EntryFactory valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "com.google.common.cache.LocalCache$EntryIterator.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "com.google.common.cache.LocalCache$EntryIterator.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.cache.LocalCache$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "com.google.common.cache.LocalCache$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$HashIterator.hasNext()", "public boolean hasNext()"], ["void", "com.google.common.cache.LocalCache$HashIterator.remove()", "public void remove()"], ["K", "com.google.common.cache.LocalCache$KeyIterator.next()", "public K next()"], ["java.util.Iterator<K>", "com.google.common.cache.LocalCache$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "com.google.common.cache.LocalCache$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache$LoadingSerializationProxy.get(K)", "public V get(K) throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.LocalCache$LoadingSerializationProxy.getUnchecked(K)", "public V getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.LocalCache$LoadingSerializationProxy.getAll(java.lang.Iterable<? extends K>)", "public com.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.LocalCache$LoadingSerializationProxy.apply(K)", "public final V apply(K)"], ["void", "com.google.common.cache.LocalCache$LoadingSerializationProxy.refresh(K)", "public void refresh(K)"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference$1.apply(V)", "public V apply(V)"], ["com.google.common.cache.LocalCache$LoadingValueReference", "com.google.common.cache.LocalCache$LoadingValueReference()", "public com.google.common.cache.LocalCache$LoadingValueReference()"], ["com.google.common.cache.LocalCache$LoadingValueReference", "com.google.common.cache.LocalCache$LoadingValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)", "public com.google.common.cache.LocalCache$LoadingValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.isActive()", "public boolean isActive()"], ["int", "com.google.common.cache.LocalCache$LoadingValueReference.getWeight()", "public int getWeight()"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.set(V)", "public boolean set(V)"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.setException(java.lang.Throwable)", "public boolean setException(java.lang.Throwable)"], ["void", "com.google.common.cache.LocalCache$LoadingValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(K, com.google.common.cache.CacheLoader<? super K, V>)", "public com.google.common.util.concurrent.ListenableFuture<V> loadFuture(K, com.google.common.cache.CacheLoader<? super K, V>)"], ["long", "com.google.common.cache.LocalCache$LoadingValueReference.elapsedNanos()", "public long elapsedNanos()"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference.waitForValue()", "public V waitForValue() throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference.get()", "public V get()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$LoadingValueReference.getOldValue()", "public com.google.common.cache.LocalCache$ValueReference<K, V> getOldValue()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$LoadingValueReference.getEntry()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$LoadingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public com.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "com.google.common.cache.LocalCache$LocalLoadingCache.get(K)", "public V get(K) throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(K)", "public V getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.LocalCache$LocalLoadingCache.getAll(java.lang.Iterable<? extends K>)", "public com.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["void", "com.google.common.cache.LocalCache$LocalLoadingCache.refresh(K)", "public void refresh(K)"], ["V", "com.google.common.cache.LocalCache$LocalLoadingCache.apply(K)", "public final V apply(K)"], ["V", "com.google.common.cache.LocalCache$LocalManualCache$1.load(java.lang.Object)", "public V load(java.lang.Object) throws java.lang.Exception"], ["V", "com.google.common.cache.LocalCache$LocalManualCache.getIfPresent(java.lang.Object)", "public V getIfPresent(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache$LocalManualCache.get(K, java.util.concurrent.Callable<? extends V>)", "public V get(K, java.util.concurrent.Callable<? extends V>) throws java.util.concurrent.ExecutionException"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.LocalCache$LocalManualCache.getAllPresent(java.lang.Iterable<?>)", "public com.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.put(K, V)", "public void put(K, V)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.invalidate(java.lang.Object)", "public void invalidate(java.lang.Object)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.invalidateAll(java.lang.Iterable<?>)", "public void invalidateAll(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.invalidateAll()", "public void invalidateAll()"], ["long", "com.google.common.cache.LocalCache$LocalManualCache.size()", "public long size()"], ["java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.cache.LocalCache$LocalManualCache.asMap()", "public java.util.concurrent.ConcurrentMap<K, V> asMap()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.LocalCache$LocalManualCache.stats()", "public com.google.common.cache.CacheStats stats()"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.cleanUp()", "public void cleanUp()"], ["com.google.common.cache.LocalCache$NullEntry[]", "com.google.common.cache.LocalCache$NullEntry.values()", "public static com.google.common.cache.LocalCache$NullEntry[] values()"], ["com.google.common.cache.LocalCache$NullEntry", "com.google.common.cache.LocalCache$NullEntry.valueOf(java.lang.String)", "public static com.google.common.cache.LocalCache$NullEntry valueOf(java.lang.String)"], ["com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getValueReference()", "public com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object> getValueReference()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>)", "public void setValueReference(com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getNext()", "public com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getNext()"], ["int", "com.google.common.cache.LocalCache$NullEntry.getHash()", "public int getHash()"], ["java.lang.Object", "com.google.common.cache.LocalCache$NullEntry.getKey()", "public java.lang.Object getKey()"], ["long", "com.google.common.cache.LocalCache$NullEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["long", "com.google.common.cache.LocalCache$NullEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["void", "com.google.common.cache.LocalCache$Segment$1.run()", "public void run()"], ["int", "com.google.common.cache.LocalCache$SoftValueReference.getWeight()", "public int getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$SoftValueReference.getEntry()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["void", "com.google.common.cache.LocalCache$SoftValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public com.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$SoftValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "com.google.common.cache.LocalCache$SoftValueReference.isActive()", "public boolean isActive()"], ["V", "com.google.common.cache.LocalCache$SoftValueReference.waitForValue()", "public V waitForValue()"], ["com.google.common.cache.LocalCache$Strength[]", "com.google.common.cache.LocalCache$Strength.values()", "public static com.google.common.cache.LocalCache$Strength[] values()"], ["com.google.common.cache.LocalCache$Strength", "com.google.common.cache.LocalCache$Strength.valueOf(java.lang.String)", "public static com.google.common.cache.LocalCache$Strength valueOf(java.lang.String)"], ["long", "com.google.common.cache.LocalCache$StrongAccessEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$StrongAccessEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "com.google.common.cache.LocalCache$StrongEntry.getKey()", "public K getKey()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$StrongEntry.getValueReference()", "public com.google.common.cache.LocalCache$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.cache.LocalCache$StrongEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)", "public void setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "com.google.common.cache.LocalCache$StrongEntry.getHash()", "public int getHash()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongEntry.getNext()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNext()"], ["V", "com.google.common.cache.LocalCache$StrongValueReference.get()", "public V get()"], ["int", "com.google.common.cache.LocalCache$StrongValueReference.getWeight()", "public int getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongValueReference.getEntry()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public com.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$StrongValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "com.google.common.cache.LocalCache$StrongValueReference.isActive()", "public boolean isActive()"], ["V", "com.google.common.cache.LocalCache$StrongValueReference.waitForValue()", "public V waitForValue()"], ["void", "com.google.common.cache.LocalCache$StrongValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["long", "com.google.common.cache.LocalCache$StrongWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$StrongWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongWriteEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongWriteEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "com.google.common.cache.LocalCache$ValueIterator.next()", "public V next()"], ["int", "com.google.common.cache.LocalCache$Values.size()", "public int size()"], ["boolean", "com.google.common.cache.LocalCache$Values.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.cache.LocalCache$Values.clear()", "public void clear()"], ["java.util.Iterator<V>", "com.google.common.cache.LocalCache$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "com.google.common.cache.LocalCache$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["long", "com.google.common.cache.LocalCache$WeakAccessEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$WeakAccessEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "com.google.common.cache.LocalCache$WeakEntry.getKey()", "public K getKey()"], ["long", "com.google.common.cache.LocalCache$WeakEntry.getAccessTime()", "public long getAccessTime()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getNextInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getPreviousInAccessQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WeakEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getValueReference()", "public com.google.common.cache.LocalCache$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)", "public void setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "com.google.common.cache.LocalCache$WeakEntry.getHash()", "public int getHash()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getNext()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNext()"], ["int", "com.google.common.cache.LocalCache$WeakValueReference.getWeight()", "public int getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakValueReference.getEntry()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["void", "com.google.common.cache.LocalCache$WeakValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public com.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$WeakValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "com.google.common.cache.LocalCache$WeakValueReference.isActive()", "public boolean isActive()"], ["V", "com.google.common.cache.LocalCache$WeakValueReference.waitForValue()", "public V waitForValue()"], ["long", "com.google.common.cache.LocalCache$WeakWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WeakWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakWriteEntry.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakWriteEntry.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "com.google.common.cache.LocalCache$WeightedSoftValueReference.getWeight()", "public int getWeight()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeightedSoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public com.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "com.google.common.cache.LocalCache$WeightedStrongValueReference.getWeight()", "public int getWeight()"], ["int", "com.google.common.cache.LocalCache$WeightedWeakValueReference.getWeight()", "public int getWeight()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeightedWeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public com.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WriteQueue$1.getWriteTime()", "public long getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WriteQueue$1.setWriteTime(long)", "public void setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue$1.getNextInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WriteQueue$1.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue$1.getPreviousInWriteQueue()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WriteQueue$1.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.offer(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public boolean offer(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue.peek()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> peek()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue.poll()", "public com.google.common.cache.LocalCache$ReferenceEntry<K, V> poll()"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.cache.LocalCache$WriteQueue.size()", "public int size()"], ["void", "com.google.common.cache.LocalCache$WriteQueue.clear()", "public void clear()"], ["java.util.Iterator<com.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "com.google.common.cache.LocalCache$WriteQueue.iterator()", "public java.util.Iterator<com.google.common.cache.LocalCache$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "com.google.common.cache.LocalCache$WriteQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "com.google.common.cache.LocalCache$WriteQueue.poll()", "public java.lang.Object poll()"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["K", "com.google.common.cache.LocalCache$WriteThroughEntry.getKey()", "public K getKey()"], ["V", "com.google.common.cache.LocalCache$WriteThroughEntry.getValue()", "public V getValue()"], ["boolean", "com.google.common.cache.LocalCache$WriteThroughEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.cache.LocalCache$WriteThroughEntry.hashCode()", "public int hashCode()"], ["V", "com.google.common.cache.LocalCache$WriteThroughEntry.setValue(V)", "public V setValue(V)"], ["java.lang.String", "com.google.common.cache.LocalCache$WriteThroughEntry.toString()", "public java.lang.String toString()"], ["void", "com.google.common.cache.LocalCache.cleanUp()", "public void cleanUp()"], ["boolean", "com.google.common.cache.LocalCache.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.cache.LocalCache.size()", "public int size()"], ["V", "com.google.common.cache.LocalCache.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache.getIfPresent(java.lang.Object)", "public V getIfPresent(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.cache.LocalCache.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["void", "com.google.common.cache.LocalCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "com.google.common.cache.LocalCache.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "com.google.common.cache.LocalCache.replace(K, V)", "public V replace(K, V)"], ["void", "com.google.common.cache.LocalCache.clear()", "public void clear()"], ["java.util.Set<K>", "com.google.common.cache.LocalCache.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "com.google.common.cache.LocalCache.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.cache.LocalCache.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["com.google.common.cache.LongAddable", "com.google.common.cache.LongAddables$1.get()", "public com.google.common.cache.LongAddable get()"], ["java.lang.Object", "com.google.common.cache.LongAddables$1.get()", "public java.lang.Object get()"], ["com.google.common.cache.LongAddable", "com.google.common.cache.LongAddables$2.get()", "public com.google.common.cache.LongAddable get()"], ["java.lang.Object", "com.google.common.cache.LongAddables$2.get()", "public java.lang.Object get()"], ["void", "com.google.common.cache.LongAddables$PureJavaLongAddable.increment()", "public void increment()"], ["void", "com.google.common.cache.LongAddables$PureJavaLongAddable.add(long)", "public void add(long)"], ["long", "com.google.common.cache.LongAddables$PureJavaLongAddable.sum()", "public long sum()"], ["com.google.common.cache.LongAddable", "com.google.common.cache.LongAddables.create()", "public static com.google.common.cache.LongAddable create()"], ["com.google.common.cache.LongAdder", "com.google.common.cache.LongAdder()", "public com.google.common.cache.LongAdder()"], ["void", "com.google.common.cache.LongAdder.add(long)", "public void add(long)"], ["void", "com.google.common.cache.LongAdder.increment()", "public void increment()"], ["void", "com.google.common.cache.LongAdder.decrement()", "public void decrement()"], ["long", "com.google.common.cache.LongAdder.sum()", "public long sum()"], ["void", "com.google.common.cache.LongAdder.reset()", "public void reset()"], ["long", "com.google.common.cache.LongAdder.sumThenReset()", "public long sumThenReset()"], ["java.lang.String", "com.google.common.cache.LongAdder.toString()", "public java.lang.String toString()"], ["long", "com.google.common.cache.LongAdder.longValue()", "public long longValue()"], ["int", "com.google.common.cache.LongAdder.intValue()", "public int intValue()"], ["float", "com.google.common.cache.LongAdder.floatValue()", "public float floatValue()"], ["double", "com.google.common.cache.LongAdder.doubleValue()", "public double doubleValue()"], ["com.google.common.cache.RemovalCause[]", "com.google.common.cache.RemovalCause.values()", "public static com.google.common.cache.RemovalCause[] values()"], ["com.google.common.cache.RemovalCause", "com.google.common.cache.RemovalCause.valueOf(java.lang.String)", "public static com.google.common.cache.RemovalCause valueOf(java.lang.String)"], ["void", "com.google.common.cache.RemovalListeners$1$1.run()", "public void run()"], ["void", "com.google.common.cache.RemovalListeners$1.onRemoval(com.google.common.cache.RemovalNotification<K, V>)", "public void onRemoval(com.google.common.cache.RemovalNotification<K, V>)"], ["<K, V> com.google.common.cache.RemovalListener<K, V>", "com.google.common.cache.RemovalListeners.asynchronous(com.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)", "public static <K, V> com.google.common.cache.RemovalListener<K, V> asynchronous(com.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)"], ["com.google.common.cache.RemovalCause", "com.google.common.cache.RemovalNotification.getCause()", "public com.google.common.cache.RemovalCause getCause()"], ["boolean", "com.google.common.cache.RemovalNotification.wasEvicted()", "public boolean wasEvicted()"], ["K", "com.google.common.cache.RemovalNotification.getKey()", "public K getKey()"], ["V", "com.google.common.cache.RemovalNotification.getValue()", "public V getValue()"], ["V", "com.google.common.cache.RemovalNotification.setValue(V)", "public final V setValue(V)"], ["boolean", "com.google.common.cache.RemovalNotification.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.cache.RemovalNotification.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.cache.RemovalNotification.toString()", "public java.lang.String toString()"], ["sun.misc.Unsafe", "com.google.common.cache.Striped64$1.run()", "public sun.misc.Unsafe run() throws java.lang.Exception"], ["java.lang.Object", "com.google.common.cache.Striped64$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["V", "com.google.common.collect.AbstractBiMap$EntrySet$1$1.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractBiMap$EntrySet$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "com.google.common.collect.AbstractBiMap$EntrySet$1.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.AbstractBiMap$EntrySet$1.next()", "public java.lang.Object next()"], ["void", "com.google.common.collect.AbstractBiMap$EntrySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractBiMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "com.google.common.collect.AbstractBiMap$EntrySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.AbstractBiMap$EntrySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Collection", "com.google.common.collect.AbstractBiMap$Inverse.values()", "public java.util.Collection values()"], ["void", "com.google.common.collect.AbstractBiMap$KeySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.AbstractBiMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractBiMap$KeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractBiMap$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Iterator<K>", "com.google.common.collect.AbstractBiMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["java.util.Iterator<V>", "com.google.common.collect.AbstractBiMap$ValueSet.iterator()", "public java.util.Iterator<V> iterator()"], ["java.lang.Object[]", "com.google.common.collect.AbstractBiMap$ValueSet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.AbstractBiMap$ValueSet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "com.google.common.collect.AbstractBiMap$ValueSet.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.AbstractBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.AbstractBiMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.AbstractBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["V", "com.google.common.collect.AbstractBiMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.AbstractBiMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.AbstractBiMap.clear()", "public void clear()"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.AbstractBiMap.inverse()", "public com.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<K>", "com.google.common.collect.AbstractBiMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<V>", "com.google.common.collect.AbstractBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractBiMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Collection", "com.google.common.collect.AbstractBiMap.values()", "public java.util.Collection values()"], ["boolean", "com.google.common.collect.AbstractIndexedListIterator.hasNext()", "public final boolean hasNext()"], ["E", "com.google.common.collect.AbstractIndexedListIterator.next()", "public final E next()"], ["int", "com.google.common.collect.AbstractIndexedListIterator.nextIndex()", "public final int nextIndex()"], ["boolean", "com.google.common.collect.AbstractIndexedListIterator.hasPrevious()", "public final boolean hasPrevious()"], ["E", "com.google.common.collect.AbstractIndexedListIterator.previous()", "public final E previous()"], ["int", "com.google.common.collect.AbstractIndexedListIterator.previousIndex()", "public final int previousIndex()"], ["com.google.common.collect.AbstractIterator$State[]", "com.google.common.collect.AbstractIterator$State.values()", "public static com.google.common.collect.AbstractIterator$State[] values()"], ["com.google.common.collect.AbstractIterator$State", "com.google.common.collect.AbstractIterator$State.valueOf(java.lang.String)", "public static com.google.common.collect.AbstractIterator$State valueOf(java.lang.String)"], ["boolean", "com.google.common.collect.AbstractIterator.hasNext()", "public final boolean hasNext()"], ["T", "com.google.common.collect.AbstractIterator.next()", "public final T next()"], ["T", "com.google.common.collect.AbstractIterator.peek()", "public final T peek()"], ["java.util.List<V>", "com.google.common.collect.AbstractListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.AbstractListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "com.google.common.collect.AbstractListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.AbstractListMultimap.put(K, V)", "public boolean put(K, V)"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractListMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["boolean", "com.google.common.collect.AbstractListMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()", "public java.util.Map$Entry<K, java.util.Collection<V>> next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()", "public java.lang.Object next()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Set<K>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.keySet()", "public java.util.Set<K> keySet()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.size()", "public int size()"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.remove(java.lang.Object)", "public java.util.Collection<V> remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.toString()", "public java.lang.String toString()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.clear()", "public void clear()"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$Itr.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.AbstractMapBasedMultimap$Itr.next()", "public T next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$Itr.remove()", "public void remove()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1.hasNext()", "public boolean hasNext()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1.next()", "public K next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1.remove()", "public void remove()"], ["java.util.Iterator<K>", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> lowerEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> floorEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> ceilingEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> higherEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.firstEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> firstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lastEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> lastEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollFirstEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> pollFirstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollLastEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> pollLastEntry()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.descendingMap()", "public java.util.NavigableMap<K, java.util.Collection<V>> descendingMap()"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, K)", "public java.util.NavigableMap<K, java.util.Collection<V>> subMap(K, K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, java.util.Collection<V>> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K)", "public java.util.NavigableMap<K, java.util.Collection<V>> headMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K, boolean)", "public java.util.NavigableMap<K, java.util.Collection<V>> headMap(K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K)", "public java.util.NavigableMap<K, java.util.Collection<V>> tailMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, java.util.Collection<V>> tailMap(K, boolean)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()", "public java.util.SortedSet keySet()"], ["java.util.SortedMap", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()", "public java.util.Set keySet()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.lower(K)", "public K lower(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.floor(K)", "public K floor(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.ceiling(K)", "public K ceiling(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.higher(K)", "public K higher(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollFirst()", "public K pollFirst()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollLast()", "public K pollLast()"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.descendingSet()", "public java.util.NavigableSet<K> descendingSet()"], ["java.util.Iterator<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.descendingIterator()", "public java.util.Iterator<K> descendingIterator()"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(K)", "public java.util.NavigableSet<K> headSet(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(K, boolean)", "public java.util.NavigableSet<K> headSet(K, boolean)"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(K, K)", "public java.util.NavigableSet<K> subSet(K, K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(K, boolean, K, boolean)", "public java.util.NavigableSet<K> subSet(K, boolean, K, boolean)"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(K)", "public java.util.NavigableSet<K> tailSet(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(K, boolean)", "public java.util.NavigableSet<K> tailSet(K, boolean)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.Comparator<? super K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.firstKey()", "public K firstKey()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.headMap(K)", "public java.util.SortedMap<K, java.util.Collection<V>> headMap(K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.subMap(K, K)", "public java.util.SortedMap<K, java.util.Collection<V>> subMap(K, K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.tailMap(K)", "public java.util.SortedMap<K, java.util.Collection<V>> tailMap(K)"], ["java.util.SortedSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet()", "public java.util.SortedSet<K> keySet()"], ["java.util.Set", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet()", "public java.util.Set keySet()"], ["java.util.Comparator<? super K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.first()", "public K first()"], ["java.util.SortedSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.last()", "public K last()"], ["java.util.SortedSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.hasNext()", "public boolean hasNext()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.next()", "public V next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.remove()", "public void remove()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.size()", "public int size()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.toString()", "public java.lang.String toString()"], ["java.util.Iterator<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.add(V)", "public boolean add(V)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.addAll(java.util.Collection<? extends V>)", "public boolean addAll(java.util.Collection<? extends V>)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.clear()", "public void clear()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator(com.google.common.collect.AbstractMapBasedMultimap$WrappedList, int)", "public com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator(com.google.common.collect.AbstractMapBasedMultimap$WrappedList, int)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.hasPrevious()", "public boolean hasPrevious()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previous()", "public V previous()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.nextIndex()", "public int nextIndex()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previousIndex()", "public int previousIndex()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.set(V)", "public void set(V)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.add(V)", "public void add(V)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.addAll(int, java.util.Collection<? extends V>)", "public boolean addAll(int, java.util.Collection<? extends V>)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.get(int)", "public V get(int)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.set(int, V)", "public V set(int, V)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.add(int, V)", "public void add(int, V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.remove(int)", "public V remove(int)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.listIterator()", "public java.util.ListIterator<V> listIterator()"], ["java.util.ListIterator<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.listIterator(int)", "public java.util.ListIterator<V> listIterator(int)"], ["java.util.List<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.subList(int, int)", "public java.util.List<V> subList(int, int)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.lower(V)", "public V lower(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.floor(V)", "public V floor(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.ceiling(V)", "public V ceiling(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.higher(V)", "public V higher(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollFirst()", "public V pollFirst()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollLast()", "public V pollLast()"], ["java.util.NavigableSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.descendingSet()", "public java.util.NavigableSet<V> descendingSet()"], ["java.util.Iterator<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.descendingIterator()", "public java.util.Iterator<V> descendingIterator()"], ["java.util.NavigableSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.subSet(V, boolean, V, boolean)", "public java.util.NavigableSet<V> subSet(V, boolean, V, boolean)"], ["java.util.NavigableSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.headSet(V, boolean)", "public java.util.NavigableSet<V> headSet(V, boolean)"], ["java.util.NavigableSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.tailSet(V, boolean)", "public java.util.NavigableSet<V> tailSet(V, boolean)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["java.util.Comparator<? super V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.comparator()", "public java.util.Comparator<? super V> comparator()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.first()", "public V first()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.last()", "public V last()"], ["java.util.SortedSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.headSet(V)", "public java.util.SortedSet<V> headSet(V)"], ["java.util.SortedSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.subSet(V, V)", "public java.util.SortedSet<V> subSet(V, V)"], ["java.util.SortedSet<V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.tailSet(V)", "public java.util.SortedSet<V> tailSet(V)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap.size()", "public int size()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap.put(K, V)", "public boolean put(K, V)"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMapBasedMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMapBasedMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap.clear()", "public void clear()"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMapBasedMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMapBasedMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMapBasedMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["E", "com.google.common.collect.AbstractMapBasedMultiset$1$1.getElement()", "public E getElement()"], ["int", "com.google.common.collect.AbstractMapBasedMultiset$1$1.getCount()", "public int getCount()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultiset$1.hasNext()", "public boolean hasNext()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.AbstractMapBasedMultiset$1.next()", "public com.google.common.collect.Multiset$Entry<E> next()"], ["void", "com.google.common.collect.AbstractMapBasedMultiset$1.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultiset$1.next()", "public java.lang.Object next()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.hasNext()", "public boolean hasNext()"], ["E", "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.next()", "public E next()"], ["void", "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.remove()", "public void remove()"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.AbstractMapBasedMultiset.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["void", "com.google.common.collect.AbstractMapBasedMultiset.clear()", "public void clear()"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.size()", "public int size()"], ["java.util.Iterator<E>", "com.google.common.collect.AbstractMapBasedMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.add(E, int)", "public int add(E, int)"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.setCount(E, int)", "public int setCount(E, int)"], ["V", "com.google.common.collect.AbstractMapEntry.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.AbstractMapEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapEntry.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMapEntry.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMultimap$Entries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["int", "com.google.common.collect.AbstractMultimap$EntrySet.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.AbstractMultimap$EntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Iterator<V>", "com.google.common.collect.AbstractMultimap$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "com.google.common.collect.AbstractMultimap$Values.size()", "public int size()"], ["boolean", "com.google.common.collect.AbstractMultimap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "com.google.common.collect.AbstractMultimap$Values.clear()", "public void clear()"], ["boolean", "com.google.common.collect.AbstractMultimap.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.AbstractMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.AbstractMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<K>", "com.google.common.collect.AbstractMultimap.keySet()", "public java.util.Set<K> keySet()"], ["com.google.common.collect.Multiset<K>", "com.google.common.collect.AbstractMultimap.keys()", "public com.google.common.collect.Multiset<K> keys()"], ["java.util.Collection<V>", "com.google.common.collect.AbstractMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["boolean", "com.google.common.collect.AbstractMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultimap.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMultimap.toString()", "public java.lang.String toString()"], ["java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.AbstractMultiset$EntrySet.iterator()", "public java.util.Iterator<com.google.common.collect.Multiset$Entry<E>> iterator()"], ["int", "com.google.common.collect.AbstractMultiset$EntrySet.size()", "public int size()"], ["int", "com.google.common.collect.AbstractMultiset.size()", "public int size()"], ["boolean", "com.google.common.collect.AbstractMultiset.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.AbstractMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<E>", "com.google.common.collect.AbstractMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "com.google.common.collect.AbstractMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultiset.add(E)", "public boolean add(E)"], ["int", "com.google.common.collect.AbstractMultiset.add(E, int)", "public int add(E, int)"], ["boolean", "com.google.common.collect.AbstractMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.AbstractMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "com.google.common.collect.AbstractMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["boolean", "com.google.common.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.AbstractMultiset.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractMultiset.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.AbstractMultiset.clear()", "public void clear()"], ["java.util.Set<E>", "com.google.common.collect.AbstractMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.AbstractMultiset.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["boolean", "com.google.common.collect.AbstractMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultiset.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMultiset.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractNavigableMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["K", "com.google.common.collect.AbstractNavigableMap.firstKey()", "public K firstKey()"], ["K", "com.google.common.collect.AbstractNavigableMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.floorKey(K)", "public K floorKey(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.AbstractNavigableMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.AbstractNavigableMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.AbstractNavigableMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Set<K>", "com.google.common.collect.AbstractNavigableMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractNavigableMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.AbstractNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.AbstractNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["boolean", "com.google.common.collect.AbstractRangeSet.contains(C)", "public boolean contains(C)"], ["boolean", "com.google.common.collect.AbstractRangeSet.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.AbstractRangeSet.add(com.google.common.collect.Range<C>)", "public void add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.remove(com.google.common.collect.Range<C>)", "public void remove(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.AbstractRangeSet.enclosesAll(com.google.common.collect.RangeSet<C>)", "public boolean enclosesAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.addAll(com.google.common.collect.RangeSet<C>)", "public void addAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.removeAll(com.google.common.collect.RangeSet<C>)", "public void removeAll(com.google.common.collect.RangeSet<C>)"], ["boolean", "com.google.common.collect.AbstractRangeSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractRangeSet.hashCode()", "public final int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractRangeSet.toString()", "public final java.lang.String toString()"], ["boolean", "com.google.common.collect.AbstractSequentialIterator.hasNext()", "public final boolean hasNext()"], ["T", "com.google.common.collect.AbstractSequentialIterator.next()", "public final T next()"], ["java.util.Set<V>", "com.google.common.collect.AbstractSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "com.google.common.collect.AbstractSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.AbstractSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractSetMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["boolean", "com.google.common.collect.AbstractSetMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.AbstractSetMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()", "public java.util.SortedMap<K, java.util.Collection<V>> asMap()"], ["java.util.SortedSet<K>", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.keySet()", "public java.util.SortedSet<K> keySet()"], ["java.util.Map", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Set", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Iterator<E>", "com.google.common.collect.AbstractSortedMultiset$1.iterator()", "public java.util.Iterator<E> iterator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.AbstractSortedMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["java.util.Comparator<? super E>", "com.google.common.collect.AbstractSortedMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.AbstractSortedMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.AbstractSortedMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.AbstractSortedMultiset.pollFirstEntry()", "public com.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.AbstractSortedMultiset.pollLastEntry()", "public com.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.AbstractSortedMultiset.subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.AbstractSortedMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["java.util.Set", "com.google.common.collect.AbstractSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "com.google.common.collect.AbstractSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.SortedSet<V>", "com.google.common.collect.AbstractSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "com.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "com.google.common.collect.AbstractSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractSortedSetMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["java.util.Collection<V>", "com.google.common.collect.AbstractSortedSetMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Set", "com.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.AbstractTable$CellSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable$CellSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.AbstractTable$CellSet.clear()", "public void clear()"], ["java.util.Iterator<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.AbstractTable$CellSet.iterator()", "public java.util.Iterator<com.google.common.collect.Table$Cell<R, C, V>> iterator()"], ["int", "com.google.common.collect.AbstractTable$CellSet.size()", "public int size()"], ["java.util.Iterator<V>", "com.google.common.collect.AbstractTable$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "com.google.common.collect.AbstractTable$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "com.google.common.collect.AbstractTable$Values.clear()", "public void clear()"], ["int", "com.google.common.collect.AbstractTable$Values.size()", "public int size()"], ["boolean", "com.google.common.collect.AbstractTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["java.util.Set<R>", "com.google.common.collect.AbstractTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Set<C>", "com.google.common.collect.AbstractTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["boolean", "com.google.common.collect.AbstractTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.AbstractTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.AbstractTable.clear()", "public void clear()"], ["V", "com.google.common.collect.AbstractTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.AbstractTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "com.google.common.collect.AbstractTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.AbstractTable.cellSet()", "public java.util.Set<com.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["java.util.Collection<V>", "com.google.common.collect.AbstractTable.values()", "public java.util.Collection<V> values()"], ["boolean", "com.google.common.collect.AbstractTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractTable.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractTable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.AllEqualOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["<E> java.util.List<E>", "com.google.common.collect.AllEqualOrdering.sortedCopy(java.lang.Iterable<E>)", "public <E> java.util.List<E> sortedCopy(java.lang.Iterable<E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.AllEqualOrdering.immutableSortedCopy(java.lang.Iterable<E>)", "public <E> com.google.common.collect.ImmutableList<E> immutableSortedCopy(java.lang.Iterable<E>)"], ["<S> com.google.common.collect.Ordering<S>", "com.google.common.collect.AllEqualOrdering.reverse()", "public <S> com.google.common.collect.Ordering<S> reverse()"], ["java.lang.String", "com.google.common.collect.AllEqualOrdering.toString()", "public java.lang.String toString()"], ["<K, V> com.google.common.collect.ArrayListMultimap<K, V>", "com.google.common.collect.ArrayListMultimap.create()", "public static <K, V> com.google.common.collect.ArrayListMultimap<K, V> create()"], ["<K, V> com.google.common.collect.ArrayListMultimap<K, V>", "com.google.common.collect.ArrayListMultimap.create(int, int)", "public static <K, V> com.google.common.collect.ArrayListMultimap<K, V> create(int, int)"], ["<K, V> com.google.common.collect.ArrayListMultimap<K, V>", "com.google.common.collect.ArrayListMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ArrayListMultimap<K, V> create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["void", "com.google.common.collect.ArrayListMultimap.trimToSize()", "public void trimToSize()"], ["boolean", "com.google.common.collect.ArrayListMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ArrayListMultimap.asMap()", "public java.util.Map asMap()"], ["boolean", "com.google.common.collect.ArrayListMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.List", "com.google.common.collect.ArrayListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.List replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "com.google.common.collect.ArrayListMultimap.removeAll(java.lang.Object)", "public java.util.List removeAll(java.lang.Object)"], ["java.util.List", "com.google.common.collect.ArrayListMultimap.get(java.lang.Object)", "public java.util.List get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ArrayListMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.ArrayListMultimap.values()", "public java.util.Collection values()"], ["void", "com.google.common.collect.ArrayListMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.ArrayListMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "com.google.common.collect.ArrayListMultimap.size()", "public int size()"], ["java.lang.String", "com.google.common.collect.ArrayListMultimap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.ArrayListMultimap.hashCode()", "public int hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.ArrayListMultimap.keys()", "public com.google.common.collect.Multiset keys()"], ["java.util.Set", "com.google.common.collect.ArrayListMultimap.keySet()", "public java.util.Set keySet()"], ["boolean", "com.google.common.collect.ArrayListMultimap.putAll(com.google.common.collect.Multimap)", "public boolean putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.ArrayListMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.ArrayListMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayListMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayListMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayListMultimap.isEmpty()", "public boolean isEmpty()"], ["R", "com.google.common.collect.ArrayTable$1$1.getRowKey()", "public R getRowKey()"], ["C", "com.google.common.collect.ArrayTable$1$1.getColumnKey()", "public C getColumnKey()"], ["V", "com.google.common.collect.ArrayTable$1$1.getValue()", "public V getValue()"], ["K", "com.google.common.collect.ArrayTable$ArrayMap$1$1$1.getKey()", "public K getKey()"], ["V", "com.google.common.collect.ArrayTable$ArrayMap$1$1$1.getValue()", "public V getValue()"], ["V", "com.google.common.collect.ArrayTable$ArrayMap$1$1$1.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ArrayTable$ArrayMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Set<K>", "com.google.common.collect.ArrayTable$ArrayMap.keySet()", "public java.util.Set<K> keySet()"], ["int", "com.google.common.collect.ArrayTable$ArrayMap.size()", "public int size()"], ["boolean", "com.google.common.collect.ArrayTable$ArrayMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.ArrayTable$ArrayMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable$ArrayMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable$ArrayMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.ArrayTable$ArrayMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.ArrayTable$ArrayMap.clear()", "public void clear()"], ["java.util.Map<R, V>", "com.google.common.collect.ArrayTable$ColumnMap.put(C, java.util.Map<R, V>)", "public java.util.Map<R, V> put(C, java.util.Map<R, V>)"], ["java.lang.Object", "com.google.common.collect.ArrayTable$ColumnMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.ArrayTable$RowMap.put(R, java.util.Map<C, V>)", "public java.util.Map<C, V> put(R, java.util.Map<C, V>)"], ["java.lang.Object", "com.google.common.collect.ArrayTable$RowMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["<R, C, V> com.google.common.collect.ArrayTable<R, C, V>", "com.google.common.collect.ArrayTable.create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)", "public static <R, C, V> com.google.common.collect.ArrayTable<R, C, V> create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)"], ["<R, C, V> com.google.common.collect.ArrayTable<R, C, V>", "com.google.common.collect.ArrayTable.create(com.google.common.collect.Table<R, C, V>)", "public static <R, C, V> com.google.common.collect.ArrayTable<R, C, V> create(com.google.common.collect.Table<R, C, V>)"], ["com.google.common.collect.ImmutableList<R>", "com.google.common.collect.ArrayTable.rowKeyList()", "public com.google.common.collect.ImmutableList<R> rowKeyList()"], ["com.google.common.collect.ImmutableList<C>", "com.google.common.collect.ArrayTable.columnKeyList()", "public com.google.common.collect.ImmutableList<C> columnKeyList()"], ["V", "com.google.common.collect.ArrayTable.at(int, int)", "public V at(int, int)"], ["V", "com.google.common.collect.ArrayTable.set(int, int, V)", "public V set(int, int, V)"], ["V[][]", "com.google.common.collect.ArrayTable.toArray(java.lang.Class<V>)", "public V[][] toArray(java.lang.Class<V>)"], ["void", "com.google.common.collect.ArrayTable.clear()", "public void clear()"], ["void", "com.google.common.collect.ArrayTable.eraseAll()", "public void eraseAll()"], ["boolean", "com.google.common.collect.ArrayTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.isEmpty()", "public boolean isEmpty()"], ["V", "com.google.common.collect.ArrayTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "com.google.common.collect.ArrayTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.ArrayTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)", "public V erase(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.ArrayTable.size()", "public int size()"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.ArrayTable.cellSet()", "public java.util.Set<com.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["java.util.Map<R, V>", "com.google.common.collect.ArrayTable.column(C)", "public java.util.Map<R, V> column(C)"], ["com.google.common.collect.ImmutableSet<C>", "com.google.common.collect.ArrayTable.columnKeySet()", "public com.google.common.collect.ImmutableSet<C> columnKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.ArrayTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["java.util.Map<C, V>", "com.google.common.collect.ArrayTable.row(R)", "public java.util.Map<C, V> row(R)"], ["com.google.common.collect.ImmutableSet<R>", "com.google.common.collect.ArrayTable.rowKeySet()", "public com.google.common.collect.ImmutableSet<R> rowKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.ArrayTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["java.util.Collection<V>", "com.google.common.collect.ArrayTable.values()", "public java.util.Collection<V> values()"], ["java.lang.String", "com.google.common.collect.ArrayTable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.ArrayTable.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.ArrayTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ArrayTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Set", "com.google.common.collect.ArrayTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Iterator<T>", "com.google.common.collect.BinaryTreeTraverser$1.iterator()", "public java.util.Iterator<T> iterator()"], ["com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.BinaryTreeTraverser$2.iterator()", "public com.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "com.google.common.collect.BinaryTreeTraverser$2.iterator()", "public java.util.Iterator iterator()"], ["boolean", "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator.next()", "public T next()"], ["boolean", "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator.next()", "public T next()"], ["T", "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator.peek()", "public T peek()"], ["com.google.common.collect.BinaryTreeTraverser", "com.google.common.collect.BinaryTreeTraverser()", "public com.google.common.collect.BinaryTreeTraverser()"], ["java.lang.Iterable<T>", "com.google.common.collect.BinaryTreeTraverser.children(T)", "public final java.lang.Iterable<T> children(T)"], ["com.google.common.collect.FluentIterable<T>", "com.google.common.collect.BinaryTreeTraverser.inOrderTraversal(T)", "public final com.google.common.collect.FluentIterable<T> inOrderTraversal(T)"], ["com.google.common.collect.BoundType[]", "com.google.common.collect.BoundType.values()", "public static com.google.common.collect.BoundType[] values()"], ["com.google.common.collect.BoundType", "com.google.common.collect.BoundType.valueOf(java.lang.String)", "public static com.google.common.collect.BoundType valueOf(java.lang.String)"], ["int", "com.google.common.collect.ByFunctionOrdering.compare(F, F)", "public int compare(F, F)"], ["boolean", "com.google.common.collect.ByFunctionOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ByFunctionOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.ByFunctionOrdering.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.CartesianList$1.size()", "public int size()"], ["E", "com.google.common.collect.CartesianList$1.get(int)", "public E get(int)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.CartesianList.get(int)", "public com.google.common.collect.ImmutableList<E> get(int)"], ["int", "com.google.common.collect.CartesianList.size()", "public int size()"], ["boolean", "com.google.common.collect.CartesianList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.CartesianList.get(int)", "public java.lang.Object get(int)"], ["java.lang.Object", "com.google.common.collect.Collections2$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["void", "com.google.common.collect.Collections2$FilteredCollection.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "com.google.common.collect.Collections2$FilteredCollection.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.Collections2$FilteredCollection.size()", "public int size()"], ["java.lang.Object[]", "com.google.common.collect.Collections2$FilteredCollection.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Collections2$FilteredCollection.toArray(T[])", "public <T> T[] toArray(T[])"], ["int", "com.google.common.collect.Collections2$OrderedPermutationCollection.size()", "public int size()"], ["boolean", "com.google.common.collect.Collections2$OrderedPermutationCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.List<E>>", "com.google.common.collect.Collections2$OrderedPermutationCollection.iterator()", "public java.util.Iterator<java.util.List<E>> iterator()"], ["boolean", "com.google.common.collect.Collections2$OrderedPermutationCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Collections2$OrderedPermutationCollection.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Collections2$PermutationCollection.size()", "public int size()"], ["boolean", "com.google.common.collect.Collections2$PermutationCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.List<E>>", "com.google.common.collect.Collections2$PermutationCollection.iterator()", "public java.util.Iterator<java.util.List<E>> iterator()"], ["boolean", "com.google.common.collect.Collections2$PermutationCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Collections2$PermutationCollection.toString()", "public java.lang.String toString()"], ["void", "com.google.common.collect.Collections2$TransformedCollection.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Collections2$TransformedCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<T>", "com.google.common.collect.Collections2$TransformedCollection.iterator()", "public java.util.Iterator<T> iterator()"], ["int", "com.google.common.collect.Collections2$TransformedCollection.size()", "public int size()"], ["<E> java.util.Collection<E>", "com.google.common.collect.Collections2.filter(java.util.Collection<E>, com.google.common.base.Predicate<? super E>)", "public static <E> java.util.Collection<E> filter(java.util.Collection<E>, com.google.common.base.Predicate<? super E>)"], ["<F, T> java.util.Collection<T>", "com.google.common.collect.Collections2.transform(java.util.Collection<F>, com.google.common.base.Function<? super F, T>)", "public static <F, T> java.util.Collection<T> transform(java.util.Collection<F>, com.google.common.base.Function<? super F, T>)"], ["<E extends java.lang.Comparable<? super E>> java.util.Collection<java.util.List<E>>", "com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>)", "public static <E extends java.lang.Comparable<? super E>> java.util.Collection<java.util.List<E>> orderedPermutations(java.lang.Iterable<E>)"], ["<E> java.util.Collection<java.util.List<E>>", "com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)", "public static <E> java.util.Collection<java.util.List<E>> orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)"], ["<E> java.util.Collection<java.util.List<E>>", "com.google.common.collect.Collections2.permutations(java.util.Collection<E>)", "public static <E> java.util.Collection<java.util.List<E>> permutations(java.util.Collection<E>)"], ["int", "com.google.common.collect.ComparatorOrdering.compare(T, T)", "public int compare(T, T)"], ["boolean", "com.google.common.collect.ComparatorOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ComparatorOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.ComparatorOrdering.toString()", "public java.lang.String toString()"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(java.lang.Comparable, java.lang.Comparable)", "public com.google.common.collect.ComparisonChain compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(T, T, java.util.Comparator<T>)", "public <T> com.google.common.collect.ComparisonChain compare(T, T, java.util.Comparator<T>)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(int, int)", "public com.google.common.collect.ComparisonChain compare(int, int)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(long, long)", "public com.google.common.collect.ComparisonChain compare(long, long)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(float, float)", "public com.google.common.collect.ComparisonChain compare(float, float)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(double, double)", "public com.google.common.collect.ComparisonChain compare(double, double)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compareTrueFirst(boolean, boolean)", "public com.google.common.collect.ComparisonChain compareTrueFirst(boolean, boolean)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compareFalseFirst(boolean, boolean)", "public com.google.common.collect.ComparisonChain compareFalseFirst(boolean, boolean)"], ["int", "com.google.common.collect.ComparisonChain$1.result()", "public int result()"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(java.lang.Comparable, java.lang.Comparable)", "public com.google.common.collect.ComparisonChain compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(T, T, java.util.Comparator<T>)", "public <T> com.google.common.collect.ComparisonChain compare(T, T, java.util.Comparator<T>)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(int, int)", "public com.google.common.collect.ComparisonChain compare(int, int)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(long, long)", "public com.google.common.collect.ComparisonChain compare(long, long)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(float, float)", "public com.google.common.collect.ComparisonChain compare(float, float)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(double, double)", "public com.google.common.collect.ComparisonChain compare(double, double)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compareTrueFirst(boolean, boolean)", "public com.google.common.collect.ComparisonChain compareTrueFirst(boolean, boolean)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compareFalseFirst(boolean, boolean)", "public com.google.common.collect.ComparisonChain compareFalseFirst(boolean, boolean)"], ["int", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.result()", "public int result()"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain.start()", "public static com.google.common.collect.ComparisonChain start()"], ["int", "com.google.common.collect.CompoundOrdering.compare(T, T)", "public int compare(T, T)"], ["boolean", "com.google.common.collect.CompoundOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.CompoundOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.CompoundOrdering.toString()", "public java.lang.String toString()"], ["com.google.common.collect.ComputationException", "com.google.common.collect.ComputationException(java.lang.Throwable)", "public com.google.common.collect.ComputationException(java.lang.Throwable)"], ["V", "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.get()", "public V get()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.waitForValue()", "public V waitForValue() throws java.util.concurrent.ExecutionException"], ["void", "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["V", "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference.get()", "public V get()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference.waitForValue()", "public V waitForValue()"], ["void", "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference(com.google.common.base.Function<? super K, ? extends V>)", "public com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference(com.google.common.base.Function<? super K, ? extends V>)"], ["V", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.get()", "public V get()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.waitForValue()", "public V waitForValue() throws java.util.concurrent.ExecutionException"], ["void", "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ConcurrentHashMultiset$3.next()", "public com.google.common.collect.Multiset$Entry<E> next()"], ["void", "com.google.common.collect.ConcurrentHashMultiset$3.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.ConcurrentHashMultiset$3.next()", "public java.lang.Object next()"], ["java.lang.Object[]", "com.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["<E> com.google.common.collect.ConcurrentHashMultiset<E>", "com.google.common.collect.ConcurrentHashMultiset.create()", "public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create()"], ["<E> com.google.common.collect.ConcurrentHashMultiset<E>", "com.google.common.collect.ConcurrentHashMultiset.create(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ConcurrentHashMultiset<E>", "com.google.common.collect.ConcurrentHashMultiset.create(com.google.common.collect.MapMaker)", "public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(com.google.common.collect.MapMaker)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.size()", "public int size()"], ["java.lang.Object[]", "com.google.common.collect.ConcurrentHashMultiset.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.ConcurrentHashMultiset.toArray(T[])", "public <T> T[] toArray(T[])"], ["int", "com.google.common.collect.ConcurrentHashMultiset.add(E, int)", "public int add(E, int)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object, int)", "public boolean removeExactly(java.lang.Object, int)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.ConcurrentHashMultiset.createEntrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> createEntrySet()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.ConcurrentHashMultiset.clear()", "public void clear()"], ["java.lang.String", "com.google.common.collect.ConcurrentHashMultiset.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.ConcurrentHashMultiset.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ConcurrentHashMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "com.google.common.collect.ConcurrentHashMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.ConcurrentHashMultiset.iterator()", "public java.util.Iterator iterator()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["com.google.common.collect.Constraints$ConstrainedCollection", "com.google.common.collect.Constraints$ConstrainedCollection(java.util.Collection<E>, com.google.common.collect.Constraint<? super E>)", "public com.google.common.collect.Constraints$ConstrainedCollection(java.util.Collection<E>, com.google.common.collect.Constraint<? super E>)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedCollection.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedList.add(E)", "public boolean add(E)"], ["void", "com.google.common.collect.Constraints$ConstrainedList.add(int, E)", "public void add(int, E)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedList.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedList.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["java.util.ListIterator<E>", "com.google.common.collect.Constraints$ConstrainedList.listIterator()", "public java.util.ListIterator<E> listIterator()"], ["java.util.ListIterator<E>", "com.google.common.collect.Constraints$ConstrainedList.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["E", "com.google.common.collect.Constraints$ConstrainedList.set(int, E)", "public E set(int, E)"], ["java.util.List<E>", "com.google.common.collect.Constraints$ConstrainedList.subList(int, int)", "public java.util.List<E> subList(int, int)"], ["com.google.common.collect.Constraints$ConstrainedListIterator", "com.google.common.collect.Constraints$ConstrainedListIterator(java.util.ListIterator<E>, com.google.common.collect.Constraint<? super E>)", "public com.google.common.collect.Constraints$ConstrainedListIterator(java.util.ListIterator<E>, com.google.common.collect.Constraint<? super E>)"], ["void", "com.google.common.collect.Constraints$ConstrainedListIterator.add(E)", "public void add(E)"], ["void", "com.google.common.collect.Constraints$ConstrainedListIterator.set(E)", "public void set(E)"], ["com.google.common.collect.Constraints$ConstrainedSet", "com.google.common.collect.Constraints$ConstrainedSet(java.util.Set<E>, com.google.common.collect.Constraint<? super E>)", "public com.google.common.collect.Constraints$ConstrainedSet(java.util.Set<E>, com.google.common.collect.Constraint<? super E>)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedSet.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedSet.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["java.util.SortedSet<E>", "com.google.common.collect.Constraints$ConstrainedSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Constraints$ConstrainedSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Constraints$ConstrainedSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedSortedSet.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Constraints$ConstrainedSortedSet.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["<E> java.util.Collection<E>", "com.google.common.collect.Constraints.constrainedCollection(java.util.Collection<E>, com.google.common.collect.Constraint<? super E>)", "public static <E> java.util.Collection<E> constrainedCollection(java.util.Collection<E>, com.google.common.collect.Constraint<? super E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Constraints.constrainedSet(java.util.Set<E>, com.google.common.collect.Constraint<? super E>)", "public static <E> java.util.Set<E> constrainedSet(java.util.Set<E>, com.google.common.collect.Constraint<? super E>)"], ["<E> java.util.SortedSet<E>", "com.google.common.collect.Constraints.constrainedSortedSet(java.util.SortedSet<E>, com.google.common.collect.Constraint<? super E>)", "public static <E> java.util.SortedSet<E> constrainedSortedSet(java.util.SortedSet<E>, com.google.common.collect.Constraint<? super E>)"], ["<E> java.util.List<E>", "com.google.common.collect.Constraints.constrainedList(java.util.List<E>, com.google.common.collect.Constraint<? super E>)", "public static <E> java.util.List<E> constrainedList(java.util.List<E>, com.google.common.collect.Constraint<? super E>)"], ["<C extends java.lang.Comparable> com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.create(com.google.common.collect.Range<C>, com.google.common.collect.DiscreteDomain<C>)", "public static <C extends java.lang.Comparable> com.google.common.collect.ContiguousSet<C> create(com.google.common.collect.Range<C>, com.google.common.collect.DiscreteDomain<C>)"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.headSet(C)", "public com.google.common.collect.ContiguousSet<C> headSet(C)"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.headSet(C, boolean)", "public com.google.common.collect.ContiguousSet<C> headSet(C, boolean)"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.subSet(C, C)", "public com.google.common.collect.ContiguousSet<C> subSet(C, C)"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.subSet(C, boolean, C, boolean)", "public com.google.common.collect.ContiguousSet<C> subSet(C, boolean, C, boolean)"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.tailSet(C)", "public com.google.common.collect.ContiguousSet<C> tailSet(C)"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.tailSet(C, boolean)", "public com.google.common.collect.ContiguousSet<C> tailSet(C, boolean)"], ["java.lang.String", "com.google.common.collect.ContiguousSet.toString()", "public java.lang.String toString()"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ContiguousSet.builder()", "public static <E> com.google.common.collect.ImmutableSortedSet$Builder<E> builder()"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)", "public com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object, boolean)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object)", "public com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)", "public com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)", "public com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)", "public com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object, boolean)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object)", "public com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)", "public java.util.NavigableSet tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)", "public java.util.NavigableSet headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["int", "com.google.common.collect.Count.get()", "public int get()"], ["int", "com.google.common.collect.Count.getAndAdd(int)", "public int getAndAdd(int)"], ["int", "com.google.common.collect.Count.addAndGet(int)", "public int addAndGet(int)"], ["void", "com.google.common.collect.Count.set(int)", "public void set(int)"], ["int", "com.google.common.collect.Count.getAndSet(int)", "public int getAndSet(int)"], ["int", "com.google.common.collect.Count.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.Count.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Count.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Cut$AboveAll.compareTo(com.google.common.collect.Cut<java.lang.Comparable<?>>)", "public int compareTo(com.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["java.lang.String", "com.google.common.collect.Cut$AboveAll.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Cut$AboveAll.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut$AboveValue.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Cut$AboveValue.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Cut$AboveValue.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut$BelowAll.compareTo(com.google.common.collect.Cut<java.lang.Comparable<?>>)", "public int compareTo(com.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["java.lang.String", "com.google.common.collect.Cut$BelowAll.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Cut$BelowAll.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut$BelowValue.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Cut$BelowValue.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Cut$BelowValue.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut<C>)", "public int compareTo(com.google.common.collect.Cut<C>)"], ["boolean", "com.google.common.collect.Cut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Cut.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.size()", "public int size()"], ["V", "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "com.google.common.collect.DenseImmutableTable.columnMap()", "public com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap()"], ["com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "com.google.common.collect.DenseImmutableTable.rowMap()", "public com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap()"], ["V", "com.google.common.collect.DenseImmutableTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.DenseImmutableTable.size()", "public int size()"], ["java.util.Map", "com.google.common.collect.DenseImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "com.google.common.collect.DenseImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["int", "com.google.common.collect.DescendingImmutableSortedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.DescendingImmutableSortedMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.DescendingImmutableSortedMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["int", "com.google.common.collect.DescendingImmutableSortedMultiset.size()", "public int size()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public com.google.common.collect.ImmutableSortedSet<E> elementSet()"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.DescendingImmutableSortedMultiset.descendingMultiset()", "public com.google.common.collect.ImmutableSortedMultiset<E> descendingMultiset()"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.DescendingImmutableSortedMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.DescendingImmutableSortedMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.DescendingImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.DescendingImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.DescendingImmutableSortedMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset descendingMultiset()"], ["java.util.NavigableSet", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Set", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["int", "com.google.common.collect.DescendingImmutableSortedSet.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.DescendingImmutableSortedSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.DescendingImmutableSortedSet.descendingSet()", "public com.google.common.collect.ImmutableSortedSet<E> descendingSet()"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.DescendingImmutableSortedSet.descendingIterator()", "public com.google.common.collect.UnmodifiableIterator<E> descendingIterator()"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.higher(E)", "public E higher(E)"], ["java.util.Iterator", "com.google.common.collect.DescendingImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.NavigableSet", "com.google.common.collect.DescendingImmutableSortedSet.descendingSet()", "public java.util.NavigableSet descendingSet()"], ["java.util.Iterator", "com.google.common.collect.DescendingImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["java.util.Iterator<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.DescendingMultiset$1.iterator()", "public java.util.Iterator<com.google.common.collect.Multiset$Entry<E>> iterator()"], ["int", "com.google.common.collect.DescendingMultiset$1.size()", "public int size()"], ["java.util.Comparator<? super E>", "com.google.common.collect.DescendingMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.DescendingMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.DescendingMultiset.pollFirstEntry()", "public com.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.DescendingMultiset.pollLastEntry()", "public com.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.DescendingMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.DescendingMultiset.subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.DescendingMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.DescendingMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.DescendingMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.DescendingMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.DescendingMultiset.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["java.util.Iterator<E>", "com.google.common.collect.DescendingMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["java.lang.Object[]", "com.google.common.collect.DescendingMultiset.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.DescendingMultiset.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "com.google.common.collect.DescendingMultiset.toString()", "public java.lang.String toString()"], ["java.util.Set", "com.google.common.collect.DescendingMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "com.google.common.collect.DescendingMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.math.BigInteger", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.math.BigInteger)", "public java.math.BigInteger next(java.math.BigInteger)"], ["java.math.BigInteger", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.math.BigInteger)", "public java.math.BigInteger previous(java.math.BigInteger)"], ["long", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.math.BigInteger, java.math.BigInteger)", "public long distance(java.math.BigInteger, java.math.BigInteger)"], ["java.lang.String", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.toString()", "public java.lang.String toString()"], ["long", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)", "public long distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.lang.Comparable)", "public java.lang.Comparable previous(java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.lang.Comparable)", "public java.lang.Comparable next(java.lang.Comparable)"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Integer)", "public java.lang.Integer next(java.lang.Integer)"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Integer)", "public java.lang.Integer previous(java.lang.Integer)"], ["long", "com.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Integer, java.lang.Integer)", "public long distance(java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.minValue()", "public java.lang.Integer minValue()"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()", "public java.lang.Integer maxValue()"], ["java.lang.String", "com.google.common.collect.DiscreteDomain$IntegerDomain.toString()", "public java.lang.String toString()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()", "public java.lang.Comparable maxValue()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.minValue()", "public java.lang.Comparable minValue()"], ["long", "com.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)", "public long distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Comparable)", "public java.lang.Comparable previous(java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Comparable)", "public java.lang.Comparable next(java.lang.Comparable)"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Long)", "public java.lang.Long next(java.lang.Long)"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Long)", "public java.lang.Long previous(java.lang.Long)"], ["long", "com.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Long, java.lang.Long)", "public long distance(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.minValue()", "public java.lang.Long minValue()"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.maxValue()", "public java.lang.Long maxValue()"], ["java.lang.String", "com.google.common.collect.DiscreteDomain$LongDomain.toString()", "public java.lang.String toString()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.maxValue()", "public java.lang.Comparable maxValue()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.minValue()", "public java.lang.Comparable minValue()"], ["long", "com.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Comparable, java.lang.Comparable)", "public long distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Comparable)", "public java.lang.Comparable previous(java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Comparable)", "public java.lang.Comparable next(java.lang.Comparable)"], ["com.google.common.collect.DiscreteDomain<java.lang.Integer>", "com.google.common.collect.DiscreteDomain.integers()", "public static com.google.common.collect.DiscreteDomain<java.lang.Integer> integers()"], ["com.google.common.collect.DiscreteDomain<java.lang.Long>", "com.google.common.collect.DiscreteDomain.longs()", "public static com.google.common.collect.DiscreteDomain<java.lang.Long> longs()"], ["com.google.common.collect.DiscreteDomain<java.math.BigInteger>", "com.google.common.collect.DiscreteDomain.bigIntegers()", "public static com.google.common.collect.DiscreteDomain<java.math.BigInteger> bigIntegers()"], ["C", "com.google.common.collect.DiscreteDomain.minValue()", "public C minValue()"], ["C", "com.google.common.collect.DiscreteDomain.maxValue()", "public C maxValue()"], ["C", "com.google.common.collect.EmptyContiguousSet.first()", "public C first()"], ["C", "com.google.common.collect.EmptyContiguousSet.last()", "public C last()"], ["int", "com.google.common.collect.EmptyContiguousSet.size()", "public int size()"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.EmptyContiguousSet.intersection(com.google.common.collect.ContiguousSet<C>)", "public com.google.common.collect.ContiguousSet<C> intersection(com.google.common.collect.ContiguousSet<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.EmptyContiguousSet.range()", "public com.google.common.collect.Range<C> range()"], ["com.google.common.collect.Range<C>", "com.google.common.collect.EmptyContiguousSet.range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)", "public com.google.common.collect.Range<C> range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)"], ["com.google.common.collect.UnmodifiableIterator<C>", "com.google.common.collect.EmptyContiguousSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<C> iterator()"], ["com.google.common.collect.UnmodifiableIterator<C>", "com.google.common.collect.EmptyContiguousSet.descendingIterator()", "public com.google.common.collect.UnmodifiableIterator<C> descendingIterator()"], ["boolean", "com.google.common.collect.EmptyContiguousSet.isEmpty()", "public boolean isEmpty()"], ["com.google.common.collect.ImmutableList<C>", "com.google.common.collect.EmptyContiguousSet.asList()", "public com.google.common.collect.ImmutableList<C> asList()"], ["java.lang.String", "com.google.common.collect.EmptyContiguousSet.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.EmptyContiguousSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.EmptyContiguousSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "com.google.common.collect.EmptyContiguousSet.last()", "public java.lang.Object last()"], ["java.lang.Object", "com.google.common.collect.EmptyContiguousSet.first()", "public java.lang.Object first()"], ["java.util.Iterator", "com.google.common.collect.EmptyContiguousSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.EmptyContiguousSet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableBiMap<java.lang.Object, java.lang.Object>", "com.google.common.collect.EmptyImmutableBiMap.inverse()", "public com.google.common.collect.ImmutableBiMap<java.lang.Object, java.lang.Object> inverse()"], ["int", "com.google.common.collect.EmptyImmutableBiMap.size()", "public int size()"], ["boolean", "com.google.common.collect.EmptyImmutableBiMap.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "com.google.common.collect.EmptyImmutableBiMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<java.lang.Object, java.lang.Object>>", "com.google.common.collect.EmptyImmutableBiMap.entrySet()", "public com.google.common.collect.ImmutableSet<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet()"], ["com.google.common.collect.ImmutableSetMultimap<java.lang.Object, java.lang.Object>", "com.google.common.collect.EmptyImmutableBiMap.asMultimap()", "public com.google.common.collect.ImmutableSetMultimap<java.lang.Object, java.lang.Object> asMultimap()"], ["com.google.common.collect.ImmutableSet<java.lang.Object>", "com.google.common.collect.EmptyImmutableBiMap.keySet()", "public com.google.common.collect.ImmutableSet<java.lang.Object> keySet()"], ["com.google.common.collect.BiMap", "com.google.common.collect.EmptyImmutableBiMap.inverse()", "public com.google.common.collect.BiMap inverse()"], ["java.util.Set", "com.google.common.collect.EmptyImmutableBiMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "com.google.common.collect.EmptyImmutableBiMap.keySet()", "public java.util.Set keySet()"], ["int", "com.google.common.collect.EmptyImmutableSet.size()", "public int size()"], ["boolean", "com.google.common.collect.EmptyImmutableSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.EmptyImmutableSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EmptyImmutableSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["com.google.common.collect.UnmodifiableIterator<java.lang.Object>", "com.google.common.collect.EmptyImmutableSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.lang.Object> iterator()"], ["com.google.common.collect.ImmutableList<java.lang.Object>", "com.google.common.collect.EmptyImmutableSet.asList()", "public com.google.common.collect.ImmutableList<java.lang.Object> asList()"], ["boolean", "com.google.common.collect.EmptyImmutableSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.EmptyImmutableSet.hashCode()", "public final int hashCode()"], ["java.lang.String", "com.google.common.collect.EmptyImmutableSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "com.google.common.collect.EmptyImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["V", "com.google.common.collect.EmptyImmutableSortedMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet<K>", "com.google.common.collect.EmptyImmutableSortedMap.keySet()", "public com.google.common.collect.ImmutableSortedSet<K> keySet()"], ["int", "com.google.common.collect.EmptyImmutableSortedMap.size()", "public int size()"], ["boolean", "com.google.common.collect.EmptyImmutableSortedMap.isEmpty()", "public boolean isEmpty()"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.EmptyImmutableSortedMap.values()", "public com.google.common.collect.ImmutableCollection<V> values()"], ["java.lang.String", "com.google.common.collect.EmptyImmutableSortedMap.toString()", "public java.lang.String toString()"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.EmptyImmutableSortedMap.entrySet()", "public com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entrySet()"], ["com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.EmptyImmutableSortedMap.asMultimap()", "public com.google.common.collect.ImmutableSetMultimap<K, V> asMultimap()"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.EmptyImmutableSortedMap.headMap(K, boolean)", "public com.google.common.collect.ImmutableSortedMap<K, V> headMap(K, boolean)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.EmptyImmutableSortedMap.tailMap(K, boolean)", "public com.google.common.collect.ImmutableSortedMap<K, V> tailMap(K, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.EmptyImmutableSortedMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.EmptyImmutableSortedMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.Set", "com.google.common.collect.EmptyImmutableSortedMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "com.google.common.collect.EmptyImmutableSortedMap.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.EmptyImmutableSortedMap.keySet()", "public java.util.Set keySet()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.EmptyImmutableSortedMap.keySet()", "public com.google.common.collect.ImmutableSet keySet()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["int", "com.google.common.collect.EmptyImmutableSortedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["boolean", "com.google.common.collect.EmptyImmutableSortedMultiset.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.EmptyImmutableSortedMultiset.size()", "public int size()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public com.google.common.collect.ImmutableSortedSet<E> elementSet()"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["boolean", "com.google.common.collect.EmptyImmutableSortedMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.EmptyImmutableSortedMultiset.asList()", "public com.google.common.collect.ImmutableList<E> asList()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.EmptyImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.EmptyImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["java.util.Iterator", "com.google.common.collect.EmptyImmutableSortedMultiset.iterator()", "public java.util.Iterator iterator()"], ["java.util.NavigableSet", "com.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "com.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Set", "com.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["int", "com.google.common.collect.EmptyImmutableSortedSet.size()", "public int size()"], ["boolean", "com.google.common.collect.EmptyImmutableSortedSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.EmptyImmutableSortedSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EmptyImmutableSortedSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.EmptyImmutableSortedSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.EmptyImmutableSortedSet.descendingIterator()", "public com.google.common.collect.UnmodifiableIterator<E> descendingIterator()"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.EmptyImmutableSortedSet.asList()", "public com.google.common.collect.ImmutableList<E> asList()"], ["boolean", "com.google.common.collect.EmptyImmutableSortedSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.EmptyImmutableSortedSet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.EmptyImmutableSortedSet.toString()", "public java.lang.String toString()"], ["E", "com.google.common.collect.EmptyImmutableSortedSet.first()", "public E first()"], ["E", "com.google.common.collect.EmptyImmutableSortedSet.last()", "public E last()"], ["java.util.Iterator", "com.google.common.collect.EmptyImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.EmptyImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> com.google.common.collect.EnumBiMap<K, V>", "com.google.common.collect.EnumBiMap.create(java.lang.Class<K>, java.lang.Class<V>)", "public static <K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> com.google.common.collect.EnumBiMap<K, V> create(java.lang.Class<K>, java.lang.Class<V>)"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> com.google.common.collect.EnumBiMap<K, V>", "com.google.common.collect.EnumBiMap.create(java.util.Map<K, V>)", "public static <K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> com.google.common.collect.EnumBiMap<K, V> create(java.util.Map<K, V>)"], ["java.lang.Class<K>", "com.google.common.collect.EnumBiMap.keyType()", "public java.lang.Class<K> keyType()"], ["java.lang.Class<V>", "com.google.common.collect.EnumBiMap.valueType()", "public java.lang.Class<V> valueType()"], ["java.util.Set", "com.google.common.collect.EnumBiMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "com.google.common.collect.EnumBiMap.values()", "public java.util.Set values()"], ["java.util.Set", "com.google.common.collect.EnumBiMap.keySet()", "public java.util.Set keySet()"], ["com.google.common.collect.BiMap", "com.google.common.collect.EnumBiMap.inverse()", "public com.google.common.collect.BiMap inverse()"], ["void", "com.google.common.collect.EnumBiMap.clear()", "public void clear()"], ["void", "com.google.common.collect.EnumBiMap.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["boolean", "com.google.common.collect.EnumBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["<K extends java.lang.Enum<K>, V> com.google.common.collect.EnumHashBiMap<K, V>", "com.google.common.collect.EnumHashBiMap.create(java.lang.Class<K>)", "public static <K extends java.lang.Enum<K>, V> com.google.common.collect.EnumHashBiMap<K, V> create(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> com.google.common.collect.EnumHashBiMap<K, V>", "com.google.common.collect.EnumHashBiMap.create(java.util.Map<K, ? extends V>)", "public static <K extends java.lang.Enum<K>, V> com.google.common.collect.EnumHashBiMap<K, V> create(java.util.Map<K, ? extends V>)"], ["V", "com.google.common.collect.EnumHashBiMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.EnumHashBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["java.lang.Class<K>", "com.google.common.collect.EnumHashBiMap.keyType()", "public java.lang.Class<K> keyType()"], ["java.util.Set", "com.google.common.collect.EnumHashBiMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "com.google.common.collect.EnumHashBiMap.values()", "public java.util.Set values()"], ["java.util.Set", "com.google.common.collect.EnumHashBiMap.keySet()", "public java.util.Set keySet()"], ["com.google.common.collect.BiMap", "com.google.common.collect.EnumHashBiMap.inverse()", "public com.google.common.collect.BiMap inverse()"], ["void", "com.google.common.collect.EnumHashBiMap.clear()", "public void clear()"], ["void", "com.google.common.collect.EnumHashBiMap.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.lang.Object", "com.google.common.collect.EnumHashBiMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.EnumHashBiMap.forcePut(java.lang.Object, java.lang.Object)", "public java.lang.Object forcePut(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.EnumHashBiMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.EnumHashBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E>", "com.google.common.collect.EnumMultiset.create(java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E> create(java.lang.Class<E>)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E>", "com.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>)", "public static <E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E> create(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E>", "com.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>, java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E> create(java.lang.Iterable<E>, java.lang.Class<E>)"], ["int", "com.google.common.collect.EnumMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.EnumMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.EnumMultiset.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.EnumMultiset.size()", "public int size()"], ["void", "com.google.common.collect.EnumMultiset.clear()", "public void clear()"], ["java.util.Set", "com.google.common.collect.EnumMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.lang.String", "com.google.common.collect.EnumMultiset.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.EnumMultiset.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.EnumMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.EnumMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "com.google.common.collect.EnumMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.EnumMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.EnumMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.EnumMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.EnumMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EnumMultiset.isEmpty()", "public boolean isEmpty()"], ["<E> com.google.common.collect.EvictingQueue<E>", "com.google.common.collect.EvictingQueue.create(int)", "public static <E> com.google.common.collect.EvictingQueue<E> create(int)"], ["int", "com.google.common.collect.EvictingQueue.remainingCapacity()", "public int remainingCapacity()"], ["boolean", "com.google.common.collect.EvictingQueue.offer(E)", "public boolean offer(E)"], ["boolean", "com.google.common.collect.EvictingQueue.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.EvictingQueue.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.EvictingQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EvictingQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "com.google.common.collect.ExplicitOrdering.compare(T, T)", "public int compare(T, T)"], ["boolean", "com.google.common.collect.ExplicitOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ExplicitOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.ExplicitOrdering.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.FilteredEntryMultimap$AsMap$2.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$2.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$2.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.FilteredEntryMultimap$AsMap$2.size()", "public int size()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$3.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$3.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$3.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["void", "com.google.common.collect.FilteredEntryMultimap$AsMap.clear()", "public void clear()"], ["java.util.Collection<V>", "com.google.common.collect.FilteredEntryMultimap$AsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object)", "public java.util.Collection<V> remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.FilteredEntryMultimap$AsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.util.Map$Entry<K, java.util.Collection<V>>)", "public boolean apply(java.util.Map$Entry<K, java.util.Collection<V>>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.util.Iterator<com.google.common.collect.Multiset$Entry<K>>", "com.google.common.collect.FilteredEntryMultimap$Keys$1.iterator()", "public java.util.Iterator<com.google.common.collect.Multiset$Entry<K>> iterator()"], ["int", "com.google.common.collect.FilteredEntryMultimap$Keys$1.size()", "public int size()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.FilteredEntryMultimap$Keys.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["java.util.Set<com.google.common.collect.Multiset$Entry<K>>", "com.google.common.collect.FilteredEntryMultimap$Keys.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<K>> entrySet()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$ValuePredicate.apply(V)", "public boolean apply(V)"], ["com.google.common.collect.Multimap<K, V>", "com.google.common.collect.FilteredEntryMultimap.unfiltered()", "public com.google.common.collect.Multimap<K, V> unfiltered()"], ["com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredEntryMultimap.entryPredicate()", "public com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>> entryPredicate()"], ["int", "com.google.common.collect.FilteredEntryMultimap.size()", "public int size()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.FilteredEntryMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "com.google.common.collect.FilteredEntryMultimap.clear()", "public void clear()"], ["java.util.Collection<V>", "com.google.common.collect.FilteredEntryMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["java.util.Set<K>", "com.google.common.collect.FilteredEntryMultimap.keySet()", "public java.util.Set<K> keySet()"], ["com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.FilteredEntrySetMultimap.unfiltered()", "public com.google.common.collect.SetMultimap<K, V> unfiltered()"], ["java.util.Set<V>", "com.google.common.collect.FilteredEntrySetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "com.google.common.collect.FilteredEntrySetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.FilteredEntrySetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredEntrySetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.FilteredEntrySetMultimap.unfiltered()", "public com.google.common.collect.Multimap unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.FilteredKeyListMultimap.unfiltered()", "public com.google.common.collect.ListMultimap<K, V> unfiltered()"], ["java.util.List<V>", "com.google.common.collect.FilteredKeyListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.FilteredKeyListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "com.google.common.collect.FilteredKeyListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.FilteredKeyListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.FilteredKeyListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.FilteredKeyListMultimap.unfiltered()", "public com.google.common.collect.Multimap unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredKeyListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(V)", "public boolean add(V)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(java.util.Collection<? extends V>)", "public boolean addAll(java.util.Collection<? extends V>)"], ["void", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(int, V)", "public void add(int, V)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(int, java.util.Collection<? extends V>)", "public boolean addAll(int, java.util.Collection<? extends V>)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet.add(V)", "public boolean add(V)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet.addAll(java.util.Collection<? extends V>)", "public boolean addAll(java.util.Collection<? extends V>)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$Entries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["com.google.common.collect.Multimap<K, V>", "com.google.common.collect.FilteredKeyMultimap.unfiltered()", "public com.google.common.collect.Multimap<K, V> unfiltered()"], ["com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredKeyMultimap.entryPredicate()", "public com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>> entryPredicate()"], ["int", "com.google.common.collect.FilteredKeyMultimap.size()", "public int size()"], ["boolean", "com.google.common.collect.FilteredKeyMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.FilteredKeyMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "com.google.common.collect.FilteredKeyMultimap.clear()", "public void clear()"], ["java.util.Collection<V>", "com.google.common.collect.FilteredKeyMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["int", "com.google.common.collect.FilteredKeySetMultimap$EntrySet.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.FilteredKeySetMultimap$EntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.FilteredKeySetMultimap.unfiltered()", "public com.google.common.collect.SetMultimap<K, V> unfiltered()"], ["java.util.Set<V>", "com.google.common.collect.FilteredKeySetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "com.google.common.collect.FilteredKeySetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.FilteredKeySetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredKeySetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.FilteredKeySetMultimap.unfiltered()", "public com.google.common.collect.Multimap unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Iterator<V>", "com.google.common.collect.FilteredMultimapValues.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "com.google.common.collect.FilteredMultimapValues.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.FilteredMultimapValues.size()", "public int size()"], ["boolean", "com.google.common.collect.FilteredMultimapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredMultimapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredMultimapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.FilteredMultimapValues.clear()", "public void clear()"], ["java.util.Iterator<E>", "com.google.common.collect.FluentIterable$1.iterator()", "public java.util.Iterator<E> iterator()"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable$FromIterableFunction.apply(java.lang.Iterable<E>)", "public com.google.common.collect.FluentIterable<E> apply(java.lang.Iterable<E>)"], ["java.lang.Object", "com.google.common.collect.FluentIterable$FromIterableFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.from(java.lang.Iterable<E>)", "public static <E> com.google.common.collect.FluentIterable<E> from(java.lang.Iterable<E>)"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.from(com.google.common.collect.FluentIterable<E>)", "public static <E> com.google.common.collect.FluentIterable<E> from(com.google.common.collect.FluentIterable<E>)"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.of(E[])", "public static <E> com.google.common.collect.FluentIterable<E> of(E[])"], ["java.lang.String", "com.google.common.collect.FluentIterable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.FluentIterable.size()", "public final int size()"], ["boolean", "com.google.common.collect.FluentIterable.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.cycle()", "public final com.google.common.collect.FluentIterable<E> cycle()"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.append(java.lang.Iterable<? extends E>)", "public final com.google.common.collect.FluentIterable<E> append(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.append(E...)", "public final com.google.common.collect.FluentIterable<E> append(E...)"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.filter(com.google.common.base.Predicate<? super E>)", "public final com.google.common.collect.FluentIterable<E> filter(com.google.common.base.Predicate<? super E>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.filter(java.lang.Class<T>)", "public final <T> com.google.common.collect.FluentIterable<T> filter(java.lang.Class<T>)"], ["boolean", "com.google.common.collect.FluentIterable.anyMatch(com.google.common.base.Predicate<? super E>)", "public final boolean anyMatch(com.google.common.base.Predicate<? super E>)"], ["boolean", "com.google.common.collect.FluentIterable.allMatch(com.google.common.base.Predicate<? super E>)", "public final boolean allMatch(com.google.common.base.Predicate<? super E>)"], ["com.google.common.base.Optional<E>", "com.google.common.collect.FluentIterable.firstMatch(com.google.common.base.Predicate<? super E>)", "public final com.google.common.base.Optional<E> firstMatch(com.google.common.base.Predicate<? super E>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.transform(com.google.common.base.Function<? super E, T>)", "public final <T> com.google.common.collect.FluentIterable<T> transform(com.google.common.base.Function<? super E, T>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.transformAndConcat(com.google.common.base.Function<? super E, ? extends java.lang.Iterable<? extends T>>)", "public <T> com.google.common.collect.FluentIterable<T> transformAndConcat(com.google.common.base.Function<? super E, ? extends java.lang.Iterable<? extends T>>)"], ["com.google.common.base.Optional<E>", "com.google.common.collect.FluentIterable.first()", "public final com.google.common.base.Optional<E> first()"], ["com.google.common.base.Optional<E>", "com.google.common.collect.FluentIterable.last()", "public final com.google.common.base.Optional<E> last()"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.skip(int)", "public final com.google.common.collect.FluentIterable<E> skip(int)"], ["com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.limit(int)", "public final com.google.common.collect.FluentIterable<E> limit(int)"], ["boolean", "com.google.common.collect.FluentIterable.isEmpty()", "public final boolean isEmpty()"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.FluentIterable.toList()", "public final com.google.common.collect.ImmutableList<E> toList()"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.FluentIterable.toSortedList(java.util.Comparator<? super E>)", "public final com.google.common.collect.ImmutableList<E> toSortedList(java.util.Comparator<? super E>)"], ["com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.FluentIterable.toSet()", "public final com.google.common.collect.ImmutableSet<E> toSet()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)", "public final com.google.common.collect.ImmutableSortedSet<E> toSortedSet(java.util.Comparator<? super E>)"], ["<V> com.google.common.collect.ImmutableMap<E, V>", "com.google.common.collect.FluentIterable.toMap(com.google.common.base.Function<? super E, V>)", "public final <V> com.google.common.collect.ImmutableMap<E, V> toMap(com.google.common.base.Function<? super E, V>)"], ["<K> com.google.common.collect.ImmutableListMultimap<K, E>", "com.google.common.collect.FluentIterable.index(com.google.common.base.Function<? super E, K>)", "public final <K> com.google.common.collect.ImmutableListMultimap<K, E> index(com.google.common.base.Function<? super E, K>)"], ["<K> com.google.common.collect.ImmutableMap<K, E>", "com.google.common.collect.FluentIterable.uniqueIndex(com.google.common.base.Function<? super E, K>)", "public final <K> com.google.common.collect.ImmutableMap<K, E> uniqueIndex(com.google.common.base.Function<? super E, K>)"], ["E[]", "com.google.common.collect.FluentIterable.toArray(java.lang.Class<E>)", "public final E[] toArray(java.lang.Class<E>)"], ["<C extends java.util.Collection<? super E>> C", "com.google.common.collect.FluentIterable.copyInto(C)", "public final <C extends java.util.Collection<? super E>> C copyInto(C)"], ["java.lang.String", "com.google.common.collect.FluentIterable.join(com.google.common.base.Joiner)", "public final java.lang.String join(com.google.common.base.Joiner)"], ["E", "com.google.common.collect.FluentIterable.get(int)", "public final E get(int)"], ["int", "com.google.common.collect.ForwardingBlockingDeque.remainingCapacity()", "public int remainingCapacity()"], ["void", "com.google.common.collect.ForwardingBlockingDeque.putFirst(E)", "public void putFirst(E) throws java.lang.InterruptedException"], ["void", "com.google.common.collect.ForwardingBlockingDeque.putLast(E)", "public void putLast(E) throws java.lang.InterruptedException"], ["boolean", "com.google.common.collect.ForwardingBlockingDeque.offerFirst(E, long, java.util.concurrent.TimeUnit)", "public boolean offerFirst(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.collect.ForwardingBlockingDeque.offerLast(E, long, java.util.concurrent.TimeUnit)", "public boolean offerLast(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "com.google.common.collect.ForwardingBlockingDeque.takeFirst()", "public E takeFirst() throws java.lang.InterruptedException"], ["E", "com.google.common.collect.ForwardingBlockingDeque.takeLast()", "public E takeLast() throws java.lang.InterruptedException"], ["E", "com.google.common.collect.ForwardingBlockingDeque.pollFirst(long, java.util.concurrent.TimeUnit)", "public E pollFirst(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "com.google.common.collect.ForwardingBlockingDeque.pollLast(long, java.util.concurrent.TimeUnit)", "public E pollLast(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "com.google.common.collect.ForwardingBlockingDeque.put(E)", "public void put(E) throws java.lang.InterruptedException"], ["boolean", "com.google.common.collect.ForwardingBlockingDeque.offer(E, long, java.util.concurrent.TimeUnit)", "public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "com.google.common.collect.ForwardingBlockingDeque.take()", "public E take() throws java.lang.InterruptedException"], ["E", "com.google.common.collect.ForwardingBlockingDeque.poll(long, java.util.concurrent.TimeUnit)", "public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["int", "com.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>)", "public int drainTo(java.util.Collection<? super E>)"], ["int", "com.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>, int)", "public int drainTo(java.util.Collection<? super E>, int)"], ["java.util.Iterator<E>", "com.google.common.collect.ForwardingCollection.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "com.google.common.collect.ForwardingCollection.size()", "public int size()"], ["boolean", "com.google.common.collect.ForwardingCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ForwardingCollection.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.ForwardingCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingCollection.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.ForwardingCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ForwardingCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.ForwardingCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.ForwardingCollection.clear()", "public void clear()"], ["java.lang.Object[]", "com.google.common.collect.ForwardingCollection.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.ForwardingCollection.toArray(T[])", "public <T> T[] toArray(T[])"], ["V", "com.google.common.collect.ForwardingConcurrentMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "com.google.common.collect.ForwardingConcurrentMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.ForwardingConcurrentMap.replace(K, V)", "public V replace(K, V)"], ["boolean", "com.google.common.collect.ForwardingConcurrentMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["void", "com.google.common.collect.ForwardingDeque.addFirst(E)", "public void addFirst(E)"], ["void", "com.google.common.collect.ForwardingDeque.addLast(E)", "public void addLast(E)"], ["java.util.Iterator<E>", "com.google.common.collect.ForwardingDeque.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["E", "com.google.common.collect.ForwardingDeque.getFirst()", "public E getFirst()"], ["E", "com.google.common.collect.ForwardingDeque.getLast()", "public E getLast()"], ["boolean", "com.google.common.collect.ForwardingDeque.offerFirst(E)", "public boolean offerFirst(E)"], ["boolean", "com.google.common.collect.ForwardingDeque.offerLast(E)", "public boolean offerLast(E)"], ["E", "com.google.common.collect.ForwardingDeque.peekFirst()", "public E peekFirst()"], ["E", "com.google.common.collect.ForwardingDeque.peekLast()", "public E peekLast()"], ["E", "com.google.common.collect.ForwardingDeque.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.ForwardingDeque.pollLast()", "public E pollLast()"], ["E", "com.google.common.collect.ForwardingDeque.pop()", "public E pop()"], ["void", "com.google.common.collect.ForwardingDeque.push(E)", "public void push(E)"], ["E", "com.google.common.collect.ForwardingDeque.removeFirst()", "public E removeFirst()"], ["E", "com.google.common.collect.ForwardingDeque.removeLast()", "public E removeLast()"], ["boolean", "com.google.common.collect.ForwardingDeque.removeFirstOccurrence(java.lang.Object)", "public boolean removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingDeque.removeLastOccurrence(java.lang.Object)", "public boolean removeLastOccurrence(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingIterator.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.ForwardingIterator.next()", "public T next()"], ["void", "com.google.common.collect.ForwardingIterator.remove()", "public void remove()"], ["void", "com.google.common.collect.ForwardingList.add(int, E)", "public void add(int, E)"], ["boolean", "com.google.common.collect.ForwardingList.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.ForwardingList.get(int)", "public E get(int)"], ["int", "com.google.common.collect.ForwardingList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<E>", "com.google.common.collect.ForwardingList.listIterator()", "public java.util.ListIterator<E> listIterator()"], ["java.util.ListIterator<E>", "com.google.common.collect.ForwardingList.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["E", "com.google.common.collect.ForwardingList.remove(int)", "public E remove(int)"], ["E", "com.google.common.collect.ForwardingList.set(int, E)", "public E set(int, E)"], ["java.util.List<E>", "com.google.common.collect.ForwardingList.subList(int, int)", "public java.util.List<E> subList(int, int)"], ["boolean", "com.google.common.collect.ForwardingList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingList.hashCode()", "public int hashCode()"], ["void", "com.google.common.collect.ForwardingListIterator.add(E)", "public void add(E)"], ["boolean", "com.google.common.collect.ForwardingListIterator.hasPrevious()", "public boolean hasPrevious()"], ["int", "com.google.common.collect.ForwardingListIterator.nextIndex()", "public int nextIndex()"], ["E", "com.google.common.collect.ForwardingListIterator.previous()", "public E previous()"], ["int", "com.google.common.collect.ForwardingListIterator.previousIndex()", "public int previousIndex()"], ["void", "com.google.common.collect.ForwardingListIterator.set(E)", "public void set(E)"], ["java.util.List<V>", "com.google.common.collect.ForwardingListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.ForwardingListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "com.google.common.collect.ForwardingListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.ForwardingListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ForwardingListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["com.google.common.collect.ForwardingMap$StandardEntrySet", "com.google.common.collect.ForwardingMap$StandardEntrySet(com.google.common.collect.ForwardingMap)", "public com.google.common.collect.ForwardingMap$StandardEntrySet(com.google.common.collect.ForwardingMap)"], ["com.google.common.collect.ForwardingMap$StandardKeySet", "com.google.common.collect.ForwardingMap$StandardKeySet(com.google.common.collect.ForwardingMap)", "public com.google.common.collect.ForwardingMap$StandardKeySet(com.google.common.collect.ForwardingMap)"], ["com.google.common.collect.ForwardingMap$StandardValues", "com.google.common.collect.ForwardingMap$StandardValues(com.google.common.collect.ForwardingMap)", "public com.google.common.collect.ForwardingMap$StandardValues(com.google.common.collect.ForwardingMap)"], ["int", "com.google.common.collect.ForwardingMap.size()", "public int size()"], ["boolean", "com.google.common.collect.ForwardingMap.isEmpty()", "public boolean isEmpty()"], ["V", "com.google.common.collect.ForwardingMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.ForwardingMap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.ForwardingMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ForwardingMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.ForwardingMap.put(K, V)", "public V put(K, V)"], ["void", "com.google.common.collect.ForwardingMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<K>", "com.google.common.collect.ForwardingMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "com.google.common.collect.ForwardingMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.ForwardingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["boolean", "com.google.common.collect.ForwardingMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMap.hashCode()", "public int hashCode()"], ["K", "com.google.common.collect.ForwardingMapEntry.getKey()", "public K getKey()"], ["V", "com.google.common.collect.ForwardingMapEntry.getValue()", "public V getValue()"], ["V", "com.google.common.collect.ForwardingMapEntry.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.ForwardingMapEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMapEntry.hashCode()", "public int hashCode()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.ForwardingMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["void", "com.google.common.collect.ForwardingMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.ForwardingMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.ForwardingMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "com.google.common.collect.ForwardingMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["boolean", "com.google.common.collect.ForwardingMultimap.isEmpty()", "public boolean isEmpty()"], ["com.google.common.collect.Multiset<K>", "com.google.common.collect.ForwardingMultimap.keys()", "public com.google.common.collect.Multiset<K> keys()"], ["java.util.Set<K>", "com.google.common.collect.ForwardingMultimap.keySet()", "public java.util.Set<K> keySet()"], ["boolean", "com.google.common.collect.ForwardingMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.ForwardingMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.ForwardingMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.ForwardingMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.ForwardingMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.ForwardingMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["int", "com.google.common.collect.ForwardingMultimap.size()", "public int size()"], ["java.util.Collection<V>", "com.google.common.collect.ForwardingMultimap.values()", "public java.util.Collection<V> values()"], ["boolean", "com.google.common.collect.ForwardingMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultimap.hashCode()", "public int hashCode()"], ["com.google.common.collect.ForwardingMultiset$StandardElementSet", "com.google.common.collect.ForwardingMultiset$StandardElementSet(com.google.common.collect.ForwardingMultiset)", "public com.google.common.collect.ForwardingMultiset$StandardElementSet(com.google.common.collect.ForwardingMultiset)"], ["int", "com.google.common.collect.ForwardingMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultiset.add(E, int)", "public int add(E, int)"], ["int", "com.google.common.collect.ForwardingMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["java.util.Set<E>", "com.google.common.collect.ForwardingMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.ForwardingMultiset.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["boolean", "com.google.common.collect.ForwardingMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultiset.hashCode()", "public int hashCode()"], ["int", "com.google.common.collect.ForwardingMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "com.google.common.collect.ForwardingMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["boolean", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()", "public java.lang.Object next()"], ["com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap(com.google.common.collect.ForwardingNavigableMap)", "public com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap(com.google.common.collect.ForwardingNavigableMap)"], ["com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet(com.google.common.collect.ForwardingNavigableMap)", "public com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet(com.google.common.collect.ForwardingNavigableMap)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "com.google.common.collect.ForwardingNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.ForwardingNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet(com.google.common.collect.ForwardingNavigableSet)", "public com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet(com.google.common.collect.ForwardingNavigableSet)"], ["E", "com.google.common.collect.ForwardingNavigableSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.higher(E)", "public E higher(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.ForwardingNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "com.google.common.collect.ForwardingNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "com.google.common.collect.ForwardingNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.ForwardingNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.ForwardingNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.ForwardingNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.lang.String", "com.google.common.collect.ForwardingObject.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.ForwardingQueue.offer(E)", "public boolean offer(E)"], ["E", "com.google.common.collect.ForwardingQueue.poll()", "public E poll()"], ["E", "com.google.common.collect.ForwardingQueue.remove()", "public E remove()"], ["E", "com.google.common.collect.ForwardingQueue.peek()", "public E peek()"], ["E", "com.google.common.collect.ForwardingQueue.element()", "public E element()"], ["boolean", "com.google.common.collect.ForwardingSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingSet.hashCode()", "public int hashCode()"], ["com.google.common.collect.ForwardingSetMultimap", "com.google.common.collect.ForwardingSetMultimap()", "public com.google.common.collect.ForwardingSetMultimap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.ForwardingSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "com.google.common.collect.ForwardingSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "com.google.common.collect.ForwardingSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.ForwardingSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.entries()", "public java.util.Collection entries()"], ["com.google.common.collect.ForwardingSortedMap$StandardKeySet", "com.google.common.collect.ForwardingSortedMap$StandardKeySet(com.google.common.collect.ForwardingSortedMap)", "public com.google.common.collect.ForwardingSortedMap$StandardKeySet(com.google.common.collect.ForwardingSortedMap)"], ["java.util.Comparator<? super K>", "com.google.common.collect.ForwardingSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.ForwardingSortedMap.firstKey()", "public K firstKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.ForwardingSortedMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["K", "com.google.common.collect.ForwardingSortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.ForwardingSortedMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.ForwardingSortedMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset(com.google.common.collect.ForwardingSortedMultiset)", "public com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset(com.google.common.collect.ForwardingSortedMultiset)"], ["com.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "com.google.common.collect.ForwardingSortedMultiset$StandardElementSet(com.google.common.collect.ForwardingSortedMultiset)", "public com.google.common.collect.ForwardingSortedMultiset$StandardElementSet(com.google.common.collect.ForwardingSortedMultiset)"], ["java.util.NavigableSet<E>", "com.google.common.collect.ForwardingSortedMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["java.util.Comparator<? super E>", "com.google.common.collect.ForwardingSortedMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.ForwardingSortedMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ForwardingSortedMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ForwardingSortedMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ForwardingSortedMultiset.pollFirstEntry()", "public com.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ForwardingSortedMultiset.pollLastEntry()", "public com.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.ForwardingSortedMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.ForwardingSortedMultiset.subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.ForwardingSortedMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["java.util.Set", "com.google.common.collect.ForwardingSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "com.google.common.collect.ForwardingSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Comparator<? super E>", "com.google.common.collect.ForwardingSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["E", "com.google.common.collect.ForwardingSortedSet.first()", "public E first()"], ["java.util.SortedSet<E>", "com.google.common.collect.ForwardingSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["E", "com.google.common.collect.ForwardingSortedSet.last()", "public E last()"], ["java.util.SortedSet<E>", "com.google.common.collect.ForwardingSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.ForwardingSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.util.SortedSet<V>", "com.google.common.collect.ForwardingSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "com.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "com.google.common.collect.ForwardingSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "com.google.common.collect.ForwardingSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "com.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.ForwardingTable.cellSet()", "public java.util.Set<com.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["void", "com.google.common.collect.ForwardingTable.clear()", "public void clear()"], ["java.util.Map<R, V>", "com.google.common.collect.ForwardingTable.column(C)", "public java.util.Map<R, V> column(C)"], ["java.util.Set<C>", "com.google.common.collect.ForwardingTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.ForwardingTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["boolean", "com.google.common.collect.ForwardingTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ForwardingTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.isEmpty()", "public boolean isEmpty()"], ["V", "com.google.common.collect.ForwardingTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "com.google.common.collect.ForwardingTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.ForwardingTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.ForwardingTable.row(R)", "public java.util.Map<C, V> row(R)"], ["java.util.Set<R>", "com.google.common.collect.ForwardingTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.ForwardingTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["int", "com.google.common.collect.ForwardingTable.size()", "public int size()"], ["java.util.Collection<V>", "com.google.common.collect.ForwardingTable.values()", "public java.util.Collection<V> values()"], ["boolean", "com.google.common.collect.ForwardingTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingTable.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.GeneralRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.GeneralRange.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.GeneralRange.toString()", "public java.lang.String toString()"], ["com.google.common.collect.GenericMapMaker$NullListener[]", "com.google.common.collect.GenericMapMaker$NullListener.values()", "public static com.google.common.collect.GenericMapMaker$NullListener[] values()"], ["com.google.common.collect.GenericMapMaker$NullListener", "com.google.common.collect.GenericMapMaker$NullListener.valueOf(java.lang.String)", "public static com.google.common.collect.GenericMapMaker$NullListener valueOf(java.lang.String)"], ["void", "com.google.common.collect.GenericMapMaker$NullListener.onRemoval(com.google.common.collect.MapMaker$RemovalNotification<java.lang.Object, java.lang.Object>)", "public void onRemoval(com.google.common.collect.MapMaker$RemovalNotification<java.lang.Object, java.lang.Object>)"], ["java.util.Map<C, V>", "com.google.common.collect.HashBasedTable$Factory.get()", "public java.util.Map<C, V> get()"], ["java.lang.Object", "com.google.common.collect.HashBasedTable$Factory.get()", "public java.lang.Object get()"], ["<R, C, V> com.google.common.collect.HashBasedTable<R, C, V>", "com.google.common.collect.HashBasedTable.create()", "public static <R, C, V> com.google.common.collect.HashBasedTable<R, C, V> create()"], ["<R, C, V> com.google.common.collect.HashBasedTable<R, C, V>", "com.google.common.collect.HashBasedTable.create(int, int)", "public static <R, C, V> com.google.common.collect.HashBasedTable<R, C, V> create(int, int)"], ["<R, C, V> com.google.common.collect.HashBasedTable<R, C, V>", "com.google.common.collect.HashBasedTable.create(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public static <R, C, V> com.google.common.collect.HashBasedTable<R, C, V> create(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["boolean", "com.google.common.collect.HashBasedTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.HashBasedTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["V", "com.google.common.collect.HashBasedTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map", "com.google.common.collect.HashBasedTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "com.google.common.collect.HashBasedTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Collection", "com.google.common.collect.HashBasedTable.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.HashBasedTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Set", "com.google.common.collect.HashBasedTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Map", "com.google.common.collect.HashBasedTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.HashBasedTable.row(java.lang.Object)", "public java.util.Map row(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.HashBasedTable.cellSet()", "public java.util.Set cellSet()"], ["java.lang.Object", "com.google.common.collect.HashBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.HashBasedTable.clear()", "public void clear()"], ["int", "com.google.common.collect.HashBasedTable.size()", "public int size()"], ["boolean", "com.google.common.collect.HashBasedTable.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "com.google.common.collect.HashBasedTable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.HashBasedTable.hashCode()", "public int hashCode()"], ["void", "com.google.common.collect.HashBasedTable.putAll(com.google.common.collect.Table)", "public void putAll(com.google.common.collect.Table)"], ["K", "com.google.common.collect.HashBiMap$EntrySet$1$MapEntry.getKey()", "public K getKey()"], ["V", "com.google.common.collect.HashBiMap$EntrySet$1$MapEntry.getValue()", "public V getValue()"], ["V", "com.google.common.collect.HashBiMap$EntrySet$1$MapEntry.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.HashBiMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["V", "com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.getKey()", "public V getKey()"], ["K", "com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.getValue()", "public K getValue()"], ["K", "com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.setValue(K)", "public K setValue(K)"], ["java.util.Iterator<java.util.Map$Entry<V, K>>", "com.google.common.collect.HashBiMap$Inverse$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<V, K>> iterator()"], ["boolean", "com.google.common.collect.HashBiMap$Inverse$InverseKeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<V>", "com.google.common.collect.HashBiMap$Inverse$InverseKeySet.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "com.google.common.collect.HashBiMap$Inverse.size()", "public int size()"], ["void", "com.google.common.collect.HashBiMap$Inverse.clear()", "public void clear()"], ["boolean", "com.google.common.collect.HashBiMap$Inverse.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["K", "com.google.common.collect.HashBiMap$Inverse.get(java.lang.Object)", "public K get(java.lang.Object)"], ["K", "com.google.common.collect.HashBiMap$Inverse.put(V, K)", "public K put(V, K)"], ["K", "com.google.common.collect.HashBiMap$Inverse.forcePut(V, K)", "public K forcePut(V, K)"], ["K", "com.google.common.collect.HashBiMap$Inverse.remove(java.lang.Object)", "public K remove(java.lang.Object)"], ["com.google.common.collect.BiMap<K, V>", "com.google.common.collect.HashBiMap$Inverse.inverse()", "public com.google.common.collect.BiMap<K, V> inverse()"], ["java.util.Set<V>", "com.google.common.collect.HashBiMap$Inverse.keySet()", "public java.util.Set<V> keySet()"], ["java.util.Set<K>", "com.google.common.collect.HashBiMap$Inverse.values()", "public java.util.Set<K> values()"], ["java.util.Set<java.util.Map$Entry<V, K>>", "com.google.common.collect.HashBiMap$Inverse.entrySet()", "public java.util.Set<java.util.Map$Entry<V, K>> entrySet()"], ["java.util.Collection", "com.google.common.collect.HashBiMap$Inverse.values()", "public java.util.Collection values()"], ["boolean", "com.google.common.collect.HashBiMap$Itr.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.HashBiMap$Itr.next()", "public T next()"], ["void", "com.google.common.collect.HashBiMap$Itr.remove()", "public void remove()"], ["java.util.Iterator<K>", "com.google.common.collect.HashBiMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "com.google.common.collect.HashBiMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["<K, V> com.google.common.collect.HashBiMap<K, V>", "com.google.common.collect.HashBiMap.create()", "public static <K, V> com.google.common.collect.HashBiMap<K, V> create()"], ["<K, V> com.google.common.collect.HashBiMap<K, V>", "com.google.common.collect.HashBiMap.create(int)", "public static <K, V> com.google.common.collect.HashBiMap<K, V> create(int)"], ["<K, V> com.google.common.collect.HashBiMap<K, V>", "com.google.common.collect.HashBiMap.create(java.util.Map<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.HashBiMap<K, V> create(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.HashBiMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.HashBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.HashBiMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.HashBiMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.HashBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["V", "com.google.common.collect.HashBiMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.HashBiMap.clear()", "public void clear()"], ["int", "com.google.common.collect.HashBiMap.size()", "public int size()"], ["java.util.Set<K>", "com.google.common.collect.HashBiMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<V>", "com.google.common.collect.HashBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.HashBiMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.HashBiMap.inverse()", "public com.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Collection", "com.google.common.collect.HashBiMap.values()", "public java.util.Collection values()"], ["<K, V> com.google.common.collect.HashMultimap<K, V>", "com.google.common.collect.HashMultimap.create()", "public static <K, V> com.google.common.collect.HashMultimap<K, V> create()"], ["<K, V> com.google.common.collect.HashMultimap<K, V>", "com.google.common.collect.HashMultimap.create(int, int)", "public static <K, V> com.google.common.collect.HashMultimap<K, V> create(int, int)"], ["<K, V> com.google.common.collect.HashMultimap<K, V>", "com.google.common.collect.HashMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.HashMultimap<K, V> create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.HashMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "com.google.common.collect.HashMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Set", "com.google.common.collect.HashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.HashMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.HashMultimap.entries()", "public java.util.Set entries()"], ["java.util.Set", "com.google.common.collect.HashMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.HashMultimap.values()", "public java.util.Collection values()"], ["void", "com.google.common.collect.HashMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.HashMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "com.google.common.collect.HashMultimap.size()", "public int size()"], ["java.lang.String", "com.google.common.collect.HashMultimap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.HashMultimap.hashCode()", "public int hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.HashMultimap.keys()", "public com.google.common.collect.Multiset keys()"], ["java.util.Set", "com.google.common.collect.HashMultimap.keySet()", "public java.util.Set keySet()"], ["boolean", "com.google.common.collect.HashMultimap.putAll(com.google.common.collect.Multimap)", "public boolean putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.HashMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.HashMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.isEmpty()", "public boolean isEmpty()"], ["<E> com.google.common.collect.HashMultiset<E>", "com.google.common.collect.HashMultiset.create()", "public static <E> com.google.common.collect.HashMultiset<E> create()"], ["<E> com.google.common.collect.HashMultiset<E>", "com.google.common.collect.HashMultiset.create(int)", "public static <E> com.google.common.collect.HashMultiset<E> create(int)"], ["<E> com.google.common.collect.HashMultiset<E>", "com.google.common.collect.HashMultiset.create(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.HashMultiset<E> create(java.lang.Iterable<? extends E>)"], ["int", "com.google.common.collect.HashMultiset.setCount(java.lang.Object, int)", "public int setCount(java.lang.Object, int)"], ["int", "com.google.common.collect.HashMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.HashMultiset.add(java.lang.Object, int)", "public int add(java.lang.Object, int)"], ["int", "com.google.common.collect.HashMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.HashMultiset.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.HashMultiset.size()", "public int size()"], ["void", "com.google.common.collect.HashMultiset.clear()", "public void clear()"], ["java.util.Set", "com.google.common.collect.HashMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.lang.String", "com.google.common.collect.HashMultiset.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.HashMultiset.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.HashMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.HashMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "com.google.common.collect.HashMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.HashMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.HashMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.HashMultiset.setCount(java.lang.Object, int, int)", "public boolean setCount(java.lang.Object, int, int)"], ["boolean", "com.google.common.collect.HashMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultiset.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.ImmutableAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableAsList.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableAsList.isEmpty()", "public boolean isEmpty()"], ["com.google.common.collect.ImmutableBiMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder()", "public com.google.common.collect.ImmutableBiMap$Builder()"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.put(K, V)", "public com.google.common.collect.ImmutableBiMap$Builder<K, V> put(K, V)"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableBiMap$Builder<K, V> putAll(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.build()", "public com.google.common.collect.ImmutableBiMap<K, V> build()"], ["com.google.common.collect.ImmutableMap", "com.google.common.collect.ImmutableBiMap$Builder.build()", "public com.google.common.collect.ImmutableMap build()"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map)", "public com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.put(java.lang.Object, java.lang.Object)", "public com.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of()", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> of()"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V)", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> of(K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap.builder()", "public static <K, V> com.google.common.collect.ImmutableBiMap$Builder<K, V> builder()"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.copyOf(java.util.Map<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableBiMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSet<V>", "com.google.common.collect.ImmutableBiMap.values()", "public com.google.common.collect.ImmutableSet<V> values()"], ["V", "com.google.common.collect.ImmutableBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableBiMap.values()", "public com.google.common.collect.ImmutableCollection values()"], ["java.util.Collection", "com.google.common.collect.ImmutableBiMap.values()", "public java.util.Collection values()"], ["com.google.common.collect.BiMap", "com.google.common.collect.ImmutableBiMap.inverse()", "public com.google.common.collect.BiMap inverse()"], ["java.util.Set", "com.google.common.collect.ImmutableBiMap.values()", "public java.util.Set values()"], ["com.google.common.collect.ImmutableClassToInstanceMap$Builder", "com.google.common.collect.ImmutableClassToInstanceMap$Builder()", "public com.google.common.collect.ImmutableClassToInstanceMap$Builder()"], ["<T extends B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "com.google.common.collect.ImmutableClassToInstanceMap$Builder.put(java.lang.Class<T>, T)", "public <T extends B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B> put(java.lang.Class<T>, T)"], ["<T extends B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "com.google.common.collect.ImmutableClassToInstanceMap$Builder.putAll(java.util.Map<? extends java.lang.Class<? extends T>, ? extends T>)", "public <T extends B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B> putAll(java.util.Map<? extends java.lang.Class<? extends T>, ? extends T>)"], ["com.google.common.collect.ImmutableClassToInstanceMap<B>", "com.google.common.collect.ImmutableClassToInstanceMap$Builder.build()", "public com.google.common.collect.ImmutableClassToInstanceMap<B> build()"], ["<B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "com.google.common.collect.ImmutableClassToInstanceMap.builder()", "public static <B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B> builder()"], ["<B, S extends B> com.google.common.collect.ImmutableClassToInstanceMap<B>", "com.google.common.collect.ImmutableClassToInstanceMap.copyOf(java.util.Map<? extends java.lang.Class<? extends S>, ? extends S>)", "public static <B, S extends B> com.google.common.collect.ImmutableClassToInstanceMap<B> copyOf(java.util.Map<? extends java.lang.Class<? extends S>, ? extends S>)"], ["<T extends B> T", "com.google.common.collect.ImmutableClassToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["<T extends B> T", "com.google.common.collect.ImmutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder<E>", "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(E)", "public com.google.common.collect.ImmutableCollection$ArrayBasedBuilder<E> add(E)"], ["com.google.common.collect.ImmutableCollection$Builder<E>", "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(E...)", "public com.google.common.collect.ImmutableCollection$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableCollection$Builder<E>", "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableCollection$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection$Builder<E>", "com.google.common.collect.ImmutableCollection$Builder.add(E...)", "public com.google.common.collect.ImmutableCollection$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableCollection$Builder<E>", "com.google.common.collect.ImmutableCollection$Builder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableCollection$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableCollection$Builder<E>", "com.google.common.collect.ImmutableCollection$Builder.addAll(java.util.Iterator<? extends E>)", "public com.google.common.collect.ImmutableCollection$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["java.lang.Object[]", "com.google.common.collect.ImmutableCollection.toArray()", "public final java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.ImmutableCollection.toArray(T[])", "public final <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.ImmutableCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableCollection.add(E)", "public final boolean add(E)"], ["boolean", "com.google.common.collect.ImmutableCollection.remove(java.lang.Object)", "public final boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)", "public final boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.ImmutableCollection.removeAll(java.util.Collection<?>)", "public final boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ImmutableCollection.retainAll(java.util.Collection<?>)", "public final boolean retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.ImmutableCollection.clear()", "public final void clear()"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableCollection.asList()", "public com.google.common.collect.ImmutableList<E> asList()"], ["java.util.Iterator", "com.google.common.collect.ImmutableCollection.iterator()", "public java.util.Iterator iterator()"], ["K", "com.google.common.collect.ImmutableEntry.getKey()", "public final K getKey()"], ["V", "com.google.common.collect.ImmutableEntry.getValue()", "public final V getValue()"], ["V", "com.google.common.collect.ImmutableEntry.setValue(V)", "public final V setValue(V)"], ["boolean", "com.google.common.collect.ImmutableEnumMap$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableEnumMap$1.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<K>", "com.google.common.collect.ImmutableEnumMap$1.iterator()", "public com.google.common.collect.UnmodifiableIterator<K> iterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableEnumMap$1.iterator()", "public java.util.Iterator iterator()"], ["boolean", "com.google.common.collect.ImmutableEnumMap$2$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableEnumMap$2$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "com.google.common.collect.ImmutableEnumMap$2$1.next()", "public java.lang.Object next()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableEnumMap$2.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableEnumMap$2.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.ImmutableEnumMap.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableEnumMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.ImmutableEnumMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.ImmutableEnumSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "com.google.common.collect.ImmutableEnumSet.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableEnumSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableEnumSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ImmutableEnumSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.ImmutableEnumSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableEnumSet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.ImmutableEnumSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "com.google.common.collect.ImmutableEnumSet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableList$Builder", "com.google.common.collect.ImmutableList$Builder()", "public com.google.common.collect.ImmutableList$Builder()"], ["com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList$Builder.add(E)", "public com.google.common.collect.ImmutableList$Builder<E> add(E)"], ["com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList$Builder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableList$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList$Builder.add(E...)", "public com.google.common.collect.ImmutableList$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList$Builder.addAll(java.util.Iterator<? extends E>)", "public com.google.common.collect.ImmutableList$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList$Builder.build()", "public com.google.common.collect.ImmutableList<E> build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "com.google.common.collect.ImmutableList$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableList$Builder.build()", "public com.google.common.collect.ImmutableCollection build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList$ReverseImmutableList.reverse()", "public com.google.common.collect.ImmutableList<E> reverse()"], ["boolean", "com.google.common.collect.ImmutableList$ReverseImmutableList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList$ReverseImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList$ReverseImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList$ReverseImmutableList.subList(int, int)", "public com.google.common.collect.ImmutableList<E> subList(int, int)"], ["E", "com.google.common.collect.ImmutableList$ReverseImmutableList.get(int)", "public E get(int)"], ["int", "com.google.common.collect.ImmutableList$ReverseImmutableList.size()", "public int size()"], ["java.util.List", "com.google.common.collect.ImmutableList$ReverseImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$ReverseImmutableList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$ReverseImmutableList.listIterator()", "public java.util.ListIterator listIterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableList$ReverseImmutableList.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.ImmutableList$SubList.size()", "public int size()"], ["E", "com.google.common.collect.ImmutableList$SubList.get(int)", "public E get(int)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList$SubList.subList(int, int)", "public com.google.common.collect.ImmutableList<E> subList(int, int)"], ["java.util.List", "com.google.common.collect.ImmutableList$SubList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$SubList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$SubList.listIterator()", "public java.util.ListIterator listIterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableList$SubList.iterator()", "public java.util.Iterator iterator()"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of()", "public static <E> com.google.common.collect.ImmutableList<E> of()"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E, E, E...)", "public static <E> com.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableList<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(java.util.Collection<? extends E>)", "public static <E> com.google.common.collect.ImmutableList<E> copyOf(java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableList<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(E[])", "public static <E> com.google.common.collect.ImmutableList<E> copyOf(E[])"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.ImmutableList.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["com.google.common.collect.UnmodifiableListIterator<E>", "com.google.common.collect.ImmutableList.listIterator()", "public com.google.common.collect.UnmodifiableListIterator<E> listIterator()"], ["com.google.common.collect.UnmodifiableListIterator<E>", "com.google.common.collect.ImmutableList.listIterator(int)", "public com.google.common.collect.UnmodifiableListIterator<E> listIterator(int)"], ["int", "com.google.common.collect.ImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.subList(int, int)", "public com.google.common.collect.ImmutableList<E> subList(int, int)"], ["boolean", "com.google.common.collect.ImmutableList.addAll(int, java.util.Collection<? extends E>)", "public final boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.ImmutableList.set(int, E)", "public final E set(int, E)"], ["void", "com.google.common.collect.ImmutableList.add(int, E)", "public final void add(int, E)"], ["E", "com.google.common.collect.ImmutableList.remove(int)", "public final E remove(int)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.asList()", "public final com.google.common.collect.ImmutableList<E> asList()"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.reverse()", "public com.google.common.collect.ImmutableList<E> reverse()"], ["boolean", "com.google.common.collect.ImmutableList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList.hashCode()", "public int hashCode()"], ["<E> com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList.builder()", "public static <E> com.google.common.collect.ImmutableList$Builder<E> builder()"], ["java.util.Iterator", "com.google.common.collect.ImmutableList.iterator()", "public java.util.Iterator iterator()"], ["java.util.List", "com.google.common.collect.ImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList.listIterator()", "public java.util.ListIterator listIterator()"], ["com.google.common.collect.ImmutableListMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder()", "public com.google.common.collect.ImmutableListMultimap$Builder()"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.put(K, V)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> put(K, V)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> putAll(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(K, V...)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> putAll(K, V...)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> orderKeysBy(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)", "public com.google.common.collect.ImmutableListMultimap$Builder<K, V> orderValuesBy(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.build()", "public com.google.common.collect.ImmutableListMultimap<K, V> build()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableListMultimap$Builder.build()", "public com.google.common.collect.ImmutableMultimap build()"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator)", "public com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator)", "public com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(com.google.common.collect.Multimap)", "public com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])", "public com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Object[])"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)", "public com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry)", "public com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.Object, java.lang.Object)", "public com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object, java.lang.Object)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of()", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> of()"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> of(K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap.builder()", "public static <K, V> com.google.common.collect.ImmutableListMultimap$Builder<K, V> builder()"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableList<V>", "com.google.common.collect.ImmutableListMultimap.get(K)", "public com.google.common.collect.ImmutableList<V> get(K)"], ["com.google.common.collect.ImmutableListMultimap<V, K>", "com.google.common.collect.ImmutableListMultimap.inverse()", "public com.google.common.collect.ImmutableListMultimap<V, K> inverse()"], ["com.google.common.collect.ImmutableList<V>", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public com.google.common.collect.ImmutableList<V> removeAll(java.lang.Object)"], ["com.google.common.collect.ImmutableList<V>", "com.google.common.collect.ImmutableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public com.google.common.collect.ImmutableList<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableListMultimap.inverse()", "public com.google.common.collect.ImmutableMultimap inverse()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableListMultimap.get(java.lang.Object)", "public com.google.common.collect.ImmutableCollection get(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public com.google.common.collect.ImmutableCollection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ImmutableListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.List", "com.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.List replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public java.util.List removeAll(java.lang.Object)"], ["java.util.List", "com.google.common.collect.ImmutableListMultimap.get(java.lang.Object)", "public java.util.List get(java.lang.Object)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableMap$Builder()", "public com.google.common.collect.ImmutableMap$Builder()"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.put(K, V)", "public com.google.common.collect.ImmutableMap$Builder<K, V> put(K, V)"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableMap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableMap$Builder<K, V> putAll(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap$Builder.build()", "public com.google.common.collect.ImmutableMap<K, V> build()"], ["K", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getKey()", "public K getKey()"], ["com.google.common.collect.ImmutableSet<V>", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getValue()", "public com.google.common.collect.ImmutableSet<V> getValue()"], ["java.lang.Object", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getValue()", "public java.lang.Object getValue()"], ["boolean", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, com.google.common.collect.ImmutableSet<V>>", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.next()", "public java.util.Map$Entry<K, com.google.common.collect.ImmutableSet<V>> next()"], ["java.lang.Object", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.next()", "public java.lang.Object next()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, com.google.common.collect.ImmutableSet<V>>>", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, com.google.common.collect.ImmutableSet<V>>> iterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<V>", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.get(java.lang.Object)", "public com.google.common.collect.ImmutableSet<V> get(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.keySet()", "public java.util.Set keySet()"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of()", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> of()"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> of(K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap.builder()", "public static <K, V> com.google.common.collect.ImmutableMap$Builder<K, V> builder()"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.copyOf(java.util.Map<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>)"], ["V", "com.google.common.collect.ImmutableMap.put(K, V)", "public final V put(K, V)"], ["V", "com.google.common.collect.ImmutableMap.remove(java.lang.Object)", "public final V remove(java.lang.Object)"], ["void", "com.google.common.collect.ImmutableMap.putAll(java.util.Map<? extends K, ? extends V>)", "public final void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.ImmutableMap.clear()", "public final void clear()"], ["boolean", "com.google.common.collect.ImmutableMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.ImmutableMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMap.entrySet()", "public com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entrySet()"], ["com.google.common.collect.ImmutableSet<K>", "com.google.common.collect.ImmutableMap.keySet()", "public com.google.common.collect.ImmutableSet<K> keySet()"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.ImmutableMap.values()", "public com.google.common.collect.ImmutableCollection<V> values()"], ["com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableMap.asMultimap()", "public com.google.common.collect.ImmutableSetMultimap<K, V> asMultimap()"], ["boolean", "com.google.common.collect.ImmutableMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMap.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.ImmutableMap.toString()", "public java.lang.String toString()"], ["java.util.Set", "com.google.common.collect.ImmutableMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableMap.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.ImmutableMap.keySet()", "public java.util.Set keySet()"], ["int", "com.google.common.collect.ImmutableMapEntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableMapEntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["K", "com.google.common.collect.ImmutableMapKeySet$1.get(int)", "public K get(int)"], ["int", "com.google.common.collect.ImmutableMapKeySet.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<K>", "com.google.common.collect.ImmutableMapKeySet.iterator()", "public com.google.common.collect.UnmodifiableIterator<K> iterator()"], ["boolean", "com.google.common.collect.ImmutableMapKeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMapKeySet.iterator()", "public java.util.Iterator iterator()"], ["V", "com.google.common.collect.ImmutableMapValues$1.get(int)", "public V get(int)"], ["int", "com.google.common.collect.ImmutableMapValues.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<V>", "com.google.common.collect.ImmutableMapValues.iterator()", "public com.google.common.collect.UnmodifiableIterator<V> iterator()"], ["boolean", "com.google.common.collect.ImmutableMapValues.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMapValues.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableMultimap$Builder()", "public com.google.common.collect.ImmutableMultimap$Builder()"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.put(K, V)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> put(K, V)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> putAll(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(K, V...)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> putAll(K, V...)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> orderKeysBy(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)", "public com.google.common.collect.ImmutableMultimap$Builder<K, V> orderValuesBy(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.build()", "public com.google.common.collect.ImmutableMultimap<K, V> build()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMultimap$EntryCollection.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["int", "com.google.common.collect.ImmutableMultimap$EntryCollection.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableMultimap$EntryCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultimap$EntryCollection.iterator()", "public java.util.Iterator iterator()"], ["boolean", "com.google.common.collect.ImmutableMultimap$Itr.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.ImmutableMultimap$Itr.next()", "public T next()"], ["boolean", "com.google.common.collect.ImmutableMultimap$Keys.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultimap$Keys.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Set<K>", "com.google.common.collect.ImmutableMultimap$Keys.elementSet()", "public java.util.Set<K> elementSet()"], ["int", "com.google.common.collect.ImmutableMultimap$Keys.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableMultimap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<V>", "com.google.common.collect.ImmutableMultimap$Values.iterator()", "public com.google.common.collect.UnmodifiableIterator<V> iterator()"], ["int", "com.google.common.collect.ImmutableMultimap$Values.size()", "public int size()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultimap$Values.iterator()", "public java.util.Iterator iterator()"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of()", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> of()"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V)", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> of(K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap.builder()", "public static <K, V> com.google.common.collect.ImmutableMultimap$Builder<K, V> builder()"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableMultimap<K, V> copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)", "public com.google.common.collect.ImmutableCollection<V> removeAll(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.ImmutableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public com.google.common.collect.ImmutableCollection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["void", "com.google.common.collect.ImmutableMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.ImmutableMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.ImmutableMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.ImmutableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.ImmutableMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultimap.size()", "public int size()"], ["com.google.common.collect.ImmutableSet<K>", "com.google.common.collect.ImmutableMultimap.keySet()", "public com.google.common.collect.ImmutableSet<K> keySet()"], ["com.google.common.collect.ImmutableMap<K, java.util.Collection<V>>", "com.google.common.collect.ImmutableMultimap.asMap()", "public com.google.common.collect.ImmutableMap<K, java.util.Collection<V>> asMap()"], ["com.google.common.collect.ImmutableCollection<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMultimap.entries()", "public com.google.common.collect.ImmutableCollection<java.util.Map$Entry<K, V>> entries()"], ["com.google.common.collect.ImmutableMultiset<K>", "com.google.common.collect.ImmutableMultimap.keys()", "public com.google.common.collect.ImmutableMultiset<K> keys()"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.ImmutableMultimap.values()", "public com.google.common.collect.ImmutableCollection<V> values()"], ["java.lang.String", "com.google.common.collect.ImmutableMultimap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.ImmutableMultimap.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.ImmutableMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ImmutableMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.values()", "public java.util.Collection values()"], ["com.google.common.collect.Multiset", "com.google.common.collect.ImmutableMultimap.keys()", "public com.google.common.collect.Multiset keys()"], ["java.util.Set", "com.google.common.collect.ImmutableMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.ImmutableMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultimap.isEmpty()", "public boolean isEmpty()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultiset$1.hasNext()", "public boolean hasNext()"], ["E", "com.google.common.collect.ImmutableMultiset$1.next()", "public E next()"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableMultiset$Builder()", "public com.google.common.collect.ImmutableMultiset$Builder()"], ["com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset$Builder.add(E)", "public com.google.common.collect.ImmutableMultiset$Builder<E> add(E)"], ["com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset$Builder.addCopies(E, int)", "public com.google.common.collect.ImmutableMultiset$Builder<E> addCopies(E, int)"], ["com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset$Builder.setCount(E, int)", "public com.google.common.collect.ImmutableMultiset$Builder<E> setCount(E, int)"], ["com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset$Builder.add(E...)", "public com.google.common.collect.ImmutableMultiset$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset$Builder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableMultiset$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset$Builder.addAll(java.util.Iterator<? extends E>)", "public com.google.common.collect.ImmutableMultiset$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset$Builder.build()", "public com.google.common.collect.ImmutableMultiset<E> build()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableMultiset$Builder.build()", "public com.google.common.collect.ImmutableCollection build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ImmutableMultiset$EntrySet$1.get(int)", "public com.google.common.collect.Multiset$Entry<E> get(int)"], ["java.lang.Object", "com.google.common.collect.ImmutableMultiset$EntrySet$1.get(int)", "public java.lang.Object get(int)"], ["com.google.common.collect.UnmodifiableIterator<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.ImmutableMultiset$EntrySet.iterator()", "public com.google.common.collect.UnmodifiableIterator<com.google.common.collect.Multiset$Entry<E>> iterator()"], ["int", "com.google.common.collect.ImmutableMultiset$EntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableMultiset$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultiset$EntrySet.hashCode()", "public int hashCode()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultiset$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of()", "public static <E> com.google.common.collect.ImmutableMultiset<E> of()"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E)", "public static <E> com.google.common.collect.ImmutableMultiset<E> of(E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E)", "public static <E> com.google.common.collect.ImmutableMultiset<E> of(E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E)", "public static <E> com.google.common.collect.ImmutableMultiset<E> of(E, E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E, E)", "public static <E> com.google.common.collect.ImmutableMultiset<E> of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableMultiset<E> of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E, E, E, E, E...)", "public static <E> com.google.common.collect.ImmutableMultiset<E> of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.copyOf(E[])", "public static <E> com.google.common.collect.ImmutableMultiset<E> copyOf(E[])"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.copyOf(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableMultiset<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableMultiset<E> copyOf(java.util.Iterator<? extends E>)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.ImmutableMultiset.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["boolean", "com.google.common.collect.ImmutableMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultiset.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.ImmutableMultiset.add(E, int)", "public final int add(E, int)"], ["int", "com.google.common.collect.ImmutableMultiset.remove(java.lang.Object, int)", "public final int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.ImmutableMultiset.setCount(E, int)", "public final int setCount(E, int)"], ["boolean", "com.google.common.collect.ImmutableMultiset.setCount(E, int, int)", "public final boolean setCount(E, int, int)"], ["boolean", "com.google.common.collect.ImmutableMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultiset.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.ImmutableMultiset.toString()", "public java.lang.String toString()"], ["com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.ImmutableMultiset.entrySet()", "public com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["<E> com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset.builder()", "public static <E> com.google.common.collect.ImmutableMultiset$Builder<E> builder()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultiset.iterator()", "public java.util.Iterator iterator()"], ["java.util.Set", "com.google.common.collect.ImmutableMultiset.entrySet()", "public java.util.Set entrySet()"], ["int", "com.google.common.collect.ImmutableRangeMap$1.size()", "public int size()"], ["com.google.common.collect.Range<K>", "com.google.common.collect.ImmutableRangeMap$1.get(int)", "public com.google.common.collect.Range<K> get(int)"], ["java.lang.Object", "com.google.common.collect.ImmutableRangeMap$1.get(int)", "public java.lang.Object get(int)"], ["com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap$2.subRangeMap(com.google.common.collect.Range<K>)", "public com.google.common.collect.ImmutableRangeMap<K, V> subRangeMap(com.google.common.collect.Range<K>)"], ["com.google.common.collect.RangeMap", "com.google.common.collect.ImmutableRangeMap$2.subRangeMap(com.google.common.collect.Range)", "public com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range)"], ["java.util.Map", "com.google.common.collect.ImmutableRangeMap$2.asMapOfRanges()", "public java.util.Map asMapOfRanges()"], ["com.google.common.collect.ImmutableRangeMap$Builder", "com.google.common.collect.ImmutableRangeMap$Builder()", "public com.google.common.collect.ImmutableRangeMap$Builder()"], ["com.google.common.collect.ImmutableRangeMap$Builder<K, V>", "com.google.common.collect.ImmutableRangeMap$Builder.put(com.google.common.collect.Range<K>, V)", "public com.google.common.collect.ImmutableRangeMap$Builder<K, V> put(com.google.common.collect.Range<K>, V)"], ["com.google.common.collect.ImmutableRangeMap$Builder<K, V>", "com.google.common.collect.ImmutableRangeMap$Builder.putAll(com.google.common.collect.RangeMap<K, ? extends V>)", "public com.google.common.collect.ImmutableRangeMap$Builder<K, V> putAll(com.google.common.collect.RangeMap<K, ? extends V>)"], ["com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap$Builder.build()", "public com.google.common.collect.ImmutableRangeMap<K, V> build()"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.of()", "public static <K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V> of()"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.of(com.google.common.collect.Range<K>, V)", "public static <K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V> of(com.google.common.collect.Range<K>, V)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.copyOf(com.google.common.collect.RangeMap<K, ? extends V>)", "public static <K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V> copyOf(com.google.common.collect.RangeMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap$Builder<K, V>", "com.google.common.collect.ImmutableRangeMap.builder()", "public static <K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap$Builder<K, V> builder()"], ["V", "com.google.common.collect.ImmutableRangeMap.get(K)", "public V get(K)"], ["java.util.Map$Entry<com.google.common.collect.Range<K>, V>", "com.google.common.collect.ImmutableRangeMap.getEntry(K)", "public java.util.Map$Entry<com.google.common.collect.Range<K>, V> getEntry(K)"], ["com.google.common.collect.Range<K>", "com.google.common.collect.ImmutableRangeMap.span()", "public com.google.common.collect.Range<K> span()"], ["void", "com.google.common.collect.ImmutableRangeMap.put(com.google.common.collect.Range<K>, V)", "public void put(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.ImmutableRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)", "public void putAll(com.google.common.collect.RangeMap<K, V>)"], ["void", "com.google.common.collect.ImmutableRangeMap.clear()", "public void clear()"], ["void", "com.google.common.collect.ImmutableRangeMap.remove(com.google.common.collect.Range<K>)", "public void remove(com.google.common.collect.Range<K>)"], ["com.google.common.collect.ImmutableMap<com.google.common.collect.Range<K>, V>", "com.google.common.collect.ImmutableRangeMap.asMapOfRanges()", "public com.google.common.collect.ImmutableMap<com.google.common.collect.Range<K>, V> asMapOfRanges()"], ["com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range<K>)", "public com.google.common.collect.ImmutableRangeMap<K, V> subRangeMap(com.google.common.collect.Range<K>)"], ["int", "com.google.common.collect.ImmutableRangeMap.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.ImmutableRangeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ImmutableRangeMap.toString()", "public java.lang.String toString()"], ["com.google.common.collect.RangeMap", "com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range)", "public com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range)"], ["java.util.Map", "com.google.common.collect.ImmutableRangeMap.asMapOfRanges()", "public java.util.Map asMapOfRanges()"], ["int", "com.google.common.collect.ImmutableRangeSet$1.size()", "public int size()"], ["com.google.common.collect.Range<C>", "com.google.common.collect.ImmutableRangeSet$1.get(int)", "public com.google.common.collect.Range<C> get(int)"], ["java.lang.Object", "com.google.common.collect.ImmutableRangeSet$1.get(int)", "public java.lang.Object get(int)"], ["int", "com.google.common.collect.ImmutableRangeSet$AsSet.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<C>", "com.google.common.collect.ImmutableRangeSet$AsSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<C> iterator()"], ["com.google.common.collect.UnmodifiableIterator<C>", "com.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator()", "public com.google.common.collect.UnmodifiableIterator<C> descendingIterator()"], ["boolean", "com.google.common.collect.ImmutableRangeSet$AsSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ImmutableRangeSet$AsSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "com.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableRangeSet$AsSet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableRangeSet$Builder", "com.google.common.collect.ImmutableRangeSet$Builder()", "public com.google.common.collect.ImmutableRangeSet$Builder()"], ["com.google.common.collect.ImmutableRangeSet$Builder<C>", "com.google.common.collect.ImmutableRangeSet$Builder.add(com.google.common.collect.Range<C>)", "public com.google.common.collect.ImmutableRangeSet$Builder<C> add(com.google.common.collect.Range<C>)"], ["com.google.common.collect.ImmutableRangeSet$Builder<C>", "com.google.common.collect.ImmutableRangeSet$Builder.addAll(com.google.common.collect.RangeSet<C>)", "public com.google.common.collect.ImmutableRangeSet$Builder<C> addAll(com.google.common.collect.RangeSet<C>)"], ["com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet$Builder.build()", "public com.google.common.collect.ImmutableRangeSet<C> build()"], ["int", "com.google.common.collect.ImmutableRangeSet$ComplementRanges.size()", "public int size()"], ["com.google.common.collect.Range<C>", "com.google.common.collect.ImmutableRangeSet$ComplementRanges.get(int)", "public com.google.common.collect.Range<C> get(int)"], ["java.lang.Object", "com.google.common.collect.ImmutableRangeSet$ComplementRanges.get(int)", "public java.lang.Object get(int)"], ["<C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.of()", "public static <C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C> of()"], ["<C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.of(com.google.common.collect.Range<C>)", "public static <C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C> of(com.google.common.collect.Range<C>)"], ["<C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.copyOf(com.google.common.collect.RangeSet<C>)", "public static <C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C> copyOf(com.google.common.collect.RangeSet<C>)"], ["boolean", "com.google.common.collect.ImmutableRangeSet.encloses(com.google.common.collect.Range<C>)", "public boolean encloses(com.google.common.collect.Range<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.ImmutableRangeSet.rangeContaining(C)", "public com.google.common.collect.Range<C> rangeContaining(C)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.ImmutableRangeSet.span()", "public com.google.common.collect.Range<C> span()"], ["boolean", "com.google.common.collect.ImmutableRangeSet.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.ImmutableRangeSet.add(com.google.common.collect.Range<C>)", "public void add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.addAll(com.google.common.collect.RangeSet<C>)", "public void addAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.remove(com.google.common.collect.Range<C>)", "public void remove(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.removeAll(com.google.common.collect.RangeSet<C>)", "public void removeAll(com.google.common.collect.RangeSet<C>)"], ["com.google.common.collect.ImmutableSet<com.google.common.collect.Range<C>>", "com.google.common.collect.ImmutableRangeSet.asRanges()", "public com.google.common.collect.ImmutableSet<com.google.common.collect.Range<C>> asRanges()"], ["com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.complement()", "public com.google.common.collect.ImmutableRangeSet<C> complement()"], ["com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.subRangeSet(com.google.common.collect.Range<C>)", "public com.google.common.collect.ImmutableRangeSet<C> subRangeSet(com.google.common.collect.Range<C>)"], ["com.google.common.collect.ImmutableSortedSet<C>", "com.google.common.collect.ImmutableRangeSet.asSet(com.google.common.collect.DiscreteDomain<C>)", "public com.google.common.collect.ImmutableSortedSet<C> asSet(com.google.common.collect.DiscreteDomain<C>)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.ImmutableRangeSet$Builder<C>", "com.google.common.collect.ImmutableRangeSet.builder()", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.ImmutableRangeSet$Builder<C> builder()"], ["boolean", "com.google.common.collect.ImmutableRangeSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableRangeSet.enclosesAll(com.google.common.collect.RangeSet)", "public boolean enclosesAll(com.google.common.collect.RangeSet)"], ["void", "com.google.common.collect.ImmutableRangeSet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.ImmutableRangeSet.contains(java.lang.Comparable)", "public boolean contains(java.lang.Comparable)"], ["com.google.common.collect.RangeSet", "com.google.common.collect.ImmutableRangeSet.subRangeSet(com.google.common.collect.Range)", "public com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range)"], ["com.google.common.collect.RangeSet", "com.google.common.collect.ImmutableRangeSet.complement()", "public com.google.common.collect.RangeSet complement()"], ["java.util.Set", "com.google.common.collect.ImmutableRangeSet.asRanges()", "public java.util.Set asRanges()"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSet$Builder()", "public com.google.common.collect.ImmutableSet$Builder()"], ["com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet$Builder.add(E)", "public com.google.common.collect.ImmutableSet$Builder<E> add(E)"], ["com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet$Builder.add(E...)", "public com.google.common.collect.ImmutableSet$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableSet$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet$Builder.addAll(java.util.Iterator<? extends E>)", "public com.google.common.collect.ImmutableSet$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet$Builder.build()", "public com.google.common.collect.ImmutableSet<E> build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "com.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSet$Builder.build()", "public com.google.common.collect.ImmutableCollection build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of()", "public static <E> com.google.common.collect.ImmutableSet<E> of()"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E)", "public static <E> com.google.common.collect.ImmutableSet<E> of(E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E)", "public static <E> com.google.common.collect.ImmutableSet<E> of(E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E)", "public static <E> com.google.common.collect.ImmutableSet<E> of(E, E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E, E)", "public static <E> com.google.common.collect.ImmutableSet<E> of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableSet<E> of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E, E, E, E, E...)", "public static <E> com.google.common.collect.ImmutableSet<E> of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(E[])", "public static <E> com.google.common.collect.ImmutableSet<E> copyOf(E[])"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableSet<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableSet<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(java.util.Collection<? extends E>)", "public static <E> com.google.common.collect.ImmutableSet<E> copyOf(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.ImmutableSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSet.hashCode()", "public int hashCode()"], ["<E> com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet.builder()", "public static <E> com.google.common.collect.ImmutableSet$Builder<E> builder()"], ["java.util.Iterator", "com.google.common.collect.ImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableSetMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder()", "public com.google.common.collect.ImmutableSetMultimap$Builder()"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.put(K, V)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> put(K, V)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> putAll(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, V...)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> putAll(K, V...)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> orderKeysBy(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)", "public com.google.common.collect.ImmutableSetMultimap$Builder<K, V> orderValuesBy(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.build()", "public com.google.common.collect.ImmutableSetMultimap<K, V> build()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableSetMultimap$Builder.build()", "public com.google.common.collect.ImmutableMultimap build()"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator)", "public com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator)", "public com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(com.google.common.collect.Multimap)", "public com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])", "public com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Object[])"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)", "public com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry)", "public com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.put(java.lang.Object, java.lang.Object)", "public com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableSetMultimap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSetMultimap$EntrySet.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of()", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> of()"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V)", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> of(K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap.builder()", "public static <K, V> com.google.common.collect.ImmutableSetMultimap$Builder<K, V> builder()"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableSetMultimap<K, V> copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSet<V>", "com.google.common.collect.ImmutableSetMultimap.get(K)", "public com.google.common.collect.ImmutableSet<V> get(K)"], ["com.google.common.collect.ImmutableSetMultimap<V, K>", "com.google.common.collect.ImmutableSetMultimap.inverse()", "public com.google.common.collect.ImmutableSetMultimap<V, K> inverse()"], ["com.google.common.collect.ImmutableSet<V>", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public com.google.common.collect.ImmutableSet<V> removeAll(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<V>", "com.google.common.collect.ImmutableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public com.google.common.collect.ImmutableSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSetMultimap.entries()", "public com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entries()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.entries()", "public com.google.common.collect.ImmutableCollection entries()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableSetMultimap.inverse()", "public com.google.common.collect.ImmutableMultimap inverse()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)", "public com.google.common.collect.ImmutableCollection get(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public com.google.common.collect.ImmutableCollection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.entries()", "public java.util.Set entries()"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedAsList.comparator()", "public java.util.Comparator<? super E> comparator()"], ["int", "com.google.common.collect.ImmutableSortedAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSortedAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableSortedAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder(java.util.Comparator<? super K>)", "public com.google.common.collect.ImmutableSortedMap$Builder(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.put(K, V)", "public com.google.common.collect.ImmutableSortedMap$Builder<K, V> put(K, V)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableSortedMap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)", "public com.google.common.collect.ImmutableSortedMap$Builder<K, V> putAll(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.build()", "public com.google.common.collect.ImmutableSortedMap<K, V> build()"], ["com.google.common.collect.ImmutableMap", "com.google.common.collect.ImmutableSortedMap$Builder.build()", "public com.google.common.collect.ImmutableMap build()"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map)", "public com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry)", "public com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.put(java.lang.Object, java.lang.Object)", "public com.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of()", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> of()"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V)", "public static <K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>, java.util.Comparator<? super K>)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>, java.util.Comparator<? super K>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOfSorted(java.util.SortedMap<K, ? extends V>)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> copyOfSorted(java.util.SortedMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap.naturalOrder()", "public static <K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V> naturalOrder()"], ["<K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap.orderedBy(java.util.Comparator<K>)", "public static <K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V> orderedBy(java.util.Comparator<K>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap.reverseOrder()", "public static <K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V> reverseOrder()"], ["int", "com.google.common.collect.ImmutableSortedMap.size()", "public int size()"], ["boolean", "com.google.common.collect.ImmutableSortedMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSortedMap.entrySet()", "public com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Comparator<? super K>", "com.google.common.collect.ImmutableSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.ImmutableSortedMap.firstKey()", "public K firstKey()"], ["K", "com.google.common.collect.ImmutableSortedMap.lastKey()", "public K lastKey()"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.headMap(K)", "public com.google.common.collect.ImmutableSortedMap<K, V> headMap(K)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.subMap(K, K)", "public com.google.common.collect.ImmutableSortedMap<K, V> subMap(K, K)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.subMap(K, boolean, K, boolean)", "public com.google.common.collect.ImmutableSortedMap<K, V> subMap(K, boolean, K, boolean)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.tailMap(K)", "public com.google.common.collect.ImmutableSortedMap<K, V> tailMap(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.pollFirstEntry()", "public final java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.pollLastEntry()", "public final java.util.Map$Entry<K, V> pollLastEntry()"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.descendingMap()", "public com.google.common.collect.ImmutableSortedMap<K, V> descendingMap()"], ["com.google.common.collect.ImmutableSortedSet<K>", "com.google.common.collect.ImmutableSortedMap.navigableKeySet()", "public com.google.common.collect.ImmutableSortedSet<K> navigableKeySet()"], ["com.google.common.collect.ImmutableSortedSet<K>", "com.google.common.collect.ImmutableSortedMap.descendingKeySet()", "public com.google.common.collect.ImmutableSortedSet<K> descendingKeySet()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.ImmutableSortedMap.keySet()", "public com.google.common.collect.ImmutableSet keySet()"], ["java.util.Set", "com.google.common.collect.ImmutableSortedMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableSortedMap.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.ImmutableSortedMap.keySet()", "public java.util.Set keySet()"], ["java.util.SortedMap", "com.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedMap.descendingKeySet()", "public java.util.NavigableSet descendingKeySet()"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedMap.navigableKeySet()", "public java.util.NavigableSet navigableKeySet()"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["<K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.builder()", "public static <K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V> builder()"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> com.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder(java.util.Comparator<? super E>)", "public com.google.common.collect.ImmutableSortedMultiset$Builder(java.util.Comparator<? super E>)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(E)", "public com.google.common.collect.ImmutableSortedMultiset$Builder<E> add(E)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.addCopies(E, int)", "public com.google.common.collect.ImmutableSortedMultiset$Builder<E> addCopies(E, int)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.setCount(E, int)", "public com.google.common.collect.ImmutableSortedMultiset$Builder<E> setCount(E, int)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(E...)", "public com.google.common.collect.ImmutableSortedMultiset$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableSortedMultiset$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator<? extends E>)", "public com.google.common.collect.ImmutableSortedMultiset$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset$Builder.build()", "public com.google.common.collect.ImmutableSortedMultiset<E> build()"], ["com.google.common.collect.ImmutableMultiset", "com.google.common.collect.ImmutableSortedMultiset$Builder.build()", "public com.google.common.collect.ImmutableMultiset build()"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.setCount(java.lang.Object, int)", "public com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object, int)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addCopies(java.lang.Object, int)", "public com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object, int)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSortedMultiset$Builder.build()", "public com.google.common.collect.ImmutableCollection build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of()", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of()"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> of(E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E, E, E...)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(E[])", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E> copyOf(E[])"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOfSorted(com.google.common.collect.SortedMultiset<E>)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> copyOfSorted(com.google.common.collect.SortedMultiset<E>)"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedMultiset.comparator()", "public final java.util.Comparator<? super E> comparator()"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.descendingMultiset()", "public com.google.common.collect.ImmutableSortedMultiset<E> descendingMultiset()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ImmutableSortedMultiset.pollFirstEntry()", "public final com.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.ImmutableSortedMultiset.pollLastEntry()", "public final com.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)"], ["<E> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset.orderedBy(java.util.Comparator<E>)", "public static <E> com.google.common.collect.ImmutableSortedMultiset$Builder<E> orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<E>> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset.reverseOrder()", "public static <E extends java.lang.Comparable<E>> com.google.common.collect.ImmutableSortedMultiset$Builder<E> reverseOrder()"], ["<E extends java.lang.Comparable<E>> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset.naturalOrder()", "public static <E extends java.lang.Comparable<E>> com.google.common.collect.ImmutableSortedMultiset$Builder<E> naturalOrder()"], ["java.util.Set", "com.google.common.collect.ImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset descendingMultiset()"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["<E> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.builder()", "public static <E> com.google.common.collect.ImmutableSortedMultiset$Builder<E> builder()"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of(E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E, E, E...)", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.copyOf(E[])", "public static <E> com.google.common.collect.ImmutableSortedMultiset<E> copyOf(E[])"], ["com.google.common.collect.ImmutableSortedSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder(java.util.Comparator<? super E>)", "public com.google.common.collect.ImmutableSortedSet$Builder(java.util.Comparator<? super E>)"], ["com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet$Builder.add(E)", "public com.google.common.collect.ImmutableSortedSet$Builder<E> add(E)"], ["com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet$Builder.add(E...)", "public com.google.common.collect.ImmutableSortedSet$Builder<E> add(E...)"], ["com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable<? extends E>)", "public com.google.common.collect.ImmutableSortedSet$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator<? extends E>)", "public com.google.common.collect.ImmutableSortedSet$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet$Builder.build()", "public com.google.common.collect.ImmutableSortedSet<E> build()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.ImmutableSortedSet$Builder.build()", "public com.google.common.collect.ImmutableSet build()"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSortedSet$Builder.build()", "public com.google.common.collect.ImmutableCollection build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)", "public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)", "public com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet$SerializedForm", "com.google.common.collect.ImmutableSortedSet$SerializedForm(java.util.Comparator<? super E>, java.lang.Object[])", "public com.google.common.collect.ImmutableSortedSet$SerializedForm(java.util.Comparator<? super E>, java.lang.Object[])"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of()", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of()"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> of(E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> of(E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E, E, E...)", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(E[])", "public static <E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E> copyOf(E[])"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Collection<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOfSorted(java.util.SortedSet<E>)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOfSorted(java.util.SortedSet<E>)"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet.orderedBy(java.util.Comparator<E>)", "public static <E> com.google.common.collect.ImmutableSortedSet$Builder<E> orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet.reverseOrder()", "public static <E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedSet$Builder<E> reverseOrder()"], ["<E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet.naturalOrder()", "public static <E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedSet$Builder<E> naturalOrder()"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.headSet(E)", "public com.google.common.collect.ImmutableSortedSet<E> headSet(E)"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.headSet(E, boolean)", "public com.google.common.collect.ImmutableSortedSet<E> headSet(E, boolean)"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.subSet(E, E)", "public com.google.common.collect.ImmutableSortedSet<E> subSet(E, E)"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.subSet(E, boolean, E, boolean)", "public com.google.common.collect.ImmutableSortedSet<E> subSet(E, boolean, E, boolean)"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.tailSet(E)", "public com.google.common.collect.ImmutableSortedSet<E> tailSet(E)"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.tailSet(E, boolean)", "public com.google.common.collect.ImmutableSortedSet<E> tailSet(E, boolean)"], ["E", "com.google.common.collect.ImmutableSortedSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.higher(E)", "public E higher(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.first()", "public E first()"], ["E", "com.google.common.collect.ImmutableSortedSet.last()", "public E last()"], ["E", "com.google.common.collect.ImmutableSortedSet.pollFirst()", "public final E pollFirst()"], ["E", "com.google.common.collect.ImmutableSortedSet.pollLast()", "public final E pollLast()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.descendingSet()", "public com.google.common.collect.ImmutableSortedSet<E> descendingSet()"], ["java.util.Iterator", "com.google.common.collect.ImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object, boolean)", "public java.util.NavigableSet tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object, boolean)", "public java.util.NavigableSet headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.Iterator", "com.google.common.collect.ImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.descendingSet()", "public java.util.NavigableSet descendingSet()"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.builder()", "public static <E> com.google.common.collect.ImmutableSortedSet$Builder<E> builder()"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of(E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of(E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E, E, E...)", "public static <E> com.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.copyOf(E[])", "public static <E> com.google.common.collect.ImmutableSortedSet<E> copyOf(E[])"], ["com.google.common.collect.ImmutableTable$Builder", "com.google.common.collect.ImmutableTable$Builder()", "public com.google.common.collect.ImmutableTable$Builder()"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.orderRowsBy(java.util.Comparator<? super R>)", "public com.google.common.collect.ImmutableTable$Builder<R, C, V> orderRowsBy(java.util.Comparator<? super R>)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.orderColumnsBy(java.util.Comparator<? super C>)", "public com.google.common.collect.ImmutableTable$Builder<R, C, V> orderColumnsBy(java.util.Comparator<? super C>)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.put(R, C, V)", "public com.google.common.collect.ImmutableTable$Builder<R, C, V> put(R, C, V)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.put(com.google.common.collect.Table$Cell<? extends R, ? extends C, ? extends V>)", "public com.google.common.collect.ImmutableTable$Builder<R, C, V> put(com.google.common.collect.Table$Cell<? extends R, ? extends C, ? extends V>)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public com.google.common.collect.ImmutableTable$Builder<R, C, V> putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.build()", "public com.google.common.collect.ImmutableTable<R, C, V> build()"], ["<R, C, V> com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable.of()", "public static <R, C, V> com.google.common.collect.ImmutableTable<R, C, V> of()"], ["<R, C, V> com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable.of(R, C, V)", "public static <R, C, V> com.google.common.collect.ImmutableTable<R, C, V> of(R, C, V)"], ["<R, C, V> com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable.copyOf(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public static <R, C, V> com.google.common.collect.ImmutableTable<R, C, V> copyOf(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable.builder()", "public static <R, C, V> com.google.common.collect.ImmutableTable$Builder<R, C, V> builder()"], ["com.google.common.collect.ImmutableSet<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.ImmutableTable.cellSet()", "public com.google.common.collect.ImmutableSet<com.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.ImmutableTable.values()", "public com.google.common.collect.ImmutableCollection<V> values()"], ["com.google.common.collect.ImmutableMap<R, V>", "com.google.common.collect.ImmutableTable.column(C)", "public com.google.common.collect.ImmutableMap<R, V> column(C)"], ["com.google.common.collect.ImmutableSet<C>", "com.google.common.collect.ImmutableTable.columnKeySet()", "public com.google.common.collect.ImmutableSet<C> columnKeySet()"], ["com.google.common.collect.ImmutableMap<C, V>", "com.google.common.collect.ImmutableTable.row(R)", "public com.google.common.collect.ImmutableMap<C, V> row(R)"], ["com.google.common.collect.ImmutableSet<R>", "com.google.common.collect.ImmutableTable.rowKeySet()", "public com.google.common.collect.ImmutableSet<R> rowKeySet()"], ["boolean", "com.google.common.collect.ImmutableTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["void", "com.google.common.collect.ImmutableTable.clear()", "public final void clear()"], ["V", "com.google.common.collect.ImmutableTable.put(R, C, V)", "public final V put(R, C, V)"], ["void", "com.google.common.collect.ImmutableTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public final void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.ImmutableTable.remove(java.lang.Object, java.lang.Object)", "public final V remove(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ImmutableTable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.ImmutableTable.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.ImmutableTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableTable.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.ImmutableTable.cellSet()", "public java.util.Set cellSet()"], ["boolean", "com.google.common.collect.ImmutableTable.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "com.google.common.collect.ImmutableTable.get(java.lang.Object, java.lang.Object)", "public java.lang.Object get(java.lang.Object, java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Set", "com.google.common.collect.ImmutableTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["boolean", "com.google.common.collect.ImmutableTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "com.google.common.collect.ImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Map", "com.google.common.collect.ImmutableTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ImmutableTable.row(java.lang.Object)", "public java.util.Map row(java.lang.Object)"], ["E", "com.google.common.collect.Interners$1.intern(E)", "public E intern(E)"], ["com.google.common.collect.Interners$InternerFunction", "com.google.common.collect.Interners$InternerFunction(com.google.common.collect.Interner<E>)", "public com.google.common.collect.Interners$InternerFunction(com.google.common.collect.Interner<E>)"], ["E", "com.google.common.collect.Interners$InternerFunction.apply(E)", "public E apply(E)"], ["int", "com.google.common.collect.Interners$InternerFunction.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.Interners$InternerFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.google.common.collect.Interners$WeakInterner$Dummy[]", "com.google.common.collect.Interners$WeakInterner$Dummy.values()", "public static com.google.common.collect.Interners$WeakInterner$Dummy[] values()"], ["com.google.common.collect.Interners$WeakInterner$Dummy", "com.google.common.collect.Interners$WeakInterner$Dummy.valueOf(java.lang.String)", "public static com.google.common.collect.Interners$WeakInterner$Dummy valueOf(java.lang.String)"], ["E", "com.google.common.collect.Interners$WeakInterner.intern(E)", "public E intern(E)"], ["<E> com.google.common.collect.Interner<E>", "com.google.common.collect.Interners.newStrongInterner()", "public static <E> com.google.common.collect.Interner<E> newStrongInterner()"], ["<E> com.google.common.collect.Interner<E>", "com.google.common.collect.Interners.newWeakInterner()", "public static <E> com.google.common.collect.Interner<E> newWeakInterner()"], ["<E> com.google.common.base.Function<E, E>", "com.google.common.collect.Interners.asFunction(com.google.common.collect.Interner<E>)", "public static <E> com.google.common.base.Function<E, E> asFunction(com.google.common.collect.Interner<E>)"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$1.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "com.google.common.collect.Iterables$1.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.Iterables$10$1.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterables$10$1.next()", "public T next()"], ["void", "com.google.common.collect.Iterables$10$1.remove()", "public void remove()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$10.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$11.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$12.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "com.google.common.collect.Iterables$12.toString()", "public java.lang.String toString()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$13.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "com.google.common.collect.Iterables$13.toString()", "public java.lang.String toString()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$14.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<? extends T>", "com.google.common.collect.Iterables$15.apply(java.lang.Iterable<? extends T>)", "public java.util.Iterator<? extends T> apply(java.lang.Iterable<? extends T>)"], ["java.lang.Object", "com.google.common.collect.Iterables$15.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$2.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<java.util.List<T>>", "com.google.common.collect.Iterables$4.iterator()", "public java.util.Iterator<java.util.List<T>> iterator()"], ["java.util.Iterator<java.util.List<T>>", "com.google.common.collect.Iterables$5.iterator()", "public java.util.Iterator<java.util.List<T>> iterator()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$6.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$7.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$8.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$9.iterator()", "public java.util.Iterator<T> iterator()"], ["T", "com.google.common.collect.Iterables$ConsumingQueueIterator.computeNext()", "public T computeNext()"], ["java.util.Iterator<T>", "com.google.common.collect.Iterables$UnmodifiableIterable.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "com.google.common.collect.Iterables$UnmodifiableIterable.toString()", "public java.lang.String toString()"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.unmodifiableIterable(java.lang.Iterable<T>)", "public static <T> java.lang.Iterable<T> unmodifiableIterable(java.lang.Iterable<T>)"], ["<E> java.lang.Iterable<E>", "com.google.common.collect.Iterables.unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>)", "public static <E> java.lang.Iterable<E> unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>)"], ["int", "com.google.common.collect.Iterables.size(java.lang.Iterable<?>)", "public static int size(java.lang.Iterable<?>)"], ["boolean", "com.google.common.collect.Iterables.contains(java.lang.Iterable<?>, java.lang.Object)", "public static boolean contains(java.lang.Iterable<?>, java.lang.Object)"], ["boolean", "com.google.common.collect.Iterables.removeAll(java.lang.Iterable<?>, java.util.Collection<?>)", "public static boolean removeAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Iterables.retainAll(java.lang.Iterable<?>, java.util.Collection<?>)", "public static boolean retainAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["<T> boolean", "com.google.common.collect.Iterables.removeIf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> boolean removeIf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["boolean", "com.google.common.collect.Iterables.elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)", "public static boolean elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)"], ["java.lang.String", "com.google.common.collect.Iterables.toString(java.lang.Iterable<?>)", "public static java.lang.String toString(java.lang.Iterable<?>)"], ["<T> T", "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)", "public static <T> T getOnlyElement(java.lang.Iterable<T>)"], ["<T> T", "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)", "public static <T> T getOnlyElement(java.lang.Iterable<? extends T>, T)"], ["<T> T[]", "com.google.common.collect.Iterables.toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)", "public static <T> T[] toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)", "public static <T> boolean addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)"], ["int", "com.google.common.collect.Iterables.frequency(java.lang.Iterable<?>, java.lang.Object)", "public static int frequency(java.lang.Iterable<?>, java.lang.Object)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.cycle(java.lang.Iterable<T>)", "public static <T> java.lang.Iterable<T> cycle(java.lang.Iterable<T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.cycle(T...)", "public static <T> java.lang.Iterable<T> cycle(T...)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>...)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>...)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"], ["<T> java.lang.Iterable<java.util.List<T>>", "com.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<java.util.List<T>> partition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<java.util.List<T>>", "com.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<java.util.List<T>> paddedPartition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> java.lang.Iterable<T> filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.filter(java.lang.Iterable<?>, java.lang.Class<T>)", "public static <T> java.lang.Iterable<T> filter(java.lang.Iterable<?>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterables.any(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> boolean any(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> boolean", "com.google.common.collect.Iterables.all(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> boolean all(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterables.find(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> T find(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterables.find(java.lang.Iterable<? extends T>, com.google.common.base.Predicate<? super T>, T)", "public static <T> T find(java.lang.Iterable<? extends T>, com.google.common.base.Predicate<? super T>, T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.collect.Iterables.tryFind(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> com.google.common.base.Optional<T> tryFind(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> int", "com.google.common.collect.Iterables.indexOf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)", "public static <T> int indexOf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<F, T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)", "public static <F, T> java.lang.Iterable<T> transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "com.google.common.collect.Iterables.get(java.lang.Iterable<T>, int)", "public static <T> T get(java.lang.Iterable<T>, int)"], ["<T> T", "com.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)", "public static <T> T get(java.lang.Iterable<? extends T>, int, T)"], ["<T> T", "com.google.common.collect.Iterables.getFirst(java.lang.Iterable<? extends T>, T)", "public static <T> T getFirst(java.lang.Iterable<? extends T>, T)"], ["<T> T", "com.google.common.collect.Iterables.getLast(java.lang.Iterable<T>)", "public static <T> T getLast(java.lang.Iterable<T>)"], ["<T> T", "com.google.common.collect.Iterables.getLast(java.lang.Iterable<? extends T>, T)", "public static <T> T getLast(java.lang.Iterable<? extends T>, T)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<T> skip(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<T> limit(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.consumingIterable(java.lang.Iterable<T>)", "public static <T> java.lang.Iterable<T> consumingIterable(java.lang.Iterable<T>)"], ["boolean", "com.google.common.collect.Iterables.isEmpty(java.lang.Iterable<?>)", "public static boolean isEmpty(java.lang.Iterable<?>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)", "public static <T> java.lang.Iterable<T> mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "com.google.common.collect.Iterators$1.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "com.google.common.collect.Iterators$1.next()", "public java.lang.Object next()"], ["boolean", "com.google.common.collect.Iterators$1.hasPrevious()", "public boolean hasPrevious()"], ["java.lang.Object", "com.google.common.collect.Iterators$1.previous()", "public java.lang.Object previous()"], ["int", "com.google.common.collect.Iterators$1.nextIndex()", "public int nextIndex()"], ["int", "com.google.common.collect.Iterators$1.previousIndex()", "public int previousIndex()"], ["boolean", "com.google.common.collect.Iterators$10.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$10.next()", "public T next()"], ["java.lang.String", "com.google.common.collect.Iterators$10.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.Iterators$12.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$12.next()", "public T next()"], ["boolean", "com.google.common.collect.Iterators$13.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$13.next()", "public T next()"], ["boolean", "com.google.common.collect.Iterators$14.hasMoreElements()", "public boolean hasMoreElements()"], ["T", "com.google.common.collect.Iterators$14.nextElement()", "public T nextElement()"], ["boolean", "com.google.common.collect.Iterators$2.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "com.google.common.collect.Iterators$2.next()", "public java.lang.Object next()"], ["void", "com.google.common.collect.Iterators$2.remove()", "public void remove()"], ["boolean", "com.google.common.collect.Iterators$3.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$3.next()", "public T next()"], ["boolean", "com.google.common.collect.Iterators$4.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$4.next()", "public T next()"], ["void", "com.google.common.collect.Iterators$4.remove()", "public void remove()"], ["boolean", "com.google.common.collect.Iterators$5.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$5.next()", "public T next()"], ["void", "com.google.common.collect.Iterators$5.remove()", "public void remove()"], ["boolean", "com.google.common.collect.Iterators$6.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "com.google.common.collect.Iterators$6.next()", "public java.util.List<T> next()"], ["java.lang.Object", "com.google.common.collect.Iterators$6.next()", "public java.lang.Object next()"], ["boolean", "com.google.common.collect.Iterators$9.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$9.next()", "public T next()"], ["void", "com.google.common.collect.Iterators$9.remove()", "public void remove()"], ["int", "com.google.common.collect.Iterators$MergingIterator$1.compare(com.google.common.collect.PeekingIterator<T>, com.google.common.collect.PeekingIterator<T>)", "public int compare(com.google.common.collect.PeekingIterator<T>, com.google.common.collect.PeekingIterator<T>)"], ["int", "com.google.common.collect.Iterators$MergingIterator$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.Iterators$MergingIterator", "com.google.common.collect.Iterators$MergingIterator(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)", "public com.google.common.collect.Iterators$MergingIterator(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "com.google.common.collect.Iterators$MergingIterator.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.Iterators$MergingIterator.next()", "public T next()"], ["com.google.common.collect.Iterators$PeekingImpl", "com.google.common.collect.Iterators$PeekingImpl(java.util.Iterator<? extends E>)", "public com.google.common.collect.Iterators$PeekingImpl(java.util.Iterator<? extends E>)"], ["boolean", "com.google.common.collect.Iterators$PeekingImpl.hasNext()", "public boolean hasNext()"], ["E", "com.google.common.collect.Iterators$PeekingImpl.next()", "public E next()"], ["void", "com.google.common.collect.Iterators$PeekingImpl.remove()", "public void remove()"], ["E", "com.google.common.collect.Iterators$PeekingImpl.peek()", "public E peek()"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.emptyIterator()", "public static <T> com.google.common.collect.UnmodifiableIterator<T> emptyIterator()"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator<T>)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> unmodifiableIterator(java.util.Iterator<T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>)"], ["int", "com.google.common.collect.Iterators.size(java.util.Iterator<?>)", "public static int size(java.util.Iterator<?>)"], ["boolean", "com.google.common.collect.Iterators.contains(java.util.Iterator<?>, java.lang.Object)", "public static boolean contains(java.util.Iterator<?>, java.lang.Object)"], ["boolean", "com.google.common.collect.Iterators.removeAll(java.util.Iterator<?>, java.util.Collection<?>)", "public static boolean removeAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["<T> boolean", "com.google.common.collect.Iterators.removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> boolean removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["boolean", "com.google.common.collect.Iterators.retainAll(java.util.Iterator<?>, java.util.Collection<?>)", "public static boolean retainAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Iterators.elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)", "public static boolean elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)"], ["java.lang.String", "com.google.common.collect.Iterators.toString(java.util.Iterator<?>)", "public static java.lang.String toString(java.util.Iterator<?>)"], ["<T> T", "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<T>)", "public static <T> T getOnlyElement(java.util.Iterator<T>)"], ["<T> T", "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<? extends T>, T)", "public static <T> T getOnlyElement(java.util.Iterator<? extends T>, T)"], ["<T> T[]", "com.google.common.collect.Iterators.toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)", "public static <T> T[] toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)", "public static <T> boolean addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)"], ["int", "com.google.common.collect.Iterators.frequency(java.util.Iterator<?>, java.lang.Object)", "public static int frequency(java.util.Iterator<?>, java.lang.Object)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.cycle(java.lang.Iterable<T>)", "public static <T> java.util.Iterator<T> cycle(java.lang.Iterable<T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.cycle(T...)", "public static <T> java.util.Iterator<T> cycle(T...)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>...)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>...)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)"], ["<T> com.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "com.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)", "public static <T> com.google.common.collect.UnmodifiableIterator<java.util.List<T>> partition(java.util.Iterator<T>, int)"], ["<T> com.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "com.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)", "public static <T> com.google.common.collect.UnmodifiableIterator<java.util.List<T>> paddedPartition(java.util.Iterator<T>, int)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.filter(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> filter(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.filter(java.util.Iterator<?>, java.lang.Class<T>)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> filter(java.util.Iterator<?>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterators.any(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> boolean any(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> boolean", "com.google.common.collect.Iterators.all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> boolean all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterators.find(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> T find(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterators.find(java.util.Iterator<? extends T>, com.google.common.base.Predicate<? super T>, T)", "public static <T> T find(java.util.Iterator<? extends T>, com.google.common.base.Predicate<? super T>, T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.collect.Iterators.tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> com.google.common.base.Optional<T> tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> int", "com.google.common.collect.Iterators.indexOf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)", "public static <T> int indexOf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<F, T> java.util.Iterator<T>", "com.google.common.collect.Iterators.transform(java.util.Iterator<F>, com.google.common.base.Function<? super F, ? extends T>)", "public static <F, T> java.util.Iterator<T> transform(java.util.Iterator<F>, com.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)", "public static <T> T get(java.util.Iterator<T>, int)"], ["<T> T", "com.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)", "public static <T> T get(java.util.Iterator<? extends T>, int, T)"], ["<T> T", "com.google.common.collect.Iterators.getNext(java.util.Iterator<? extends T>, T)", "public static <T> T getNext(java.util.Iterator<? extends T>, T)"], ["<T> T", "com.google.common.collect.Iterators.getLast(java.util.Iterator<T>)", "public static <T> T getLast(java.util.Iterator<T>)"], ["<T> T", "com.google.common.collect.Iterators.getLast(java.util.Iterator<? extends T>, T)", "public static <T> T getLast(java.util.Iterator<? extends T>, T)"], ["int", "com.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)", "public static int advance(java.util.Iterator<?>, int)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)", "public static <T> java.util.Iterator<T> limit(java.util.Iterator<T>, int)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.consumingIterator(java.util.Iterator<T>)", "public static <T> java.util.Iterator<T> consumingIterator(java.util.Iterator<T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.forArray(T...)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> forArray(T...)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.singletonIterator(T)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> singletonIterator(T)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.forEnumeration(java.util.Enumeration<T>)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> forEnumeration(java.util.Enumeration<T>)"], ["<T> java.util.Enumeration<T>", "com.google.common.collect.Iterators.asEnumeration(java.util.Iterator<T>)", "public static <T> java.util.Enumeration<T> asEnumeration(java.util.Iterator<T>)"], ["<T> com.google.common.collect.PeekingIterator<T>", "com.google.common.collect.Iterators.peekingIterator(java.util.Iterator<? extends T>)", "public static <T> com.google.common.collect.PeekingIterator<T> peekingIterator(java.util.Iterator<? extends T>)"], ["<T> com.google.common.collect.PeekingIterator<T>", "com.google.common.collect.Iterators.peekingIterator(com.google.common.collect.PeekingIterator<T>)", "public static <T> com.google.common.collect.PeekingIterator<T> peekingIterator(com.google.common.collect.PeekingIterator<T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)", "public static <T> com.google.common.collect.UnmodifiableIterator<T> mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["int", "com.google.common.collect.LexicographicalOrdering.compare(java.lang.Iterable<T>, java.lang.Iterable<T>)", "public int compare(java.lang.Iterable<T>, java.lang.Iterable<T>)"], ["boolean", "com.google.common.collect.LexicographicalOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.LexicographicalOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.LexicographicalOrdering.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.LexicographicalOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.LinkedHashMultimap$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "com.google.common.collect.LinkedHashMultimap$1.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.LinkedHashMultimap$1.next()", "public java.lang.Object next()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInValueSet()", "public com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getPredecessorInValueSet()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()", "public com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getSuccessorInValueSet()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()", "public com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V> getPredecessorInMultimap()"], ["com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInMultimap()", "public com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V> getSuccessorInMultimap()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)", "public void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)", "public void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet$1.hasNext()", "public boolean hasNext()"], ["V", "com.google.common.collect.LinkedHashMultimap$ValueSet$1.next()", "public V next()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet$1.remove()", "public void remove()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueSet.getPredecessorInValueSet()", "public com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getPredecessorInValueSet()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueSet.getSuccessorInValueSet()", "public com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getSuccessorInValueSet()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["java.util.Iterator<V>", "com.google.common.collect.LinkedHashMultimap$ValueSet.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "com.google.common.collect.LinkedHashMultimap$ValueSet.size()", "public int size()"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet.add(V)", "public boolean add(V)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.clear()", "public void clear()"], ["<K, V> com.google.common.collect.LinkedHashMultimap<K, V>", "com.google.common.collect.LinkedHashMultimap.create()", "public static <K, V> com.google.common.collect.LinkedHashMultimap<K, V> create()"], ["<K, V> com.google.common.collect.LinkedHashMultimap<K, V>", "com.google.common.collect.LinkedHashMultimap.create(int, int)", "public static <K, V> com.google.common.collect.LinkedHashMultimap<K, V> create(int, int)"], ["<K, V> com.google.common.collect.LinkedHashMultimap<K, V>", "com.google.common.collect.LinkedHashMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.LinkedHashMultimap<K, V> create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<V>", "com.google.common.collect.LinkedHashMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.LinkedHashMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "com.google.common.collect.LinkedHashMultimap.values()", "public java.util.Collection<V> values()"], ["void", "com.google.common.collect.LinkedHashMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.LinkedHashMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "com.google.common.collect.LinkedHashMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Set", "com.google.common.collect.LinkedHashMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.LinkedHashMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.LinkedHashMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.LinkedHashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "com.google.common.collect.LinkedHashMultimap.size()", "public int size()"], ["java.lang.String", "com.google.common.collect.LinkedHashMultimap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.LinkedHashMultimap.hashCode()", "public int hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.LinkedHashMultimap.keys()", "public com.google.common.collect.Multiset keys()"], ["java.util.Set", "com.google.common.collect.LinkedHashMultimap.keySet()", "public java.util.Set keySet()"], ["boolean", "com.google.common.collect.LinkedHashMultimap.putAll(com.google.common.collect.Multimap)", "public boolean putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.isEmpty()", "public boolean isEmpty()"], ["<E> com.google.common.collect.LinkedHashMultiset<E>", "com.google.common.collect.LinkedHashMultiset.create()", "public static <E> com.google.common.collect.LinkedHashMultiset<E> create()"], ["<E> com.google.common.collect.LinkedHashMultiset<E>", "com.google.common.collect.LinkedHashMultiset.create(int)", "public static <E> com.google.common.collect.LinkedHashMultiset<E> create(int)"], ["<E> com.google.common.collect.LinkedHashMultiset<E>", "com.google.common.collect.LinkedHashMultiset.create(java.lang.Iterable<? extends E>)", "public static <E> com.google.common.collect.LinkedHashMultiset<E> create(java.lang.Iterable<? extends E>)"], ["int", "com.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int)", "public int setCount(java.lang.Object, int)"], ["int", "com.google.common.collect.LinkedHashMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.LinkedHashMultiset.add(java.lang.Object, int)", "public int add(java.lang.Object, int)"], ["int", "com.google.common.collect.LinkedHashMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.LinkedHashMultiset.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.LinkedHashMultiset.size()", "public int size()"], ["void", "com.google.common.collect.LinkedHashMultiset.clear()", "public void clear()"], ["java.util.Set", "com.google.common.collect.LinkedHashMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.lang.String", "com.google.common.collect.LinkedHashMultiset.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.LinkedHashMultiset.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.LinkedHashMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.LinkedHashMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "com.google.common.collect.LinkedHashMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int, int)", "public boolean setCount(java.lang.Object, int, int)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.LinkedListMultimap$1.size()", "public int size()"], ["java.util.ListIterator<V>", "com.google.common.collect.LinkedListMultimap$1.listIterator(int)", "public java.util.ListIterator<V> listIterator(int)"], ["int", "com.google.common.collect.LinkedListMultimap$2.size()", "public int size()"], ["java.util.Iterator<K>", "com.google.common.collect.LinkedListMultimap$2.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "com.google.common.collect.LinkedListMultimap$2.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap$2.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.LinkedListMultimap$3$1.set(V)", "public void set(V)"], ["int", "com.google.common.collect.LinkedListMultimap$3.size()", "public int size()"], ["java.util.ListIterator<V>", "com.google.common.collect.LinkedListMultimap$3.listIterator(int)", "public java.util.ListIterator<V> listIterator(int)"], ["int", "com.google.common.collect.LinkedListMultimap$4.size()", "public int size()"], ["java.util.ListIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.LinkedListMultimap$4.listIterator(int)", "public java.util.ListIterator<java.util.Map$Entry<K, V>> listIterator(int)"], ["boolean", "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator.hasNext()", "public boolean hasNext()"], ["K", "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator.next()", "public K next()"], ["void", "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator.remove()", "public void remove()"], ["K", "com.google.common.collect.LinkedListMultimap$Node.getKey()", "public K getKey()"], ["V", "com.google.common.collect.LinkedListMultimap$Node.getValue()", "public V getValue()"], ["V", "com.google.common.collect.LinkedListMultimap$Node.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.LinkedListMultimap$NodeIterator.hasNext()", "public boolean hasNext()"], ["com.google.common.collect.LinkedListMultimap$Node<K, V>", "com.google.common.collect.LinkedListMultimap$NodeIterator.next()", "public com.google.common.collect.LinkedListMultimap$Node<K, V> next()"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.remove()", "public void remove()"], ["boolean", "com.google.common.collect.LinkedListMultimap$NodeIterator.hasPrevious()", "public boolean hasPrevious()"], ["com.google.common.collect.LinkedListMultimap$Node<K, V>", "com.google.common.collect.LinkedListMultimap$NodeIterator.previous()", "public com.google.common.collect.LinkedListMultimap$Node<K, V> previous()"], ["int", "com.google.common.collect.LinkedListMultimap$NodeIterator.nextIndex()", "public int nextIndex()"], ["int", "com.google.common.collect.LinkedListMultimap$NodeIterator.previousIndex()", "public int previousIndex()"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.set(java.util.Map$Entry<K, V>)", "public void set(java.util.Map$Entry<K, V>)"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.add(java.util.Map$Entry<K, V>)", "public void add(java.util.Map$Entry<K, V>)"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.add(java.lang.Object)", "public void add(java.lang.Object)"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.set(java.lang.Object)", "public void set(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.LinkedListMultimap$NodeIterator.previous()", "public java.lang.Object previous()"], ["java.lang.Object", "com.google.common.collect.LinkedListMultimap$NodeIterator.next()", "public java.lang.Object next()"], ["com.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator(com.google.common.collect.LinkedListMultimap, java.lang.Object, int)", "public com.google.common.collect.LinkedListMultimap$ValueForKeyIterator(com.google.common.collect.LinkedListMultimap, java.lang.Object, int)"], ["boolean", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasNext()", "public boolean hasNext()"], ["V", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.next()", "public V next()"], ["boolean", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasPrevious()", "public boolean hasPrevious()"], ["V", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previous()", "public V previous()"], ["int", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.nextIndex()", "public int nextIndex()"], ["int", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previousIndex()", "public int previousIndex()"], ["void", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.remove()", "public void remove()"], ["void", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.set(V)", "public void set(V)"], ["void", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.add(V)", "public void add(V)"], ["<K, V> com.google.common.collect.LinkedListMultimap<K, V>", "com.google.common.collect.LinkedListMultimap.create()", "public static <K, V> com.google.common.collect.LinkedListMultimap<K, V> create()"], ["<K, V> com.google.common.collect.LinkedListMultimap<K, V>", "com.google.common.collect.LinkedListMultimap.create(int)", "public static <K, V> com.google.common.collect.LinkedListMultimap<K, V> create(int)"], ["<K, V> com.google.common.collect.LinkedListMultimap<K, V>", "com.google.common.collect.LinkedListMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.LinkedListMultimap<K, V> create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["int", "com.google.common.collect.LinkedListMultimap.size()", "public int size()"], ["boolean", "com.google.common.collect.LinkedListMultimap.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.LinkedListMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap.put(K, V)", "public boolean put(K, V)"], ["java.util.List<V>", "com.google.common.collect.LinkedListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.List<V>", "com.google.common.collect.LinkedListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["void", "com.google.common.collect.LinkedListMultimap.clear()", "public void clear()"], ["java.util.List<V>", "com.google.common.collect.LinkedListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.LinkedListMultimap.values()", "public java.util.List<V> values()"], ["java.util.List<java.util.Map$Entry<K, V>>", "com.google.common.collect.LinkedListMultimap.entries()", "public java.util.List<java.util.Map$Entry<K, V>> entries()"], ["java.lang.String", "com.google.common.collect.LinkedListMultimap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.LinkedListMultimap.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.LinkedListMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.LinkedListMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.values()", "public java.util.Collection values()"], ["com.google.common.collect.Multiset", "com.google.common.collect.LinkedListMultimap.keys()", "public com.google.common.collect.Multiset keys()"], ["java.util.Set", "com.google.common.collect.LinkedListMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedListMultimap.putAll(com.google.common.collect.Multimap)", "public boolean putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.LinkedListMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedListMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.ListIterator<E>", "com.google.common.collect.Lists$1.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["java.util.ListIterator<E>", "com.google.common.collect.Lists$2.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["void", "com.google.common.collect.Lists$AbstractListWrapper.add(int, E)", "public void add(int, E)"], ["boolean", "com.google.common.collect.Lists$AbstractListWrapper.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.Lists$AbstractListWrapper.get(int)", "public E get(int)"], ["E", "com.google.common.collect.Lists$AbstractListWrapper.remove(int)", "public E remove(int)"], ["E", "com.google.common.collect.Lists$AbstractListWrapper.set(int, E)", "public E set(int, E)"], ["boolean", "com.google.common.collect.Lists$AbstractListWrapper.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.Lists$AbstractListWrapper.size()", "public int size()"], ["java.lang.Character", "com.google.common.collect.Lists$CharSequenceAsList.get(int)", "public java.lang.Character get(int)"], ["int", "com.google.common.collect.Lists$CharSequenceAsList.size()", "public int size()"], ["java.lang.Object", "com.google.common.collect.Lists$CharSequenceAsList.get(int)", "public java.lang.Object get(int)"], ["int", "com.google.common.collect.Lists$OnePlusArrayList.size()", "public int size()"], ["E", "com.google.common.collect.Lists$OnePlusArrayList.get(int)", "public E get(int)"], ["java.util.List<T>", "com.google.common.collect.Lists$Partition.get(int)", "public java.util.List<T> get(int)"], ["int", "com.google.common.collect.Lists$Partition.size()", "public int size()"], ["boolean", "com.google.common.collect.Lists$Partition.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "com.google.common.collect.Lists$Partition.get(int)", "public java.lang.Object get(int)"], ["void", "com.google.common.collect.Lists$ReverseList$1.add(T)", "public void add(T)"], ["boolean", "com.google.common.collect.Lists$ReverseList$1.hasNext()", "public boolean hasNext()"], ["boolean", "com.google.common.collect.Lists$ReverseList$1.hasPrevious()", "public boolean hasPrevious()"], ["T", "com.google.common.collect.Lists$ReverseList$1.next()", "public T next()"], ["int", "com.google.common.collect.Lists$ReverseList$1.nextIndex()", "public int nextIndex()"], ["T", "com.google.common.collect.Lists$ReverseList$1.previous()", "public T previous()"], ["int", "com.google.common.collect.Lists$ReverseList$1.previousIndex()", "public int previousIndex()"], ["void", "com.google.common.collect.Lists$ReverseList$1.remove()", "public void remove()"], ["void", "com.google.common.collect.Lists$ReverseList$1.set(T)", "public void set(T)"], ["void", "com.google.common.collect.Lists$ReverseList.add(int, T)", "public void add(int, T)"], ["void", "com.google.common.collect.Lists$ReverseList.clear()", "public void clear()"], ["T", "com.google.common.collect.Lists$ReverseList.remove(int)", "public T remove(int)"], ["T", "com.google.common.collect.Lists$ReverseList.set(int, T)", "public T set(int, T)"], ["T", "com.google.common.collect.Lists$ReverseList.get(int)", "public T get(int)"], ["int", "com.google.common.collect.Lists$ReverseList.size()", "public int size()"], ["java.util.List<T>", "com.google.common.collect.Lists$ReverseList.subList(int, int)", "public java.util.List<T> subList(int, int)"], ["java.util.Iterator<T>", "com.google.common.collect.Lists$ReverseList.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.ListIterator<T>", "com.google.common.collect.Lists$ReverseList.listIterator(int)", "public java.util.ListIterator<T> listIterator(int)"], ["int", "com.google.common.collect.Lists$StringAsImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.Lists$StringAsImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["com.google.common.collect.ImmutableList<java.lang.Character>", "com.google.common.collect.Lists$StringAsImmutableList.subList(int, int)", "public com.google.common.collect.ImmutableList<java.lang.Character> subList(int, int)"], ["java.lang.Character", "com.google.common.collect.Lists$StringAsImmutableList.get(int)", "public java.lang.Character get(int)"], ["int", "com.google.common.collect.Lists$StringAsImmutableList.size()", "public int size()"], ["java.util.List", "com.google.common.collect.Lists$StringAsImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.lang.Object", "com.google.common.collect.Lists$StringAsImmutableList.get(int)", "public java.lang.Object get(int)"], ["void", "com.google.common.collect.Lists$TransformingRandomAccessList.clear()", "public void clear()"], ["T", "com.google.common.collect.Lists$TransformingRandomAccessList.get(int)", "public T get(int)"], ["java.util.Iterator<T>", "com.google.common.collect.Lists$TransformingRandomAccessList.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.ListIterator<T>", "com.google.common.collect.Lists$TransformingRandomAccessList.listIterator(int)", "public java.util.ListIterator<T> listIterator(int)"], ["boolean", "com.google.common.collect.Lists$TransformingRandomAccessList.isEmpty()", "public boolean isEmpty()"], ["T", "com.google.common.collect.Lists$TransformingRandomAccessList.remove(int)", "public T remove(int)"], ["int", "com.google.common.collect.Lists$TransformingRandomAccessList.size()", "public int size()"], ["void", "com.google.common.collect.Lists$TransformingSequentialList.clear()", "public void clear()"], ["int", "com.google.common.collect.Lists$TransformingSequentialList.size()", "public int size()"], ["java.util.ListIterator<T>", "com.google.common.collect.Lists$TransformingSequentialList.listIterator(int)", "public java.util.ListIterator<T> listIterator(int)"], ["int", "com.google.common.collect.Lists$TwoPlusArrayList.size()", "public int size()"], ["E", "com.google.common.collect.Lists$TwoPlusArrayList.get(int)", "public E get(int)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList()", "public static <E> java.util.ArrayList<E> newArrayList()"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList(E...)", "public static <E> java.util.ArrayList<E> newArrayList(E...)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList(java.lang.Iterable<? extends E>)", "public static <E> java.util.ArrayList<E> newArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)", "public static <E> java.util.ArrayList<E> newArrayList(java.util.Iterator<? extends E>)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayListWithCapacity(int)", "public static <E> java.util.ArrayList<E> newArrayListWithCapacity(int)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayListWithExpectedSize(int)", "public static <E> java.util.ArrayList<E> newArrayListWithExpectedSize(int)"], ["<E> java.util.LinkedList<E>", "com.google.common.collect.Lists.newLinkedList()", "public static <E> java.util.LinkedList<E> newLinkedList()"], ["<E> java.util.LinkedList<E>", "com.google.common.collect.Lists.newLinkedList(java.lang.Iterable<? extends E>)", "public static <E> java.util.LinkedList<E> newLinkedList(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "com.google.common.collect.Lists.newCopyOnWriteArrayList()", "public static <E> java.util.concurrent.CopyOnWriteArrayList<E> newCopyOnWriteArrayList()"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "com.google.common.collect.Lists.newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.CopyOnWriteArrayList<E> newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.List<E>", "com.google.common.collect.Lists.asList(E, E[])", "public static <E> java.util.List<E> asList(E, E[])"], ["<E> java.util.List<E>", "com.google.common.collect.Lists.asList(E, E, E[])", "public static <E> java.util.List<E> asList(E, E, E[])"], ["<F, T> java.util.List<T>", "com.google.common.collect.Lists.transform(java.util.List<F>, com.google.common.base.Function<? super F, ? extends T>)", "public static <F, T> java.util.List<T> transform(java.util.List<F>, com.google.common.base.Function<? super F, ? extends T>)"], ["<T> java.util.List<java.util.List<T>>", "com.google.common.collect.Lists.partition(java.util.List<T>, int)", "public static <T> java.util.List<java.util.List<T>> partition(java.util.List<T>, int)"], ["com.google.common.collect.ImmutableList<java.lang.Character>", "com.google.common.collect.Lists.charactersOf(java.lang.String)", "public static com.google.common.collect.ImmutableList<java.lang.Character> charactersOf(java.lang.String)"], ["java.util.List<java.lang.Character>", "com.google.common.collect.Lists.charactersOf(java.lang.CharSequence)", "public static java.util.List<java.lang.Character> charactersOf(java.lang.CharSequence)"], ["<T> java.util.List<T>", "com.google.common.collect.Lists.reverse(java.util.List<T>)", "public static <T> java.util.List<T> reverse(java.util.List<T>)"], ["V", "com.google.common.collect.MapConstraints$1.setValue(V)", "public V setValue(V)"], ["V", "com.google.common.collect.MapConstraints$2$1.checkElement(V)", "public V checkElement(V)"], ["java.util.Collection<V>", "com.google.common.collect.MapConstraints$2.getValue()", "public java.util.Collection<V> getValue()"], ["java.lang.Object", "com.google.common.collect.MapConstraints$2.getValue()", "public java.lang.Object getValue()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1.next()", "public java.util.Map$Entry<K, java.util.Collection<V>> next()"], ["java.lang.Object", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["java.lang.Object[]", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.hasNext()", "public boolean hasNext()"], ["java.util.Collection<V>", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.next()", "public java.util.Collection<V> next()"], ["void", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Collection<V>>", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.iterator()", "public java.util.Iterator<java.util.Collection<V>> iterator()"], ["java.lang.Object[]", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedAsMapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["V", "com.google.common.collect.MapConstraints$ConstrainedBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.MapConstraints$ConstrainedBiMap.inverse()", "public com.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<V>", "com.google.common.collect.MapConstraints$ConstrainedBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedBiMap.values()", "public java.util.Collection values()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.MapConstraints$ConstrainedEntries$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "com.google.common.collect.MapConstraints$ConstrainedEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapConstraints$ConstrainedEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "com.google.common.collect.MapConstraints$ConstrainedEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.MapConstraints$ConstrainedEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedEntries.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedEntries.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedEntries.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedEntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.MapConstraints$ConstrainedEntrySet.hashCode()", "public int hashCode()"], ["java.util.List<V>", "com.google.common.collect.MapConstraints$ConstrainedListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.MapConstraints$ConstrainedListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "com.google.common.collect.MapConstraints$ConstrainedListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapConstraints$ConstrainedMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["V", "com.google.common.collect.MapConstraints$ConstrainedMap.put(K, V)", "public V put(K, V)"], ["void", "com.google.common.collect.MapConstraints$ConstrainedMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.MapConstraints$ConstrainedMultimap$1.entrySet()", "public java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>> entrySet()"], ["java.util.Collection<V>", "com.google.common.collect.MapConstraints$ConstrainedMultimap$1.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Collection<java.util.Collection<V>>", "com.google.common.collect.MapConstraints$ConstrainedMultimap$1.values()", "public java.util.Collection<java.util.Collection<V>> values()"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedMultimap$1.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.MapConstraints$ConstrainedMultimap$1.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["V", "com.google.common.collect.MapConstraints$ConstrainedMultimap$2.checkElement(V)", "public V checkElement(V)"], ["com.google.common.collect.MapConstraints$ConstrainedMultimap", "com.google.common.collect.MapConstraints$ConstrainedMultimap(com.google.common.collect.Multimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public com.google.common.collect.MapConstraints$ConstrainedMultimap(com.google.common.collect.Multimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.MapConstraints$ConstrainedMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapConstraints$ConstrainedMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "com.google.common.collect.MapConstraints$ConstrainedMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.MapConstraints$ConstrainedMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "com.google.common.collect.MapConstraints$ConstrainedMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<V>", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.MapConstraints$InverseConstraint", "com.google.common.collect.MapConstraints$InverseConstraint(com.google.common.collect.MapConstraint<? super V, ? super K>)", "public com.google.common.collect.MapConstraints$InverseConstraint(com.google.common.collect.MapConstraint<? super V, ? super K>)"], ["void", "com.google.common.collect.MapConstraints$InverseConstraint.checkKeyValue(K, V)", "public void checkKeyValue(K, V)"], ["com.google.common.collect.MapConstraints$NotNullMapConstraint[]", "com.google.common.collect.MapConstraints$NotNullMapConstraint.values()", "public static com.google.common.collect.MapConstraints$NotNullMapConstraint[] values()"], ["com.google.common.collect.MapConstraints$NotNullMapConstraint", "com.google.common.collect.MapConstraints$NotNullMapConstraint.valueOf(java.lang.String)", "public static com.google.common.collect.MapConstraints$NotNullMapConstraint valueOf(java.lang.String)"], ["void", "com.google.common.collect.MapConstraints$NotNullMapConstraint.checkKeyValue(java.lang.Object, java.lang.Object)", "public void checkKeyValue(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.MapConstraints$NotNullMapConstraint.toString()", "public java.lang.String toString()"], ["com.google.common.collect.MapConstraint<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapConstraints.notNull()", "public static com.google.common.collect.MapConstraint<java.lang.Object, java.lang.Object> notNull()"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.MapConstraints.constrainedMap(java.util.Map<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> java.util.Map<K, V> constrainedMap(java.util.Map<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.MapConstraints.constrainedMultimap(com.google.common.collect.Multimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> com.google.common.collect.Multimap<K, V> constrainedMultimap(com.google.common.collect.Multimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MapConstraints.constrainedListMultimap(com.google.common.collect.ListMultimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> com.google.common.collect.ListMultimap<K, V> constrainedListMultimap(com.google.common.collect.ListMultimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MapConstraints.constrainedSetMultimap(com.google.common.collect.SetMultimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> constrainedSetMultimap(com.google.common.collect.SetMultimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.MapConstraints.constrainedSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> com.google.common.collect.SortedSetMultimap<K, V> constrainedSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.MapConstraints.constrainedBiMap(com.google.common.collect.BiMap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> com.google.common.collect.BiMap<K, V> constrainedBiMap(com.google.common.collect.BiMap<K, V>, com.google.common.collect.MapConstraint<? super K, ? super V>)"], ["V", "com.google.common.collect.MapMaker$ComputingMapAdapter.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.MapMaker$NullComputingConcurrentMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMaker$NullConcurrentMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMaker$NullConcurrentMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.MapMaker$NullConcurrentMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.MapMaker$NullConcurrentMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.MapMaker$NullConcurrentMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["V", "com.google.common.collect.MapMaker$NullConcurrentMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMaker$NullConcurrentMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.MapMaker$NullConcurrentMap.replace(K, V)", "public V replace(K, V)"], ["boolean", "com.google.common.collect.MapMaker$NullConcurrentMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapMaker$NullConcurrentMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["com.google.common.collect.MapMaker$RemovalCause[]", "com.google.common.collect.MapMaker$RemovalCause.values()", "public static com.google.common.collect.MapMaker$RemovalCause[] values()"], ["com.google.common.collect.MapMaker$RemovalCause", "com.google.common.collect.MapMaker$RemovalCause.valueOf(java.lang.String)", "public static com.google.common.collect.MapMaker$RemovalCause valueOf(java.lang.String)"], ["com.google.common.collect.MapMaker$RemovalCause", "com.google.common.collect.MapMaker$RemovalNotification.getCause()", "public com.google.common.collect.MapMaker$RemovalCause getCause()"], ["boolean", "com.google.common.collect.MapMaker$RemovalNotification.wasEvicted()", "public boolean wasEvicted()"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker()", "public com.google.common.collect.MapMaker()"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.initialCapacity(int)", "public com.google.common.collect.MapMaker initialCapacity(int)"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.concurrencyLevel(int)", "public com.google.common.collect.MapMaker concurrencyLevel(int)"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.weakKeys()", "public com.google.common.collect.MapMaker weakKeys()"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.weakValues()", "public com.google.common.collect.MapMaker weakValues()"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.softValues()", "public com.google.common.collect.MapMaker softValues()"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.collect.MapMaker.makeMap()", "public <K, V> java.util.concurrent.ConcurrentMap<K, V> makeMap()"], ["java.lang.String", "com.google.common.collect.MapMaker.toString()", "public java.lang.String toString()"], ["com.google.common.collect.GenericMapMaker", "com.google.common.collect.MapMaker.softValues()", "public com.google.common.collect.GenericMapMaker softValues()"], ["com.google.common.collect.GenericMapMaker", "com.google.common.collect.MapMaker.weakValues()", "public com.google.common.collect.GenericMapMaker weakValues()"], ["com.google.common.collect.GenericMapMaker", "com.google.common.collect.MapMaker.weakKeys()", "public com.google.common.collect.GenericMapMaker weakKeys()"], ["com.google.common.collect.GenericMapMaker", "com.google.common.collect.MapMaker.concurrencyLevel(int)", "public com.google.common.collect.GenericMapMaker concurrencyLevel(int)"], ["com.google.common.collect.GenericMapMaker", "com.google.common.collect.MapMaker.initialCapacity(int)", "public com.google.common.collect.GenericMapMaker initialCapacity(int)"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$1.get()", "public java.lang.Object get()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$1.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getEntry()"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object> copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$1.isComputingReference()", "public boolean isComputingReference()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$1.waitForValue()", "public java.lang.Object waitForValue()"], ["void", "com.google.common.collect.MapMakerInternalMap$1.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$2.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$2.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$2.poll()", "public java.lang.Object poll()"], ["int", "com.google.common.collect.MapMakerInternalMap$2.size()", "public int size()"], ["java.util.Iterator<java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$2.iterator()", "public java.util.Iterator<java.lang.Object> iterator()"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getValueReference()", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNext()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["int", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getHash()", "public int getHash()"], ["K", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getKey()", "public K getKey()"], ["long", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$CleanupMapTask", "com.google.common.collect.MapMakerInternalMap$CleanupMapTask(com.google.common.collect.MapMakerInternalMap<?, ?>)", "public com.google.common.collect.MapMakerInternalMap$CleanupMapTask(com.google.common.collect.MapMakerInternalMap<?, ?>)"], ["void", "com.google.common.collect.MapMakerInternalMap$CleanupMapTask.run()", "public void run()"], ["com.google.common.collect.MapMakerInternalMap$EntryFactory[]", "com.google.common.collect.MapMakerInternalMap$EntryFactory.values()", "public static com.google.common.collect.MapMakerInternalMap$EntryFactory[] values()"], ["com.google.common.collect.MapMakerInternalMap$EntryFactory", "com.google.common.collect.MapMakerInternalMap$EntryFactory.valueOf(java.lang.String)", "public static com.google.common.collect.MapMakerInternalMap$EntryFactory valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.MapMakerInternalMap$EntryIterator.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$EntryIterator.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapMakerInternalMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "com.google.common.collect.MapMakerInternalMap$EntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EntrySet.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.MapMakerInternalMap$EntrySet.clear()", "public void clear()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$EvictionQueue$1.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$EvictionQueue$1.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$EvictionQueue$1.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$EvictionQueue$1.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public boolean offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.peek()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> peek()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.poll()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> poll()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.size()", "public int size()"], ["void", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.clear()", "public void clear()"], ["java.util.Iterator<com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.iterator()", "public java.util.Iterator<com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.poll()", "public java.lang.Object poll()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EvictionQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["long", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public boolean offer(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.peek()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> peek()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.poll()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> poll()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.size()", "public int size()"], ["void", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.clear()", "public void clear()"], ["java.util.Iterator<com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.iterator()", "public java.util.Iterator<com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.poll()", "public java.lang.Object poll()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$ExpirationQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$HashIterator.hasNext()", "public boolean hasNext()"], ["void", "com.google.common.collect.MapMakerInternalMap$HashIterator.remove()", "public void remove()"], ["K", "com.google.common.collect.MapMakerInternalMap$KeyIterator.next()", "public K next()"], ["java.util.Iterator<K>", "com.google.common.collect.MapMakerInternalMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "com.google.common.collect.MapMakerInternalMap$KeySet.size()", "public int size()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.MapMakerInternalMap$KeySet.clear()", "public void clear()"], ["com.google.common.collect.MapMakerInternalMap$NullEntry[]", "com.google.common.collect.MapMakerInternalMap$NullEntry.values()", "public static com.google.common.collect.MapMakerInternalMap$NullEntry[] values()"], ["com.google.common.collect.MapMakerInternalMap$NullEntry", "com.google.common.collect.MapMakerInternalMap$NullEntry.valueOf(java.lang.String)", "public static com.google.common.collect.MapMakerInternalMap$NullEntry valueOf(java.lang.String)"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$NullEntry.getValueReference()", "public com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object> getValueReference()"], ["void", "com.google.common.collect.MapMakerInternalMap$NullEntry.setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)", "public void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$NullEntry.getNext()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getNext()"], ["int", "com.google.common.collect.MapMakerInternalMap$NullEntry.getHash()", "public int getHash()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$NullEntry.getKey()", "public java.lang.Object getKey()"], ["long", "com.google.common.collect.MapMakerInternalMap$NullEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$NullEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$NullEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$NullEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$NullEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$NullEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$NullEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$NullEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.collect.MapMakerInternalMap$NullEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$NullEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["K", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getKey()", "public K getKey()"], ["long", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getValueReference()", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEntry.setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getHash()", "public int getHash()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEntry.getNext()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftValueReference.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["void", "com.google.common.collect.MapMakerInternalMap$SoftValueReference.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$SoftValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "com.google.common.collect.MapMakerInternalMap$SoftValueReference.waitForValue()", "public V waitForValue()"], ["com.google.common.collect.MapMakerInternalMap$Strength[]", "com.google.common.collect.MapMakerInternalMap$Strength.values()", "public static com.google.common.collect.MapMakerInternalMap$Strength[] values()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$Strength.valueOf(java.lang.String)", "public static com.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String)"], ["K", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getKey()", "public K getKey()"], ["long", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getValueReference()", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEntry.setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getHash()", "public int getHash()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEntry.getNext()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["V", "com.google.common.collect.MapMakerInternalMap$StrongValueReference.get()", "public V get()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongValueReference.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$StrongValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "com.google.common.collect.MapMakerInternalMap$StrongValueReference.waitForValue()", "public V waitForValue()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongValueReference.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["V", "com.google.common.collect.MapMakerInternalMap$ValueIterator.next()", "public V next()"], ["java.util.Iterator<V>", "com.google.common.collect.MapMakerInternalMap$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "com.google.common.collect.MapMakerInternalMap$Values.size()", "public int size()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$Values.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "com.google.common.collect.MapMakerInternalMap$Values.clear()", "public void clear()"], ["K", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getKey()", "public K getKey()"], ["long", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getValueReference()", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEntry.setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getHash()", "public int getHash()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEntry.getNext()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getNextExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getPreviousExpirable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getNextEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getPreviousEvictable()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakValueReference.getEntry()", "public com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakValueReference.clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["com.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public com.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$WeakValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "com.google.common.collect.MapMakerInternalMap$WeakValueReference.waitForValue()", "public V waitForValue()"], ["K", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getKey()", "public K getKey()"], ["V", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getValue()", "public V getValue()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.hashCode()", "public int hashCode()"], ["V", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.MapMakerInternalMap.size()", "public int size()"], ["V", "com.google.common.collect.MapMakerInternalMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.MapMakerInternalMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.MapMakerInternalMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["void", "com.google.common.collect.MapMakerInternalMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "com.google.common.collect.MapMakerInternalMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "com.google.common.collect.MapMakerInternalMap.replace(K, V)", "public V replace(K, V)"], ["void", "com.google.common.collect.MapMakerInternalMap.clear()", "public void clear()"], ["java.util.Set<K>", "com.google.common.collect.MapMakerInternalMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "com.google.common.collect.MapMakerInternalMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapMakerInternalMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["boolean", "com.google.common.collect.Maps$1.hasNext()", "public boolean hasNext()"], ["V", "com.google.common.collect.Maps$1.next()", "public V next()"], ["K", "com.google.common.collect.Maps$10.getKey()", "public K getKey()"], ["V2", "com.google.common.collect.Maps$10.getValue()", "public V2 getValue()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$11.apply(java.util.Map$Entry<K, V1>)", "public java.util.Map$Entry<K, V2> apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "com.google.common.collect.Maps$11.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$3.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Maps$3.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Maps$4.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Maps$4.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["java.util.SortedSet<E>", "com.google.common.collect.Maps$4.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Maps$4.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Maps$4.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["boolean", "com.google.common.collect.Maps$5.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Maps$5.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["java.util.SortedSet<E>", "com.google.common.collect.Maps$5.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Maps$5.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Maps$5.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Maps$5.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Maps$5.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Maps$5.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Maps$5.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["K", "com.google.common.collect.Maps$6.getKey()", "public K getKey()"], ["V", "com.google.common.collect.Maps$6.getValue()", "public V getValue()"], ["V2", "com.google.common.collect.Maps$7.transformEntry(K, V1)", "public V2 transformEntry(K, V1)"], ["V2", "com.google.common.collect.Maps$8.apply(V1)", "public V2 apply(V1)"], ["V2", "com.google.common.collect.Maps$9.apply(java.util.Map$Entry<K, V1>)", "public V2 apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "com.google.common.collect.Maps$9.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AbstractFilteredMap.put(K, V)", "public V put(K, V)"], ["void", "com.google.common.collect.Maps$AbstractFilteredMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.Maps$AbstractFilteredMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AbstractFilteredMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$AbstractFilteredMap.isEmpty()", "public boolean isEmpty()"], ["V", "com.google.common.collect.Maps$AbstractFilteredMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$AsMapView$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Set<K>", "com.google.common.collect.Maps$AsMapView.createKeySet()", "public java.util.Set<K> createKeySet()"], ["int", "com.google.common.collect.Maps$AsMapView.size()", "public int size()"], ["boolean", "com.google.common.collect.Maps$AsMapView.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AsMapView.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AsMapView.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$AsMapView.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Maps$BiMapConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$BiMapConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Maps$BiMapConverter.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$DescendingMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$DescendingMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.Maps$DescendingMap.firstKey()", "public K firstKey()"], ["K", "com.google.common.collect.Maps$DescendingMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$DescendingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "com.google.common.collect.Maps$DescendingMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$DescendingMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$DescendingMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$DescendingMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$DescendingMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$DescendingMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.Collection<V>", "com.google.common.collect.Maps$DescendingMap.values()", "public java.util.Collection<V> values()"], ["java.lang.String", "com.google.common.collect.Maps$DescendingMap.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$1.apply(java.util.Map$Entry<?, ?>)", "public java.lang.Object apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$2.apply(java.util.Map$Entry<?, ?>)", "public java.lang.Object apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.google.common.collect.Maps$EntryFunction[]", "com.google.common.collect.Maps$EntryFunction.values()", "public static com.google.common.collect.Maps$EntryFunction[] values()"], ["com.google.common.collect.Maps$EntryFunction", "com.google.common.collect.Maps$EntryFunction.valueOf(java.lang.String)", "public static com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String)"], ["int", "com.google.common.collect.Maps$EntrySet.size()", "public int size()"], ["void", "com.google.common.collect.Maps$EntrySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Maps$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$EntrySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Maps$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$EntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.util.Map$Entry<V, K>)", "public boolean apply(java.util.Map$Entry<V, K>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["V", "com.google.common.collect.Maps$FilteredEntryBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.Maps$FilteredEntryBiMap.inverse()", "public com.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<V>", "com.google.common.collect.Maps$FilteredEntryBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Collection", "com.google.common.collect.Maps$FilteredEntryBiMap.values()", "public java.util.Collection values()"], ["V", "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$FilteredEntryMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Collection<V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.values()", "public java.util.Collection<V> values()"], ["int", "com.google.common.collect.Maps$FilteredEntryNavigableMap.size()", "public int size()"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap.isEmpty()", "public boolean isEmpty()"], ["V", "com.google.common.collect.Maps$FilteredEntryNavigableMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.Maps$FilteredEntryNavigableMap.put(K, V)", "public V put(K, V)"], ["V", "com.google.common.collect.Maps$FilteredEntryNavigableMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$FilteredEntryNavigableMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.Maps$FilteredEntryNavigableMap.clear()", "public void clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.first()", "public K first()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.last()", "public K last()"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$FilteredEntrySortedMap.keySet()", "public java.util.SortedSet<K> keySet()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$FilteredEntrySortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap.firstKey()", "public K firstKey()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$FilteredEntrySortedMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$FilteredEntrySortedMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$FilteredEntrySortedMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.Set", "com.google.common.collect.Maps$FilteredEntrySortedMap.keySet()", "public java.util.Set keySet()"], ["boolean", "com.google.common.collect.Maps$FilteredKeyMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredMapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredMapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredMapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "com.google.common.collect.Maps$FilteredMapValues.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Maps$FilteredMapValues.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$ImprovedAbstractMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "com.google.common.collect.Maps$ImprovedAbstractMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "com.google.common.collect.Maps$ImprovedAbstractMap.values()", "public java.util.Collection<V> values()"], ["java.util.Iterator<K>", "com.google.common.collect.Maps$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "com.google.common.collect.Maps$KeySet.size()", "public int size()"], ["boolean", "com.google.common.collect.Maps$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Maps$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$KeySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Maps$MapDifferenceImpl.areEqual()", "public boolean areEqual()"], ["java.util.Map<K, V>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnLeft()", "public java.util.Map<K, V> entriesOnlyOnLeft()"], ["java.util.Map<K, V>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnRight()", "public java.util.Map<K, V> entriesOnlyOnRight()"], ["java.util.Map<K, V>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesInCommon()", "public java.util.Map<K, V> entriesInCommon()"], ["java.util.Map<K, com.google.common.collect.MapDifference$ValueDifference<V>>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesDiffering()", "public java.util.Map<K, com.google.common.collect.MapDifference$ValueDifference<V>> entriesDiffering()"], ["boolean", "com.google.common.collect.Maps$MapDifferenceImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$MapDifferenceImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Maps$MapDifferenceImpl.toString()", "public java.lang.String toString()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$NavigableAsMapView.comparator()", "public java.util.Comparator<? super K> comparator()"], ["V", "com.google.common.collect.Maps$NavigableAsMapView.get(java.lang.Object)", "public V get(java.lang.Object)"], ["void", "com.google.common.collect.Maps$NavigableAsMapView.clear()", "public void clear()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$NavigableAsMapView.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["int", "com.google.common.collect.Maps$NavigableAsMapView.size()", "public int size()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["K", "com.google.common.collect.Maps$NavigableKeySet.lower(K)", "public K lower(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.floor(K)", "public K floor(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.ceiling(K)", "public K ceiling(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.higher(K)", "public K higher(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.pollFirst()", "public K pollFirst()"], ["K", "com.google.common.collect.Maps$NavigableKeySet.pollLast()", "public K pollLast()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$NavigableKeySet.descendingSet()", "public java.util.NavigableSet<K> descendingSet()"], ["java.util.Iterator<K>", "com.google.common.collect.Maps$NavigableKeySet.descendingIterator()", "public java.util.Iterator<K> descendingIterator()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$NavigableKeySet.subSet(K, boolean, K, boolean)", "public java.util.NavigableSet<K> subSet(K, boolean, K, boolean)"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$NavigableKeySet.headSet(K, boolean)", "public java.util.NavigableSet<K> headSet(K, boolean)"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$NavigableKeySet.tailSet(K, boolean)", "public java.util.NavigableSet<K> tailSet(K, boolean)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$NavigableKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$NavigableKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$NavigableKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$SortedAsMapView.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Set<K>", "com.google.common.collect.Maps$SortedAsMapView.keySet()", "public java.util.Set<K> keySet()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedAsMapView.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedAsMapView.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedAsMapView.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["K", "com.google.common.collect.Maps$SortedAsMapView.firstKey()", "public K firstKey()"], ["K", "com.google.common.collect.Maps$SortedAsMapView.lastKey()", "public K lastKey()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$SortedKeySet.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$SortedKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$SortedKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["java.util.SortedSet<K>", "com.google.common.collect.Maps$SortedKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["K", "com.google.common.collect.Maps$SortedKeySet.first()", "public K first()"], ["K", "com.google.common.collect.Maps$SortedKeySet.last()", "public K last()"], ["java.util.SortedMap<K, com.google.common.collect.MapDifference$ValueDifference<V>>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()", "public java.util.SortedMap<K, com.google.common.collect.MapDifference$ValueDifference<V>> entriesDiffering()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()", "public java.util.SortedMap<K, V> entriesInCommon()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()", "public java.util.SortedMap<K, V> entriesOnlyOnLeft()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()", "public java.util.SortedMap<K, V> entriesOnlyOnRight()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()", "public java.util.Map entriesDiffering()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()", "public java.util.Map entriesInCommon()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()", "public java.util.Map entriesOnlyOnRight()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()", "public java.util.Map entriesOnlyOnLeft()"], ["java.util.Iterator<java.util.Map$Entry<K, V2>>", "com.google.common.collect.Maps$TransformedEntriesMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V2>> iterator()"], ["int", "com.google.common.collect.Maps$TransformedEntriesMap.size()", "public int size()"], ["boolean", "com.google.common.collect.Maps$TransformedEntriesMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V2", "com.google.common.collect.Maps$TransformedEntriesMap.get(java.lang.Object)", "public V2 get(java.lang.Object)"], ["V2", "com.google.common.collect.Maps$TransformedEntriesMap.remove(java.lang.Object)", "public V2 remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$TransformedEntriesMap.clear()", "public void clear()"], ["java.util.Set<K>", "com.google.common.collect.Maps$TransformedEntriesMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V2> ceilingEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V2> descendingMap()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V2> firstEntry()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V2> floorEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K)", "public java.util.NavigableMap<K, V2> headMap(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V2> headMap(K, boolean)"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V2> higherEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V2> lastEntry()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V2> lowerEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V2> pollFirstEntry()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V2> pollLastEntry()"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V2> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, K)", "public java.util.NavigableMap<K, V2> subMap(K, K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K)", "public java.util.NavigableMap<K, V2> tailMap(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V2> tailMap(K, boolean)"], ["java.util.SortedMap", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.Maps$TransformedEntriesSortedMap.firstKey()", "public K firstKey()"], ["java.util.SortedMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.headMap(K)", "public java.util.SortedMap<K, V2> headMap(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesSortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.subMap(K, K)", "public java.util.SortedMap<K, V2> subMap(K, K)"], ["java.util.SortedMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.tailMap(K)", "public java.util.SortedMap<K, V2> tailMap(K)"], ["V", "com.google.common.collect.Maps$UnmodifiableBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.Maps$UnmodifiableBiMap.inverse()", "public com.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<V>", "com.google.common.collect.Maps$UnmodifiableBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Collection", "com.google.common.collect.Maps$UnmodifiableBiMap.values()", "public java.util.Collection values()"], ["boolean", "com.google.common.collect.Maps$UnmodifiableEntries$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableEntries$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "com.google.common.collect.Maps$UnmodifiableEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$UnmodifiableEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "com.google.common.collect.Maps$UnmodifiableEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Maps$UnmodifiableEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.Maps$UnmodifiableEntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$UnmodifiableEntrySet.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.pollFirstEntry()", "public final java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.pollLastEntry()", "public final java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.Set<K>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["V", "com.google.common.collect.Maps$ValueDifferenceImpl.leftValue()", "public V leftValue()"], ["V", "com.google.common.collect.Maps$ValueDifferenceImpl.rightValue()", "public V rightValue()"], ["boolean", "com.google.common.collect.Maps$ValueDifferenceImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$ValueDifferenceImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Maps$ValueDifferenceImpl.toString()", "public java.lang.String toString()"], ["java.util.Iterator<V>", "com.google.common.collect.Maps$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "com.google.common.collect.Maps$Values.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$Values.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$Values.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.Maps$Values.size()", "public int size()"], ["boolean", "com.google.common.collect.Maps$Values.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Maps$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "com.google.common.collect.Maps$Values.clear()", "public void clear()"], ["<K extends java.lang.Enum<K>, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.immutableEnumMap(java.util.Map<K, ? extends V>)", "public static <K extends java.lang.Enum<K>, V> com.google.common.collect.ImmutableMap<K, V> immutableEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.HashMap<K, V>", "com.google.common.collect.Maps.newHashMap()", "public static <K, V> java.util.HashMap<K, V> newHashMap()"], ["<K, V> java.util.HashMap<K, V>", "com.google.common.collect.Maps.newHashMapWithExpectedSize(int)", "public static <K, V> java.util.HashMap<K, V> newHashMapWithExpectedSize(int)"], ["<K, V> java.util.HashMap<K, V>", "com.google.common.collect.Maps.newHashMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> java.util.HashMap<K, V> newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.LinkedHashMap<K, V>", "com.google.common.collect.Maps.newLinkedHashMap()", "public static <K, V> java.util.LinkedHashMap<K, V> newLinkedHashMap()"], ["<K, V> java.util.LinkedHashMap<K, V>", "com.google.common.collect.Maps.newLinkedHashMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> java.util.LinkedHashMap<K, V> newLinkedHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.collect.Maps.newConcurrentMap()", "public static <K, V> java.util.concurrent.ConcurrentMap<K, V> newConcurrentMap()"], ["<K extends java.lang.Comparable, V> java.util.TreeMap<K, V>", "com.google.common.collect.Maps.newTreeMap()", "public static <K extends java.lang.Comparable, V> java.util.TreeMap<K, V> newTreeMap()"], ["<K, V> java.util.TreeMap<K, V>", "com.google.common.collect.Maps.newTreeMap(java.util.SortedMap<K, ? extends V>)", "public static <K, V> java.util.TreeMap<K, V> newTreeMap(java.util.SortedMap<K, ? extends V>)"], ["<C, K extends C, V> java.util.TreeMap<K, V>", "com.google.common.collect.Maps.newTreeMap(java.util.Comparator<C>)", "public static <C, K extends C, V> java.util.TreeMap<K, V> newTreeMap(java.util.Comparator<C>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "com.google.common.collect.Maps.newEnumMap(java.lang.Class<K>)", "public static <K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V> newEnumMap(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "com.google.common.collect.Maps.newEnumMap(java.util.Map<K, ? extends V>)", "public static <K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V> newEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.IdentityHashMap<K, V>", "com.google.common.collect.Maps.newIdentityHashMap()", "public static <K, V> java.util.IdentityHashMap<K, V> newIdentityHashMap()"], ["<K, V> com.google.common.collect.MapDifference<K, V>", "com.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.MapDifference<K, V> difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.MapDifference<K, V>", "com.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)", "public static <K, V> com.google.common.collect.MapDifference<K, V> difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)"], ["<K, V> com.google.common.collect.SortedMapDifference<K, V>", "com.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.SortedMapDifference<K, V> difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.asMap(java.util.Set<K>, com.google.common.base.Function<? super K, V>)", "public static <K, V> java.util.Map<K, V> asMap(java.util.Set<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.asMap(java.util.SortedSet<K>, com.google.common.base.Function<? super K, V>)", "public static <K, V> java.util.SortedMap<K, V> asMap(java.util.SortedSet<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.asMap(java.util.NavigableSet<K>, com.google.common.base.Function<? super K, V>)", "public static <K, V> java.util.NavigableMap<K, V> asMap(java.util.NavigableSet<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super K, V>)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.toMap(java.util.Iterator<K>, com.google.common.base.Function<? super K, V>)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> toMap(java.util.Iterator<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.uniqueIndex(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> uniqueIndex(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.uniqueIndex(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)", "public static <K, V> com.google.common.collect.ImmutableMap<K, V> uniqueIndex(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)"], ["com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String>", "com.google.common.collect.Maps.fromProperties(java.util.Properties)", "public static com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String> fromProperties(java.util.Properties)"], ["<K, V> java.util.Map$Entry<K, V>", "com.google.common.collect.Maps.immutableEntry(K, V)", "public static <K, V> java.util.Map$Entry<K, V> immutableEntry(K, V)"], ["<A, B> com.google.common.base.Converter<A, B>", "com.google.common.collect.Maps.asConverter(com.google.common.collect.BiMap<A, B>)", "public static <A, B> com.google.common.base.Converter<A, B> asConverter(com.google.common.collect.BiMap<A, B>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.synchronizedBiMap(com.google.common.collect.BiMap<K, V>)", "public static <K, V> com.google.common.collect.BiMap<K, V> synchronizedBiMap(com.google.common.collect.BiMap<K, V>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.unmodifiableBiMap(com.google.common.collect.BiMap<? extends K, ? extends V>)", "public static <K, V> com.google.common.collect.BiMap<K, V> unmodifiableBiMap(com.google.common.collect.BiMap<? extends K, ? extends V>)"], ["<K, V1, V2> java.util.Map<K, V2>", "com.google.common.collect.Maps.transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> java.util.Map<K, V2> transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "com.google.common.collect.Maps.transformValues(java.util.SortedMap<K, V1>, com.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> java.util.SortedMap<K, V2> transformValues(java.util.SortedMap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps.transformValues(java.util.NavigableMap<K, V1>, com.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> java.util.NavigableMap<K, V2> transformValues(java.util.NavigableMap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.Map<K, V2>", "com.google.common.collect.Maps.transformEntries(java.util.Map<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> java.util.Map<K, V2> transformEntries(java.util.Map<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "com.google.common.collect.Maps.transformEntries(java.util.SortedMap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> java.util.SortedMap<K, V2> transformEntries(java.util.SortedMap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps.transformEntries(java.util.NavigableMap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> java.util.NavigableMap<K, V2> transformEntries(java.util.NavigableMap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.filterKeys(java.util.Map<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> java.util.Map<K, V> filterKeys(java.util.Map<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.filterKeys(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> java.util.SortedMap<K, V> filterKeys(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.filterKeys(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> java.util.NavigableMap<K, V> filterKeys(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> com.google.common.collect.BiMap<K, V> filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.filterValues(java.util.Map<K, V>, com.google.common.base.Predicate<? super V>)", "public static <K, V> java.util.Map<K, V> filterValues(java.util.Map<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.filterValues(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super V>)", "public static <K, V> java.util.SortedMap<K, V> filterValues(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.filterValues(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super V>)", "public static <K, V> java.util.NavigableMap<K, V> filterValues(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)", "public static <K, V> com.google.common.collect.BiMap<K, V> filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.filterEntries(java.util.Map<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> java.util.Map<K, V> filterEntries(java.util.Map<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> java.util.SortedMap<K, V> filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.filterEntries(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> java.util.NavigableMap<K, V> filterEntries(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> com.google.common.collect.BiMap<K, V> filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.unmodifiableNavigableMap(java.util.NavigableMap<K, V>)", "public static <K, V> java.util.NavigableMap<K, V> unmodifiableNavigableMap(java.util.NavigableMap<K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.synchronizedNavigableMap(java.util.NavigableMap<K, V>)", "public static <K, V> java.util.NavigableMap<K, V> synchronizedNavigableMap(java.util.NavigableMap<K, V>)"], ["com.google.common.collect.MinMaxPriorityQueue$Builder<B>", "com.google.common.collect.MinMaxPriorityQueue$Builder.expectedSize(int)", "public com.google.common.collect.MinMaxPriorityQueue$Builder<B> expectedSize(int)"], ["com.google.common.collect.MinMaxPriorityQueue$Builder<B>", "com.google.common.collect.MinMaxPriorityQueue$Builder.maximumSize(int)", "public com.google.common.collect.MinMaxPriorityQueue$Builder<B> maximumSize(int)"], ["<T extends B> com.google.common.collect.MinMaxPriorityQueue<T>", "com.google.common.collect.MinMaxPriorityQueue$Builder.create()", "public <T extends B> com.google.common.collect.MinMaxPriorityQueue<T> create()"], ["<T extends B> com.google.common.collect.MinMaxPriorityQueue<T>", "com.google.common.collect.MinMaxPriorityQueue$Builder.create(java.lang.Iterable<? extends T>)", "public <T extends B> com.google.common.collect.MinMaxPriorityQueue<T> create(java.lang.Iterable<? extends T>)"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue$QueueIterator.hasNext()", "public boolean hasNext()"], ["E", "com.google.common.collect.MinMaxPriorityQueue$QueueIterator.next()", "public E next()"], ["void", "com.google.common.collect.MinMaxPriorityQueue$QueueIterator.remove()", "public void remove()"], ["<E extends java.lang.Comparable<E>> com.google.common.collect.MinMaxPriorityQueue<E>", "com.google.common.collect.MinMaxPriorityQueue.create()", "public static <E extends java.lang.Comparable<E>> com.google.common.collect.MinMaxPriorityQueue<E> create()"], ["<E extends java.lang.Comparable<E>> com.google.common.collect.MinMaxPriorityQueue<E>", "com.google.common.collect.MinMaxPriorityQueue.create(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable<E>> com.google.common.collect.MinMaxPriorityQueue<E> create(java.lang.Iterable<? extends E>)"], ["<B> com.google.common.collect.MinMaxPriorityQueue$Builder<B>", "com.google.common.collect.MinMaxPriorityQueue.orderedBy(java.util.Comparator<B>)", "public static <B> com.google.common.collect.MinMaxPriorityQueue$Builder<B> orderedBy(java.util.Comparator<B>)"], ["com.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable>", "com.google.common.collect.MinMaxPriorityQueue.expectedSize(int)", "public static com.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable> expectedSize(int)"], ["com.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable>", "com.google.common.collect.MinMaxPriorityQueue.maximumSize(int)", "public static com.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable> maximumSize(int)"], ["int", "com.google.common.collect.MinMaxPriorityQueue.size()", "public int size()"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue.offer(E)", "public boolean offer(E)"], ["E", "com.google.common.collect.MinMaxPriorityQueue.poll()", "public E poll()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.peek()", "public E peek()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.removeFirst()", "public E removeFirst()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.peekFirst()", "public E peekFirst()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.pollLast()", "public E pollLast()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.removeLast()", "public E removeLast()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.peekLast()", "public E peekLast()"], ["java.util.Iterator<E>", "com.google.common.collect.MinMaxPriorityQueue.iterator()", "public java.util.Iterator<E> iterator()"], ["void", "com.google.common.collect.MinMaxPriorityQueue.clear()", "public void clear()"], ["java.lang.Object[]", "com.google.common.collect.MinMaxPriorityQueue.toArray()", "public java.lang.Object[] toArray()"], ["java.util.Comparator<? super E>", "com.google.common.collect.MinMaxPriorityQueue.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.List<V>", "com.google.common.collect.MultimapBuilder$ArrayListSupplier.get()", "public java.util.List<V> get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$ArrayListSupplier.get()", "public java.lang.Object get()"], ["java.util.Set<V>", "com.google.common.collect.MultimapBuilder$EnumSetSupplier.get()", "public java.util.Set<V> get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$EnumSetSupplier.get()", "public java.lang.Object get()"], ["java.util.Set<V>", "com.google.common.collect.MultimapBuilder$HashSetSupplier.get()", "public java.util.Set<V> get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$HashSetSupplier.get()", "public java.lang.Object get()"], ["java.util.Set<V>", "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier.get()", "public java.util.Set<V> get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier.get()", "public java.lang.Object get()"], ["com.google.common.collect.MultimapBuilder$LinkedListSupplier[]", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.values()", "public static com.google.common.collect.MultimapBuilder$LinkedListSupplier[] values()"], ["com.google.common.collect.MultimapBuilder$LinkedListSupplier", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.valueOf(java.lang.String)", "public static com.google.common.collect.MultimapBuilder$LinkedListSupplier valueOf(java.lang.String)"], ["<V> com.google.common.base.Supplier<java.util.List<V>>", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.instance()", "public static <V> com.google.common.base.Supplier<java.util.List<V>> instance()"], ["java.util.List<java.lang.Object>", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.get()", "public java.util.List<java.lang.Object> get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.get()", "public java.lang.Object get()"], ["<K extends K0, V extends V0> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> com.google.common.collect.ListMultimap<K, V> build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(com.google.common.collect.Multimap)", "public com.google.common.collect.Multimap build(com.google.common.collect.Multimap)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$ListMultimapBuilder.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()", "public <K extends K0, V> com.google.common.collect.ListMultimap<K, V> build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()", "public <K extends K0, V> com.google.common.collect.ListMultimap<K, V> build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()", "public <K extends K0, V> com.google.common.collect.SetMultimap<K, V> build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()", "public <K extends K0, V> com.google.common.collect.SetMultimap<K, V> build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V extends V0> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()", "public <K extends K0, V extends V0> com.google.common.collect.SortedSetMultimap<K, V> build()"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()", "public com.google.common.collect.SetMultimap build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V extends V0> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()", "public <K extends K0, V extends V0> com.google.common.collect.SetMultimap<K, V> build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()", "public com.google.common.collect.Multimap build()"], ["com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues()", "public com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object> arrayListValues()"], ["com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues(int)", "public com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object> arrayListValues(int)"], ["com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedListValues()", "public com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object> linkedListValues()"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues()", "public com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> hashSetValues()"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues(int)", "public com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> hashSetValues(int)"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues()", "public com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> linkedHashSetValues()"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues(int)", "public com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> linkedHashSetValues(int)"], ["com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, java.lang.Comparable>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues()", "public com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, java.lang.Comparable> treeSetValues()"], ["<V0> com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, V0>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues(java.util.Comparator<V0>)", "public <V0> com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, V0> treeSetValues(java.util.Comparator<V0>)"], ["<V0 extends java.lang.Enum<V0>> com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, V0>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.enumSetValues(java.lang.Class<V0>)", "public <V0 extends java.lang.Enum<V0>> com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, V0> enumSetValues(java.lang.Class<V0>)"], ["<K extends K0, V extends V0> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> com.google.common.collect.SetMultimap<K, V> build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(com.google.common.collect.Multimap)", "public com.google.common.collect.Multimap build(com.google.common.collect.Multimap)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SetMultimapBuilder.build()", "public com.google.common.collect.Multimap build()"], ["<K extends K0, V extends V0> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> com.google.common.collect.SortedSetMultimap<K, V> build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(com.google.common.collect.Multimap)", "public com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap)"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()", "public com.google.common.collect.SetMultimap build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(com.google.common.collect.Multimap)", "public com.google.common.collect.Multimap build(com.google.common.collect.Multimap)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()", "public com.google.common.collect.Multimap build()"], ["java.util.SortedSet<V>", "com.google.common.collect.MultimapBuilder$TreeSetSupplier.get()", "public java.util.SortedSet<V> get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$TreeSetSupplier.get()", "public java.lang.Object get()"], ["com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "com.google.common.collect.MultimapBuilder.hashKeys()", "public static com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> hashKeys()"], ["com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "com.google.common.collect.MultimapBuilder.hashKeys(int)", "public static com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> hashKeys(int)"], ["com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "com.google.common.collect.MultimapBuilder.linkedHashKeys()", "public static com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> linkedHashKeys()"], ["com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "com.google.common.collect.MultimapBuilder.linkedHashKeys(int)", "public static com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> linkedHashKeys(int)"], ["com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Comparable>", "com.google.common.collect.MultimapBuilder.treeKeys()", "public static com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Comparable> treeKeys()"], ["<K0> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "com.google.common.collect.MultimapBuilder.treeKeys(java.util.Comparator<K0>)", "public static <K0> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0> treeKeys(java.util.Comparator<K0>)"], ["<K0 extends java.lang.Enum<K0>> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "com.google.common.collect.MultimapBuilder.enumKeys(java.lang.Class<K0>)", "public static <K0 extends java.lang.Enum<K0>> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0> enumKeys(java.lang.Class<K0>)"], ["<K extends K0, V extends V0> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.MultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> com.google.common.collect.Multimap<K, V> build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$AsMap$EntrySet$1.apply(K)", "public java.util.Collection<V> apply(K)"], ["java.lang.Object", "com.google.common.collect.Multimaps$AsMap$EntrySet$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.Multimaps$AsMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["boolean", "com.google.common.collect.Multimaps$AsMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "com.google.common.collect.Multimaps$AsMap.size()", "public int size()"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$AsMap.remove(java.lang.Object)", "public java.util.Collection<V> remove(java.lang.Object)"], ["java.util.Set<K>", "com.google.common.collect.Multimaps$AsMap.keySet()", "public java.util.Set<K> keySet()"], ["boolean", "com.google.common.collect.Multimaps$AsMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Multimaps$AsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$AsMap.clear()", "public void clear()"], ["java.lang.Object", "com.google.common.collect.Multimaps$AsMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.Comparator<? super V>", "com.google.common.collect.Multimaps$CustomSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["int", "com.google.common.collect.Multimaps$Entries.size()", "public int size()"], ["boolean", "com.google.common.collect.Multimaps$Entries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$Entries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$Entries.clear()", "public void clear()"], ["K", "com.google.common.collect.Multimaps$Keys$1$1.getElement()", "public K getElement()"], ["int", "com.google.common.collect.Multimaps$Keys$1$1.getCount()", "public int getCount()"], ["java.util.Iterator<com.google.common.collect.Multiset$Entry<K>>", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.iterator()", "public java.util.Iterator<com.google.common.collect.Multiset$Entry<K>> iterator()"], ["int", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$Keys.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<K>", "com.google.common.collect.Multimaps$Keys.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "com.google.common.collect.Multimaps$Keys.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.Multimaps$Keys.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["void", "com.google.common.collect.Multimaps$Keys.clear()", "public void clear()"], ["java.util.Set<K>", "com.google.common.collect.Multimaps$Keys.elementSet()", "public java.util.Set<K> elementSet()"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap$1$1.hasNext()", "public boolean hasNext()"], ["V", "com.google.common.collect.Multimaps$MapMultimap$1$1.next()", "public V next()"], ["void", "com.google.common.collect.Multimaps$MapMultimap$1$1.remove()", "public void remove()"], ["java.util.Iterator<V>", "com.google.common.collect.Multimaps$MapMultimap$1.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "com.google.common.collect.Multimaps$MapMultimap$1.size()", "public int size()"], ["int", "com.google.common.collect.Multimaps$MapMultimap.size()", "public int size()"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.Multimaps$MapMultimap.get(K)", "public java.util.Set<V> get(K)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<V>", "com.google.common.collect.Multimaps$MapMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.Multimaps$MapMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$MapMultimap.clear()", "public void clear()"], ["java.util.Set<K>", "com.google.common.collect.Multimaps$MapMultimap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$MapMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Multimaps$MapMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["int", "com.google.common.collect.Multimaps$MapMultimap.hashCode()", "public int hashCode()"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.List<V2>", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.get(K)", "public java.util.List<V2> get(K)"], ["java.util.List<V2>", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.removeAll(java.lang.Object)", "public java.util.List<V2> removeAll(java.lang.Object)"], ["java.util.List<V2>", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)", "public java.util.List<V2> replaceValues(K, java.lang.Iterable<? extends V2>)"], ["java.util.Collection", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection<V2>", "com.google.common.collect.Multimaps$TransformedEntriesMultimap$1.transformEntry(K, java.util.Collection<V1>)", "public java.util.Collection<V2> transformEntry(K, java.util.Collection<V1>)"], ["java.lang.Object", "com.google.common.collect.Multimaps$TransformedEntriesMultimap$1.transformEntry(java.lang.Object, java.lang.Object)", "public java.lang.Object transformEntry(java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V2>", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.get(K)", "public java.util.Collection<V2> get(K)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.isEmpty()", "public boolean isEmpty()"], ["java.util.Set<K>", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.keySet()", "public java.util.Set<K> keySet()"], ["com.google.common.collect.Multiset<K>", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.keys()", "public com.google.common.collect.Multiset<K> keys()"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.put(K, V2)", "public boolean put(K, V2)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(K, java.lang.Iterable<? extends V2>)", "public boolean putAll(K, java.lang.Iterable<? extends V2>)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V2>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V2>)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V2>", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V2> removeAll(java.lang.Object)"], ["java.util.Collection<V2>", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)", "public java.util.Collection<V2> replaceValues(K, java.lang.Iterable<? extends V2>)"], ["int", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.size()", "public int size()"], ["com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()", "public com.google.common.collect.ListMultimap<K, V> delegate()"], ["java.util.List<V>", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()", "public com.google.common.collect.Multimap delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()", "public java.lang.Object delegate()"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$UnmodifiableMultimap$1.apply(java.util.Collection<V>)", "public java.util.Collection<V> apply(java.util.Collection<V>)"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableMultimap$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$UnmodifiableMultimap.clear()", "public void clear()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["com.google.common.collect.Multiset<K>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.keys()", "public com.google.common.collect.Multiset<K> keys()"], ["java.util.Set<K>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.keySet()", "public java.util.Set<K> keySet()"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection<V>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.values()", "public java.util.Collection<V> values()"], ["com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()", "public com.google.common.collect.SetMultimap<K, V> delegate()"], ["java.util.Set<V>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()", "public java.util.Collection entries()"], ["com.google.common.collect.Multimap", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()", "public com.google.common.collect.Multimap delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()", "public java.lang.Object delegate()"], ["com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public com.google.common.collect.SortedSetMultimap<K, V> delegate()"], ["java.util.SortedSet<V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public com.google.common.collect.SetMultimap delegate()"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.Multimap", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public com.google.common.collect.Multimap delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public java.lang.Object delegate()"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.newMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Collection<V>>)", "public static <K, V> com.google.common.collect.Multimap<K, V> newMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Collection<V>>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.newListMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.List<V>>)", "public static <K, V> com.google.common.collect.ListMultimap<K, V> newListMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.List<V>>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.newSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Set<V>>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> newSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Set<V>>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps.newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.SortedSet<V>>)", "public static <K, V> com.google.common.collect.SortedSetMultimap<K, V> newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.SortedSet<V>>)"], ["<K, V, M extends com.google.common.collect.Multimap<K, V>> M", "com.google.common.collect.Multimaps.invertFrom(com.google.common.collect.Multimap<? extends V, ? extends K>, M)", "public static <K, V, M extends com.google.common.collect.Multimap<K, V>> M invertFrom(com.google.common.collect.Multimap<? extends V, ? extends K>, M)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.synchronizedMultimap(com.google.common.collect.Multimap<K, V>)", "public static <K, V> com.google.common.collect.Multimap<K, V> synchronizedMultimap(com.google.common.collect.Multimap<K, V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableMultimap(com.google.common.collect.Multimap<K, V>)", "public static <K, V> com.google.common.collect.Multimap<K, V> unmodifiableMultimap(com.google.common.collect.Multimap<K, V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableMultimap(com.google.common.collect.ImmutableMultimap<K, V>)", "public static <K, V> com.google.common.collect.Multimap<K, V> unmodifiableMultimap(com.google.common.collect.ImmutableMultimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.synchronizedSetMultimap(com.google.common.collect.SetMultimap<K, V>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> synchronizedSetMultimap(com.google.common.collect.SetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableSetMultimap(com.google.common.collect.SetMultimap<K, V>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> unmodifiableSetMultimap(com.google.common.collect.SetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap<K, V>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps.synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>)", "public static <K, V> com.google.common.collect.SortedSetMultimap<K, V> synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>)", "public static <K, V> com.google.common.collect.SortedSetMultimap<K, V> unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.synchronizedListMultimap(com.google.common.collect.ListMultimap<K, V>)", "public static <K, V> com.google.common.collect.ListMultimap<K, V> synchronizedListMultimap(com.google.common.collect.ListMultimap<K, V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableListMultimap(com.google.common.collect.ListMultimap<K, V>)", "public static <K, V> com.google.common.collect.ListMultimap<K, V> unmodifiableListMultimap(com.google.common.collect.ListMultimap<K, V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap<K, V>)", "public static <K, V> com.google.common.collect.ListMultimap<K, V> unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.List<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.ListMultimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.List<V>> asMap(com.google.common.collect.ListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Set<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.SetMultimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.Set<V>> asMap(com.google.common.collect.SetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.SortedSet<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.SortedSetMultimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.SortedSet<V>> asMap(com.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.Multimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.Collection<V>> asMap(com.google.common.collect.Multimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.forMap(java.util.Map<K, V>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> forMap(java.util.Map<K, V>)"], ["<K, V1, V2> com.google.common.collect.Multimap<K, V2>", "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.Multimap<K, V1>, com.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> com.google.common.collect.Multimap<K, V2> transformValues(com.google.common.collect.Multimap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> com.google.common.collect.Multimap<K, V2>", "com.google.common.collect.Multimaps.transformEntries(com.google.common.collect.Multimap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> com.google.common.collect.Multimap<K, V2> transformEntries(com.google.common.collect.Multimap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> com.google.common.collect.ListMultimap<K, V2>", "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap<K, V1>, com.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> com.google.common.collect.ListMultimap<K, V2> transformValues(com.google.common.collect.ListMultimap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> com.google.common.collect.ListMultimap<K, V2>", "com.google.common.collect.Multimaps.transformEntries(com.google.common.collect.ListMultimap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> com.google.common.collect.ListMultimap<K, V2> transformEntries(com.google.common.collect.ListMultimap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.Multimaps.index(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> index(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.Multimaps.index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)", "public static <K, V> com.google.common.collect.ImmutableListMultimap<K, V> index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.filterKeys(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> com.google.common.collect.Multimap<K, V> filterKeys(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.filterKeys(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> filterKeys(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.filterKeys(com.google.common.collect.ListMultimap<K, V>, com.google.common.base.Predicate<? super K>)", "public static <K, V> com.google.common.collect.ListMultimap<K, V> filterKeys(com.google.common.collect.ListMultimap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.filterValues(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super V>)", "public static <K, V> com.google.common.collect.Multimap<K, V> filterValues(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.filterValues(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super V>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> filterValues(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> com.google.common.collect.Multimap<K, V> filterEntries(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> com.google.common.collect.SetMultimap<K, V> filterEntries(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["boolean", "com.google.common.collect.Multisets$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$1.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.Multisets$1.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$2.count(java.lang.Object)", "public int count(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$3.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$3.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.Multisets$3.size()", "public int size()"], ["int", "com.google.common.collect.Multisets$3.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$4.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$5.compare(com.google.common.collect.Multiset$Entry<?>, com.google.common.collect.Multiset$Entry<?>)", "public int compare(com.google.common.collect.Multiset$Entry<?>, com.google.common.collect.Multiset$Entry<?>)"], ["int", "com.google.common.collect.Multisets$5.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$AbstractEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$AbstractEntry.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Multisets$AbstractEntry.toString()", "public java.lang.String toString()"], ["void", "com.google.common.collect.Multisets$ElementSet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Multisets$ElementSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$ElementSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Multisets$ElementSet.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "com.google.common.collect.Multisets$ElementSet.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "com.google.common.collect.Multisets$ElementSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$ElementSet.size()", "public int size()"], ["boolean", "com.google.common.collect.Multisets$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "com.google.common.collect.Multisets$EntrySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Multisets$FilteredMultiset$1.apply(com.google.common.collect.Multiset$Entry<E>)", "public boolean apply(com.google.common.collect.Multiset$Entry<E>)"], ["boolean", "com.google.common.collect.Multisets$FilteredMultiset$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.Multisets$FilteredMultiset.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "com.google.common.collect.Multisets$FilteredMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$FilteredMultiset.add(E, int)", "public int add(E, int)"], ["int", "com.google.common.collect.Multisets$FilteredMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["void", "com.google.common.collect.Multisets$FilteredMultiset.clear()", "public void clear()"], ["java.util.Iterator", "com.google.common.collect.Multisets$FilteredMultiset.iterator()", "public java.util.Iterator iterator()"], ["E", "com.google.common.collect.Multisets$ImmutableEntry.getElement()", "public E getElement()"], ["int", "com.google.common.collect.Multisets$ImmutableEntry.getCount()", "public int getCount()"], ["boolean", "com.google.common.collect.Multisets$MultisetIteratorImpl.hasNext()", "public boolean hasNext()"], ["E", "com.google.common.collect.Multisets$MultisetIteratorImpl.next()", "public E next()"], ["void", "com.google.common.collect.Multisets$MultisetIteratorImpl.remove()", "public void remove()"], ["java.util.Set<E>", "com.google.common.collect.Multisets$UnmodifiableMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.Multisets$UnmodifiableMultiset.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["java.util.Iterator<E>", "com.google.common.collect.Multisets$UnmodifiableMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.add(E)", "public boolean add(E)"], ["int", "com.google.common.collect.Multisets$UnmodifiableMultiset.add(E, int)", "public int add(E, int)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.Multisets$UnmodifiableMultiset.clear()", "public void clear()"], ["int", "com.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.unmodifiableMultiset(com.google.common.collect.Multiset<? extends E>)", "public static <E> com.google.common.collect.Multiset<E> unmodifiableMultiset(com.google.common.collect.Multiset<? extends E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.unmodifiableMultiset(com.google.common.collect.ImmutableMultiset<E>)", "public static <E> com.google.common.collect.Multiset<E> unmodifiableMultiset(com.google.common.collect.ImmutableMultiset<E>)"], ["<E> com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.Multisets.unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset<E>)", "public static <E> com.google.common.collect.SortedMultiset<E> unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset<E>)"], ["<E> com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.Multisets.immutableEntry(E, int)", "public static <E> com.google.common.collect.Multiset$Entry<E> immutableEntry(E, int)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.filter(com.google.common.collect.Multiset<E>, com.google.common.base.Predicate<? super E>)", "public static <E> com.google.common.collect.Multiset<E> filter(com.google.common.collect.Multiset<E>, com.google.common.base.Predicate<? super E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.union(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)", "public static <E> com.google.common.collect.Multiset<E> union(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.intersection(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)", "public static <E> com.google.common.collect.Multiset<E> intersection(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.sum(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)", "public static <E> com.google.common.collect.Multiset<E> sum(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)", "public static <E> com.google.common.collect.Multiset<E> difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)"], ["boolean", "com.google.common.collect.Multisets.containsOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)", "public static boolean containsOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)"], ["boolean", "com.google.common.collect.Multisets.retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)", "public static boolean retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)"], ["boolean", "com.google.common.collect.Multisets.removeOccurrences(com.google.common.collect.Multiset<?>, java.lang.Iterable<?>)", "public static boolean removeOccurrences(com.google.common.collect.Multiset<?>, java.lang.Iterable<?>)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.Multisets.copyHighestCountFirst(com.google.common.collect.Multiset<E>)", "public static <E> com.google.common.collect.ImmutableMultiset<E> copyHighestCountFirst(com.google.common.collect.Multiset<E>)"], ["void", "com.google.common.collect.MutableClassToInstanceMap$1.checkKeyValue(java.lang.Class<?>, java.lang.Object)", "public void checkKeyValue(java.lang.Class<?>, java.lang.Object)"], ["void", "com.google.common.collect.MutableClassToInstanceMap$1.checkKeyValue(java.lang.Object, java.lang.Object)", "public void checkKeyValue(java.lang.Object, java.lang.Object)"], ["<B> com.google.common.collect.MutableClassToInstanceMap<B>", "com.google.common.collect.MutableClassToInstanceMap.create()", "public static <B> com.google.common.collect.MutableClassToInstanceMap<B> create()"], ["<B> com.google.common.collect.MutableClassToInstanceMap<B>", "com.google.common.collect.MutableClassToInstanceMap.create(java.util.Map<java.lang.Class<? extends B>, B>)", "public static <B> com.google.common.collect.MutableClassToInstanceMap<B> create(java.util.Map<java.lang.Class<? extends B>, B>)"], ["<T extends B> T", "com.google.common.collect.MutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "com.google.common.collect.MutableClassToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["void", "com.google.common.collect.MutableClassToInstanceMap.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.util.Set", "com.google.common.collect.MutableClassToInstanceMap.entrySet()", "public java.util.Set entrySet()"], ["int", "com.google.common.collect.NaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> com.google.common.collect.Ordering<S>", "com.google.common.collect.NaturalOrdering.reverse()", "public <S extends java.lang.Comparable> com.google.common.collect.Ordering<S> reverse()"], ["java.lang.String", "com.google.common.collect.NaturalOrdering.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.NaturalOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.NullsFirstOrdering.compare(T, T)", "public int compare(T, T)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsFirstOrdering.reverse()", "public <S extends T> com.google.common.collect.Ordering<S> reverse()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsFirstOrdering.nullsFirst()", "public <S extends T> com.google.common.collect.Ordering<S> nullsFirst()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsFirstOrdering.nullsLast()", "public <S extends T> com.google.common.collect.Ordering<S> nullsLast()"], ["boolean", "com.google.common.collect.NullsFirstOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.NullsFirstOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.NullsFirstOrdering.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.NullsLastOrdering.compare(T, T)", "public int compare(T, T)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsLastOrdering.reverse()", "public <S extends T> com.google.common.collect.Ordering<S> reverse()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsLastOrdering.nullsFirst()", "public <S extends T> com.google.common.collect.Ordering<S> nullsFirst()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsLastOrdering.nullsLast()", "public <S extends T> com.google.common.collect.Ordering<S> nullsLast()"], ["boolean", "com.google.common.collect.NullsLastOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.NullsLastOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.NullsLastOrdering.toString()", "public java.lang.String toString()"], ["<T> T[]", "com.google.common.collect.ObjectArrays.newArray(java.lang.Class<T>, int)", "public static <T> T[] newArray(java.lang.Class<T>, int)"], ["<T> T[]", "com.google.common.collect.ObjectArrays.newArray(T[], int)", "public static <T> T[] newArray(T[], int)"], ["<T> T[]", "com.google.common.collect.ObjectArrays.concat(T[], T[], java.lang.Class<T>)", "public static <T> T[] concat(T[], T[], java.lang.Class<T>)"], ["<T> T[]", "com.google.common.collect.ObjectArrays.concat(T, T[])", "public static <T> T[] concat(T, T[])"], ["<T> T[]", "com.google.common.collect.ObjectArrays.concat(T[], T)", "public static <T> T[] concat(T[], T)"], ["java.lang.Integer", "com.google.common.collect.Ordering$ArbitraryOrdering$1.apply(java.lang.Object)", "public java.lang.Integer apply(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Ordering$ArbitraryOrdering$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["int", "com.google.common.collect.Ordering$ArbitraryOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Ordering$ArbitraryOrdering.toString()", "public java.lang.String toString()"], ["<C extends java.lang.Comparable> com.google.common.collect.Ordering<C>", "com.google.common.collect.Ordering.natural()", "public static <C extends java.lang.Comparable> com.google.common.collect.Ordering<C> natural()"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.from(java.util.Comparator<T>)", "public static <T> com.google.common.collect.Ordering<T> from(java.util.Comparator<T>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.from(com.google.common.collect.Ordering<T>)", "public static <T> com.google.common.collect.Ordering<T> from(com.google.common.collect.Ordering<T>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.explicit(java.util.List<T>)", "public static <T> com.google.common.collect.Ordering<T> explicit(java.util.List<T>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.explicit(T, T...)", "public static <T> com.google.common.collect.Ordering<T> explicit(T, T...)"], ["com.google.common.collect.Ordering<java.lang.Object>", "com.google.common.collect.Ordering.allEqual()", "public static com.google.common.collect.Ordering<java.lang.Object> allEqual()"], ["com.google.common.collect.Ordering<java.lang.Object>", "com.google.common.collect.Ordering.usingToString()", "public static com.google.common.collect.Ordering<java.lang.Object> usingToString()"], ["com.google.common.collect.Ordering<java.lang.Object>", "com.google.common.collect.Ordering.arbitrary()", "public static com.google.common.collect.Ordering<java.lang.Object> arbitrary()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.Ordering.reverse()", "public <S extends T> com.google.common.collect.Ordering<S> reverse()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.Ordering.nullsFirst()", "public <S extends T> com.google.common.collect.Ordering<S> nullsFirst()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.Ordering.nullsLast()", "public <S extends T> com.google.common.collect.Ordering<S> nullsLast()"], ["<F> com.google.common.collect.Ordering<F>", "com.google.common.collect.Ordering.onResultOf(com.google.common.base.Function<F, ? extends T>)", "public <F> com.google.common.collect.Ordering<F> onResultOf(com.google.common.base.Function<F, ? extends T>)"], ["<U extends T> com.google.common.collect.Ordering<U>", "com.google.common.collect.Ordering.compound(java.util.Comparator<? super U>)", "public <U extends T> com.google.common.collect.Ordering<U> compound(java.util.Comparator<? super U>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)", "public static <T> com.google.common.collect.Ordering<T> compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)"], ["<S extends T> com.google.common.collect.Ordering<java.lang.Iterable<S>>", "com.google.common.collect.Ordering.lexicographical()", "public <S extends T> com.google.common.collect.Ordering<java.lang.Iterable<S>> lexicographical()"], ["<E extends T> E", "com.google.common.collect.Ordering.min(java.util.Iterator<E>)", "public <E extends T> E min(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.min(java.lang.Iterable<E>)", "public <E extends T> E min(java.lang.Iterable<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.min(E, E)", "public <E extends T> E min(E, E)"], ["<E extends T> E", "com.google.common.collect.Ordering.min(E, E, E, E...)", "public <E extends T> E min(E, E, E, E...)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(java.util.Iterator<E>)", "public <E extends T> E max(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(java.lang.Iterable<E>)", "public <E extends T> E max(java.lang.Iterable<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(E, E)", "public <E extends T> E max(E, E)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(E, E, E, E...)", "public <E extends T> E max(E, E, E, E...)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.leastOf(java.lang.Iterable<E>, int)", "public <E extends T> java.util.List<E> leastOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.leastOf(java.util.Iterator<E>, int)", "public <E extends T> java.util.List<E> leastOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.greatestOf(java.lang.Iterable<E>, int)", "public <E extends T> java.util.List<E> greatestOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.greatestOf(java.util.Iterator<E>, int)", "public <E extends T> java.util.List<E> greatestOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.sortedCopy(java.lang.Iterable<E>)", "public <E extends T> java.util.List<E> sortedCopy(java.lang.Iterable<E>)"], ["<E extends T> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.Ordering.immutableSortedCopy(java.lang.Iterable<E>)", "public <E extends T> com.google.common.collect.ImmutableList<E> immutableSortedCopy(java.lang.Iterable<E>)"], ["boolean", "com.google.common.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)", "public boolean isOrdered(java.lang.Iterable<? extends T>)"], ["boolean", "com.google.common.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)", "public boolean isStrictlyOrdered(java.lang.Iterable<? extends T>)"], ["int", "com.google.common.collect.Ordering.binarySearch(java.util.List<? extends T>, T)", "public int binarySearch(java.util.List<? extends T>, T)"], ["<E> java.util.concurrent.ArrayBlockingQueue<E>", "com.google.common.collect.Queues.newArrayBlockingQueue(int)", "public static <E> java.util.concurrent.ArrayBlockingQueue<E> newArrayBlockingQueue(int)"], ["<E> java.util.ArrayDeque<E>", "com.google.common.collect.Queues.newArrayDeque()", "public static <E> java.util.ArrayDeque<E> newArrayDeque()"], ["<E> java.util.ArrayDeque<E>", "com.google.common.collect.Queues.newArrayDeque(java.lang.Iterable<? extends E>)", "public static <E> java.util.ArrayDeque<E> newArrayDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "com.google.common.collect.Queues.newConcurrentLinkedQueue()", "public static <E> java.util.concurrent.ConcurrentLinkedQueue<E> newConcurrentLinkedQueue()"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "com.google.common.collect.Queues.newConcurrentLinkedQueue(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "com.google.common.collect.Queues.newLinkedBlockingDeque()", "public static <E> java.util.concurrent.LinkedBlockingDeque<E> newLinkedBlockingDeque()"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "com.google.common.collect.Queues.newLinkedBlockingDeque(int)", "public static <E> java.util.concurrent.LinkedBlockingDeque<E> newLinkedBlockingDeque(int)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "com.google.common.collect.Queues.newLinkedBlockingDeque(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.LinkedBlockingDeque<E> newLinkedBlockingDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "com.google.common.collect.Queues.newLinkedBlockingQueue()", "public static <E> java.util.concurrent.LinkedBlockingQueue<E> newLinkedBlockingQueue()"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "com.google.common.collect.Queues.newLinkedBlockingQueue(int)", "public static <E> java.util.concurrent.LinkedBlockingQueue<E> newLinkedBlockingQueue(int)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "com.google.common.collect.Queues.newLinkedBlockingQueue(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.LinkedBlockingQueue<E> newLinkedBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "com.google.common.collect.Queues.newPriorityBlockingQueue()", "public static <E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E> newPriorityBlockingQueue()"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "com.google.common.collect.Queues.newPriorityBlockingQueue(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E> newPriorityBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "com.google.common.collect.Queues.newPriorityQueue()", "public static <E extends java.lang.Comparable> java.util.PriorityQueue<E> newPriorityQueue()"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "com.google.common.collect.Queues.newPriorityQueue(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> java.util.PriorityQueue<E> newPriorityQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.SynchronousQueue<E>", "com.google.common.collect.Queues.newSynchronousQueue()", "public static <E> java.util.concurrent.SynchronousQueue<E> newSynchronousQueue()"], ["<E> int", "com.google.common.collect.Queues.drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)", "public static <E> int drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<E> int", "com.google.common.collect.Queues.drainUninterruptibly(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)", "public static <E> int drainUninterruptibly(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)"], ["<E> java.util.Queue<E>", "com.google.common.collect.Queues.synchronizedQueue(java.util.Queue<E>)", "public static <E> java.util.Queue<E> synchronizedQueue(java.util.Queue<E>)"], ["<E> java.util.Deque<E>", "com.google.common.collect.Queues.synchronizedDeque(java.util.Deque<E>)", "public static <E> java.util.Deque<E> synchronizedDeque(java.util.Deque<E>)"], ["com.google.common.collect.Cut", "com.google.common.collect.Range$1.apply(com.google.common.collect.Range)", "public com.google.common.collect.Cut apply(com.google.common.collect.Range)"], ["java.lang.Object", "com.google.common.collect.Range$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.google.common.collect.Cut", "com.google.common.collect.Range$2.apply(com.google.common.collect.Range)", "public com.google.common.collect.Cut apply(com.google.common.collect.Range)"], ["java.lang.Object", "com.google.common.collect.Range$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["int", "com.google.common.collect.Range$3.compare(com.google.common.collect.Range<?>, com.google.common.collect.Range<?>)", "public int compare(com.google.common.collect.Range<?>, com.google.common.collect.Range<?>)"], ["int", "com.google.common.collect.Range$3.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.open(C, C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> open(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.closed(C, C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> closed(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.closedOpen(C, C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> closedOpen(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.openClosed(C, C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> openClosed(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.range(C, com.google.common.collect.BoundType, C, com.google.common.collect.BoundType)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> range(C, com.google.common.collect.BoundType, C, com.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.lessThan(C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> lessThan(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.atMost(C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> atMost(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.upTo(C, com.google.common.collect.BoundType)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> upTo(C, com.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.greaterThan(C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> greaterThan(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.atLeast(C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> atLeast(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.downTo(C, com.google.common.collect.BoundType)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> downTo(C, com.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.all()", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> all()"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.singleton(C)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> singleton(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.encloseAll(java.lang.Iterable<C>)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.Range<C> encloseAll(java.lang.Iterable<C>)"], ["boolean", "com.google.common.collect.Range.hasLowerBound()", "public boolean hasLowerBound()"], ["C", "com.google.common.collect.Range.lowerEndpoint()", "public C lowerEndpoint()"], ["com.google.common.collect.BoundType", "com.google.common.collect.Range.lowerBoundType()", "public com.google.common.collect.BoundType lowerBoundType()"], ["boolean", "com.google.common.collect.Range.hasUpperBound()", "public boolean hasUpperBound()"], ["C", "com.google.common.collect.Range.upperEndpoint()", "public C upperEndpoint()"], ["com.google.common.collect.BoundType", "com.google.common.collect.Range.upperBoundType()", "public com.google.common.collect.BoundType upperBoundType()"], ["boolean", "com.google.common.collect.Range.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Range.contains(C)", "public boolean contains(C)"], ["boolean", "com.google.common.collect.Range.apply(C)", "public boolean apply(C)"], ["boolean", "com.google.common.collect.Range.containsAll(java.lang.Iterable<? extends C>)", "public boolean containsAll(java.lang.Iterable<? extends C>)"], ["boolean", "com.google.common.collect.Range.encloses(com.google.common.collect.Range<C>)", "public boolean encloses(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.Range.isConnected(com.google.common.collect.Range<C>)", "public boolean isConnected(com.google.common.collect.Range<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.Range.intersection(com.google.common.collect.Range<C>)", "public com.google.common.collect.Range<C> intersection(com.google.common.collect.Range<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.Range.span(com.google.common.collect.Range<C>)", "public com.google.common.collect.Range<C> span(com.google.common.collect.Range<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.Range.canonical(com.google.common.collect.DiscreteDomain<C>)", "public com.google.common.collect.Range<C> canonical(com.google.common.collect.DiscreteDomain<C>)"], ["boolean", "com.google.common.collect.Range.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Range.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Range.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.Range.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<C>", "com.google.common.collect.RegularContiguousSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<C> iterator()"], ["com.google.common.collect.UnmodifiableIterator<C>", "com.google.common.collect.RegularContiguousSet.descendingIterator()", "public com.google.common.collect.UnmodifiableIterator<C> descendingIterator()"], ["C", "com.google.common.collect.RegularContiguousSet.first()", "public C first()"], ["C", "com.google.common.collect.RegularContiguousSet.last()", "public C last()"], ["int", "com.google.common.collect.RegularContiguousSet.size()", "public int size()"], ["boolean", "com.google.common.collect.RegularContiguousSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.RegularContiguousSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.RegularContiguousSet.isEmpty()", "public boolean isEmpty()"], ["com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.RegularContiguousSet.intersection(com.google.common.collect.ContiguousSet<C>)", "public com.google.common.collect.ContiguousSet<C> intersection(com.google.common.collect.ContiguousSet<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.RegularContiguousSet.range()", "public com.google.common.collect.Range<C> range()"], ["com.google.common.collect.Range<C>", "com.google.common.collect.RegularContiguousSet.range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)", "public com.google.common.collect.Range<C> range(com.google.common.collect.BoundType, com.google.common.collect.BoundType)"], ["boolean", "com.google.common.collect.RegularContiguousSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.RegularContiguousSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "com.google.common.collect.RegularContiguousSet.last()", "public java.lang.Object last()"], ["java.lang.Object", "com.google.common.collect.RegularContiguousSet.first()", "public java.lang.Object first()"], ["java.util.Iterator", "com.google.common.collect.RegularContiguousSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.RegularContiguousSet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.UnmodifiableListIterator<E>", "com.google.common.collect.RegularImmutableAsList.listIterator(int)", "public com.google.common.collect.UnmodifiableListIterator<E> listIterator(int)"], ["E", "com.google.common.collect.RegularImmutableAsList.get(int)", "public E get(int)"], ["java.util.ListIterator", "com.google.common.collect.RegularImmutableAsList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.RegularImmutableBiMap$1.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["int", "com.google.common.collect.RegularImmutableBiMap$1.hashCode()", "public int hashCode()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableBiMap$1.iterator()", "public java.util.Iterator iterator()"], ["java.util.Map$Entry<V, K>", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)", "public java.util.Map$Entry<V, K> get(int)"], ["java.lang.Object", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)", "public java.lang.Object get(int)"], ["int", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.hashCode()", "public int hashCode()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<V, K>>", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<V, K>> iterator()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.RegularImmutableBiMap$Inverse.size()", "public int size()"], ["com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.RegularImmutableBiMap$Inverse.inverse()", "public com.google.common.collect.ImmutableBiMap<K, V> inverse()"], ["K", "com.google.common.collect.RegularImmutableBiMap$Inverse.get(java.lang.Object)", "public K get(java.lang.Object)"], ["com.google.common.collect.BiMap", "com.google.common.collect.RegularImmutableBiMap$Inverse.inverse()", "public com.google.common.collect.BiMap inverse()"], ["V", "com.google.common.collect.RegularImmutableBiMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableBiMap.size()", "public int size()"], ["com.google.common.collect.ImmutableBiMap<V, K>", "com.google.common.collect.RegularImmutableBiMap.inverse()", "public com.google.common.collect.ImmutableBiMap<V, K> inverse()"], ["com.google.common.collect.BiMap", "com.google.common.collect.RegularImmutableBiMap.inverse()", "public com.google.common.collect.BiMap inverse()"], ["int", "com.google.common.collect.RegularImmutableList.size()", "public int size()"], ["E", "com.google.common.collect.RegularImmutableList.get(int)", "public E get(int)"], ["int", "com.google.common.collect.RegularImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["com.google.common.collect.UnmodifiableListIterator<E>", "com.google.common.collect.RegularImmutableList.listIterator(int)", "public com.google.common.collect.UnmodifiableListIterator<E> listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.RegularImmutableList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.RegularImmutableMap$EntrySet.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableMap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["V", "com.google.common.collect.RegularImmutableMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableMap.size()", "public int size()"], ["int", "com.google.common.collect.RegularImmutableMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableMultiset.size()", "public int size()"], ["boolean", "com.google.common.collect.RegularImmutableMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.RegularImmutableMultiset.elementSet()", "public com.google.common.collect.ImmutableSet<E> elementSet()"], ["int", "com.google.common.collect.RegularImmutableMultiset.hashCode()", "public int hashCode()"], ["java.util.Set", "com.google.common.collect.RegularImmutableMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "com.google.common.collect.RegularImmutableSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableSet.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.RegularImmutableSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "com.google.common.collect.RegularImmutableSet.hashCode()", "public int hashCode()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.RegularImmutableSortedMap$EntrySet$1.get(int)", "public java.util.Map$Entry<K, V> get(int)"], ["java.lang.Object", "com.google.common.collect.RegularImmutableSortedMap$EntrySet$1.get(int)", "public java.lang.Object get(int)"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.RegularImmutableSortedMap$EntrySet.iterator()", "public com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSortedMap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableSortedSet<K>", "com.google.common.collect.RegularImmutableSortedMap.keySet()", "public com.google.common.collect.ImmutableSortedSet<K> keySet()"], ["com.google.common.collect.ImmutableCollection<V>", "com.google.common.collect.RegularImmutableSortedMap.values()", "public com.google.common.collect.ImmutableCollection<V> values()"], ["V", "com.google.common.collect.RegularImmutableSortedMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.RegularImmutableSortedMap.headMap(K, boolean)", "public com.google.common.collect.ImmutableSortedMap<K, V> headMap(K, boolean)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.RegularImmutableSortedMap.tailMap(K, boolean)", "public com.google.common.collect.ImmutableSortedMap<K, V> tailMap(K, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.RegularImmutableSortedMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.RegularImmutableSortedMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.Collection", "com.google.common.collect.RegularImmutableSortedMap.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.RegularImmutableSortedMap.keySet()", "public java.util.Set keySet()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.RegularImmutableSortedMap.keySet()", "public com.google.common.collect.ImmutableSet keySet()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.RegularImmutableSortedMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.RegularImmutableSortedMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["int", "com.google.common.collect.RegularImmutableSortedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableSortedMultiset.size()", "public int size()"], ["com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public com.google.common.collect.ImmutableSortedSet<E> elementSet()"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.RegularImmutableSortedMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.RegularImmutableSortedMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.ImmutableSortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.RegularImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.RegularImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["java.util.NavigableSet", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Set", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.RegularImmutableSortedSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.RegularImmutableSortedSet.descendingIterator()", "public com.google.common.collect.UnmodifiableIterator<E> descendingIterator()"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.RegularImmutableSortedSet.size()", "public int size()"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.first()", "public E first()"], ["E", "com.google.common.collect.RegularImmutableSortedSet.last()", "public E last()"], ["E", "com.google.common.collect.RegularImmutableSortedSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.higher(E)", "public E higher(E)"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.RegularImmutableTable$1.compare(com.google.common.collect.Table$Cell<R, C, V>, com.google.common.collect.Table$Cell<R, C, V>)", "public int compare(com.google.common.collect.Table$Cell<R, C, V>, com.google.common.collect.Table$Cell<R, C, V>)"], ["int", "com.google.common.collect.RegularImmutableTable$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.Table$Cell<R, C, V>", "com.google.common.collect.RegularImmutableTable$CellSet$1.get(int)", "public com.google.common.collect.Table$Cell<R, C, V> get(int)"], ["java.lang.Object", "com.google.common.collect.RegularImmutableTable$CellSet$1.get(int)", "public java.lang.Object get(int)"], ["int", "com.google.common.collect.RegularImmutableTable$CellSet.size()", "public int size()"], ["com.google.common.collect.UnmodifiableIterator<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.RegularImmutableTable$CellSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<com.google.common.collect.Table$Cell<R, C, V>> iterator()"], ["boolean", "com.google.common.collect.RegularImmutableTable$CellSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableTable$CellSet.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.RegularImmutableTable$Values.size()", "public int size()"], ["V", "com.google.common.collect.RegularImmutableTable$Values.get(int)", "public V get(int)"], ["int", "com.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> com.google.common.collect.Ordering<S>", "com.google.common.collect.ReverseNaturalOrdering.reverse()", "public <S extends java.lang.Comparable> com.google.common.collect.Ordering<S> reverse()"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(E, E)", "public <E extends java.lang.Comparable> E min(E, E)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(E, E, E, E...)", "public <E extends java.lang.Comparable> E min(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator<E>)", "public <E extends java.lang.Comparable> E min(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable<E>)", "public <E extends java.lang.Comparable> E min(java.lang.Iterable<E>)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(E, E)", "public <E extends java.lang.Comparable> E max(E, E)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(E, E, E, E...)", "public <E extends java.lang.Comparable> E max(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator<E>)", "public <E extends java.lang.Comparable> E max(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable<E>)", "public <E extends java.lang.Comparable> E max(java.lang.Iterable<E>)"], ["java.lang.String", "com.google.common.collect.ReverseNaturalOrdering.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])", "public java.lang.Object max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object)", "public java.lang.Object max(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable)", "public java.lang.Object max(java.lang.Iterable)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator)", "public java.lang.Object max(java.util.Iterator)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])", "public java.lang.Object min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object)", "public java.lang.Object min(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable)", "public java.lang.Object min(java.lang.Iterable)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator)", "public java.lang.Object min(java.util.Iterator)"], ["int", "com.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.ReverseOrdering.compare(T, T)", "public int compare(T, T)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.ReverseOrdering.reverse()", "public <S extends T> com.google.common.collect.Ordering<S> reverse()"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(E, E)", "public <E extends T> E min(E, E)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(E, E, E, E...)", "public <E extends T> E min(E, E, E, E...)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(java.util.Iterator<E>)", "public <E extends T> E min(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(java.lang.Iterable<E>)", "public <E extends T> E min(java.lang.Iterable<E>)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(E, E)", "public <E extends T> E max(E, E)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(E, E, E, E...)", "public <E extends T> E max(E, E, E, E...)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(java.util.Iterator<E>)", "public <E extends T> E max(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(java.lang.Iterable<E>)", "public <E extends T> E max(java.lang.Iterable<E>)"], ["int", "com.google.common.collect.ReverseOrdering.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.ReverseOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ReverseOrdering.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.Sets$1.size()", "public int size()"], ["boolean", "com.google.common.collect.Sets$1.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$1.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "com.google.common.collect.Sets$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["<S extends java.util.Set<E>> S", "com.google.common.collect.Sets$1.copyInto(S)", "public <S extends java.util.Set<E>> S copyInto(S)"], ["com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.Sets$1.immutableCopy()", "public com.google.common.collect.ImmutableSet<E> immutableCopy()"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$2.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "com.google.common.collect.Sets$2.size()", "public int size()"], ["boolean", "com.google.common.collect.Sets$2.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Sets$2.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Sets$2.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$3.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "com.google.common.collect.Sets$3.size()", "public int size()"], ["boolean", "com.google.common.collect.Sets$3.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Sets$3.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.collect.Sets$CartesianSet$1.size()", "public int size()"], ["java.util.List<E>", "com.google.common.collect.Sets$CartesianSet$1.get(int)", "public java.util.List<E> get(int)"], ["java.lang.Object", "com.google.common.collect.Sets$CartesianSet$1.get(int)", "public java.lang.Object get(int)"], ["boolean", "com.google.common.collect.Sets$CartesianSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Sets$CartesianSet.hashCode()", "public int hashCode()"], ["E", "com.google.common.collect.Sets$DescendingSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.higher(E)", "public E higher(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.Sets$DescendingSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$DescendingSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$DescendingSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$DescendingSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$DescendingSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$DescendingSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.Comparator<? super E>", "com.google.common.collect.Sets$DescendingSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["E", "com.google.common.collect.Sets$DescendingSet.first()", "public E first()"], ["java.util.SortedSet<E>", "com.google.common.collect.Sets$DescendingSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.last()", "public E last()"], ["java.util.SortedSet<E>", "com.google.common.collect.Sets$DescendingSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Sets$DescendingSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$DescendingSet.iterator()", "public java.util.Iterator<E> iterator()"], ["java.lang.Object[]", "com.google.common.collect.Sets$DescendingSet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Sets$DescendingSet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "com.google.common.collect.Sets$DescendingSet.toString()", "public java.lang.String toString()"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.higher(E)", "public E higher(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$FilteredNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$FilteredNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.last()", "public E last()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$FilteredNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$FilteredNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$FilteredNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["boolean", "com.google.common.collect.Sets$FilteredSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Sets$FilteredSet.hashCode()", "public int hashCode()"], ["java.util.Comparator<? super E>", "com.google.common.collect.Sets$FilteredSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.SortedSet<E>", "com.google.common.collect.Sets$FilteredSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Sets$FilteredSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Sets$FilteredSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["E", "com.google.common.collect.Sets$FilteredSortedSet.first()", "public E first()"], ["E", "com.google.common.collect.Sets$FilteredSortedSet.last()", "public E last()"], ["boolean", "com.google.common.collect.Sets$ImprovedAbstractSet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Sets$ImprovedAbstractSet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.Sets$PowerSet.size()", "public int size()"], ["boolean", "com.google.common.collect.Sets$PowerSet.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.Set<E>>", "com.google.common.collect.Sets$PowerSet.iterator()", "public java.util.Iterator<java.util.Set<E>> iterator()"], ["boolean", "com.google.common.collect.Sets$PowerSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Sets$PowerSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Sets$PowerSet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Sets$PowerSet.toString()", "public java.lang.String toString()"], ["com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.Sets$SetView.immutableCopy()", "public com.google.common.collect.ImmutableSet<E> immutableCopy()"], ["<S extends java.util.Set<E>> S", "com.google.common.collect.Sets$SetView.copyInto(S)", "public <S extends java.util.Set<E>> S copyInto(S)"], ["boolean", "com.google.common.collect.Sets$SubSet$1.hasNext()", "public boolean hasNext()"], ["E", "com.google.common.collect.Sets$SubSet$1.next()", "public E next()"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$SubSet.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "com.google.common.collect.Sets$SubSet.size()", "public int size()"], ["boolean", "com.google.common.collect.Sets$SubSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.higher(E)", "public E higher(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$UnmodifiableNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "com.google.common.collect.Sets$UnmodifiableNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$UnmodifiableNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$UnmodifiableNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Sets$UnmodifiableNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.Sets.immutableEnumSet(E, E...)", "public static <E extends java.lang.Enum<E>> com.google.common.collect.ImmutableSet<E> immutableEnumSet(E, E...)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.Sets.immutableEnumSet(java.lang.Iterable<E>)", "public static <E extends java.lang.Enum<E>> com.google.common.collect.ImmutableSet<E> immutableEnumSet(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "com.google.common.collect.Sets.newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet()", "public static <E> java.util.HashSet<E> newHashSet()"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet(E...)", "public static <E> java.util.HashSet<E> newHashSet(E...)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSetWithExpectedSize(int)", "public static <E> java.util.HashSet<E> newHashSetWithExpectedSize(int)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet(java.lang.Iterable<? extends E>)", "public static <E> java.util.HashSet<E> newHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)", "public static <E> java.util.HashSet<E> newHashSet(java.util.Iterator<? extends E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newConcurrentHashSet()", "public static <E> java.util.Set<E> newConcurrentHashSet()"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newConcurrentHashSet(java.lang.Iterable<? extends E>)", "public static <E> java.util.Set<E> newConcurrentHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.LinkedHashSet<E>", "com.google.common.collect.Sets.newLinkedHashSet()", "public static <E> java.util.LinkedHashSet<E> newLinkedHashSet()"], ["<E> java.util.LinkedHashSet<E>", "com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(int)", "public static <E> java.util.LinkedHashSet<E> newLinkedHashSetWithExpectedSize(int)"], ["<E> java.util.LinkedHashSet<E>", "com.google.common.collect.Sets.newLinkedHashSet(java.lang.Iterable<? extends E>)", "public static <E> java.util.LinkedHashSet<E> newLinkedHashSet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "com.google.common.collect.Sets.newTreeSet()", "public static <E extends java.lang.Comparable> java.util.TreeSet<E> newTreeSet()"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "com.google.common.collect.Sets.newTreeSet(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> java.util.TreeSet<E> newTreeSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.TreeSet<E>", "com.google.common.collect.Sets.newTreeSet(java.util.Comparator<? super E>)", "public static <E> java.util.TreeSet<E> newTreeSet(java.util.Comparator<? super E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newIdentityHashSet()", "public static <E> java.util.Set<E> newIdentityHashSet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "com.google.common.collect.Sets.newCopyOnWriteArraySet()", "public static <E> java.util.concurrent.CopyOnWriteArraySet<E> newCopyOnWriteArraySet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "com.google.common.collect.Sets.newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.CopyOnWriteArraySet<E> newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "com.google.common.collect.Sets.complementOf(java.util.Collection<E>)", "public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> complementOf(java.util.Collection<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "com.google.common.collect.Sets.complementOf(java.util.Collection<E>, java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> complementOf(java.util.Collection<E>, java.lang.Class<E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newSetFromMap(java.util.Map<E, java.lang.Boolean>)", "public static <E> java.util.Set<E> newSetFromMap(java.util.Map<E, java.lang.Boolean>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)", "public static <E> com.google.common.collect.Sets$SetView<E> union(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)", "public static <E> com.google.common.collect.Sets$SetView<E> intersection(java.util.Set<E>, java.util.Set<?>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)", "public static <E> com.google.common.collect.Sets$SetView<E> difference(java.util.Set<E>, java.util.Set<?>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)", "public static <E> com.google.common.collect.Sets$SetView<E> symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.filter(java.util.Set<E>, com.google.common.base.Predicate<? super E>)", "public static <E> java.util.Set<E> filter(java.util.Set<E>, com.google.common.base.Predicate<? super E>)"], ["<E> java.util.SortedSet<E>", "com.google.common.collect.Sets.filter(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)", "public static <E> java.util.SortedSet<E> filter(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)"], ["<E> java.util.NavigableSet<E>", "com.google.common.collect.Sets.filter(java.util.NavigableSet<E>, com.google.common.base.Predicate<? super E>)", "public static <E> java.util.NavigableSet<E> filter(java.util.NavigableSet<E>, com.google.common.base.Predicate<? super E>)"], ["<B> java.util.Set<java.util.List<B>>", "com.google.common.collect.Sets.cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)", "public static <B> java.util.Set<java.util.List<B>> cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)"], ["<B> java.util.Set<java.util.List<B>>", "com.google.common.collect.Sets.cartesianProduct(java.util.Set<? extends B>...)", "public static <B> java.util.Set<java.util.List<B>> cartesianProduct(java.util.Set<? extends B>...)"], ["<E> java.util.Set<java.util.Set<E>>", "com.google.common.collect.Sets.powerSet(java.util.Set<E>)", "public static <E> java.util.Set<java.util.Set<E>> powerSet(java.util.Set<E>)"], ["<E> java.util.NavigableSet<E>", "com.google.common.collect.Sets.unmodifiableNavigableSet(java.util.NavigableSet<E>)", "public static <E> java.util.NavigableSet<E> unmodifiableNavigableSet(java.util.NavigableSet<E>)"], ["<E> java.util.NavigableSet<E>", "com.google.common.collect.Sets.synchronizedNavigableSet(java.util.NavigableSet<E>)", "public static <E> java.util.NavigableSet<E> synchronizedNavigableSet(java.util.NavigableSet<E>)"], ["V", "com.google.common.collect.SingletonImmutableBiMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["int", "com.google.common.collect.SingletonImmutableBiMap.size()", "public int size()"], ["boolean", "com.google.common.collect.SingletonImmutableBiMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.SingletonImmutableBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["com.google.common.collect.ImmutableBiMap<V, K>", "com.google.common.collect.SingletonImmutableBiMap.inverse()", "public com.google.common.collect.ImmutableBiMap<V, K> inverse()"], ["com.google.common.collect.BiMap", "com.google.common.collect.SingletonImmutableBiMap.inverse()", "public com.google.common.collect.BiMap inverse()"], ["E", "com.google.common.collect.SingletonImmutableList.get(int)", "public E get(int)"], ["int", "com.google.common.collect.SingletonImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.SingletonImmutableList.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "com.google.common.collect.SingletonImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["int", "com.google.common.collect.SingletonImmutableList.size()", "public int size()"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.SingletonImmutableList.subList(int, int)", "public com.google.common.collect.ImmutableList<E> subList(int, int)"], ["com.google.common.collect.ImmutableList<E>", "com.google.common.collect.SingletonImmutableList.reverse()", "public com.google.common.collect.ImmutableList<E> reverse()"], ["boolean", "com.google.common.collect.SingletonImmutableList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.SingletonImmutableList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.SingletonImmutableList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.SingletonImmutableList.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.collect.SingletonImmutableList.isEmpty()", "public boolean isEmpty()"], ["java.util.List", "com.google.common.collect.SingletonImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.Iterator", "com.google.common.collect.SingletonImmutableList.iterator()", "public java.util.Iterator iterator()"], ["int", "com.google.common.collect.SingletonImmutableSet.size()", "public int size()"], ["boolean", "com.google.common.collect.SingletonImmutableSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.SingletonImmutableSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["com.google.common.collect.UnmodifiableIterator<E>", "com.google.common.collect.SingletonImmutableSet.iterator()", "public com.google.common.collect.UnmodifiableIterator<E> iterator()"], ["boolean", "com.google.common.collect.SingletonImmutableSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.SingletonImmutableSet.hashCode()", "public final int hashCode()"], ["java.lang.String", "com.google.common.collect.SingletonImmutableSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "com.google.common.collect.SingletonImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.ImmutableMap<R, V>", "com.google.common.collect.SingletonImmutableTable.column(C)", "public com.google.common.collect.ImmutableMap<R, V> column(C)"], ["com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "com.google.common.collect.SingletonImmutableTable.columnMap()", "public com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap()"], ["com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "com.google.common.collect.SingletonImmutableTable.rowMap()", "public com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap()"], ["int", "com.google.common.collect.SingletonImmutableTable.size()", "public int size()"], ["java.util.Map", "com.google.common.collect.SingletonImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "com.google.common.collect.SingletonImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Map", "com.google.common.collect.SingletonImmutableTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["boolean", "com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)", "public static boolean hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)"], ["<E> java.util.Comparator<? super E>", "com.google.common.collect.SortedIterables.comparator(java.util.SortedSet<E>)", "public static <E> java.util.Comparator<? super E> comparator(java.util.SortedSet<E>)"], ["int", "com.google.common.collect.SortedLists$KeyAbsentBehavior$2.resultIndex(int)", "public int resultIndex(int)"], ["int", "com.google.common.collect.SortedLists$KeyAbsentBehavior$3.resultIndex(int)", "public int resultIndex(int)"], ["com.google.common.collect.SortedLists$KeyAbsentBehavior[]", "com.google.common.collect.SortedLists$KeyAbsentBehavior.values()", "public static com.google.common.collect.SortedLists$KeyAbsentBehavior[] values()"], ["com.google.common.collect.SortedLists$KeyAbsentBehavior", "com.google.common.collect.SortedLists$KeyAbsentBehavior.valueOf(java.lang.String)", "public static com.google.common.collect.SortedLists$KeyAbsentBehavior valueOf(java.lang.String)"], ["<E> int", "com.google.common.collect.SortedLists$KeyPresentBehavior$4.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)", "public <E> int resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["<E> int", "com.google.common.collect.SortedLists$KeyPresentBehavior$5.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)", "public <E> int resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["com.google.common.collect.SortedLists$KeyPresentBehavior[]", "com.google.common.collect.SortedLists$KeyPresentBehavior.values()", "public static com.google.common.collect.SortedLists$KeyPresentBehavior[] values()"], ["com.google.common.collect.SortedLists$KeyPresentBehavior", "com.google.common.collect.SortedLists$KeyPresentBehavior.valueOf(java.lang.String)", "public static com.google.common.collect.SortedLists$KeyPresentBehavior valueOf(java.lang.String)"], ["<E extends java.lang.Comparable> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E extends java.lang.Comparable> int binarySearch(java.util.List<? extends E>, E, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K extends java.lang.Comparable> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E, K extends java.lang.Comparable> int binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E, K> int binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E> int binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["java.util.Comparator<? super E>", "com.google.common.collect.SortedMultisets$ElementSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.SortedSet<E>", "com.google.common.collect.SortedMultisets$ElementSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.SortedMultisets$ElementSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.SortedMultisets$ElementSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["E", "com.google.common.collect.SortedMultisets$ElementSet.first()", "public E first()"], ["E", "com.google.common.collect.SortedMultisets$ElementSet.last()", "public E last()"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.floor(E)", "public E floor(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.ceiling(E)", "public E ceiling(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.higher(E)", "public E higher(E)"], ["java.util.NavigableSet<E>", "com.google.common.collect.SortedMultisets$NavigableElementSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "com.google.common.collect.SortedMultisets$NavigableElementSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "com.google.common.collect.SortedMultisets$NavigableElementSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.SortedMultisets$NavigableElementSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.SortedMultisets$NavigableElementSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "com.google.common.collect.SparseImmutableTable.columnMap()", "public com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap()"], ["com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "com.google.common.collect.SparseImmutableTable.rowMap()", "public com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap()"], ["int", "com.google.common.collect.SparseImmutableTable.size()", "public int size()"], ["java.util.Map", "com.google.common.collect.SparseImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "com.google.common.collect.SparseImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.SortedSet<R>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.keySet()", "public java.util.SortedSet<R> keySet()"], ["java.util.Comparator<? super R>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.comparator()", "public java.util.Comparator<? super R> comparator()"], ["R", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.firstKey()", "public R firstKey()"], ["R", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.lastKey()", "public R lastKey()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.headMap(R)", "public java.util.SortedMap<R, java.util.Map<C, V>> headMap(R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.subMap(R, R)", "public java.util.SortedMap<R, java.util.Map<C, V>> subMap(R, R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.tailMap(R)", "public java.util.SortedMap<R, java.util.Map<C, V>> tailMap(R)"], ["java.util.Set", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.keySet()", "public java.util.Set keySet()"], ["java.util.SortedSet<R>", "com.google.common.collect.StandardRowSortedTable.rowKeySet()", "public java.util.SortedSet<R> rowKeySet()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable.rowMap()", "public java.util.SortedMap<R, java.util.Map<C, V>> rowMap()"], ["java.util.Map", "com.google.common.collect.StandardRowSortedTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Set", "com.google.common.collect.StandardRowSortedTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["boolean", "com.google.common.collect.StandardTable$CellIterator.hasNext()", "public boolean hasNext()"], ["com.google.common.collect.Table$Cell<R, C, V>", "com.google.common.collect.StandardTable$CellIterator.next()", "public com.google.common.collect.Table$Cell<R, C, V> next()"], ["void", "com.google.common.collect.StandardTable$CellIterator.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.StandardTable$CellIterator.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<R, V>>", "com.google.common.collect.StandardTable$Column$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<R, V>> iterator()"], ["int", "com.google.common.collect.StandardTable$Column$EntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.StandardTable$Column$EntrySet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["R", "com.google.common.collect.StandardTable$Column$EntrySetIterator$1.getKey()", "public R getKey()"], ["V", "com.google.common.collect.StandardTable$Column$EntrySetIterator$1.getValue()", "public V getValue()"], ["V", "com.google.common.collect.StandardTable$Column$EntrySetIterator$1.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.StandardTable$Column$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$Column$Values.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$Values.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$Column$Values.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["V", "com.google.common.collect.StandardTable$Column.put(R, V)", "public V put(R, V)"], ["V", "com.google.common.collect.StandardTable$Column.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Column.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Iterator<C>", "com.google.common.collect.StandardTable$ColumnKeySet.iterator()", "public java.util.Iterator<C> iterator()"], ["int", "com.google.common.collect.StandardTable$ColumnKeySet.size()", "public int size()"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(C)", "public java.util.Map<R, V> apply(C)"], ["java.lang.Object", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<C, java.util.Map<R, V>>>", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<C, java.util.Map<R, V>>> iterator()"], ["int", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)", "public java.util.Map<R, V> get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)", "public java.util.Map<R, V> remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<C, java.util.Map<R, V>>>", "com.google.common.collect.StandardTable$ColumnMap.createEntrySet()", "public java.util.Set<java.util.Map$Entry<C, java.util.Map<R, V>>> createEntrySet()"], ["java.util.Set<C>", "com.google.common.collect.StandardTable$ColumnMap.keySet()", "public java.util.Set<C> keySet()"], ["java.lang.Object", "com.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Row$RowEntrySet$1$1.setValue(V)", "public V setValue(V)"], ["boolean", "com.google.common.collect.StandardTable$Row$RowEntrySet$1$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Row$RowEntrySet$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<C, V>", "com.google.common.collect.StandardTable$Row$RowEntrySet$1.next()", "public java.util.Map$Entry<C, V> next()"], ["void", "com.google.common.collect.StandardTable$Row$RowEntrySet$1.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.StandardTable$Row$RowEntrySet$1.next()", "public java.lang.Object next()"], ["int", "com.google.common.collect.StandardTable$Row$RowEntrySet.size()", "public int size()"], ["java.util.Iterator<java.util.Map$Entry<C, V>>", "com.google.common.collect.StandardTable$Row$RowEntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<C, V>> iterator()"], ["boolean", "com.google.common.collect.StandardTable$Row.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Row.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Row.put(C, V)", "public V put(C, V)"], ["V", "com.google.common.collect.StandardTable$Row.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.StandardTable$Row.clear()", "public void clear()"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(R)", "public java.util.Map<C, V> apply(R)"], ["java.lang.Object", "com.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<R, java.util.Map<C, V>>>", "com.google.common.collect.StandardTable$RowMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<R, java.util.Map<C, V>>> iterator()"], ["int", "com.google.common.collect.StandardTable$RowMap$EntrySet.size()", "public int size()"], ["boolean", "com.google.common.collect.StandardTable$RowMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$RowMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$RowMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable$RowMap.get(java.lang.Object)", "public java.util.Map<C, V> get(java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)", "public java.util.Map<C, V> remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.StandardTable$RowMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$TableSet.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.collect.StandardTable$TableSet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.StandardTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.isEmpty()", "public boolean isEmpty()"], ["int", "com.google.common.collect.StandardTable.size()", "public int size()"], ["void", "com.google.common.collect.StandardTable.clear()", "public void clear()"], ["V", "com.google.common.collect.StandardTable.put(R, C, V)", "public V put(R, C, V)"], ["V", "com.google.common.collect.StandardTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.StandardTable.cellSet()", "public java.util.Set<com.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable.row(R)", "public java.util.Map<C, V> row(R)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable.column(C)", "public java.util.Map<R, V> column(C)"], ["java.util.Set<R>", "com.google.common.collect.StandardTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Set<C>", "com.google.common.collect.StandardTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Collection<V>", "com.google.common.collect.StandardTable.values()", "public java.util.Collection<V> values()"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.StandardTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.StandardTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedAsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.Synchronized$SynchronizedAsMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>> entrySet()"], ["java.util.Collection<java.util.Collection<V>>", "com.google.common.collect.Synchronized$SynchronizedAsMap.values()", "public java.util.Collection<java.util.Collection<V>> values()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedAsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.getValue()", "public java.util.Collection<V> getValue()"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.getValue()", "public java.lang.Object getValue()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1.next()", "public java.util.Map$Entry<K, java.util.Collection<V>> next()"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["java.lang.Object[]", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedAsMapValues$1.next()", "public java.util.Collection<V> next()"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedAsMapValues$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Collection<V>>", "com.google.common.collect.Synchronized$SynchronizedAsMapValues.iterator()", "public java.util.Iterator<java.util.Collection<V>> iterator()"], ["java.util.Set<V>", "com.google.common.collect.Synchronized$SynchronizedBiMap.values()", "public java.util.Set<V> values()"], ["V", "com.google.common.collect.Synchronized$SynchronizedBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.Synchronized$SynchronizedBiMap.inverse()", "public com.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedBiMap.values()", "public java.util.Collection values()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.add(E)", "public boolean add(E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["void", "com.google.common.collect.Synchronized$SynchronizedCollection.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "com.google.common.collect.Synchronized$SynchronizedCollection.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.Synchronized$SynchronizedCollection.size()", "public int size()"], ["java.lang.Object[]", "com.google.common.collect.Synchronized$SynchronizedCollection.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.collect.Synchronized$SynchronizedCollection.toArray(T[])", "public <T> T[] toArray(T[])"], ["void", "com.google.common.collect.Synchronized$SynchronizedDeque.addFirst(E)", "public void addFirst(E)"], ["void", "com.google.common.collect.Synchronized$SynchronizedDeque.addLast(E)", "public void addLast(E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.offerFirst(E)", "public boolean offerFirst(E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.offerLast(E)", "public boolean offerLast(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.removeFirst()", "public E removeFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.removeLast()", "public E removeLast()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.pollLast()", "public E pollLast()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.getFirst()", "public E getFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.getLast()", "public E getLast()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.peekFirst()", "public E peekFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.peekLast()", "public E peekLast()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.removeFirstOccurrence(java.lang.Object)", "public boolean removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.removeLastOccurrence(java.lang.Object)", "public boolean removeLastOccurrence(java.lang.Object)"], ["void", "com.google.common.collect.Synchronized$SynchronizedDeque.push(E)", "public void push(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.pop()", "public E pop()"], ["java.util.Iterator<E>", "com.google.common.collect.Synchronized$SynchronizedDeque.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedEntry.hashCode()", "public int hashCode()"], ["K", "com.google.common.collect.Synchronized$SynchronizedEntry.getKey()", "public K getKey()"], ["V", "com.google.common.collect.Synchronized$SynchronizedEntry.getValue()", "public V getValue()"], ["V", "com.google.common.collect.Synchronized$SynchronizedEntry.setValue(V)", "public V setValue(V)"], ["void", "com.google.common.collect.Synchronized$SynchronizedList.add(int, E)", "public void add(int, E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedList.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.Synchronized$SynchronizedList.get(int)", "public E get(int)"], ["int", "com.google.common.collect.Synchronized$SynchronizedList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<E>", "com.google.common.collect.Synchronized$SynchronizedList.listIterator()", "public java.util.ListIterator<E> listIterator()"], ["java.util.ListIterator<E>", "com.google.common.collect.Synchronized$SynchronizedList.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["E", "com.google.common.collect.Synchronized$SynchronizedList.remove(int)", "public E remove(int)"], ["E", "com.google.common.collect.Synchronized$SynchronizedList.set(int, E)", "public E set(int, E)"], ["java.util.List<E>", "com.google.common.collect.Synchronized$SynchronizedList.subList(int, int)", "public java.util.List<E> subList(int, int)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedList.hashCode()", "public int hashCode()"], ["java.util.List<V>", "com.google.common.collect.Synchronized$SynchronizedListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "com.google.common.collect.Synchronized$SynchronizedListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "com.google.common.collect.Synchronized$SynchronizedListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Synchronized$SynchronizedMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.isEmpty()", "public boolean isEmpty()"], ["java.util.Set<K>", "com.google.common.collect.Synchronized$SynchronizedMap.keySet()", "public java.util.Set<K> keySet()"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.put(K, V)", "public V put(K, V)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMap.size()", "public int size()"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedMap.values()", "public java.util.Collection<V> values()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMap.hashCode()", "public int hashCode()"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultimap.size()", "public int size()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMultimap.clear()", "public void clear()"], ["java.util.Set<K>", "com.google.common.collect.Synchronized$SynchronizedMultimap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "com.google.common.collect.Synchronized$SynchronizedMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.Synchronized$SynchronizedMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.Synchronized$SynchronizedMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["com.google.common.collect.Multiset<K>", "com.google.common.collect.Synchronized$SynchronizedMultimap.keys()", "public com.google.common.collect.Multiset<K> keys()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultimap.hashCode()", "public int hashCode()"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.add(E, int)", "public int add(E, int)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["java.util.Set<E>", "com.google.common.collect.Synchronized$SynchronizedMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<com.google.common.collect.Multiset$Entry<E>>", "com.google.common.collect.Synchronized$SynchronizedMultiset.entrySet()", "public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Set<K>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.NavigableSet<K>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.ceiling(E)", "public E ceiling(E)"], ["java.util.Iterator<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.floor(E)", "public E floor(E)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.higher(E)", "public E higher(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.lower(E)", "public E lower(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.SortedSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.lang.String", "com.google.common.collect.Synchronized$SynchronizedObject.toString()", "public java.lang.String toString()"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.element()", "public E element()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedQueue.offer(E)", "public boolean offer(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.peek()", "public E peek()"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.poll()", "public E poll()"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.remove()", "public E remove()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedSet.hashCode()", "public int hashCode()"], ["java.util.Set<V>", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey()", "public K firstKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.Comparator<? super E>", "com.google.common.collect.Synchronized$SynchronizedSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.SortedSet<E>", "com.google.common.collect.Synchronized$SynchronizedSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Synchronized$SynchronizedSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "com.google.common.collect.Synchronized$SynchronizedSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedSortedSet.first()", "public E first()"], ["E", "com.google.common.collect.Synchronized$SynchronizedSortedSet.last()", "public E last()"], ["java.util.SortedSet<V>", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Map<java.lang.Object, java.lang.Object>", "com.google.common.collect.Tables$1.apply(java.util.Map<java.lang.Object, java.lang.Object>)", "public java.util.Map<java.lang.Object, java.lang.Object> apply(java.util.Map<java.lang.Object, java.lang.Object>)"], ["java.lang.Object", "com.google.common.collect.Tables$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$AbstractCell.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.Tables$AbstractCell.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.Tables$AbstractCell.toString()", "public java.lang.String toString()"], ["R", "com.google.common.collect.Tables$ImmutableCell.getRowKey()", "public R getRowKey()"], ["C", "com.google.common.collect.Tables$ImmutableCell.getColumnKey()", "public C getColumnKey()"], ["V", "com.google.common.collect.Tables$ImmutableCell.getValue()", "public V getValue()"], ["com.google.common.collect.Table$Cell<R, C, V2>", "com.google.common.collect.Tables$TransformedTable$1.apply(com.google.common.collect.Table$Cell<R, C, V1>)", "public com.google.common.collect.Table$Cell<R, C, V2> apply(com.google.common.collect.Table$Cell<R, C, V1>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransformedTable$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Map<C, V2>", "com.google.common.collect.Tables$TransformedTable$2.apply(java.util.Map<C, V1>)", "public java.util.Map<C, V2> apply(java.util.Map<C, V1>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransformedTable$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Map<R, V2>", "com.google.common.collect.Tables$TransformedTable$3.apply(java.util.Map<R, V1>)", "public java.util.Map<R, V2> apply(java.util.Map<R, V1>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransformedTable$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransformedTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["V2", "com.google.common.collect.Tables$TransformedTable.get(java.lang.Object, java.lang.Object)", "public V2 get(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.Tables$TransformedTable.size()", "public int size()"], ["void", "com.google.common.collect.Tables$TransformedTable.clear()", "public void clear()"], ["V2", "com.google.common.collect.Tables$TransformedTable.put(R, C, V2)", "public V2 put(R, C, V2)"], ["void", "com.google.common.collect.Tables$TransformedTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)", "public void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)"], ["V2", "com.google.common.collect.Tables$TransformedTable.remove(java.lang.Object, java.lang.Object)", "public V2 remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V2>", "com.google.common.collect.Tables$TransformedTable.row(R)", "public java.util.Map<C, V2> row(R)"], ["java.util.Map<R, V2>", "com.google.common.collect.Tables$TransformedTable.column(C)", "public java.util.Map<R, V2> column(C)"], ["java.util.Set<R>", "com.google.common.collect.Tables$TransformedTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Set<C>", "com.google.common.collect.Tables$TransformedTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Map<R, java.util.Map<C, V2>>", "com.google.common.collect.Tables$TransformedTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V2>> rowMap()"], ["java.util.Map<C, java.util.Map<R, V2>>", "com.google.common.collect.Tables$TransformedTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V2>> columnMap()"], ["com.google.common.collect.Table$Cell<?, ?, ?>", "com.google.common.collect.Tables$TransposeTable$1.apply(com.google.common.collect.Table$Cell<?, ?, ?>)", "public com.google.common.collect.Table$Cell<?, ?, ?> apply(com.google.common.collect.Table$Cell<?, ?, ?>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransposeTable$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "com.google.common.collect.Tables$TransposeTable.clear()", "public void clear()"], ["java.util.Map<C, V>", "com.google.common.collect.Tables$TransposeTable.column(R)", "public java.util.Map<C, V> column(R)"], ["java.util.Set<R>", "com.google.common.collect.Tables$TransposeTable.columnKeySet()", "public java.util.Set<R> columnKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.Tables$TransposeTable.columnMap()", "public java.util.Map<R, java.util.Map<C, V>> columnMap()"], ["boolean", "com.google.common.collect.Tables$TransposeTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransposeTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransposeTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransposeTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "com.google.common.collect.Tables$TransposeTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.Tables$TransposeTable.put(C, R, V)", "public V put(C, R, V)"], ["void", "com.google.common.collect.Tables$TransposeTable.putAll(com.google.common.collect.Table<? extends C, ? extends R, ? extends V>)", "public void putAll(com.google.common.collect.Table<? extends C, ? extends R, ? extends V>)"], ["V", "com.google.common.collect.Tables$TransposeTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.Tables$TransposeTable.row(C)", "public java.util.Map<R, V> row(C)"], ["java.util.Set<C>", "com.google.common.collect.Tables$TransposeTable.rowKeySet()", "public java.util.Set<C> rowKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.Tables$TransposeTable.rowMap()", "public java.util.Map<C, java.util.Map<R, V>> rowMap()"], ["int", "com.google.common.collect.Tables$TransposeTable.size()", "public int size()"], ["java.util.Collection<V>", "com.google.common.collect.Tables$TransposeTable.values()", "public java.util.Collection<V> values()"], ["com.google.common.collect.Tables$UnmodifiableRowSortedMap", "com.google.common.collect.Tables$UnmodifiableRowSortedMap(com.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)", "public com.google.common.collect.Tables$UnmodifiableRowSortedMap(com.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()", "public java.util.SortedMap<R, java.util.Map<C, V>> rowMap()"], ["java.util.SortedSet<R>", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowKeySet()", "public java.util.SortedSet<R> rowKeySet()"], ["java.util.Map", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()", "public java.util.Map rowMap()"], ["java.util.Set", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.Tables$UnmodifiableTable.cellSet()", "public java.util.Set<com.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["void", "com.google.common.collect.Tables$UnmodifiableTable.clear()", "public void clear()"], ["java.util.Map<R, V>", "com.google.common.collect.Tables$UnmodifiableTable.column(C)", "public java.util.Map<R, V> column(C)"], ["java.util.Set<C>", "com.google.common.collect.Tables$UnmodifiableTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.Tables$UnmodifiableTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["V", "com.google.common.collect.Tables$UnmodifiableTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "com.google.common.collect.Tables$UnmodifiableTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.Tables$UnmodifiableTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.Tables$UnmodifiableTable.row(R)", "public java.util.Map<C, V> row(R)"], ["java.util.Set<R>", "com.google.common.collect.Tables$UnmodifiableTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.Tables$UnmodifiableTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["java.util.Collection<V>", "com.google.common.collect.Tables$UnmodifiableTable.values()", "public java.util.Collection<V> values()"], ["<R, C, V> com.google.common.collect.Table$Cell<R, C, V>", "com.google.common.collect.Tables.immutableCell(R, C, V)", "public static <R, C, V> com.google.common.collect.Table$Cell<R, C, V> immutableCell(R, C, V)"], ["<R, C, V> com.google.common.collect.Table<C, R, V>", "com.google.common.collect.Tables.transpose(com.google.common.collect.Table<R, C, V>)", "public static <R, C, V> com.google.common.collect.Table<C, R, V> transpose(com.google.common.collect.Table<R, C, V>)"], ["<R, C, V> com.google.common.collect.Table<R, C, V>", "com.google.common.collect.Tables.newCustomTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)", "public static <R, C, V> com.google.common.collect.Table<R, C, V> newCustomTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)"], ["<R, C, V1, V2> com.google.common.collect.Table<R, C, V2>", "com.google.common.collect.Tables.transformValues(com.google.common.collect.Table<R, C, V1>, com.google.common.base.Function<? super V1, V2>)", "public static <R, C, V1, V2> com.google.common.collect.Table<R, C, V2> transformValues(com.google.common.collect.Table<R, C, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<R, C, V> com.google.common.collect.Table<R, C, V>", "com.google.common.collect.Tables.unmodifiableTable(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public static <R, C, V> com.google.common.collect.Table<R, C, V> unmodifiableTable(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> com.google.common.collect.RowSortedTable<R, C, V>", "com.google.common.collect.Tables.unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)", "public static <R, C, V> com.google.common.collect.RowSortedTable<R, C, V> unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["boolean", "com.google.common.collect.TransformedIterator.hasNext()", "public final boolean hasNext()"], ["T", "com.google.common.collect.TransformedIterator.next()", "public final T next()"], ["void", "com.google.common.collect.TransformedIterator.remove()", "public final void remove()"], ["boolean", "com.google.common.collect.TransformedListIterator.hasPrevious()", "public final boolean hasPrevious()"], ["T", "com.google.common.collect.TransformedListIterator.previous()", "public final T previous()"], ["int", "com.google.common.collect.TransformedListIterator.nextIndex()", "public final int nextIndex()"], ["int", "com.google.common.collect.TransformedListIterator.previousIndex()", "public final int previousIndex()"], ["void", "com.google.common.collect.TransformedListIterator.set(T)", "public void set(T)"], ["void", "com.google.common.collect.TransformedListIterator.add(T)", "public void add(T)"], ["java.util.Iterator<C>", "com.google.common.collect.TreeBasedTable$1.apply(java.util.Map<C, V>)", "public java.util.Iterator<C> apply(java.util.Map<C, V>)"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.TreeMap<C, V>", "com.google.common.collect.TreeBasedTable$Factory.get()", "public java.util.TreeMap<C, V> get()"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable$Factory.get()", "public java.lang.Object get()"], ["java.util.SortedSet<C>", "com.google.common.collect.TreeBasedTable$TreeRow.keySet()", "public java.util.SortedSet<C> keySet()"], ["java.util.Comparator<? super C>", "com.google.common.collect.TreeBasedTable$TreeRow.comparator()", "public java.util.Comparator<? super C> comparator()"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable$TreeRow.subMap(C, C)", "public java.util.SortedMap<C, V> subMap(C, C)"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable$TreeRow.headMap(C)", "public java.util.SortedMap<C, V> headMap(C)"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable$TreeRow.tailMap(C)", "public java.util.SortedMap<C, V> tailMap(C)"], ["C", "com.google.common.collect.TreeBasedTable$TreeRow.firstKey()", "public C firstKey()"], ["C", "com.google.common.collect.TreeBasedTable$TreeRow.lastKey()", "public C lastKey()"], ["boolean", "com.google.common.collect.TreeBasedTable$TreeRow.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.TreeBasedTable$TreeRow.put(C, V)", "public V put(C, V)"], ["java.util.Set", "com.google.common.collect.TreeBasedTable$TreeRow.keySet()", "public java.util.Set keySet()"], ["<R extends java.lang.Comparable, C extends java.lang.Comparable, V> com.google.common.collect.TreeBasedTable<R, C, V>", "com.google.common.collect.TreeBasedTable.create()", "public static <R extends java.lang.Comparable, C extends java.lang.Comparable, V> com.google.common.collect.TreeBasedTable<R, C, V> create()"], ["<R, C, V> com.google.common.collect.TreeBasedTable<R, C, V>", "com.google.common.collect.TreeBasedTable.create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)", "public static <R, C, V> com.google.common.collect.TreeBasedTable<R, C, V> create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)"], ["<R, C, V> com.google.common.collect.TreeBasedTable<R, C, V>", "com.google.common.collect.TreeBasedTable.create(com.google.common.collect.TreeBasedTable<R, C, ? extends V>)", "public static <R, C, V> com.google.common.collect.TreeBasedTable<R, C, V> create(com.google.common.collect.TreeBasedTable<R, C, ? extends V>)"], ["java.util.Comparator<? super R>", "com.google.common.collect.TreeBasedTable.rowComparator()", "public java.util.Comparator<? super R> rowComparator()"], ["java.util.Comparator<? super C>", "com.google.common.collect.TreeBasedTable.columnComparator()", "public java.util.Comparator<? super C> columnComparator()"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable.row(R)", "public java.util.SortedMap<C, V> row(R)"], ["java.util.SortedSet<R>", "com.google.common.collect.TreeBasedTable.rowKeySet()", "public java.util.SortedSet<R> rowKeySet()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.TreeBasedTable.rowMap()", "public java.util.SortedMap<R, java.util.Map<C, V>> rowMap()"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Set", "com.google.common.collect.TreeBasedTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.row(java.lang.Object)", "public java.util.Map row(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Collection", "com.google.common.collect.TreeBasedTable.values()", "public java.util.Collection values()"], ["java.util.Set", "com.google.common.collect.TreeBasedTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeBasedTable.cellSet()", "public java.util.Set cellSet()"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable.remove(java.lang.Object, java.lang.Object)", "public java.lang.Object remove(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.TreeBasedTable.clear()", "public void clear()"], ["int", "com.google.common.collect.TreeBasedTable.size()", "public int size()"], ["boolean", "com.google.common.collect.TreeBasedTable.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable.get(java.lang.Object, java.lang.Object)", "public java.lang.Object get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.TreeBasedTable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.TreeBasedTable.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.TreeBasedTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "com.google.common.collect.TreeBasedTable.putAll(com.google.common.collect.Table)", "public void putAll(com.google.common.collect.Table)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> com.google.common.collect.TreeMultimap<K, V>", "com.google.common.collect.TreeMultimap.create()", "public static <K extends java.lang.Comparable, V extends java.lang.Comparable> com.google.common.collect.TreeMultimap<K, V> create()"], ["<K, V> com.google.common.collect.TreeMultimap<K, V>", "com.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)", "public static <K, V> com.google.common.collect.TreeMultimap<K, V> create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> com.google.common.collect.TreeMultimap<K, V>", "com.google.common.collect.TreeMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K extends java.lang.Comparable, V extends java.lang.Comparable> com.google.common.collect.TreeMultimap<K, V> create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Comparator<? super K>", "com.google.common.collect.TreeMultimap.keyComparator()", "public java.util.Comparator<? super K> keyComparator()"], ["java.util.Comparator<? super V>", "com.google.common.collect.TreeMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.NavigableSet<V>", "com.google.common.collect.TreeMultimap.get(K)", "public java.util.NavigableSet<V> get(K)"], ["java.util.NavigableSet<K>", "com.google.common.collect.TreeMultimap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.TreeMultimap.asMap()", "public java.util.NavigableMap<K, java.util.Collection<V>> asMap()"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.keySet()", "public java.util.SortedSet keySet()"], ["java.util.SortedMap", "com.google.common.collect.TreeMultimap.asMap()", "public java.util.SortedMap asMap()"], ["java.util.Collection", "com.google.common.collect.TreeMultimap.values()", "public java.util.Collection values()"], ["java.util.Map", "com.google.common.collect.TreeMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.SortedSet replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet removeAll(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.get(java.lang.Object)", "public java.util.SortedSet get(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Collection", "com.google.common.collect.TreeMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultimap.entries()", "public java.util.Set entries()"], ["void", "com.google.common.collect.TreeMultimap.clear()", "public void clear()"], ["boolean", "com.google.common.collect.TreeMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "com.google.common.collect.TreeMultimap.size()", "public int size()"], ["java.lang.String", "com.google.common.collect.TreeMultimap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.TreeMultimap.hashCode()", "public int hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.TreeMultimap.keys()", "public com.google.common.collect.Multiset keys()"], ["boolean", "com.google.common.collect.TreeMultimap.putAll(com.google.common.collect.Multimap)", "public boolean putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.TreeMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.TreeMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.isEmpty()", "public boolean isEmpty()"], ["E", "com.google.common.collect.TreeMultiset$1.getElement()", "public E getElement()"], ["int", "com.google.common.collect.TreeMultiset$1.getCount()", "public int getCount()"], ["boolean", "com.google.common.collect.TreeMultiset$2.hasNext()", "public boolean hasNext()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.TreeMultiset$2.next()", "public com.google.common.collect.Multiset$Entry<E> next()"], ["void", "com.google.common.collect.TreeMultiset$2.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.TreeMultiset$2.next()", "public java.lang.Object next()"], ["boolean", "com.google.common.collect.TreeMultiset$3.hasNext()", "public boolean hasNext()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.TreeMultiset$3.next()", "public com.google.common.collect.Multiset$Entry<E> next()"], ["void", "com.google.common.collect.TreeMultiset$3.remove()", "public void remove()"], ["java.lang.Object", "com.google.common.collect.TreeMultiset$3.next()", "public java.lang.Object next()"], ["com.google.common.collect.TreeMultiset$Aggregate[]", "com.google.common.collect.TreeMultiset$Aggregate.values()", "public static com.google.common.collect.TreeMultiset$Aggregate[] values()"], ["com.google.common.collect.TreeMultiset$Aggregate", "com.google.common.collect.TreeMultiset$Aggregate.valueOf(java.lang.String)", "public static com.google.common.collect.TreeMultiset$Aggregate valueOf(java.lang.String)"], ["int", "com.google.common.collect.TreeMultiset$AvlNode.count(java.util.Comparator<? super E>, E)", "public int count(java.util.Comparator<? super E>, E)"], ["E", "com.google.common.collect.TreeMultiset$AvlNode.getElement()", "public E getElement()"], ["int", "com.google.common.collect.TreeMultiset$AvlNode.getCount()", "public int getCount()"], ["java.lang.String", "com.google.common.collect.TreeMultiset$AvlNode.toString()", "public java.lang.String toString()"], ["T", "com.google.common.collect.TreeMultiset$Reference.get()", "public T get()"], ["void", "com.google.common.collect.TreeMultiset$Reference.checkAndSet(T, T)", "public void checkAndSet(T, T)"], ["<E extends java.lang.Comparable> com.google.common.collect.TreeMultiset<E>", "com.google.common.collect.TreeMultiset.create()", "public static <E extends java.lang.Comparable> com.google.common.collect.TreeMultiset<E> create()"], ["<E> com.google.common.collect.TreeMultiset<E>", "com.google.common.collect.TreeMultiset.create(java.util.Comparator<? super E>)", "public static <E> com.google.common.collect.TreeMultiset<E> create(java.util.Comparator<? super E>)"], ["<E extends java.lang.Comparable> com.google.common.collect.TreeMultiset<E>", "com.google.common.collect.TreeMultiset.create(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> com.google.common.collect.TreeMultiset<E> create(java.lang.Iterable<? extends E>)"], ["int", "com.google.common.collect.TreeMultiset.size()", "public int size()"], ["int", "com.google.common.collect.TreeMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "com.google.common.collect.TreeMultiset.add(E, int)", "public int add(E, int)"], ["int", "com.google.common.collect.TreeMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "com.google.common.collect.TreeMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "com.google.common.collect.TreeMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.TreeMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.TreeMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.TreeMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset descendingMultiset()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.TreeMultiset.subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.pollLastEntry()", "public com.google.common.collect.Multiset$Entry pollLastEntry()"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.pollFirstEntry()", "public com.google.common.collect.Multiset$Entry pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry lastEntry()"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry firstEntry()"], ["java.util.Comparator", "com.google.common.collect.TreeMultiset.comparator()", "public java.util.Comparator comparator()"], ["java.util.NavigableSet", "com.google.common.collect.TreeMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.lang.String", "com.google.common.collect.TreeMultiset.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.TreeMultiset.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.TreeMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultiset.entrySet()", "public java.util.Set entrySet()"], ["void", "com.google.common.collect.TreeMultiset.clear()", "public void clear()"], ["boolean", "com.google.common.collect.TreeMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.TreeMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.TreeMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.TreeMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.TreeMultiset.iterator()", "public java.util.Iterator iterator()"], ["boolean", "com.google.common.collect.TreeMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultiset.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "com.google.common.collect.TreeRangeMap$1.get(java.lang.Comparable)", "public java.lang.Object get(java.lang.Comparable)"], ["java.util.Map$Entry<com.google.common.collect.Range, java.lang.Object>", "com.google.common.collect.TreeRangeMap$1.getEntry(java.lang.Comparable)", "public java.util.Map$Entry<com.google.common.collect.Range, java.lang.Object> getEntry(java.lang.Comparable)"], ["com.google.common.collect.Range", "com.google.common.collect.TreeRangeMap$1.span()", "public com.google.common.collect.Range span()"], ["void", "com.google.common.collect.TreeRangeMap$1.put(com.google.common.collect.Range, java.lang.Object)", "public void put(com.google.common.collect.Range, java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeMap$1.putAll(com.google.common.collect.RangeMap)", "public void putAll(com.google.common.collect.RangeMap)"], ["void", "com.google.common.collect.TreeRangeMap$1.clear()", "public void clear()"], ["void", "com.google.common.collect.TreeRangeMap$1.remove(com.google.common.collect.Range)", "public void remove(com.google.common.collect.Range)"], ["java.util.Map<com.google.common.collect.Range, java.lang.Object>", "com.google.common.collect.TreeRangeMap$1.asMapOfRanges()", "public java.util.Map<com.google.common.collect.Range, java.lang.Object> asMapOfRanges()"], ["com.google.common.collect.RangeMap", "com.google.common.collect.TreeRangeMap$1.subRangeMap(com.google.common.collect.Range)", "public com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range)"], ["java.util.Iterator<java.util.Map$Entry<com.google.common.collect.Range<K>, V>>", "com.google.common.collect.TreeRangeMap$AsMapOfRanges$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<com.google.common.collect.Range<K>, V>> iterator()"], ["int", "com.google.common.collect.TreeRangeMap$AsMapOfRanges$1.size()", "public int size()"], ["boolean", "com.google.common.collect.TreeRangeMap$AsMapOfRanges.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.TreeRangeMap$AsMapOfRanges.get(java.lang.Object)", "public V get(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<com.google.common.collect.Range<K>, V>>", "com.google.common.collect.TreeRangeMap$AsMapOfRanges.entrySet()", "public java.util.Set<java.util.Map$Entry<com.google.common.collect.Range<K>, V>> entrySet()"], ["com.google.common.collect.Range<K>", "com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()", "public com.google.common.collect.Range<K> getKey()"], ["V", "com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()", "public V getValue()"], ["boolean", "com.google.common.collect.TreeRangeMap$RangeMapEntry.contains(K)", "public boolean contains(K)"], ["java.lang.Object", "com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()", "public java.lang.Object getKey()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Iterator<java.util.Map$Entry<com.google.common.collect.Range<K>, V>>", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.iterator()", "public java.util.Iterator<java.util.Map$Entry<com.google.common.collect.Range<K>, V>> iterator()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.size()", "public int size()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.clear()", "public void clear()"], ["java.util.Set<com.google.common.collect.Range<K>>", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.keySet()", "public java.util.Set<com.google.common.collect.Range<K>> keySet()"], ["java.util.Set<java.util.Map$Entry<com.google.common.collect.Range<K>, V>>", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet()", "public java.util.Set<java.util.Map$Entry<com.google.common.collect.Range<K>, V>> entrySet()"], ["java.util.Collection<V>", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.values()", "public java.util.Collection<V> values()"], ["V", "com.google.common.collect.TreeRangeMap$SubRangeMap.get(K)", "public V get(K)"], ["java.util.Map$Entry<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.getEntry(K)", "public java.util.Map$Entry<com.google.common.collect.Range<K>, V> getEntry(K)"], ["com.google.common.collect.Range<K>", "com.google.common.collect.TreeRangeMap$SubRangeMap.span()", "public com.google.common.collect.Range<K> span()"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.put(com.google.common.collect.Range<K>, V)", "public void put(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)", "public void putAll(com.google.common.collect.RangeMap<K, V>)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.clear()", "public void clear()"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.remove(com.google.common.collect.Range<K>)", "public void remove(com.google.common.collect.Range<K>)"], ["com.google.common.collect.RangeMap<K, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.subRangeMap(com.google.common.collect.Range<K>)", "public com.google.common.collect.RangeMap<K, V> subRangeMap(com.google.common.collect.Range<K>)"], ["java.util.Map<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.asMapOfRanges()", "public java.util.Map<com.google.common.collect.Range<K>, V> asMapOfRanges()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeMap$SubRangeMap.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.TreeRangeMap$SubRangeMap.toString()", "public java.lang.String toString()"], ["<K extends java.lang.Comparable, V> com.google.common.collect.TreeRangeMap<K, V>", "com.google.common.collect.TreeRangeMap.create()", "public static <K extends java.lang.Comparable, V> com.google.common.collect.TreeRangeMap<K, V> create()"], ["V", "com.google.common.collect.TreeRangeMap.get(K)", "public V get(K)"], ["java.util.Map$Entry<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap.getEntry(K)", "public java.util.Map$Entry<com.google.common.collect.Range<K>, V> getEntry(K)"], ["void", "com.google.common.collect.TreeRangeMap.put(com.google.common.collect.Range<K>, V)", "public void put(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.TreeRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)", "public void putAll(com.google.common.collect.RangeMap<K, V>)"], ["void", "com.google.common.collect.TreeRangeMap.clear()", "public void clear()"], ["com.google.common.collect.Range<K>", "com.google.common.collect.TreeRangeMap.span()", "public com.google.common.collect.Range<K> span()"], ["void", "com.google.common.collect.TreeRangeMap.remove(com.google.common.collect.Range<K>)", "public void remove(com.google.common.collect.Range<K>)"], ["java.util.Map<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap.asMapOfRanges()", "public java.util.Map<com.google.common.collect.Range<K>, V> asMapOfRanges()"], ["com.google.common.collect.RangeMap<K, V>", "com.google.common.collect.TreeRangeMap.subRangeMap(com.google.common.collect.Range<K>)", "public com.google.common.collect.RangeMap<K, V> subRangeMap(com.google.common.collect.Range<K>)"], ["boolean", "com.google.common.collect.TreeRangeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeMap.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.collect.TreeRangeMap.toString()", "public java.lang.String toString()"], ["int", "com.google.common.collect.TreeRangeSet$AsRanges.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.collect.TreeRangeSet$AsRanges.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeSet$Complement.add(com.google.common.collect.Range<C>)", "public void add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet$Complement.remove(com.google.common.collect.Range<C>)", "public void remove(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet$Complement.contains(C)", "public boolean contains(C)"], ["com.google.common.collect.RangeSet<C>", "com.google.common.collect.TreeRangeSet$Complement.complement()", "public com.google.common.collect.RangeSet<C> complement()"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> headMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> tailMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super com.google.common.collect.Cut<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.comparator()", "public java.util.Comparator<? super com.google.common.collect.Cut<C>> comparator()"], ["int", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.size()", "public int size()"], ["com.google.common.collect.Range<C>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object)", "public com.google.common.collect.Range<C> get(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> headMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> tailMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super com.google.common.collect.Cut<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.comparator()", "public java.util.Comparator<? super com.google.common.collect.Cut<C>> comparator()"], ["boolean", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.get(java.lang.Object)", "public com.google.common.collect.Range<C> get(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.size()", "public int size()"], ["boolean", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["boolean", "com.google.common.collect.TreeRangeSet$SubRangeSet.encloses(com.google.common.collect.Range<C>)", "public boolean encloses(com.google.common.collect.Range<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.TreeRangeSet$SubRangeSet.rangeContaining(C)", "public com.google.common.collect.Range<C> rangeContaining(C)"], ["void", "com.google.common.collect.TreeRangeSet$SubRangeSet.add(com.google.common.collect.Range<C>)", "public void add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet$SubRangeSet.remove(com.google.common.collect.Range<C>)", "public void remove(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet$SubRangeSet.contains(C)", "public boolean contains(C)"], ["void", "com.google.common.collect.TreeRangeSet$SubRangeSet.clear()", "public void clear()"], ["com.google.common.collect.RangeSet<C>", "com.google.common.collect.TreeRangeSet$SubRangeSet.subRangeSet(com.google.common.collect.Range<C>)", "public com.google.common.collect.RangeSet<C> subRangeSet(com.google.common.collect.Range<C>)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> headMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(com.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>> tailMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super com.google.common.collect.Cut<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.comparator()", "public java.util.Comparator<? super com.google.common.collect.Cut<C>> comparator()"], ["boolean", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object)", "public com.google.common.collect.Range<C> get(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.size()", "public int size()"], ["java.lang.Object", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C>", "com.google.common.collect.TreeRangeSet.create()", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C> create()"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C>", "com.google.common.collect.TreeRangeSet.create(com.google.common.collect.RangeSet<C>)", "public static <C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C> create(com.google.common.collect.RangeSet<C>)"], ["java.util.Set<com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet.asRanges()", "public java.util.Set<com.google.common.collect.Range<C>> asRanges()"], ["com.google.common.collect.Range<C>", "com.google.common.collect.TreeRangeSet.rangeContaining(C)", "public com.google.common.collect.Range<C> rangeContaining(C)"], ["boolean", "com.google.common.collect.TreeRangeSet.encloses(com.google.common.collect.Range<C>)", "public boolean encloses(com.google.common.collect.Range<C>)"], ["com.google.common.collect.Range<C>", "com.google.common.collect.TreeRangeSet.span()", "public com.google.common.collect.Range<C> span()"], ["void", "com.google.common.collect.TreeRangeSet.add(com.google.common.collect.Range<C>)", "public void add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet.remove(com.google.common.collect.Range<C>)", "public void remove(com.google.common.collect.Range<C>)"], ["com.google.common.collect.RangeSet<C>", "com.google.common.collect.TreeRangeSet.complement()", "public com.google.common.collect.RangeSet<C> complement()"], ["com.google.common.collect.RangeSet<C>", "com.google.common.collect.TreeRangeSet.subRangeSet(com.google.common.collect.Range<C>)", "public com.google.common.collect.RangeSet<C> subRangeSet(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeSet.removeAll(com.google.common.collect.RangeSet)", "public void removeAll(com.google.common.collect.RangeSet)"], ["void", "com.google.common.collect.TreeRangeSet.addAll(com.google.common.collect.RangeSet)", "public void addAll(com.google.common.collect.RangeSet)"], ["boolean", "com.google.common.collect.TreeRangeSet.enclosesAll(com.google.common.collect.RangeSet)", "public boolean enclosesAll(com.google.common.collect.RangeSet)"], ["void", "com.google.common.collect.TreeRangeSet.clear()", "public void clear()"], ["boolean", "com.google.common.collect.TreeRangeSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.google.common.collect.TreeRangeSet.contains(java.lang.Comparable)", "public boolean contains(java.lang.Comparable)"], ["com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.TreeTraverser$1.iterator()", "public com.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "com.google.common.collect.TreeTraverser$1.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.TreeTraverser$2.iterator()", "public com.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "com.google.common.collect.TreeTraverser$2.iterator()", "public java.util.Iterator iterator()"], ["com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.TreeTraverser$3.iterator()", "public com.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "com.google.common.collect.TreeTraverser$3.iterator()", "public java.util.Iterator iterator()"], ["boolean", "com.google.common.collect.TreeTraverser$BreadthFirstIterator.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.TreeTraverser$BreadthFirstIterator.peek()", "public T peek()"], ["T", "com.google.common.collect.TreeTraverser$BreadthFirstIterator.next()", "public T next()"], ["boolean", "com.google.common.collect.TreeTraverser$PreOrderIterator.hasNext()", "public boolean hasNext()"], ["T", "com.google.common.collect.TreeTraverser$PreOrderIterator.next()", "public T next()"], ["com.google.common.collect.TreeTraverser", "com.google.common.collect.TreeTraverser()", "public com.google.common.collect.TreeTraverser()"], ["com.google.common.collect.FluentIterable<T>", "com.google.common.collect.TreeTraverser.preOrderTraversal(T)", "public final com.google.common.collect.FluentIterable<T> preOrderTraversal(T)"], ["com.google.common.collect.FluentIterable<T>", "com.google.common.collect.TreeTraverser.postOrderTraversal(T)", "public final com.google.common.collect.FluentIterable<T> postOrderTraversal(T)"], ["com.google.common.collect.FluentIterable<T>", "com.google.common.collect.TreeTraverser.breadthFirstTraversal(T)", "public final com.google.common.collect.FluentIterable<T> breadthFirstTraversal(T)"], ["void", "com.google.common.collect.UnmodifiableIterator.remove()", "public final void remove()"], ["void", "com.google.common.collect.UnmodifiableListIterator.add(E)", "public final void add(E)"], ["void", "com.google.common.collect.UnmodifiableListIterator.set(E)", "public final void set(E)"], ["java.util.Comparator<? super E>", "com.google.common.collect.UnmodifiableSortedMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.NavigableSet<E>", "com.google.common.collect.UnmodifiableSortedMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.UnmodifiableSortedMultiset.descendingMultiset()", "public com.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.UnmodifiableSortedMultiset.firstEntry()", "public com.google.common.collect.Multiset$Entry<E> firstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.UnmodifiableSortedMultiset.lastEntry()", "public com.google.common.collect.Multiset$Entry<E> lastEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.UnmodifiableSortedMultiset.pollFirstEntry()", "public com.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.UnmodifiableSortedMultiset.pollLastEntry()", "public com.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.UnmodifiableSortedMultiset.headMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> headMultiset(E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.UnmodifiableSortedMultiset.subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> subMultiset(E, com.google.common.collect.BoundType, E, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.UnmodifiableSortedMultiset.tailMultiset(E, com.google.common.collect.BoundType)", "public com.google.common.collect.SortedMultiset<E> tailMultiset(E, com.google.common.collect.BoundType)"], ["java.util.Set", "com.google.common.collect.UnmodifiableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "com.google.common.collect.UnmodifiableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["int", "com.google.common.collect.UsingToStringOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.UsingToStringOrdering.toString()", "public java.lang.String toString()"], ["K", "com.google.common.collect.WellBehavedMap$EntrySet$1$1.getKey()", "public K getKey()"], ["V", "com.google.common.collect.WellBehavedMap$EntrySet$1$1.getValue()", "public V getValue()"], ["V", "com.google.common.collect.WellBehavedMap$EntrySet$1$1.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.WellBehavedMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.WellBehavedMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.lang.String", "com.google.common.escape.ArrayBasedCharEscaper.escape(java.lang.String)", "public final java.lang.String escape(java.lang.String)"], ["com.google.common.escape.ArrayBasedEscaperMap", "com.google.common.escape.ArrayBasedEscaperMap.create(java.util.Map<java.lang.Character, java.lang.String>)", "public static com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map<java.lang.Character, java.lang.String>)"], ["java.lang.String", "com.google.common.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)", "public final java.lang.String escape(java.lang.String)"], ["java.lang.String", "com.google.common.escape.CharEscaper.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["java.lang.String", "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["com.google.common.escape.CharEscaperBuilder", "com.google.common.escape.CharEscaperBuilder()", "public com.google.common.escape.CharEscaperBuilder()"], ["com.google.common.escape.CharEscaperBuilder", "com.google.common.escape.CharEscaperBuilder.addEscape(char, java.lang.String)", "public com.google.common.escape.CharEscaperBuilder addEscape(char, java.lang.String)"], ["com.google.common.escape.CharEscaperBuilder", "com.google.common.escape.CharEscaperBuilder.addEscapes(char[], java.lang.String)", "public com.google.common.escape.CharEscaperBuilder addEscapes(char[], java.lang.String)"], ["char[][]", "com.google.common.escape.CharEscaperBuilder.toArray()", "public char[][] toArray()"], ["com.google.common.escape.Escaper", "com.google.common.escape.CharEscaperBuilder.toEscaper()", "public com.google.common.escape.Escaper toEscaper()"], ["java.lang.String", "com.google.common.escape.Escaper$1.apply(java.lang.String)", "public java.lang.String apply(java.lang.String)"], ["java.lang.Object", "com.google.common.escape.Escaper$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.google.common.base.Function<java.lang.String, java.lang.String>", "com.google.common.escape.Escaper.asFunction()", "public final com.google.common.base.Function<java.lang.String, java.lang.String> asFunction()"], ["java.lang.String", "com.google.common.escape.Escapers$1.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers$Builder.setSafeRange(char, char)", "public com.google.common.escape.Escapers$Builder setSafeRange(char, char)"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers$Builder.setUnsafeReplacement(java.lang.String)", "public com.google.common.escape.Escapers$Builder setUnsafeReplacement(java.lang.String)"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers$Builder.addEscape(char, java.lang.String)", "public com.google.common.escape.Escapers$Builder addEscape(char, java.lang.String)"], ["com.google.common.escape.Escaper", "com.google.common.escape.Escapers$Builder.build()", "public com.google.common.escape.Escaper build()"], ["com.google.common.escape.Escaper", "com.google.common.escape.Escapers.nullEscaper()", "public static com.google.common.escape.Escaper nullEscaper()"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers.builder()", "public static com.google.common.escape.Escapers$Builder builder()"], ["java.lang.String", "com.google.common.escape.Escapers.computeReplacement(com.google.common.escape.CharEscaper, char)", "public static java.lang.String computeReplacement(com.google.common.escape.CharEscaper, char)"], ["java.lang.String", "com.google.common.escape.Escapers.computeReplacement(com.google.common.escape.UnicodeEscaper, int)", "public static java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper, int)"], ["java.lang.String", "com.google.common.escape.UnicodeEscaper.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["com.google.common.collect.ImmutableList<java.lang.reflect.Method>", "com.google.common.eventbus.AnnotatedSubscriberFinder$1.load(java.lang.Class<?>)", "public com.google.common.collect.ImmutableList<java.lang.reflect.Method> load(java.lang.Class<?>) throws java.lang.Exception"], ["java.lang.Object", "com.google.common.eventbus.AnnotatedSubscriberFinder$1.load(java.lang.Object)", "public java.lang.Object load(java.lang.Object) throws java.lang.Exception"], ["int", "com.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.google.common.collect.Multimap<java.lang.Class<?>, com.google.common.eventbus.EventSubscriber>", "com.google.common.eventbus.AnnotatedSubscriberFinder.findAllSubscribers(java.lang.Object)", "public com.google.common.collect.Multimap<java.lang.Class<?>, com.google.common.eventbus.EventSubscriber> findAllSubscribers(java.lang.Object)"], ["void", "com.google.common.eventbus.AsyncEventBus$1.run()", "public void run()"], ["com.google.common.eventbus.AsyncEventBus", "com.google.common.eventbus.AsyncEventBus(java.lang.String, java.util.concurrent.Executor)", "public com.google.common.eventbus.AsyncEventBus(java.lang.String, java.util.concurrent.Executor)"], ["com.google.common.eventbus.AsyncEventBus", "com.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor, com.google.common.eventbus.SubscriberExceptionHandler)", "public com.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor, com.google.common.eventbus.SubscriberExceptionHandler)"], ["com.google.common.eventbus.AsyncEventBus", "com.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor)", "public com.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor)"], ["com.google.common.eventbus.DeadEvent", "com.google.common.eventbus.DeadEvent(java.lang.Object, java.lang.Object)", "public com.google.common.eventbus.DeadEvent(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.eventbus.DeadEvent.getSource()", "public java.lang.Object getSource()"], ["java.lang.Object", "com.google.common.eventbus.DeadEvent.getEvent()", "public java.lang.Object getEvent()"], ["java.util.Set<java.lang.Class<?>>", "com.google.common.eventbus.EventBus$1.load(java.lang.Class<?>)", "public java.util.Set<java.lang.Class<?>> load(java.lang.Class<?>)"], ["java.lang.Object", "com.google.common.eventbus.EventBus$1.load(java.lang.Object)", "public java.lang.Object load(java.lang.Object) throws java.lang.Exception"], ["com.google.common.eventbus.EventBus$EventWithSubscriber", "com.google.common.eventbus.EventBus$EventWithSubscriber(java.lang.Object, com.google.common.eventbus.EventSubscriber)", "public com.google.common.eventbus.EventBus$EventWithSubscriber(java.lang.Object, com.google.common.eventbus.EventSubscriber)"], ["com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler", "com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler(java.lang.String)", "public com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler(java.lang.String)"], ["void", "com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler.handleException(java.lang.Throwable, com.google.common.eventbus.SubscriberExceptionContext)", "public void handleException(java.lang.Throwable, com.google.common.eventbus.SubscriberExceptionContext)"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.EventBus()", "public com.google.common.eventbus.EventBus()"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.EventBus(java.lang.String)", "public com.google.common.eventbus.EventBus(java.lang.String)"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.EventBus(com.google.common.eventbus.SubscriberExceptionHandler)", "public com.google.common.eventbus.EventBus(com.google.common.eventbus.SubscriberExceptionHandler)"], ["void", "com.google.common.eventbus.EventBus.register(java.lang.Object)", "public void register(java.lang.Object)"], ["void", "com.google.common.eventbus.EventBus.unregister(java.lang.Object)", "public void unregister(java.lang.Object)"], ["void", "com.google.common.eventbus.EventBus.post(java.lang.Object)", "public void post(java.lang.Object)"], ["void", "com.google.common.eventbus.EventSubscriber.handleEvent(java.lang.Object)", "public void handleEvent(java.lang.Object) throws java.lang.reflect.InvocationTargetException"], ["java.lang.String", "com.google.common.eventbus.EventSubscriber.toString()", "public java.lang.String toString()"], ["int", "com.google.common.eventbus.EventSubscriber.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.eventbus.EventSubscriber.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object", "com.google.common.eventbus.EventSubscriber.getSubscriber()", "public java.lang.Object getSubscriber()"], ["java.lang.reflect.Method", "com.google.common.eventbus.EventSubscriber.getMethod()", "public java.lang.reflect.Method getMethod()"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.SubscriberExceptionContext.getEventBus()", "public com.google.common.eventbus.EventBus getEventBus()"], ["java.lang.Object", "com.google.common.eventbus.SubscriberExceptionContext.getEvent()", "public java.lang.Object getEvent()"], ["java.lang.Object", "com.google.common.eventbus.SubscriberExceptionContext.getSubscriber()", "public java.lang.Object getSubscriber()"], ["java.lang.reflect.Method", "com.google.common.eventbus.SubscriberExceptionContext.getSubscriberMethod()", "public java.lang.reflect.Method getSubscriberMethod()"], ["com.google.common.eventbus.SynchronizedEventSubscriber", "com.google.common.eventbus.SynchronizedEventSubscriber(java.lang.Object, java.lang.reflect.Method)", "public com.google.common.eventbus.SynchronizedEventSubscriber(java.lang.Object, java.lang.reflect.Method)"], ["void", "com.google.common.eventbus.SynchronizedEventSubscriber.handleEvent(java.lang.Object)", "public void handleEvent(java.lang.Object) throws java.lang.reflect.InvocationTargetException"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putByte(byte)", "public com.google.common.hash.Hasher putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putBytes(byte[])", "public com.google.common.hash.Hasher putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)", "public com.google.common.hash.Hasher putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putShort(short)", "public com.google.common.hash.Hasher putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putInt(int)", "public com.google.common.hash.Hasher putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putLong(long)", "public com.google.common.hash.Hasher putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putChar(char)", "public com.google.common.hash.Hasher putChar(char)"], ["<T> com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putObject(T, com.google.common.hash.Funnel<? super T>)", "public <T> com.google.common.hash.Hasher putObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putChar(char)", "public com.google.common.hash.PrimitiveSink putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putLong(long)", "public com.google.common.hash.PrimitiveSink putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putInt(int)", "public com.google.common.hash.PrimitiveSink putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putShort(short)", "public com.google.common.hash.PrimitiveSink putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)", "public com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putBytes(byte[])", "public com.google.common.hash.PrimitiveSink putBytes(byte[])"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putByte(byte)", "public com.google.common.hash.PrimitiveSink putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)", "public com.google.common.hash.Hasher putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])", "public com.google.common.hash.Hasher putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)", "public com.google.common.hash.Hasher putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)", "public com.google.common.hash.Hasher putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)", "public com.google.common.hash.Hasher putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)", "public com.google.common.hash.Hasher putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)", "public com.google.common.hash.Hasher putFloat(float)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)", "public com.google.common.hash.Hasher putDouble(double)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)", "public com.google.common.hash.Hasher putBoolean(boolean)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)", "public com.google.common.hash.Hasher putChar(char)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public com.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["<T> com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putObject(T, com.google.common.hash.Funnel<? super T>)", "public <T> com.google.common.hash.Hasher putObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractCompositeHashFunction$1.hash()", "public com.google.common.hash.HashCode hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)", "public com.google.common.hash.PrimitiveSink putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)", "public com.google.common.hash.PrimitiveSink putBoolean(boolean)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)", "public com.google.common.hash.PrimitiveSink putDouble(double)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)", "public com.google.common.hash.PrimitiveSink putFloat(float)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)", "public com.google.common.hash.PrimitiveSink putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)", "public com.google.common.hash.PrimitiveSink putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)", "public com.google.common.hash.PrimitiveSink putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)", "public com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])", "public com.google.common.hash.PrimitiveSink putBytes(byte[])"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)", "public com.google.common.hash.PrimitiveSink putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putBoolean(boolean)", "public final com.google.common.hash.Hasher putBoolean(boolean)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putDouble(double)", "public final com.google.common.hash.Hasher putDouble(double)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putFloat(float)", "public final com.google.common.hash.Hasher putFloat(float)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public com.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putBoolean(boolean)", "public com.google.common.hash.PrimitiveSink putBoolean(boolean)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putDouble(double)", "public com.google.common.hash.PrimitiveSink putDouble(double)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putFloat(float)", "public com.google.common.hash.PrimitiveSink putFloat(float)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)", "public com.google.common.hash.Hasher putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[])", "public com.google.common.hash.Hasher putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)", "public com.google.common.hash.Hasher putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putShort(short)", "public com.google.common.hash.Hasher putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putInt(int)", "public com.google.common.hash.Hasher putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putLong(long)", "public com.google.common.hash.Hasher putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putChar(char)", "public com.google.common.hash.Hasher putChar(char)"], ["<T> com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putObject(T, com.google.common.hash.Funnel<? super T>)", "public <T> com.google.common.hash.Hasher putObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.hash()", "public com.google.common.hash.HashCode hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putChar(char)", "public com.google.common.hash.PrimitiveSink putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putLong(long)", "public com.google.common.hash.PrimitiveSink putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putInt(int)", "public com.google.common.hash.PrimitiveSink putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putShort(short)", "public com.google.common.hash.PrimitiveSink putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)", "public com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[])", "public com.google.common.hash.PrimitiveSink putBytes(byte[])"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)", "public com.google.common.hash.PrimitiveSink putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction.newHasher(int)", "public com.google.common.hash.Hasher newHasher(int)"], ["<T> com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashObject(T, com.google.common.hash.Funnel<? super T>)", "public <T> com.google.common.hash.HashCode hashObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)", "public com.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashInt(int)", "public com.google.common.hash.HashCode hashInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashLong(long)", "public com.google.common.hash.HashCode hashLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashBytes(byte[])", "public com.google.common.hash.HashCode hashBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[])", "public final com.google.common.hash.Hasher putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[], int, int)", "public final com.google.common.hash.Hasher putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putUnencodedChars(java.lang.CharSequence)", "public final com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putByte(byte)", "public final com.google.common.hash.Hasher putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putShort(short)", "public final com.google.common.hash.Hasher putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putChar(char)", "public final com.google.common.hash.Hasher putChar(char)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putInt(int)", "public final com.google.common.hash.Hasher putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putLong(long)", "public final com.google.common.hash.Hasher putLong(long)"], ["<T> com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putObject(T, com.google.common.hash.Funnel<? super T>)", "public final <T> com.google.common.hash.Hasher putObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.hash()", "public final com.google.common.hash.HashCode hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putChar(char)", "public com.google.common.hash.PrimitiveSink putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putLong(long)", "public com.google.common.hash.PrimitiveSink putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putInt(int)", "public com.google.common.hash.PrimitiveSink putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putShort(short)", "public com.google.common.hash.PrimitiveSink putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[], int, int)", "public com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[])", "public com.google.common.hash.PrimitiveSink putBytes(byte[])"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putByte(byte)", "public com.google.common.hash.PrimitiveSink putByte(byte)"], ["<T> com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashObject(T, com.google.common.hash.Funnel<? super T>)", "public <T> com.google.common.hash.HashCode hashObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)", "public com.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashInt(int)", "public com.google.common.hash.HashCode hashInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashLong(long)", "public com.google.common.hash.HashCode hashLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashBytes(byte[])", "public com.google.common.hash.HashCode hashBytes(byte[])"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHashFunction.hashBytes(byte[], int, int)", "public com.google.common.hash.HashCode hashBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHashFunction.newHasher(int)", "public com.google.common.hash.Hasher newHasher(int)"], ["com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.copy()", "public com.google.common.hash.BloomFilter<T> copy()"], ["boolean", "com.google.common.hash.BloomFilter.mightContain(T)", "public boolean mightContain(T)"], ["boolean", "com.google.common.hash.BloomFilter.apply(T)", "public boolean apply(T)"], ["boolean", "com.google.common.hash.BloomFilter.put(T)", "public boolean put(T)"], ["double", "com.google.common.hash.BloomFilter.expectedFpp()", "public double expectedFpp()"], ["boolean", "com.google.common.hash.BloomFilter.isCompatible(com.google.common.hash.BloomFilter<T>)", "public boolean isCompatible(com.google.common.hash.BloomFilter<T>)"], ["void", "com.google.common.hash.BloomFilter.putAll(com.google.common.hash.BloomFilter<T>)", "public void putAll(com.google.common.hash.BloomFilter<T>)"], ["boolean", "com.google.common.hash.BloomFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.BloomFilter.hashCode()", "public int hashCode()"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel<? super T>, int, double)", "public static <T> com.google.common.hash.BloomFilter<T> create(com.google.common.hash.Funnel<? super T>, int, double)"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel<? super T>, int)", "public static <T> com.google.common.hash.BloomFilter<T> create(com.google.common.hash.Funnel<? super T>, int)"], ["void", "com.google.common.hash.BloomFilter.writeTo(java.io.OutputStream)", "public void writeTo(java.io.OutputStream) throws java.io.IOException"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.readFrom(java.io.InputStream, com.google.common.hash.Funnel<T>)", "public static <T> com.google.common.hash.BloomFilter<T> readFrom(java.io.InputStream, com.google.common.hash.Funnel<T>) throws java.io.IOException"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$1.put(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean put(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$1.mightContain(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean mightContain(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$2.put(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean put(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$2.mightContain(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean mightContain(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$BitArray)"], ["boolean", "com.google.common.hash.BloomFilterStrategies$BitArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.BloomFilterStrategies$BitArray.hashCode()", "public int hashCode()"], ["com.google.common.hash.BloomFilterStrategies[]", "com.google.common.hash.BloomFilterStrategies.values()", "public static com.google.common.hash.BloomFilterStrategies[] values()"], ["com.google.common.hash.BloomFilterStrategies", "com.google.common.hash.BloomFilterStrategies.valueOf(java.lang.String)", "public static com.google.common.hash.BloomFilterStrategies valueOf(java.lang.String)"], ["com.google.common.hash.HashCode", "com.google.common.hash.ChecksumHashFunction$ChecksumHasher.hash()", "public com.google.common.hash.HashCode hash()"], ["int", "com.google.common.hash.ChecksumHashFunction.bits()", "public int bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.ChecksumHashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["java.lang.String", "com.google.common.hash.ChecksumHashFunction.toString()", "public java.lang.String toString()"], ["void", "com.google.common.hash.Crc32cHashFunction$Crc32cHasher.update(byte)", "public void update(byte)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Crc32cHashFunction$Crc32cHasher.hash()", "public com.google.common.hash.HashCode hash()"], ["int", "com.google.common.hash.Crc32cHashFunction.bits()", "public int bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Crc32cHashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["java.lang.String", "com.google.common.hash.Crc32cHashFunction.toString()", "public java.lang.String toString()"], ["com.google.common.hash.Funnels$ByteArrayFunnel[]", "com.google.common.hash.Funnels$ByteArrayFunnel.values()", "public static com.google.common.hash.Funnels$ByteArrayFunnel[] values()"], ["com.google.common.hash.Funnels$ByteArrayFunnel", "com.google.common.hash.Funnels$ByteArrayFunnel.valueOf(java.lang.String)", "public static com.google.common.hash.Funnels$ByteArrayFunnel valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$ByteArrayFunnel.funnel(byte[], com.google.common.hash.PrimitiveSink)", "public void funnel(byte[], com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$ByteArrayFunnel.toString()", "public java.lang.String toString()"], ["void", "com.google.common.hash.Funnels$ByteArrayFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnels$IntegerFunnel[]", "com.google.common.hash.Funnels$IntegerFunnel.values()", "public static com.google.common.hash.Funnels$IntegerFunnel[] values()"], ["com.google.common.hash.Funnels$IntegerFunnel", "com.google.common.hash.Funnels$IntegerFunnel.valueOf(java.lang.String)", "public static com.google.common.hash.Funnels$IntegerFunnel valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Integer, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Integer, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$IntegerFunnel.toString()", "public java.lang.String toString()"], ["void", "com.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnels$LongFunnel[]", "com.google.common.hash.Funnels$LongFunnel.values()", "public static com.google.common.hash.Funnels$LongFunnel[] values()"], ["com.google.common.hash.Funnels$LongFunnel", "com.google.common.hash.Funnels$LongFunnel.valueOf(java.lang.String)", "public static com.google.common.hash.Funnels$LongFunnel valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Long, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Long, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$LongFunnel.toString()", "public java.lang.String toString()"], ["void", "com.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["void", "com.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Iterable<? extends E>, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Iterable<? extends E>, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$SequentialFunnel.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.hash.Funnels$SequentialFunnel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.Funnels$SequentialFunnel.hashCode()", "public int hashCode()"], ["void", "com.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["void", "com.google.common.hash.Funnels$SinkAsStream.write(int)", "public void write(int)"], ["void", "com.google.common.hash.Funnels$SinkAsStream.write(byte[])", "public void write(byte[])"], ["void", "com.google.common.hash.Funnels$SinkAsStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["java.lang.String", "com.google.common.hash.Funnels$SinkAsStream.toString()", "public java.lang.String toString()"], ["void", "com.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.CharSequence, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.CharSequence, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$StringCharsetFunnel.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.hash.Funnels$StringCharsetFunnel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.Funnels$StringCharsetFunnel.hashCode()", "public int hashCode()"], ["void", "com.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnels$UnencodedCharsFunnel[]", "com.google.common.hash.Funnels$UnencodedCharsFunnel.values()", "public static com.google.common.hash.Funnels$UnencodedCharsFunnel[] values()"], ["com.google.common.hash.Funnels$UnencodedCharsFunnel", "com.google.common.hash.Funnels$UnencodedCharsFunnel.valueOf(java.lang.String)", "public static com.google.common.hash.Funnels$UnencodedCharsFunnel valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.CharSequence, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.CharSequence, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$UnencodedCharsFunnel.toString()", "public java.lang.String toString()"], ["void", "com.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnel<byte[]>", "com.google.common.hash.Funnels.byteArrayFunnel()", "public static com.google.common.hash.Funnel<byte[]> byteArrayFunnel()"], ["com.google.common.hash.Funnel<java.lang.CharSequence>", "com.google.common.hash.Funnels.unencodedCharsFunnel()", "public static com.google.common.hash.Funnel<java.lang.CharSequence> unencodedCharsFunnel()"], ["com.google.common.hash.Funnel<java.lang.CharSequence>", "com.google.common.hash.Funnels.stringFunnel(java.nio.charset.Charset)", "public static com.google.common.hash.Funnel<java.lang.CharSequence> stringFunnel(java.nio.charset.Charset)"], ["com.google.common.hash.Funnel<java.lang.Integer>", "com.google.common.hash.Funnels.integerFunnel()", "public static com.google.common.hash.Funnel<java.lang.Integer> integerFunnel()"], ["<E> com.google.common.hash.Funnel<java.lang.Iterable<? extends E>>", "com.google.common.hash.Funnels.sequentialFunnel(com.google.common.hash.Funnel<E>)", "public static <E> com.google.common.hash.Funnel<java.lang.Iterable<? extends E>> sequentialFunnel(com.google.common.hash.Funnel<E>)"], ["com.google.common.hash.Funnel<java.lang.Long>", "com.google.common.hash.Funnels.longFunnel()", "public static com.google.common.hash.Funnel<java.lang.Long> longFunnel()"], ["java.io.OutputStream", "com.google.common.hash.Funnels.asOutputStream(com.google.common.hash.PrimitiveSink)", "public static java.io.OutputStream asOutputStream(com.google.common.hash.PrimitiveSink)"], ["int", "com.google.common.hash.HashCode$BytesHashCode.bits()", "public int bits()"], ["byte[]", "com.google.common.hash.HashCode$BytesHashCode.asBytes()", "public byte[] asBytes()"], ["int", "com.google.common.hash.HashCode$BytesHashCode.asInt()", "public int asInt()"], ["long", "com.google.common.hash.HashCode$BytesHashCode.asLong()", "public long asLong()"], ["long", "com.google.common.hash.HashCode$BytesHashCode.padToLong()", "public long padToLong()"], ["int", "com.google.common.hash.HashCode$IntHashCode.bits()", "public int bits()"], ["byte[]", "com.google.common.hash.HashCode$IntHashCode.asBytes()", "public byte[] asBytes()"], ["int", "com.google.common.hash.HashCode$IntHashCode.asInt()", "public int asInt()"], ["long", "com.google.common.hash.HashCode$IntHashCode.asLong()", "public long asLong()"], ["long", "com.google.common.hash.HashCode$IntHashCode.padToLong()", "public long padToLong()"], ["int", "com.google.common.hash.HashCode$LongHashCode.bits()", "public int bits()"], ["byte[]", "com.google.common.hash.HashCode$LongHashCode.asBytes()", "public byte[] asBytes()"], ["int", "com.google.common.hash.HashCode$LongHashCode.asInt()", "public int asInt()"], ["long", "com.google.common.hash.HashCode$LongHashCode.asLong()", "public long asLong()"], ["long", "com.google.common.hash.HashCode$LongHashCode.padToLong()", "public long padToLong()"], ["int", "com.google.common.hash.HashCode.writeBytesTo(byte[], int, int)", "public int writeBytesTo(byte[], int, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromInt(int)", "public static com.google.common.hash.HashCode fromInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromLong(long)", "public static com.google.common.hash.HashCode fromLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromBytes(byte[])", "public static com.google.common.hash.HashCode fromBytes(byte[])"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromString(java.lang.String)", "public static com.google.common.hash.HashCode fromString(java.lang.String)"], ["boolean", "com.google.common.hash.HashCode.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.HashCode.hashCode()", "public final int hashCode()"], ["java.lang.String", "com.google.common.hash.HashCode.toString()", "public final java.lang.String toString()"], ["java.util.zip.Checksum", "com.google.common.hash.Hashing$ChecksumType$1.get()", "public java.util.zip.Checksum get()"], ["java.lang.Object", "com.google.common.hash.Hashing$ChecksumType$1.get()", "public java.lang.Object get()"], ["java.util.zip.Checksum", "com.google.common.hash.Hashing$ChecksumType$2.get()", "public java.util.zip.Checksum get()"], ["java.lang.Object", "com.google.common.hash.Hashing$ChecksumType$2.get()", "public java.lang.Object get()"], ["com.google.common.hash.Hashing$ChecksumType[]", "com.google.common.hash.Hashing$ChecksumType.values()", "public static com.google.common.hash.Hashing$ChecksumType[] values()"], ["com.google.common.hash.Hashing$ChecksumType", "com.google.common.hash.Hashing$ChecksumType.valueOf(java.lang.String)", "public static com.google.common.hash.Hashing$ChecksumType valueOf(java.lang.String)"], ["java.lang.Object", "com.google.common.hash.Hashing$ChecksumType.get()", "public java.lang.Object get()"], ["int", "com.google.common.hash.Hashing$ConcatenatedHashFunction.bits()", "public int bits()"], ["boolean", "com.google.common.hash.Hashing$ConcatenatedHashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.Hashing$ConcatenatedHashFunction.hashCode()", "public int hashCode()"], ["com.google.common.hash.Hashing$LinearCongruentialGenerator", "com.google.common.hash.Hashing$LinearCongruentialGenerator(long)", "public com.google.common.hash.Hashing$LinearCongruentialGenerator(long)"], ["double", "com.google.common.hash.Hashing$LinearCongruentialGenerator.nextDouble()", "public double nextDouble()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.goodFastHash(int)", "public static com.google.common.hash.HashFunction goodFastHash(int)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_32(int)", "public static com.google.common.hash.HashFunction murmur3_32(int)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_32()", "public static com.google.common.hash.HashFunction murmur3_32()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_128(int)", "public static com.google.common.hash.HashFunction murmur3_128(int)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_128()", "public static com.google.common.hash.HashFunction murmur3_128()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sipHash24()", "public static com.google.common.hash.HashFunction sipHash24()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sipHash24(long, long)", "public static com.google.common.hash.HashFunction sipHash24(long, long)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.md5()", "public static com.google.common.hash.HashFunction md5()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha1()", "public static com.google.common.hash.HashFunction sha1()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha256()", "public static com.google.common.hash.HashFunction sha256()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha512()", "public static com.google.common.hash.HashFunction sha512()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.crc32c()", "public static com.google.common.hash.HashFunction crc32c()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.crc32()", "public static com.google.common.hash.HashFunction crc32()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.adler32()", "public static com.google.common.hash.HashFunction adler32()"], ["int", "com.google.common.hash.Hashing.consistentHash(com.google.common.hash.HashCode, int)", "public static int consistentHash(com.google.common.hash.HashCode, int)"], ["int", "com.google.common.hash.Hashing.consistentHash(long, int)", "public static int consistentHash(long, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Hashing.combineOrdered(java.lang.Iterable<com.google.common.hash.HashCode>)", "public static com.google.common.hash.HashCode combineOrdered(java.lang.Iterable<com.google.common.hash.HashCode>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Hashing.combineUnordered(java.lang.Iterable<com.google.common.hash.HashCode>)", "public static com.google.common.hash.HashCode combineUnordered(java.lang.Iterable<com.google.common.hash.HashCode>)"], ["com.google.common.hash.HashingInputStream", "com.google.common.hash.HashingInputStream(com.google.common.hash.HashFunction, java.io.InputStream)", "public com.google.common.hash.HashingInputStream(com.google.common.hash.HashFunction, java.io.InputStream)"], ["int", "com.google.common.hash.HashingInputStream.read()", "public int read() throws java.io.IOException"], ["int", "com.google.common.hash.HashingInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["boolean", "com.google.common.hash.HashingInputStream.markSupported()", "public boolean markSupported()"], ["void", "com.google.common.hash.HashingInputStream.mark(int)", "public void mark(int)"], ["void", "com.google.common.hash.HashingInputStream.reset()", "public void reset() throws java.io.IOException"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashingInputStream.hash()", "public com.google.common.hash.HashCode hash()"], ["com.google.common.hash.HashingOutputStream", "com.google.common.hash.HashingOutputStream(com.google.common.hash.HashFunction, java.io.OutputStream)", "public com.google.common.hash.HashingOutputStream(com.google.common.hash.HashFunction, java.io.OutputStream)"], ["void", "com.google.common.hash.HashingOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "com.google.common.hash.HashingOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashingOutputStream.hash()", "public com.google.common.hash.HashCode hash()"], ["void", "com.google.common.hash.HashingOutputStream.close()", "public void close() throws java.io.IOException"], ["com.google.common.hash.HashCode", "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher.hash()", "public com.google.common.hash.HashCode hash()"], ["int", "com.google.common.hash.MessageDigestHashFunction.bits()", "public int bits()"], ["java.lang.String", "com.google.common.hash.MessageDigestHashFunction.toString()", "public java.lang.String toString()"], ["com.google.common.hash.Hasher", "com.google.common.hash.MessageDigestHashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher.makeHash()", "public com.google.common.hash.HashCode makeHash()"], ["int", "com.google.common.hash.Murmur3_128HashFunction.bits()", "public int bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_128HashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["java.lang.String", "com.google.common.hash.Murmur3_128HashFunction.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.hash.Murmur3_128HashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.Murmur3_128HashFunction.hashCode()", "public int hashCode()"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.makeHash()", "public com.google.common.hash.HashCode makeHash()"], ["int", "com.google.common.hash.Murmur3_32HashFunction.bits()", "public int bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["java.lang.String", "com.google.common.hash.Murmur3_32HashFunction.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.hash.Murmur3_32HashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.Murmur3_32HashFunction.hashCode()", "public int hashCode()"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashInt(int)", "public com.google.common.hash.HashCode hashInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashLong(long)", "public com.google.common.hash.HashCode hashLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashUnencodedChars(java.lang.CharSequence)", "public com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.HashCode", "com.google.common.hash.SipHashFunction$SipHasher.makeHash()", "public com.google.common.hash.HashCode makeHash()"], ["int", "com.google.common.hash.SipHashFunction.bits()", "public int bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.SipHashFunction.newHasher()", "public com.google.common.hash.Hasher newHasher()"], ["java.lang.String", "com.google.common.hash.SipHashFunction.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.hash.SipHashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.hash.SipHashFunction.hashCode()", "public int hashCode()"], ["com.google.common.escape.Escaper", "com.google.common.html.HtmlEscapers.htmlEscaper()", "public static com.google.common.escape.Escaper htmlEscaper()"], ["void", "com.google.common.io.AppendableWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "com.google.common.io.AppendableWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "com.google.common.io.AppendableWriter.close()", "public void close() throws java.io.IOException"], ["void", "com.google.common.io.AppendableWriter.write(int)", "public void write(int) throws java.io.IOException"], ["void", "com.google.common.io.AppendableWriter.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "com.google.common.io.AppendableWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["java.io.Writer", "com.google.common.io.AppendableWriter.append(char)", "public java.io.Writer append(char) throws java.io.IOException"], ["java.io.Writer", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException"], ["java.io.Writer", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "com.google.common.io.AppendableWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["java.io.OutputStream", "com.google.common.io.BaseEncoding$1.openStream()", "public java.io.OutputStream openStream() throws java.io.IOException"], ["java.io.InputStream", "com.google.common.io.BaseEncoding$2.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["int", "com.google.common.io.BaseEncoding$3.read()", "public int read() throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$3.close()", "public void close() throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$4.write(char)", "public void write(char) throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$4.flush()", "public void flush() throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$4.close()", "public void close() throws java.io.IOException"], ["boolean", "com.google.common.io.BaseEncoding$Alphabet.matches(char)", "public boolean matches(char)"], ["java.lang.String", "com.google.common.io.BaseEncoding$Alphabet.toString()", "public java.lang.String toString()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.omitPadding()", "public com.google.common.io.BaseEncoding omitPadding()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.withPadChar(char)", "public com.google.common.io.BaseEncoding withPadChar(char)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.withSeparator(java.lang.String, int)", "public com.google.common.io.BaseEncoding withSeparator(java.lang.String, int)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.upperCase()", "public com.google.common.io.BaseEncoding upperCase()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.lowerCase()", "public com.google.common.io.BaseEncoding lowerCase()"], ["java.lang.String", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.toString()", "public java.lang.String toString()"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$1.write(byte)", "public void write(byte) throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$1.flush()", "public void flush() throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$1.close()", "public void close() throws java.io.IOException"], ["int", "com.google.common.io.BaseEncoding$StandardBaseEncoding$2.read()", "public int read() throws java.io.IOException"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$2.close()", "public void close() throws java.io.IOException"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.omitPadding()", "public com.google.common.io.BaseEncoding omitPadding()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.withPadChar(char)", "public com.google.common.io.BaseEncoding withPadChar(char)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.withSeparator(java.lang.String, int)", "public com.google.common.io.BaseEncoding withSeparator(java.lang.String, int)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.upperCase()", "public com.google.common.io.BaseEncoding upperCase()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.lowerCase()", "public com.google.common.io.BaseEncoding lowerCase()"], ["java.lang.String", "com.google.common.io.BaseEncoding$StandardBaseEncoding.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.io.BaseEncoding.encode(byte[])", "public java.lang.String encode(byte[])"], ["java.lang.String", "com.google.common.io.BaseEncoding.encode(byte[], int, int)", "public final java.lang.String encode(byte[], int, int)"], ["java.io.OutputStream", "com.google.common.io.BaseEncoding.encodingStream(java.io.Writer)", "public final java.io.OutputStream encodingStream(java.io.Writer)"], ["com.google.common.io.ByteSink", "com.google.common.io.BaseEncoding.encodingSink(com.google.common.io.CharSink)", "public final com.google.common.io.ByteSink encodingSink(com.google.common.io.CharSink)"], ["byte[]", "com.google.common.io.BaseEncoding.decode(java.lang.CharSequence)", "public final byte[] decode(java.lang.CharSequence)"], ["java.io.InputStream", "com.google.common.io.BaseEncoding.decodingStream(java.io.Reader)", "public final java.io.InputStream decodingStream(java.io.Reader)"], ["com.google.common.io.ByteSource", "com.google.common.io.BaseEncoding.decodingSource(com.google.common.io.CharSource)", "public final com.google.common.io.ByteSource decodingSource(com.google.common.io.CharSource)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base64()", "public static com.google.common.io.BaseEncoding base64()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base64Url()", "public static com.google.common.io.BaseEncoding base64Url()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base32()", "public static com.google.common.io.BaseEncoding base32()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base32Hex()", "public static com.google.common.io.BaseEncoding base32Hex()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base16()", "public static com.google.common.io.BaseEncoding base16()"], ["java.io.Writer", "com.google.common.io.ByteSink$AsCharSink.openStream()", "public java.io.Writer openStream() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.ByteSink$AsCharSink.toString()", "public java.lang.String toString()"], ["com.google.common.io.CharSink", "com.google.common.io.ByteSink.asCharSink(java.nio.charset.Charset)", "public com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)"], ["java.io.OutputStream", "com.google.common.io.ByteSink.openBufferedStream()", "public java.io.OutputStream openBufferedStream() throws java.io.IOException"], ["void", "com.google.common.io.ByteSink.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["long", "com.google.common.io.ByteSink.writeFrom(java.io.InputStream)", "public long writeFrom(java.io.InputStream) throws java.io.IOException"], ["java.io.Reader", "com.google.common.io.ByteSource$AsCharSource.openStream()", "public java.io.Reader openStream() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.ByteSource$AsCharSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "com.google.common.io.ByteSource$ByteArrayByteSource.openStream()", "public java.io.InputStream openStream()"], ["java.io.InputStream", "com.google.common.io.ByteSource$ByteArrayByteSource.openBufferedStream()", "public java.io.InputStream openBufferedStream() throws java.io.IOException"], ["boolean", "com.google.common.io.ByteSource$ByteArrayByteSource.isEmpty()", "public boolean isEmpty()"], ["long", "com.google.common.io.ByteSource$ByteArrayByteSource.size()", "public long size()"], ["byte[]", "com.google.common.io.ByteSource$ByteArrayByteSource.read()", "public byte[] read()"], ["long", "com.google.common.io.ByteSource$ByteArrayByteSource.copyTo(java.io.OutputStream)", "public long copyTo(java.io.OutputStream) throws java.io.IOException"], ["<T> T", "com.google.common.io.ByteSource$ByteArrayByteSource.read(com.google.common.io.ByteProcessor<T>)", "public <T> T read(com.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["com.google.common.hash.HashCode", "com.google.common.io.ByteSource$ByteArrayByteSource.hash(com.google.common.hash.HashFunction)", "public com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.ByteSource$ByteArrayByteSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "com.google.common.io.ByteSource$ConcatenatedByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["boolean", "com.google.common.io.ByteSource$ConcatenatedByteSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["long", "com.google.common.io.ByteSource$ConcatenatedByteSource.size()", "public long size() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.ByteSource$ConcatenatedByteSource.toString()", "public java.lang.String toString()"], ["com.google.common.io.CharSource", "com.google.common.io.ByteSource$EmptyByteSource.asCharSource(java.nio.charset.Charset)", "public com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)"], ["byte[]", "com.google.common.io.ByteSource$EmptyByteSource.read()", "public byte[] read()"], ["java.lang.String", "com.google.common.io.ByteSource$EmptyByteSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "com.google.common.io.ByteSource$SlicedByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["java.io.InputStream", "com.google.common.io.ByteSource$SlicedByteSource.openBufferedStream()", "public java.io.InputStream openBufferedStream() throws java.io.IOException"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource$SlicedByteSource.slice(long, long)", "public com.google.common.io.ByteSource slice(long, long)"], ["boolean", "com.google.common.io.ByteSource$SlicedByteSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.ByteSource$SlicedByteSource.toString()", "public java.lang.String toString()"], ["com.google.common.io.CharSource", "com.google.common.io.ByteSource.asCharSource(java.nio.charset.Charset)", "public com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)"], ["java.io.InputStream", "com.google.common.io.ByteSource.openBufferedStream()", "public java.io.InputStream openBufferedStream() throws java.io.IOException"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.slice(long, long)", "public com.google.common.io.ByteSource slice(long, long)"], ["boolean", "com.google.common.io.ByteSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["long", "com.google.common.io.ByteSource.size()", "public long size() throws java.io.IOException"], ["long", "com.google.common.io.ByteSource.copyTo(java.io.OutputStream)", "public long copyTo(java.io.OutputStream) throws java.io.IOException"], ["long", "com.google.common.io.ByteSource.copyTo(com.google.common.io.ByteSink)", "public long copyTo(com.google.common.io.ByteSink) throws java.io.IOException"], ["byte[]", "com.google.common.io.ByteSource.read()", "public byte[] read() throws java.io.IOException"], ["<T> T", "com.google.common.io.ByteSource.read(com.google.common.io.ByteProcessor<T>)", "public <T> T read(com.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["com.google.common.hash.HashCode", "com.google.common.io.ByteSource.hash(com.google.common.hash.HashFunction)", "public com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) throws java.io.IOException"], ["boolean", "com.google.common.io.ByteSource.contentEquals(com.google.common.io.ByteSource)", "public boolean contentEquals(com.google.common.io.ByteSource) throws java.io.IOException"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.concat(java.lang.Iterable<? extends com.google.common.io.ByteSource>)", "public static com.google.common.io.ByteSource concat(java.lang.Iterable<? extends com.google.common.io.ByteSource>)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.concat(java.util.Iterator<? extends com.google.common.io.ByteSource>)", "public static com.google.common.io.ByteSource concat(java.util.Iterator<? extends com.google.common.io.ByteSource>)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.concat(com.google.common.io.ByteSource...)", "public static com.google.common.io.ByteSource concat(com.google.common.io.ByteSource...)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.wrap(byte[])", "public static com.google.common.io.ByteSource wrap(byte[])"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.empty()", "public static com.google.common.io.ByteSource empty()"], ["void", "com.google.common.io.ByteStreams$1.write(int)", "public void write(int)"], ["void", "com.google.common.io.ByteStreams$1.write(byte[])", "public void write(byte[])"], ["void", "com.google.common.io.ByteStreams$1.write(byte[], int, int)", "public void write(byte[], int, int)"], ["java.lang.String", "com.google.common.io.ByteStreams$1.toString()", "public java.lang.String toString()"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[])", "public void readFully(byte[])"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[], int, int)", "public void readFully(byte[], int, int)"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.skipBytes(int)", "public int skipBytes(int)"], ["boolean", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readBoolean()", "public boolean readBoolean()"], ["byte", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readByte()", "public byte readByte()"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedByte()", "public int readUnsignedByte()"], ["short", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readShort()", "public short readShort()"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedShort()", "public int readUnsignedShort()"], ["char", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readChar()", "public char readChar()"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readInt()", "public int readInt()"], ["long", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readLong()", "public long readLong()"], ["float", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readFloat()", "public float readFloat()"], ["double", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readDouble()", "public double readDouble()"], ["java.lang.String", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readLine()", "public java.lang.String readLine()"], ["java.lang.String", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readUTF()", "public java.lang.String readUTF()"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(int)", "public void write(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[])", "public void write(byte[])"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeByte(int)", "public void writeByte(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBytes(java.lang.String)", "public void writeBytes(java.lang.String)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChar(int)", "public void writeChar(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChars(java.lang.String)", "public void writeChars(java.lang.String)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeDouble(double)", "public void writeDouble(double)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeFloat(float)", "public void writeFloat(float)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeInt(int)", "public void writeInt(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeLong(long)", "public void writeLong(long)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeShort(int)", "public void writeShort(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeUTF(java.lang.String)", "public void writeUTF(java.lang.String)"], ["byte[]", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.toByteArray()", "public byte[] toByteArray()"], ["int", "com.google.common.io.ByteStreams$LimitedInputStream.available()", "public int available() throws java.io.IOException"], ["synchronized", "com.google.common.io.ByteStreams$LimitedInputStream.void mark(int)", "public synchronized void mark(int)"], ["int", "com.google.common.io.ByteStreams$LimitedInputStream.read()", "public int read() throws java.io.IOException"], ["int", "com.google.common.io.ByteStreams$LimitedInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["synchronized", "com.google.common.io.ByteStreams$LimitedInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["long", "com.google.common.io.ByteStreams$LimitedInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["long", "com.google.common.io.ByteStreams.copy(java.io.InputStream, java.io.OutputStream)", "public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["long", "com.google.common.io.ByteStreams.copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel)", "public static long copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel) throws java.io.IOException"], ["byte[]", "com.google.common.io.ByteStreams.toByteArray(java.io.InputStream)", "public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException"], ["com.google.common.io.ByteArrayDataInput", "com.google.common.io.ByteStreams.newDataInput(byte[])", "public static com.google.common.io.ByteArrayDataInput newDataInput(byte[])"], ["com.google.common.io.ByteArrayDataInput", "com.google.common.io.ByteStreams.newDataInput(byte[], int)", "public static com.google.common.io.ByteArrayDataInput newDataInput(byte[], int)"], ["com.google.common.io.ByteArrayDataInput", "com.google.common.io.ByteStreams.newDataInput(java.io.ByteArrayInputStream)", "public static com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)"], ["com.google.common.io.ByteArrayDataOutput", "com.google.common.io.ByteStreams.newDataOutput()", "public static com.google.common.io.ByteArrayDataOutput newDataOutput()"], ["com.google.common.io.ByteArrayDataOutput", "com.google.common.io.ByteStreams.newDataOutput(int)", "public static com.google.common.io.ByteArrayDataOutput newDataOutput(int)"], ["com.google.common.io.ByteArrayDataOutput", "com.google.common.io.ByteStreams.newDataOutput(java.io.ByteArrayOutputStream)", "public static com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)"], ["java.io.OutputStream", "com.google.common.io.ByteStreams.nullOutputStream()", "public static java.io.OutputStream nullOutputStream()"], ["java.io.InputStream", "com.google.common.io.ByteStreams.limit(java.io.InputStream, long)", "public static java.io.InputStream limit(java.io.InputStream, long)"], ["void", "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["void", "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["void", "com.google.common.io.ByteStreams.skipFully(java.io.InputStream, long)", "public static void skipFully(java.io.InputStream, long) throws java.io.IOException"], ["<T> T", "com.google.common.io.ByteStreams.readBytes(java.io.InputStream, com.google.common.io.ByteProcessor<T>)", "public static <T> T readBytes(java.io.InputStream, com.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["int", "com.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)", "public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["com.google.common.io.CharSequenceReader", "com.google.common.io.CharSequenceReader(java.lang.CharSequence)", "public com.google.common.io.CharSequenceReader(java.lang.CharSequence)"], ["synchronized", "com.google.common.io.CharSequenceReader.int read(java.nio.CharBuffer)", "public synchronized int read(java.nio.CharBuffer) throws java.io.IOException"], ["synchronized", "com.google.common.io.CharSequenceReader.int read()", "public synchronized int read() throws java.io.IOException"], ["synchronized", "com.google.common.io.CharSequenceReader.int read(char[], int, int)", "public synchronized int read(char[], int, int) throws java.io.IOException"], ["synchronized", "com.google.common.io.CharSequenceReader.long skip(long)", "public synchronized long skip(long) throws java.io.IOException"], ["synchronized", "com.google.common.io.CharSequenceReader.boolean ready()", "public synchronized boolean ready() throws java.io.IOException"], ["boolean", "com.google.common.io.CharSequenceReader.markSupported()", "public boolean markSupported()"], ["synchronized", "com.google.common.io.CharSequenceReader.void mark(int)", "public synchronized void mark(int) throws java.io.IOException"], ["synchronized", "com.google.common.io.CharSequenceReader.void reset()", "public synchronized void reset() throws java.io.IOException"], ["synchronized", "com.google.common.io.CharSequenceReader.void close()", "public synchronized void close() throws java.io.IOException"], ["java.io.Writer", "com.google.common.io.CharSink.openBufferedStream()", "public java.io.Writer openBufferedStream() throws java.io.IOException"], ["void", "com.google.common.io.CharSink.write(java.lang.CharSequence)", "public void write(java.lang.CharSequence) throws java.io.IOException"], ["void", "com.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>)", "public void writeLines(java.lang.Iterable<? extends java.lang.CharSequence>) throws java.io.IOException"], ["void", "com.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String)", "public void writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String) throws java.io.IOException"], ["long", "com.google.common.io.CharSink.writeFrom(java.lang.Readable)", "public long writeFrom(java.lang.Readable) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "com.google.common.io.CharSource$CharSequenceCharSource$1.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["java.io.Reader", "com.google.common.io.CharSource$CharSequenceCharSource.openStream()", "public java.io.Reader openStream()"], ["java.lang.String", "com.google.common.io.CharSource$CharSequenceCharSource.read()", "public java.lang.String read()"], ["boolean", "com.google.common.io.CharSource$CharSequenceCharSource.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "com.google.common.io.CharSource$CharSequenceCharSource.readFirstLine()", "public java.lang.String readFirstLine()"], ["com.google.common.collect.ImmutableList<java.lang.String>", "com.google.common.io.CharSource$CharSequenceCharSource.readLines()", "public com.google.common.collect.ImmutableList<java.lang.String> readLines()"], ["<T> T", "com.google.common.io.CharSource$CharSequenceCharSource.readLines(com.google.common.io.LineProcessor<T>)", "public <T> T readLines(com.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.CharSource$CharSequenceCharSource.toString()", "public java.lang.String toString()"], ["java.io.Reader", "com.google.common.io.CharSource$ConcatenatedCharSource.openStream()", "public java.io.Reader openStream() throws java.io.IOException"], ["boolean", "com.google.common.io.CharSource$ConcatenatedCharSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.CharSource$ConcatenatedCharSource.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.io.CharSource$EmptyCharSource.toString()", "public java.lang.String toString()"], ["java.io.BufferedReader", "com.google.common.io.CharSource.openBufferedStream()", "public java.io.BufferedReader openBufferedStream() throws java.io.IOException"], ["long", "com.google.common.io.CharSource.copyTo(java.lang.Appendable)", "public long copyTo(java.lang.Appendable) throws java.io.IOException"], ["long", "com.google.common.io.CharSource.copyTo(com.google.common.io.CharSink)", "public long copyTo(com.google.common.io.CharSink) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.CharSource.read()", "public java.lang.String read() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.CharSource.readFirstLine()", "public java.lang.String readFirstLine() throws java.io.IOException"], ["com.google.common.collect.ImmutableList<java.lang.String>", "com.google.common.io.CharSource.readLines()", "public com.google.common.collect.ImmutableList<java.lang.String> readLines() throws java.io.IOException"], ["<T> T", "com.google.common.io.CharSource.readLines(com.google.common.io.LineProcessor<T>)", "public <T> T readLines(com.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["boolean", "com.google.common.io.CharSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.concat(java.lang.Iterable<? extends com.google.common.io.CharSource>)", "public static com.google.common.io.CharSource concat(java.lang.Iterable<? extends com.google.common.io.CharSource>)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.concat(java.util.Iterator<? extends com.google.common.io.CharSource>)", "public static com.google.common.io.CharSource concat(java.util.Iterator<? extends com.google.common.io.CharSource>)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.concat(com.google.common.io.CharSource...)", "public static com.google.common.io.CharSource concat(com.google.common.io.CharSource...)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.wrap(java.lang.CharSequence)", "public static com.google.common.io.CharSource wrap(java.lang.CharSequence)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.empty()", "public static com.google.common.io.CharSource empty()"], ["int", "com.google.common.io.CharStreams$1.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["int", "com.google.common.io.CharStreams$1.read(java.nio.CharBuffer)", "public int read(java.nio.CharBuffer) throws java.io.IOException"], ["void", "com.google.common.io.CharStreams$1.close()", "public void close() throws java.io.IOException"], ["void", "com.google.common.io.CharStreams$NullWriter.write(int)", "public void write(int)"], ["void", "com.google.common.io.CharStreams$NullWriter.write(char[])", "public void write(char[])"], ["void", "com.google.common.io.CharStreams$NullWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "com.google.common.io.CharStreams$NullWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "com.google.common.io.CharStreams$NullWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["java.io.Writer", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence)"], ["java.io.Writer", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "com.google.common.io.CharStreams$NullWriter.append(char)", "public java.io.Writer append(char)"], ["void", "com.google.common.io.CharStreams$NullWriter.flush()", "public void flush()"], ["void", "com.google.common.io.CharStreams$NullWriter.close()", "public void close()"], ["java.lang.String", "com.google.common.io.CharStreams$NullWriter.toString()", "public java.lang.String toString()"], ["java.lang.Appendable", "com.google.common.io.CharStreams$NullWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["long", "com.google.common.io.CharStreams.copy(java.lang.Readable, java.lang.Appendable)", "public static long copy(java.lang.Readable, java.lang.Appendable) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.CharStreams.toString(java.lang.Readable)", "public static java.lang.String toString(java.lang.Readable) throws java.io.IOException"], ["java.util.List<java.lang.String>", "com.google.common.io.CharStreams.readLines(java.lang.Readable)", "public static java.util.List<java.lang.String> readLines(java.lang.Readable) throws java.io.IOException"], ["<T> T", "com.google.common.io.CharStreams.readLines(java.lang.Readable, com.google.common.io.LineProcessor<T>)", "public static <T> T readLines(java.lang.Readable, com.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["void", "com.google.common.io.CharStreams.skipFully(java.io.Reader, long)", "public static void skipFully(java.io.Reader, long) throws java.io.IOException"], ["java.io.Writer", "com.google.common.io.CharStreams.nullWriter()", "public static java.io.Writer nullWriter()"], ["java.io.Writer", "com.google.common.io.CharStreams.asWriter(java.lang.Appendable)", "public static java.io.Writer asWriter(java.lang.Appendable)"], ["void", "com.google.common.io.Closeables.close(java.io.Closeable, boolean)", "public static void close(java.io.Closeable, boolean) throws java.io.IOException"], ["void", "com.google.common.io.Closeables.closeQuietly(java.io.InputStream)", "public static void closeQuietly(java.io.InputStream)"], ["void", "com.google.common.io.Closeables.closeQuietly(java.io.Reader)", "public static void closeQuietly(java.io.Reader)"], ["void", "com.google.common.io.Closer$LoggingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)", "public void suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["void", "com.google.common.io.Closer$SuppressingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)", "public void suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["com.google.common.io.Closer", "com.google.common.io.Closer.create()", "public static com.google.common.io.Closer create()"], ["<C extends java.io.Closeable> C", "com.google.common.io.Closer.register(C)", "public <C extends java.io.Closeable> C register(C)"], ["java.lang.RuntimeException", "com.google.common.io.Closer.rethrow(java.lang.Throwable)", "public java.lang.RuntimeException rethrow(java.lang.Throwable) throws java.io.IOException"], ["<X extends java.lang.Exception> java.lang.RuntimeException", "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)", "public <X extends java.lang.Exception> java.lang.RuntimeException rethrow(java.lang.Throwable, java.lang.Class<X>) throws java/io/IOException, X"], ["<X1 extends java.lang.Exception, X2 extends java.lang.Exception> java.lang.RuntimeException", "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)", "public <X1 extends java.lang.Exception, X2 extends java.lang.Exception> java.lang.RuntimeException rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>) throws java/io/IOException, X1, X2"], ["void", "com.google.common.io.Closer.close()", "public void close() throws java.io.IOException"], ["com.google.common.io.CountingInputStream", "com.google.common.io.CountingInputStream(java.io.InputStream)", "public com.google.common.io.CountingInputStream(java.io.InputStream)"], ["long", "com.google.common.io.CountingInputStream.getCount()", "public long getCount()"], ["int", "com.google.common.io.CountingInputStream.read()", "public int read() throws java.io.IOException"], ["int", "com.google.common.io.CountingInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "com.google.common.io.CountingInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["synchronized", "com.google.common.io.CountingInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "com.google.common.io.CountingInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["com.google.common.io.CountingOutputStream", "com.google.common.io.CountingOutputStream(java.io.OutputStream)", "public com.google.common.io.CountingOutputStream(java.io.OutputStream)"], ["long", "com.google.common.io.CountingOutputStream.getCount()", "public long getCount()"], ["void", "com.google.common.io.CountingOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "com.google.common.io.CountingOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "com.google.common.io.CountingOutputStream.close()", "public void close() throws java.io.IOException"], ["java.io.InputStream", "com.google.common.io.FileBackedOutputStream$1.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["java.io.InputStream", "com.google.common.io.FileBackedOutputStream$2.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["com.google.common.io.FileBackedOutputStream", "com.google.common.io.FileBackedOutputStream(int)", "public com.google.common.io.FileBackedOutputStream(int)"], ["com.google.common.io.FileBackedOutputStream", "com.google.common.io.FileBackedOutputStream(int, boolean)", "public com.google.common.io.FileBackedOutputStream(int, boolean)"], ["com.google.common.io.ByteSource", "com.google.common.io.FileBackedOutputStream.asByteSource()", "public com.google.common.io.ByteSource asByteSource()"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void write(int)", "public synchronized void write(int) throws java.io.IOException"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void write(byte[])", "public synchronized void write(byte[]) throws java.io.IOException"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void write(byte[], int, int)", "public synchronized void write(byte[], int, int) throws java.io.IOException"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void close()", "public synchronized void close() throws java.io.IOException"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void flush()", "public synchronized void flush() throws java.io.IOException"], ["com.google.common.io.FileWriteMode[]", "com.google.common.io.FileWriteMode.values()", "public static com.google.common.io.FileWriteMode[] values()"], ["com.google.common.io.FileWriteMode", "com.google.common.io.FileWriteMode.valueOf(java.lang.String)", "public static com.google.common.io.FileWriteMode valueOf(java.lang.String)"], ["boolean", "com.google.common.io.Files$1.processLine(java.lang.String)", "public boolean processLine(java.lang.String)"], ["java.util.List<java.lang.String>", "com.google.common.io.Files$1.getResult()", "public java.util.List<java.lang.String> getResult()"], ["java.lang.Object", "com.google.common.io.Files$1.getResult()", "public java.lang.Object getResult()"], ["java.lang.Iterable<java.io.File>", "com.google.common.io.Files$2.children(java.io.File)", "public java.lang.Iterable<java.io.File> children(java.io.File)"], ["java.lang.String", "com.google.common.io.Files$2.toString()", "public java.lang.String toString()"], ["java.lang.Iterable", "com.google.common.io.Files$2.children(java.lang.Object)", "public java.lang.Iterable children(java.lang.Object)"], ["java.io.FileOutputStream", "com.google.common.io.Files$FileByteSink.openStream()", "public java.io.FileOutputStream openStream() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.Files$FileByteSink.toString()", "public java.lang.String toString()"], ["java.io.OutputStream", "com.google.common.io.Files$FileByteSink.openStream()", "public java.io.OutputStream openStream() throws java.io.IOException"], ["java.io.FileInputStream", "com.google.common.io.Files$FileByteSource.openStream()", "public java.io.FileInputStream openStream() throws java.io.IOException"], ["long", "com.google.common.io.Files$FileByteSource.size()", "public long size() throws java.io.IOException"], ["byte[]", "com.google.common.io.Files$FileByteSource.read()", "public byte[] read() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.Files$FileByteSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "com.google.common.io.Files$FileByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["boolean", "com.google.common.io.Files$FilePredicate$1.apply(java.io.File)", "public boolean apply(java.io.File)"], ["java.lang.String", "com.google.common.io.Files$FilePredicate$1.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.io.Files$FilePredicate$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.io.Files$FilePredicate$2.apply(java.io.File)", "public boolean apply(java.io.File)"], ["java.lang.String", "com.google.common.io.Files$FilePredicate$2.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.io.Files$FilePredicate$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.io.Files$FilePredicate[]", "com.google.common.io.Files$FilePredicate.values()", "public static com.google.common.io.Files$FilePredicate[] values()"], ["com.google.common.io.Files$FilePredicate", "com.google.common.io.Files$FilePredicate.valueOf(java.lang.String)", "public static com.google.common.io.Files$FilePredicate valueOf(java.lang.String)"], ["java.io.BufferedReader", "com.google.common.io.Files.newReader(java.io.File, java.nio.charset.Charset)", "public static java.io.BufferedReader newReader(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException"], ["java.io.BufferedWriter", "com.google.common.io.Files.newWriter(java.io.File, java.nio.charset.Charset)", "public static java.io.BufferedWriter newWriter(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException"], ["com.google.common.io.ByteSource", "com.google.common.io.Files.asByteSource(java.io.File)", "public static com.google.common.io.ByteSource asByteSource(java.io.File)"], ["com.google.common.io.ByteSink", "com.google.common.io.Files.asByteSink(java.io.File, com.google.common.io.FileWriteMode...)", "public static com.google.common.io.ByteSink asByteSink(java.io.File, com.google.common.io.FileWriteMode...)"], ["com.google.common.io.CharSource", "com.google.common.io.Files.asCharSource(java.io.File, java.nio.charset.Charset)", "public static com.google.common.io.CharSource asCharSource(java.io.File, java.nio.charset.Charset)"], ["com.google.common.io.CharSink", "com.google.common.io.Files.asCharSink(java.io.File, java.nio.charset.Charset, com.google.common.io.FileWriteMode...)", "public static com.google.common.io.CharSink asCharSink(java.io.File, java.nio.charset.Charset, com.google.common.io.FileWriteMode...)"], ["byte[]", "com.google.common.io.Files.toByteArray(java.io.File)", "public static byte[] toByteArray(java.io.File) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.Files.toString(java.io.File, java.nio.charset.Charset)", "public static java.lang.String toString(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["void", "com.google.common.io.Files.write(byte[], java.io.File)", "public static void write(byte[], java.io.File) throws java.io.IOException"], ["void", "com.google.common.io.Files.copy(java.io.File, java.io.OutputStream)", "public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException"], ["void", "com.google.common.io.Files.copy(java.io.File, java.io.File)", "public static void copy(java.io.File, java.io.File) throws java.io.IOException"], ["void", "com.google.common.io.Files.write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)", "public static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["void", "com.google.common.io.Files.append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)", "public static void append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["void", "com.google.common.io.Files.copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable)", "public static void copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable) throws java.io.IOException"], ["boolean", "com.google.common.io.Files.equal(java.io.File, java.io.File)", "public static boolean equal(java.io.File, java.io.File) throws java.io.IOException"], ["java.io.File", "com.google.common.io.Files.createTempDir()", "public static java.io.File createTempDir()"], ["void", "com.google.common.io.Files.touch(java.io.File)", "public static void touch(java.io.File) throws java.io.IOException"], ["void", "com.google.common.io.Files.createParentDirs(java.io.File)", "public static void createParentDirs(java.io.File) throws java.io.IOException"], ["void", "com.google.common.io.Files.move(java.io.File, java.io.File)", "public static void move(java.io.File, java.io.File) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.Files.readFirstLine(java.io.File, java.nio.charset.Charset)", "public static java.lang.String readFirstLine(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["java.util.List<java.lang.String>", "com.google.common.io.Files.readLines(java.io.File, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["<T> T", "com.google.common.io.Files.readLines(java.io.File, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>)", "public static <T> T readLines(java.io.File, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["<T> T", "com.google.common.io.Files.readBytes(java.io.File, com.google.common.io.ByteProcessor<T>)", "public static <T> T readBytes(java.io.File, com.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["com.google.common.hash.HashCode", "com.google.common.io.Files.hash(java.io.File, com.google.common.hash.HashFunction)", "public static com.google.common.hash.HashCode hash(java.io.File, com.google.common.hash.HashFunction) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "com.google.common.io.Files.map(java.io.File)", "public static java.nio.MappedByteBuffer map(java.io.File) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode)", "public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode, long)", "public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.FileNotFoundException, java.io.IOException"], ["java.lang.String", "com.google.common.io.Files.simplifyPath(java.lang.String)", "public static java.lang.String simplifyPath(java.lang.String)"], ["java.lang.String", "com.google.common.io.Files.getFileExtension(java.lang.String)", "public static java.lang.String getFileExtension(java.lang.String)"], ["java.lang.String", "com.google.common.io.Files.getNameWithoutExtension(java.lang.String)", "public static java.lang.String getNameWithoutExtension(java.lang.String)"], ["com.google.common.collect.TreeTraverser<java.io.File>", "com.google.common.io.Files.fileTreeTraverser()", "public static com.google.common.collect.TreeTraverser<java.io.File> fileTreeTraverser()"], ["com.google.common.base.Predicate<java.io.File>", "com.google.common.io.Files.isDirectory()", "public static com.google.common.base.Predicate<java.io.File> isDirectory()"], ["com.google.common.base.Predicate<java.io.File>", "com.google.common.io.Files.isFile()", "public static com.google.common.base.Predicate<java.io.File> isFile()"], ["void", "com.google.common.io.Flushables.flush(java.io.Flushable, boolean)", "public static void flush(java.io.Flushable, boolean) throws java.io.IOException"], ["void", "com.google.common.io.Flushables.flushQuietly(java.io.Flushable)", "public static void flushQuietly(java.io.Flushable)"], ["int", "com.google.common.io.GwtWorkarounds$1.read()", "public int read() throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$1.close()", "public void close() throws java.io.IOException"], ["int", "com.google.common.io.GwtWorkarounds$2.read()", "public int read()"], ["void", "com.google.common.io.GwtWorkarounds$2.close()", "public void close()"], ["int", "com.google.common.io.GwtWorkarounds$3.read()", "public int read() throws java.io.IOException"], ["int", "com.google.common.io.GwtWorkarounds$3.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$3.close()", "public void close() throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$4.write(int)", "public void write(int) throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$4.flush()", "public void flush() throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$4.close()", "public void close() throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$5.write(char)", "public void write(char) throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$5.flush()", "public void flush() throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$5.close()", "public void close() throws java.io.IOException"], ["void", "com.google.common.io.GwtWorkarounds$6.write(char)", "public void write(char)"], ["void", "com.google.common.io.GwtWorkarounds$6.flush()", "public void flush()"], ["void", "com.google.common.io.GwtWorkarounds$6.close()", "public void close()"], ["java.lang.String", "com.google.common.io.GwtWorkarounds$6.toString()", "public java.lang.String toString()"], ["com.google.common.io.LineReader", "com.google.common.io.LineReader(java.lang.Readable)", "public com.google.common.io.LineReader(java.lang.Readable)"], ["java.lang.String", "com.google.common.io.LineReader.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["com.google.common.io.LittleEndianDataInputStream", "com.google.common.io.LittleEndianDataInputStream(java.io.InputStream)", "public com.google.common.io.LittleEndianDataInputStream(java.io.InputStream)"], ["java.lang.String", "com.google.common.io.LittleEndianDataInputStream.readLine()", "public java.lang.String readLine()"], ["void", "com.google.common.io.LittleEndianDataInputStream.readFully(byte[])", "public void readFully(byte[]) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataInputStream.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException"], ["int", "com.google.common.io.LittleEndianDataInputStream.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["int", "com.google.common.io.LittleEndianDataInputStream.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["int", "com.google.common.io.LittleEndianDataInputStream.readUnsignedShort()", "public int readUnsignedShort() throws java.io.IOException"], ["int", "com.google.common.io.LittleEndianDataInputStream.readInt()", "public int readInt() throws java.io.IOException"], ["long", "com.google.common.io.LittleEndianDataInputStream.readLong()", "public long readLong() throws java.io.IOException"], ["float", "com.google.common.io.LittleEndianDataInputStream.readFloat()", "public float readFloat() throws java.io.IOException"], ["double", "com.google.common.io.LittleEndianDataInputStream.readDouble()", "public double readDouble() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.LittleEndianDataInputStream.readUTF()", "public java.lang.String readUTF() throws java.io.IOException"], ["short", "com.google.common.io.LittleEndianDataInputStream.readShort()", "public short readShort() throws java.io.IOException"], ["char", "com.google.common.io.LittleEndianDataInputStream.readChar()", "public char readChar() throws java.io.IOException"], ["byte", "com.google.common.io.LittleEndianDataInputStream.readByte()", "public byte readByte() throws java.io.IOException"], ["boolean", "com.google.common.io.LittleEndianDataInputStream.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["com.google.common.io.LittleEndianDataOutputStream", "com.google.common.io.LittleEndianDataOutputStream(java.io.OutputStream)", "public com.google.common.io.LittleEndianDataOutputStream(java.io.OutputStream)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeBoolean(boolean)", "public void writeBoolean(boolean) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeByte(int)", "public void writeByte(int) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeBytes(java.lang.String)", "public void writeBytes(java.lang.String) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeChar(int)", "public void writeChar(int) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeChars(java.lang.String)", "public void writeChars(java.lang.String) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeDouble(double)", "public void writeDouble(double) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeFloat(float)", "public void writeFloat(float) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeShort(int)", "public void writeShort(int) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeUTF(java.lang.String)", "public void writeUTF(java.lang.String) throws java.io.IOException"], ["void", "com.google.common.io.LittleEndianDataOutputStream.close()", "public void close() throws java.io.IOException"], ["com.google.common.io.MultiInputStream", "com.google.common.io.MultiInputStream(java.util.Iterator<? extends com.google.common.io.ByteSource>)", "public com.google.common.io.MultiInputStream(java.util.Iterator<? extends com.google.common.io.ByteSource>) throws java.io.IOException"], ["void", "com.google.common.io.MultiInputStream.close()", "public void close() throws java.io.IOException"], ["int", "com.google.common.io.MultiInputStream.available()", "public int available() throws java.io.IOException"], ["boolean", "com.google.common.io.MultiInputStream.markSupported()", "public boolean markSupported()"], ["int", "com.google.common.io.MultiInputStream.read()", "public int read() throws java.io.IOException"], ["int", "com.google.common.io.MultiInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "com.google.common.io.MultiInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "com.google.common.io.MultiReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["long", "com.google.common.io.MultiReader.skip(long)", "public long skip(long) throws java.io.IOException"], ["boolean", "com.google.common.io.MultiReader.ready()", "public boolean ready() throws java.io.IOException"], ["void", "com.google.common.io.MultiReader.close()", "public void close() throws java.io.IOException"], ["com.google.common.io.PatternFilenameFilter", "com.google.common.io.PatternFilenameFilter(java.lang.String)", "public com.google.common.io.PatternFilenameFilter(java.lang.String)"], ["com.google.common.io.PatternFilenameFilter", "com.google.common.io.PatternFilenameFilter(java.util.regex.Pattern)", "public com.google.common.io.PatternFilenameFilter(java.util.regex.Pattern)"], ["boolean", "com.google.common.io.PatternFilenameFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "com.google.common.io.Resources$1.processLine(java.lang.String)", "public boolean processLine(java.lang.String)"], ["java.util.List<java.lang.String>", "com.google.common.io.Resources$1.getResult()", "public java.util.List<java.lang.String> getResult()"], ["java.lang.Object", "com.google.common.io.Resources$1.getResult()", "public java.lang.Object getResult()"], ["java.io.InputStream", "com.google.common.io.Resources$UrlByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["java.lang.String", "com.google.common.io.Resources$UrlByteSource.toString()", "public java.lang.String toString()"], ["com.google.common.io.ByteSource", "com.google.common.io.Resources.asByteSource(java.net.URL)", "public static com.google.common.io.ByteSource asByteSource(java.net.URL)"], ["com.google.common.io.CharSource", "com.google.common.io.Resources.asCharSource(java.net.URL, java.nio.charset.Charset)", "public static com.google.common.io.CharSource asCharSource(java.net.URL, java.nio.charset.Charset)"], ["byte[]", "com.google.common.io.Resources.toByteArray(java.net.URL)", "public static byte[] toByteArray(java.net.URL) throws java.io.IOException"], ["java.lang.String", "com.google.common.io.Resources.toString(java.net.URL, java.nio.charset.Charset)", "public static java.lang.String toString(java.net.URL, java.nio.charset.Charset) throws java.io.IOException"], ["<T> T", "com.google.common.io.Resources.readLines(java.net.URL, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>)", "public static <T> T readLines(java.net.URL, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["java.util.List<java.lang.String>", "com.google.common.io.Resources.readLines(java.net.URL, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> readLines(java.net.URL, java.nio.charset.Charset) throws java.io.IOException"], ["void", "com.google.common.io.Resources.copy(java.net.URL, java.io.OutputStream)", "public static void copy(java.net.URL, java.io.OutputStream) throws java.io.IOException"], ["java.net.URL", "com.google.common.io.Resources.getResource(java.lang.String)", "public static java.net.URL getResource(java.lang.String)"], ["java.net.URL", "com.google.common.io.Resources.getResource(java.lang.Class<?>, java.lang.String)", "public static java.net.URL getResource(java.lang.Class<?>, java.lang.String)"], ["boolean", "com.google.common.math.BigIntegerMath.isPowerOfTwo(java.math.BigInteger)", "public static boolean isPowerOfTwo(java.math.BigInteger)"], ["int", "com.google.common.math.BigIntegerMath.log2(java.math.BigInteger, java.math.RoundingMode)", "public static int log2(java.math.BigInteger, java.math.RoundingMode)"], ["int", "com.google.common.math.BigIntegerMath.log10(java.math.BigInteger, java.math.RoundingMode)", "public static int log10(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.sqrt(java.math.BigInteger, java.math.RoundingMode)", "public static java.math.BigInteger sqrt(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)", "public static java.math.BigInteger divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.factorial(int)", "public static java.math.BigInteger factorial(int)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.binomial(int, int)", "public static java.math.BigInteger binomial(int, int)"], ["int", "com.google.common.math.DoubleMath.roundToInt(double, java.math.RoundingMode)", "public static int roundToInt(double, java.math.RoundingMode)"], ["long", "com.google.common.math.DoubleMath.roundToLong(double, java.math.RoundingMode)", "public static long roundToLong(double, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.DoubleMath.roundToBigInteger(double, java.math.RoundingMode)", "public static java.math.BigInteger roundToBigInteger(double, java.math.RoundingMode)"], ["boolean", "com.google.common.math.DoubleMath.isPowerOfTwo(double)", "public static boolean isPowerOfTwo(double)"], ["double", "com.google.common.math.DoubleMath.log2(double)", "public static double log2(double)"], ["int", "com.google.common.math.DoubleMath.log2(double, java.math.RoundingMode)", "public static int log2(double, java.math.RoundingMode)"], ["boolean", "com.google.common.math.DoubleMath.isMathematicalInteger(double)", "public static boolean isMathematicalInteger(double)"], ["double", "com.google.common.math.DoubleMath.factorial(int)", "public static double factorial(int)"], ["boolean", "com.google.common.math.DoubleMath.fuzzyEquals(double, double, double)", "public static boolean fuzzyEquals(double, double, double)"], ["int", "com.google.common.math.DoubleMath.fuzzyCompare(double, double, double)", "public static int fuzzyCompare(double, double, double)"], ["double", "com.google.common.math.DoubleMath.mean(double...)", "public static double mean(double...)"], ["double", "com.google.common.math.DoubleMath.mean(int...)", "public static double mean(int...)"], ["double", "com.google.common.math.DoubleMath.mean(long...)", "public static double mean(long...)"], ["double", "com.google.common.math.DoubleMath.mean(java.lang.Iterable<? extends java.lang.Number>)", "public static double mean(java.lang.Iterable<? extends java.lang.Number>)"], ["double", "com.google.common.math.DoubleMath.mean(java.util.Iterator<? extends java.lang.Number>)", "public static double mean(java.util.Iterator<? extends java.lang.Number>)"], ["boolean", "com.google.common.math.IntMath.isPowerOfTwo(int)", "public static boolean isPowerOfTwo(int)"], ["int", "com.google.common.math.IntMath.log2(int, java.math.RoundingMode)", "public static int log2(int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.log10(int, java.math.RoundingMode)", "public static int log10(int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.pow(int, int)", "public static int pow(int, int)"], ["int", "com.google.common.math.IntMath.sqrt(int, java.math.RoundingMode)", "public static int sqrt(int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.divide(int, int, java.math.RoundingMode)", "public static int divide(int, int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.mod(int, int)", "public static int mod(int, int)"], ["int", "com.google.common.math.IntMath.gcd(int, int)", "public static int gcd(int, int)"], ["int", "com.google.common.math.IntMath.checkedAdd(int, int)", "public static int checkedAdd(int, int)"], ["int", "com.google.common.math.IntMath.checkedSubtract(int, int)", "public static int checkedSubtract(int, int)"], ["int", "com.google.common.math.IntMath.checkedMultiply(int, int)", "public static int checkedMultiply(int, int)"], ["int", "com.google.common.math.IntMath.checkedPow(int, int)", "public static int checkedPow(int, int)"], ["int", "com.google.common.math.IntMath.factorial(int)", "public static int factorial(int)"], ["int", "com.google.common.math.IntMath.binomial(int, int)", "public static int binomial(int, int)"], ["int", "com.google.common.math.IntMath.mean(int, int)", "public static int mean(int, int)"], ["boolean", "com.google.common.math.LongMath.isPowerOfTwo(long)", "public static boolean isPowerOfTwo(long)"], ["int", "com.google.common.math.LongMath.log2(long, java.math.RoundingMode)", "public static int log2(long, java.math.RoundingMode)"], ["int", "com.google.common.math.LongMath.log10(long, java.math.RoundingMode)", "public static int log10(long, java.math.RoundingMode)"], ["long", "com.google.common.math.LongMath.pow(long, int)", "public static long pow(long, int)"], ["long", "com.google.common.math.LongMath.sqrt(long, java.math.RoundingMode)", "public static long sqrt(long, java.math.RoundingMode)"], ["long", "com.google.common.math.LongMath.divide(long, long, java.math.RoundingMode)", "public static long divide(long, long, java.math.RoundingMode)"], ["int", "com.google.common.math.LongMath.mod(long, int)", "public static int mod(long, int)"], ["long", "com.google.common.math.LongMath.mod(long, long)", "public static long mod(long, long)"], ["long", "com.google.common.math.LongMath.gcd(long, long)", "public static long gcd(long, long)"], ["long", "com.google.common.math.LongMath.checkedAdd(long, long)", "public static long checkedAdd(long, long)"], ["long", "com.google.common.math.LongMath.checkedSubtract(long, long)", "public static long checkedSubtract(long, long)"], ["long", "com.google.common.math.LongMath.checkedMultiply(long, long)", "public static long checkedMultiply(long, long)"], ["long", "com.google.common.math.LongMath.checkedPow(long, int)", "public static long checkedPow(long, int)"], ["long", "com.google.common.math.LongMath.factorial(int)", "public static long factorial(int)"], ["long", "com.google.common.math.LongMath.binomial(int, int)", "public static long binomial(int, int)"], ["long", "com.google.common.math.LongMath.mean(long, long)", "public static long mean(long, long)"], ["java.lang.String", "com.google.common.net.HostAndPort.getHostText()", "public java.lang.String getHostText()"], ["boolean", "com.google.common.net.HostAndPort.hasPort()", "public boolean hasPort()"], ["int", "com.google.common.net.HostAndPort.getPort()", "public int getPort()"], ["int", "com.google.common.net.HostAndPort.getPortOrDefault(int)", "public int getPortOrDefault(int)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.fromParts(java.lang.String, int)", "public static com.google.common.net.HostAndPort fromParts(java.lang.String, int)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.fromHost(java.lang.String)", "public static com.google.common.net.HostAndPort fromHost(java.lang.String)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.fromString(java.lang.String)", "public static com.google.common.net.HostAndPort fromString(java.lang.String)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.withDefaultPort(int)", "public com.google.common.net.HostAndPort withDefaultPort(int)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.requireBracketsForIPv6()", "public com.google.common.net.HostAndPort requireBracketsForIPv6()"], ["boolean", "com.google.common.net.HostAndPort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.net.HostAndPort.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.net.HostAndPort.toString()", "public java.lang.String toString()"], ["com.google.common.net.HostSpecifier", "com.google.common.net.HostSpecifier.fromValid(java.lang.String)", "public static com.google.common.net.HostSpecifier fromValid(java.lang.String)"], ["com.google.common.net.HostSpecifier", "com.google.common.net.HostSpecifier.from(java.lang.String)", "public static com.google.common.net.HostSpecifier from(java.lang.String) throws java.text.ParseException"], ["boolean", "com.google.common.net.HostSpecifier.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["boolean", "com.google.common.net.HostSpecifier.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.net.HostSpecifier.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.net.HostSpecifier.toString()", "public java.lang.String toString()"], ["com.google.common.net.InetAddresses$TeredoInfo", "com.google.common.net.InetAddresses$TeredoInfo(java.net.Inet4Address, java.net.Inet4Address, int, int)", "public com.google.common.net.InetAddresses$TeredoInfo(java.net.Inet4Address, java.net.Inet4Address, int, int)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses$TeredoInfo.getServer()", "public java.net.Inet4Address getServer()"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses$TeredoInfo.getClient()", "public java.net.Inet4Address getClient()"], ["int", "com.google.common.net.InetAddresses$TeredoInfo.getPort()", "public int getPort()"], ["int", "com.google.common.net.InetAddresses$TeredoInfo.getFlags()", "public int getFlags()"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.forString(java.lang.String)", "public static java.net.InetAddress forString(java.lang.String)"], ["boolean", "com.google.common.net.InetAddresses.isInetAddress(java.lang.String)", "public static boolean isInetAddress(java.lang.String)"], ["java.lang.String", "com.google.common.net.InetAddresses.toAddrString(java.net.InetAddress)", "public static java.lang.String toAddrString(java.net.InetAddress)"], ["java.lang.String", "com.google.common.net.InetAddresses.toUriString(java.net.InetAddress)", "public static java.lang.String toUriString(java.net.InetAddress)"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.forUriString(java.lang.String)", "public static java.net.InetAddress forUriString(java.lang.String)"], ["boolean", "com.google.common.net.InetAddresses.isUriInetAddress(java.lang.String)", "public static boolean isUriInetAddress(java.lang.String)"], ["boolean", "com.google.common.net.InetAddresses.isCompatIPv4Address(java.net.Inet6Address)", "public static boolean isCompatIPv4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getCompatIPv4Address(java.net.Inet6Address)", "public static java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.is6to4Address(java.net.Inet6Address)", "public static boolean is6to4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.get6to4IPv4Address(java.net.Inet6Address)", "public static java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.isTeredoAddress(java.net.Inet6Address)", "public static boolean isTeredoAddress(java.net.Inet6Address)"], ["com.google.common.net.InetAddresses$TeredoInfo", "com.google.common.net.InetAddresses.getTeredoInfo(java.net.Inet6Address)", "public static com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.isIsatapAddress(java.net.Inet6Address)", "public static boolean isIsatapAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getIsatapIPv4Address(java.net.Inet6Address)", "public static java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)", "public static boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress(java.net.Inet6Address)", "public static java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.isMappedIPv4Address(java.lang.String)", "public static boolean isMappedIPv4Address(java.lang.String)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getCoercedIPv4Address(java.net.InetAddress)", "public static java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)"], ["int", "com.google.common.net.InetAddresses.coerceToInteger(java.net.InetAddress)", "public static int coerceToInteger(java.net.InetAddress)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.fromInteger(int)", "public static java.net.Inet4Address fromInteger(int)"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.fromLittleEndianByteArray(byte[])", "public static java.net.InetAddress fromLittleEndianByteArray(byte[]) throws java.net.UnknownHostException"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.decrement(java.net.InetAddress)", "public static java.net.InetAddress decrement(java.net.InetAddress)"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.increment(java.net.InetAddress)", "public static java.net.InetAddress increment(java.net.InetAddress)"], ["boolean", "com.google.common.net.InetAddresses.isMaximum(java.net.InetAddress)", "public static boolean isMaximum(java.net.InetAddress)"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.from(java.lang.String)", "public static com.google.common.net.InternetDomainName from(java.lang.String)"], ["com.google.common.collect.ImmutableList<java.lang.String>", "com.google.common.net.InternetDomainName.parts()", "public com.google.common.collect.ImmutableList<java.lang.String> parts()"], ["boolean", "com.google.common.net.InternetDomainName.isPublicSuffix()", "public boolean isPublicSuffix()"], ["boolean", "com.google.common.net.InternetDomainName.hasPublicSuffix()", "public boolean hasPublicSuffix()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.publicSuffix()", "public com.google.common.net.InternetDomainName publicSuffix()"], ["boolean", "com.google.common.net.InternetDomainName.isUnderPublicSuffix()", "public boolean isUnderPublicSuffix()"], ["boolean", "com.google.common.net.InternetDomainName.isTopPrivateDomain()", "public boolean isTopPrivateDomain()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.topPrivateDomain()", "public com.google.common.net.InternetDomainName topPrivateDomain()"], ["boolean", "com.google.common.net.InternetDomainName.hasParent()", "public boolean hasParent()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.parent()", "public com.google.common.net.InternetDomainName parent()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.child(java.lang.String)", "public com.google.common.net.InternetDomainName child(java.lang.String)"], ["boolean", "com.google.common.net.InternetDomainName.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["java.lang.String", "com.google.common.net.InternetDomainName.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.net.InternetDomainName.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.net.InternetDomainName.hashCode()", "public int hashCode()"], ["com.google.common.collect.ImmutableMultiset<java.lang.String>", "com.google.common.net.MediaType$1.apply(java.util.Collection<java.lang.String>)", "public com.google.common.collect.ImmutableMultiset<java.lang.String> apply(java.util.Collection<java.lang.String>)"], ["java.lang.Object", "com.google.common.net.MediaType$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "com.google.common.net.MediaType$2.apply(java.lang.String)", "public java.lang.String apply(java.lang.String)"], ["java.lang.Object", "com.google.common.net.MediaType$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "com.google.common.net.MediaType.type()", "public java.lang.String type()"], ["java.lang.String", "com.google.common.net.MediaType.subtype()", "public java.lang.String subtype()"], ["com.google.common.collect.ImmutableListMultimap<java.lang.String, java.lang.String>", "com.google.common.net.MediaType.parameters()", "public com.google.common.collect.ImmutableListMultimap<java.lang.String, java.lang.String> parameters()"], ["com.google.common.base.Optional<java.nio.charset.Charset>", "com.google.common.net.MediaType.charset()", "public com.google.common.base.Optional<java.nio.charset.Charset> charset()"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withoutParameters()", "public com.google.common.net.MediaType withoutParameters()"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withParameters(com.google.common.collect.Multimap<java.lang.String, java.lang.String>)", "public com.google.common.net.MediaType withParameters(com.google.common.collect.Multimap<java.lang.String, java.lang.String>)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withParameter(java.lang.String, java.lang.String)", "public com.google.common.net.MediaType withParameter(java.lang.String, java.lang.String)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withCharset(java.nio.charset.Charset)", "public com.google.common.net.MediaType withCharset(java.nio.charset.Charset)"], ["boolean", "com.google.common.net.MediaType.hasWildcard()", "public boolean hasWildcard()"], ["boolean", "com.google.common.net.MediaType.is(com.google.common.net.MediaType)", "public boolean is(com.google.common.net.MediaType)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.create(java.lang.String, java.lang.String)", "public static com.google.common.net.MediaType create(java.lang.String, java.lang.String)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.parse(java.lang.String)", "public static com.google.common.net.MediaType parse(java.lang.String)"], ["boolean", "com.google.common.net.MediaType.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.net.MediaType.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.net.MediaType.toString()", "public java.lang.String toString()"], ["com.google.common.net.PercentEscaper", "com.google.common.net.PercentEscaper(java.lang.String, boolean)", "public com.google.common.net.PercentEscaper(java.lang.String, boolean)"], ["java.lang.String", "com.google.common.net.PercentEscaper.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["com.google.common.escape.Escaper", "com.google.common.net.UrlEscapers.urlFormParameterEscaper()", "public static com.google.common.escape.Escaper urlFormParameterEscaper()"], ["com.google.common.escape.Escaper", "com.google.common.net.UrlEscapers.urlPathSegmentEscaper()", "public static com.google.common.escape.Escaper urlPathSegmentEscaper()"], ["com.google.common.escape.Escaper", "com.google.common.net.UrlEscapers.urlFragmentEscaper()", "public static com.google.common.escape.Escaper urlFragmentEscaper()"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.get(int)", "public java.lang.Boolean get(int)"], ["boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Boolean)", "public java.lang.Boolean set(int, java.lang.Boolean)"], ["java.util.List<java.lang.Boolean>", "com.google.common.primitives.Booleans$BooleanArrayAsList.subList(int, int)", "public java.util.List<java.lang.Boolean> subList(int, int)"], ["boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Booleans$BooleanArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Booleans$BooleanArrayAsList.get(int)", "public java.lang.Object get(int)"], ["com.google.common.primitives.Booleans$LexicographicalComparator[]", "com.google.common.primitives.Booleans$LexicographicalComparator.values()", "public static com.google.common.primitives.Booleans$LexicographicalComparator[] values()"], ["com.google.common.primitives.Booleans$LexicographicalComparator", "com.google.common.primitives.Booleans$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Booleans$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Booleans$LexicographicalComparator.compare(boolean[], boolean[])", "public int compare(boolean[], boolean[])"], ["int", "com.google.common.primitives.Booleans$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Booleans.hashCode(boolean)", "public static int hashCode(boolean)"], ["int", "com.google.common.primitives.Booleans.compare(boolean, boolean)", "public static int compare(boolean, boolean)"], ["boolean", "com.google.common.primitives.Booleans.contains(boolean[], boolean)", "public static boolean contains(boolean[], boolean)"], ["int", "com.google.common.primitives.Booleans.indexOf(boolean[], boolean)", "public static int indexOf(boolean[], boolean)"], ["int", "com.google.common.primitives.Booleans.indexOf(boolean[], boolean[])", "public static int indexOf(boolean[], boolean[])"], ["int", "com.google.common.primitives.Booleans.lastIndexOf(boolean[], boolean)", "public static int lastIndexOf(boolean[], boolean)"], ["boolean[]", "com.google.common.primitives.Booleans.concat(boolean[]...)", "public static boolean[] concat(boolean[]...)"], ["boolean[]", "com.google.common.primitives.Booleans.ensureCapacity(boolean[], int, int)", "public static boolean[] ensureCapacity(boolean[], int, int)"], ["java.lang.String", "com.google.common.primitives.Booleans.join(java.lang.String, boolean...)", "public static java.lang.String join(java.lang.String, boolean...)"], ["java.util.Comparator<boolean[]>", "com.google.common.primitives.Booleans.lexicographicalComparator()", "public static java.util.Comparator<boolean[]> lexicographicalComparator()"], ["boolean[]", "com.google.common.primitives.Booleans.toArray(java.util.Collection<java.lang.Boolean>)", "public static boolean[] toArray(java.util.Collection<java.lang.Boolean>)"], ["java.util.List<java.lang.Boolean>", "com.google.common.primitives.Booleans.asList(boolean...)", "public static java.util.List<java.lang.Boolean> asList(boolean...)"], ["int", "com.google.common.primitives.Booleans.countTrue(boolean...)", "public static int countTrue(boolean...)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Bytes$ByteArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Byte", "com.google.common.primitives.Bytes$ByteArrayAsList.get(int)", "public java.lang.Byte get(int)"], ["boolean", "com.google.common.primitives.Bytes$ByteArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Byte", "com.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Byte)", "public java.lang.Byte set(int, java.lang.Byte)"], ["java.util.List<java.lang.Byte>", "com.google.common.primitives.Bytes$ByteArrayAsList.subList(int, int)", "public java.util.List<java.lang.Byte> subList(int, int)"], ["boolean", "com.google.common.primitives.Bytes$ByteArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Bytes$ByteArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Bytes$ByteArrayAsList.get(int)", "public java.lang.Object get(int)"], ["int", "com.google.common.primitives.Bytes.hashCode(byte)", "public static int hashCode(byte)"], ["boolean", "com.google.common.primitives.Bytes.contains(byte[], byte)", "public static boolean contains(byte[], byte)"], ["int", "com.google.common.primitives.Bytes.indexOf(byte[], byte)", "public static int indexOf(byte[], byte)"], ["int", "com.google.common.primitives.Bytes.indexOf(byte[], byte[])", "public static int indexOf(byte[], byte[])"], ["int", "com.google.common.primitives.Bytes.lastIndexOf(byte[], byte)", "public static int lastIndexOf(byte[], byte)"], ["byte[]", "com.google.common.primitives.Bytes.concat(byte[]...)", "public static byte[] concat(byte[]...)"], ["byte[]", "com.google.common.primitives.Bytes.ensureCapacity(byte[], int, int)", "public static byte[] ensureCapacity(byte[], int, int)"], ["byte[]", "com.google.common.primitives.Bytes.toArray(java.util.Collection<? extends java.lang.Number>)", "public static byte[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Byte>", "com.google.common.primitives.Bytes.asList(byte...)", "public static java.util.List<java.lang.Byte> asList(byte...)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Chars$CharArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Character", "com.google.common.primitives.Chars$CharArrayAsList.get(int)", "public java.lang.Character get(int)"], ["boolean", "com.google.common.primitives.Chars$CharArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Character", "com.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Character)", "public java.lang.Character set(int, java.lang.Character)"], ["java.util.List<java.lang.Character>", "com.google.common.primitives.Chars$CharArrayAsList.subList(int, int)", "public java.util.List<java.lang.Character> subList(int, int)"], ["boolean", "com.google.common.primitives.Chars$CharArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Chars$CharArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Chars$CharArrayAsList.get(int)", "public java.lang.Object get(int)"], ["com.google.common.primitives.Chars$LexicographicalComparator[]", "com.google.common.primitives.Chars$LexicographicalComparator.values()", "public static com.google.common.primitives.Chars$LexicographicalComparator[] values()"], ["com.google.common.primitives.Chars$LexicographicalComparator", "com.google.common.primitives.Chars$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Chars$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Chars$LexicographicalComparator.compare(char[], char[])", "public int compare(char[], char[])"], ["int", "com.google.common.primitives.Chars$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Chars.hashCode(char)", "public static int hashCode(char)"], ["char", "com.google.common.primitives.Chars.checkedCast(long)", "public static char checkedCast(long)"], ["char", "com.google.common.primitives.Chars.saturatedCast(long)", "public static char saturatedCast(long)"], ["int", "com.google.common.primitives.Chars.compare(char, char)", "public static int compare(char, char)"], ["boolean", "com.google.common.primitives.Chars.contains(char[], char)", "public static boolean contains(char[], char)"], ["int", "com.google.common.primitives.Chars.indexOf(char[], char)", "public static int indexOf(char[], char)"], ["int", "com.google.common.primitives.Chars.indexOf(char[], char[])", "public static int indexOf(char[], char[])"], ["int", "com.google.common.primitives.Chars.lastIndexOf(char[], char)", "public static int lastIndexOf(char[], char)"], ["char", "com.google.common.primitives.Chars.min(char...)", "public static char min(char...)"], ["char", "com.google.common.primitives.Chars.max(char...)", "public static char max(char...)"], ["char[]", "com.google.common.primitives.Chars.concat(char[]...)", "public static char[] concat(char[]...)"], ["byte[]", "com.google.common.primitives.Chars.toByteArray(char)", "public static byte[] toByteArray(char)"], ["char", "com.google.common.primitives.Chars.fromByteArray(byte[])", "public static char fromByteArray(byte[])"], ["char", "com.google.common.primitives.Chars.fromBytes(byte, byte)", "public static char fromBytes(byte, byte)"], ["char[]", "com.google.common.primitives.Chars.ensureCapacity(char[], int, int)", "public static char[] ensureCapacity(char[], int, int)"], ["java.lang.String", "com.google.common.primitives.Chars.join(java.lang.String, char...)", "public static java.lang.String join(java.lang.String, char...)"], ["java.util.Comparator<char[]>", "com.google.common.primitives.Chars.lexicographicalComparator()", "public static java.util.Comparator<char[]> lexicographicalComparator()"], ["char[]", "com.google.common.primitives.Chars.toArray(java.util.Collection<java.lang.Character>)", "public static char[] toArray(java.util.Collection<java.lang.Character>)"], ["java.util.List<java.lang.Character>", "com.google.common.primitives.Chars.asList(char...)", "public static java.util.List<java.lang.Character> asList(char...)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Doubles$DoubleArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Double", "com.google.common.primitives.Doubles$DoubleArrayAsList.get(int)", "public java.lang.Double get(int)"], ["boolean", "com.google.common.primitives.Doubles$DoubleArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Double", "com.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Double)", "public java.lang.Double set(int, java.lang.Double)"], ["java.util.List<java.lang.Double>", "com.google.common.primitives.Doubles$DoubleArrayAsList.subList(int, int)", "public java.util.List<java.lang.Double> subList(int, int)"], ["boolean", "com.google.common.primitives.Doubles$DoubleArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Doubles$DoubleArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Doubles$DoubleArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "com.google.common.primitives.Doubles$DoubleConverter.toString()", "public java.lang.String toString()"], ["com.google.common.primitives.Doubles$LexicographicalComparator[]", "com.google.common.primitives.Doubles$LexicographicalComparator.values()", "public static com.google.common.primitives.Doubles$LexicographicalComparator[] values()"], ["com.google.common.primitives.Doubles$LexicographicalComparator", "com.google.common.primitives.Doubles$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Doubles$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Doubles$LexicographicalComparator.compare(double[], double[])", "public int compare(double[], double[])"], ["int", "com.google.common.primitives.Doubles$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Doubles.hashCode(double)", "public static int hashCode(double)"], ["int", "com.google.common.primitives.Doubles.compare(double, double)", "public static int compare(double, double)"], ["boolean", "com.google.common.primitives.Doubles.isFinite(double)", "public static boolean isFinite(double)"], ["boolean", "com.google.common.primitives.Doubles.contains(double[], double)", "public static boolean contains(double[], double)"], ["int", "com.google.common.primitives.Doubles.indexOf(double[], double)", "public static int indexOf(double[], double)"], ["int", "com.google.common.primitives.Doubles.indexOf(double[], double[])", "public static int indexOf(double[], double[])"], ["int", "com.google.common.primitives.Doubles.lastIndexOf(double[], double)", "public static int lastIndexOf(double[], double)"], ["double", "com.google.common.primitives.Doubles.min(double...)", "public static double min(double...)"], ["double", "com.google.common.primitives.Doubles.max(double...)", "public static double max(double...)"], ["double[]", "com.google.common.primitives.Doubles.concat(double[]...)", "public static double[] concat(double[]...)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Double>", "com.google.common.primitives.Doubles.stringConverter()", "public static com.google.common.base.Converter<java.lang.String, java.lang.Double> stringConverter()"], ["double[]", "com.google.common.primitives.Doubles.ensureCapacity(double[], int, int)", "public static double[] ensureCapacity(double[], int, int)"], ["java.lang.String", "com.google.common.primitives.Doubles.join(java.lang.String, double...)", "public static java.lang.String join(java.lang.String, double...)"], ["java.util.Comparator<double[]>", "com.google.common.primitives.Doubles.lexicographicalComparator()", "public static java.util.Comparator<double[]> lexicographicalComparator()"], ["double[]", "com.google.common.primitives.Doubles.toArray(java.util.Collection<? extends java.lang.Number>)", "public static double[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Double>", "com.google.common.primitives.Doubles.asList(double...)", "public static java.util.List<java.lang.Double> asList(double...)"], ["java.lang.Double", "com.google.common.primitives.Doubles.tryParse(java.lang.String)", "public static java.lang.Double tryParse(java.lang.String)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Floats$FloatArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Float", "com.google.common.primitives.Floats$FloatArrayAsList.get(int)", "public java.lang.Float get(int)"], ["boolean", "com.google.common.primitives.Floats$FloatArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Float", "com.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Float)", "public java.lang.Float set(int, java.lang.Float)"], ["java.util.List<java.lang.Float>", "com.google.common.primitives.Floats$FloatArrayAsList.subList(int, int)", "public java.util.List<java.lang.Float> subList(int, int)"], ["boolean", "com.google.common.primitives.Floats$FloatArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Floats$FloatArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Floats$FloatArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "com.google.common.primitives.Floats$FloatConverter.toString()", "public java.lang.String toString()"], ["com.google.common.primitives.Floats$LexicographicalComparator[]", "com.google.common.primitives.Floats$LexicographicalComparator.values()", "public static com.google.common.primitives.Floats$LexicographicalComparator[] values()"], ["com.google.common.primitives.Floats$LexicographicalComparator", "com.google.common.primitives.Floats$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Floats$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Floats$LexicographicalComparator.compare(float[], float[])", "public int compare(float[], float[])"], ["int", "com.google.common.primitives.Floats$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Floats.hashCode(float)", "public static int hashCode(float)"], ["int", "com.google.common.primitives.Floats.compare(float, float)", "public static int compare(float, float)"], ["boolean", "com.google.common.primitives.Floats.isFinite(float)", "public static boolean isFinite(float)"], ["boolean", "com.google.common.primitives.Floats.contains(float[], float)", "public static boolean contains(float[], float)"], ["int", "com.google.common.primitives.Floats.indexOf(float[], float)", "public static int indexOf(float[], float)"], ["int", "com.google.common.primitives.Floats.indexOf(float[], float[])", "public static int indexOf(float[], float[])"], ["int", "com.google.common.primitives.Floats.lastIndexOf(float[], float)", "public static int lastIndexOf(float[], float)"], ["float", "com.google.common.primitives.Floats.min(float...)", "public static float min(float...)"], ["float", "com.google.common.primitives.Floats.max(float...)", "public static float max(float...)"], ["float[]", "com.google.common.primitives.Floats.concat(float[]...)", "public static float[] concat(float[]...)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Float>", "com.google.common.primitives.Floats.stringConverter()", "public static com.google.common.base.Converter<java.lang.String, java.lang.Float> stringConverter()"], ["float[]", "com.google.common.primitives.Floats.ensureCapacity(float[], int, int)", "public static float[] ensureCapacity(float[], int, int)"], ["java.lang.String", "com.google.common.primitives.Floats.join(java.lang.String, float...)", "public static java.lang.String join(java.lang.String, float...)"], ["java.util.Comparator<float[]>", "com.google.common.primitives.Floats.lexicographicalComparator()", "public static java.util.Comparator<float[]> lexicographicalComparator()"], ["float[]", "com.google.common.primitives.Floats.toArray(java.util.Collection<? extends java.lang.Number>)", "public static float[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Float>", "com.google.common.primitives.Floats.asList(float...)", "public static java.util.List<java.lang.Float> asList(float...)"], ["java.lang.Float", "com.google.common.primitives.Floats.tryParse(java.lang.String)", "public static java.lang.Float tryParse(java.lang.String)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Ints$IntArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Integer", "com.google.common.primitives.Ints$IntArrayAsList.get(int)", "public java.lang.Integer get(int)"], ["boolean", "com.google.common.primitives.Ints$IntArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Integer", "com.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Integer)", "public java.lang.Integer set(int, java.lang.Integer)"], ["java.util.List<java.lang.Integer>", "com.google.common.primitives.Ints$IntArrayAsList.subList(int, int)", "public java.util.List<java.lang.Integer> subList(int, int)"], ["boolean", "com.google.common.primitives.Ints$IntArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Ints$IntArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Ints$IntArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "com.google.common.primitives.Ints$IntConverter.toString()", "public java.lang.String toString()"], ["com.google.common.primitives.Ints$LexicographicalComparator[]", "com.google.common.primitives.Ints$LexicographicalComparator.values()", "public static com.google.common.primitives.Ints$LexicographicalComparator[] values()"], ["com.google.common.primitives.Ints$LexicographicalComparator", "com.google.common.primitives.Ints$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Ints$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Ints$LexicographicalComparator.compare(int[], int[])", "public int compare(int[], int[])"], ["int", "com.google.common.primitives.Ints$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Ints.hashCode(int)", "public static int hashCode(int)"], ["int", "com.google.common.primitives.Ints.checkedCast(long)", "public static int checkedCast(long)"], ["int", "com.google.common.primitives.Ints.saturatedCast(long)", "public static int saturatedCast(long)"], ["int", "com.google.common.primitives.Ints.compare(int, int)", "public static int compare(int, int)"], ["boolean", "com.google.common.primitives.Ints.contains(int[], int)", "public static boolean contains(int[], int)"], ["int", "com.google.common.primitives.Ints.indexOf(int[], int)", "public static int indexOf(int[], int)"], ["int", "com.google.common.primitives.Ints.indexOf(int[], int[])", "public static int indexOf(int[], int[])"], ["int", "com.google.common.primitives.Ints.lastIndexOf(int[], int)", "public static int lastIndexOf(int[], int)"], ["int", "com.google.common.primitives.Ints.min(int...)", "public static int min(int...)"], ["int", "com.google.common.primitives.Ints.max(int...)", "public static int max(int...)"], ["int[]", "com.google.common.primitives.Ints.concat(int[]...)", "public static int[] concat(int[]...)"], ["byte[]", "com.google.common.primitives.Ints.toByteArray(int)", "public static byte[] toByteArray(int)"], ["int", "com.google.common.primitives.Ints.fromByteArray(byte[])", "public static int fromByteArray(byte[])"], ["int", "com.google.common.primitives.Ints.fromBytes(byte, byte, byte, byte)", "public static int fromBytes(byte, byte, byte, byte)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Integer>", "com.google.common.primitives.Ints.stringConverter()", "public static com.google.common.base.Converter<java.lang.String, java.lang.Integer> stringConverter()"], ["int[]", "com.google.common.primitives.Ints.ensureCapacity(int[], int, int)", "public static int[] ensureCapacity(int[], int, int)"], ["java.lang.String", "com.google.common.primitives.Ints.join(java.lang.String, int...)", "public static java.lang.String join(java.lang.String, int...)"], ["java.util.Comparator<int[]>", "com.google.common.primitives.Ints.lexicographicalComparator()", "public static java.util.Comparator<int[]> lexicographicalComparator()"], ["int[]", "com.google.common.primitives.Ints.toArray(java.util.Collection<? extends java.lang.Number>)", "public static int[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Integer>", "com.google.common.primitives.Ints.asList(int...)", "public static java.util.List<java.lang.Integer> asList(int...)"], ["java.lang.Integer", "com.google.common.primitives.Ints.tryParse(java.lang.String)", "public static java.lang.Integer tryParse(java.lang.String)"], ["com.google.common.primitives.Longs$LexicographicalComparator[]", "com.google.common.primitives.Longs$LexicographicalComparator.values()", "public static com.google.common.primitives.Longs$LexicographicalComparator[] values()"], ["com.google.common.primitives.Longs$LexicographicalComparator", "com.google.common.primitives.Longs$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Longs$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Longs$LexicographicalComparator.compare(long[], long[])", "public int compare(long[], long[])"], ["int", "com.google.common.primitives.Longs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Longs$LongArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Long", "com.google.common.primitives.Longs$LongArrayAsList.get(int)", "public java.lang.Long get(int)"], ["boolean", "com.google.common.primitives.Longs$LongArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Long", "com.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Long)", "public java.lang.Long set(int, java.lang.Long)"], ["java.util.List<java.lang.Long>", "com.google.common.primitives.Longs$LongArrayAsList.subList(int, int)", "public java.util.List<java.lang.Long> subList(int, int)"], ["boolean", "com.google.common.primitives.Longs$LongArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Longs$LongArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Longs$LongArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "com.google.common.primitives.Longs$LongConverter.toString()", "public java.lang.String toString()"], ["int", "com.google.common.primitives.Longs.hashCode(long)", "public static int hashCode(long)"], ["int", "com.google.common.primitives.Longs.compare(long, long)", "public static int compare(long, long)"], ["boolean", "com.google.common.primitives.Longs.contains(long[], long)", "public static boolean contains(long[], long)"], ["int", "com.google.common.primitives.Longs.indexOf(long[], long)", "public static int indexOf(long[], long)"], ["int", "com.google.common.primitives.Longs.indexOf(long[], long[])", "public static int indexOf(long[], long[])"], ["int", "com.google.common.primitives.Longs.lastIndexOf(long[], long)", "public static int lastIndexOf(long[], long)"], ["long", "com.google.common.primitives.Longs.min(long...)", "public static long min(long...)"], ["long", "com.google.common.primitives.Longs.max(long...)", "public static long max(long...)"], ["long[]", "com.google.common.primitives.Longs.concat(long[]...)", "public static long[] concat(long[]...)"], ["byte[]", "com.google.common.primitives.Longs.toByteArray(long)", "public static byte[] toByteArray(long)"], ["long", "com.google.common.primitives.Longs.fromByteArray(byte[])", "public static long fromByteArray(byte[])"], ["long", "com.google.common.primitives.Longs.fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)", "public static long fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)"], ["java.lang.Long", "com.google.common.primitives.Longs.tryParse(java.lang.String)", "public static java.lang.Long tryParse(java.lang.String)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Long>", "com.google.common.primitives.Longs.stringConverter()", "public static com.google.common.base.Converter<java.lang.String, java.lang.Long> stringConverter()"], ["long[]", "com.google.common.primitives.Longs.ensureCapacity(long[], int, int)", "public static long[] ensureCapacity(long[], int, int)"], ["java.lang.String", "com.google.common.primitives.Longs.join(java.lang.String, long...)", "public static java.lang.String join(java.lang.String, long...)"], ["java.util.Comparator<long[]>", "com.google.common.primitives.Longs.lexicographicalComparator()", "public static java.util.Comparator<long[]> lexicographicalComparator()"], ["long[]", "com.google.common.primitives.Longs.toArray(java.util.Collection<? extends java.lang.Number>)", "public static long[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Long>", "com.google.common.primitives.Longs.asList(long...)", "public static java.util.List<java.lang.Long> asList(long...)"], ["java.util.Set<java.lang.Class<?>>", "com.google.common.primitives.Primitives.allPrimitiveTypes()", "public static java.util.Set<java.lang.Class<?>> allPrimitiveTypes()"], ["java.util.Set<java.lang.Class<?>>", "com.google.common.primitives.Primitives.allWrapperTypes()", "public static java.util.Set<java.lang.Class<?>> allWrapperTypes()"], ["boolean", "com.google.common.primitives.Primitives.isWrapperType(java.lang.Class<?>)", "public static boolean isWrapperType(java.lang.Class<?>)"], ["<T> java.lang.Class<T>", "com.google.common.primitives.Primitives.wrap(java.lang.Class<T>)", "public static <T> java.lang.Class<T> wrap(java.lang.Class<T>)"], ["<T> java.lang.Class<T>", "com.google.common.primitives.Primitives.unwrap(java.lang.Class<T>)", "public static <T> java.lang.Class<T> unwrap(java.lang.Class<T>)"], ["com.google.common.primitives.Shorts$LexicographicalComparator[]", "com.google.common.primitives.Shorts$LexicographicalComparator.values()", "public static com.google.common.primitives.Shorts$LexicographicalComparator[] values()"], ["com.google.common.primitives.Shorts$LexicographicalComparator", "com.google.common.primitives.Shorts$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.Shorts$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Shorts$LexicographicalComparator.compare(short[], short[])", "public int compare(short[], short[])"], ["int", "com.google.common.primitives.Shorts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.size()", "public int size()"], ["boolean", "com.google.common.primitives.Shorts$ShortArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Short", "com.google.common.primitives.Shorts$ShortArrayAsList.get(int)", "public java.lang.Short get(int)"], ["boolean", "com.google.common.primitives.Shorts$ShortArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Short", "com.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Short)", "public java.lang.Short set(int, java.lang.Short)"], ["java.util.List<java.lang.Short>", "com.google.common.primitives.Shorts$ShortArrayAsList.subList(int, int)", "public java.util.List<java.lang.Short> subList(int, int)"], ["boolean", "com.google.common.primitives.Shorts$ShortArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.primitives.Shorts$ShortArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Shorts$ShortArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "com.google.common.primitives.Shorts$ShortConverter.toString()", "public java.lang.String toString()"], ["int", "com.google.common.primitives.Shorts.hashCode(short)", "public static int hashCode(short)"], ["short", "com.google.common.primitives.Shorts.checkedCast(long)", "public static short checkedCast(long)"], ["short", "com.google.common.primitives.Shorts.saturatedCast(long)", "public static short saturatedCast(long)"], ["int", "com.google.common.primitives.Shorts.compare(short, short)", "public static int compare(short, short)"], ["boolean", "com.google.common.primitives.Shorts.contains(short[], short)", "public static boolean contains(short[], short)"], ["int", "com.google.common.primitives.Shorts.indexOf(short[], short)", "public static int indexOf(short[], short)"], ["int", "com.google.common.primitives.Shorts.indexOf(short[], short[])", "public static int indexOf(short[], short[])"], ["int", "com.google.common.primitives.Shorts.lastIndexOf(short[], short)", "public static int lastIndexOf(short[], short)"], ["short", "com.google.common.primitives.Shorts.min(short...)", "public static short min(short...)"], ["short", "com.google.common.primitives.Shorts.max(short...)", "public static short max(short...)"], ["short[]", "com.google.common.primitives.Shorts.concat(short[]...)", "public static short[] concat(short[]...)"], ["byte[]", "com.google.common.primitives.Shorts.toByteArray(short)", "public static byte[] toByteArray(short)"], ["short", "com.google.common.primitives.Shorts.fromByteArray(byte[])", "public static short fromByteArray(byte[])"], ["short", "com.google.common.primitives.Shorts.fromBytes(byte, byte)", "public static short fromBytes(byte, byte)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Short>", "com.google.common.primitives.Shorts.stringConverter()", "public static com.google.common.base.Converter<java.lang.String, java.lang.Short> stringConverter()"], ["short[]", "com.google.common.primitives.Shorts.ensureCapacity(short[], int, int)", "public static short[] ensureCapacity(short[], int, int)"], ["java.lang.String", "com.google.common.primitives.Shorts.join(java.lang.String, short...)", "public static java.lang.String join(java.lang.String, short...)"], ["java.util.Comparator<short[]>", "com.google.common.primitives.Shorts.lexicographicalComparator()", "public static java.util.Comparator<short[]> lexicographicalComparator()"], ["short[]", "com.google.common.primitives.Shorts.toArray(java.util.Collection<? extends java.lang.Number>)", "public static short[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Short>", "com.google.common.primitives.Shorts.asList(short...)", "public static java.util.List<java.lang.Short> asList(short...)"], ["com.google.common.primitives.SignedBytes$LexicographicalComparator[]", "com.google.common.primitives.SignedBytes$LexicographicalComparator.values()", "public static com.google.common.primitives.SignedBytes$LexicographicalComparator[] values()"], ["com.google.common.primitives.SignedBytes$LexicographicalComparator", "com.google.common.primitives.SignedBytes$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.SignedBytes$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.SignedBytes$LexicographicalComparator.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "com.google.common.primitives.SignedBytes$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["byte", "com.google.common.primitives.SignedBytes.checkedCast(long)", "public static byte checkedCast(long)"], ["byte", "com.google.common.primitives.SignedBytes.saturatedCast(long)", "public static byte saturatedCast(long)"], ["int", "com.google.common.primitives.SignedBytes.compare(byte, byte)", "public static int compare(byte, byte)"], ["byte", "com.google.common.primitives.SignedBytes.min(byte...)", "public static byte min(byte...)"], ["byte", "com.google.common.primitives.SignedBytes.max(byte...)", "public static byte max(byte...)"], ["java.lang.String", "com.google.common.primitives.SignedBytes.join(java.lang.String, byte...)", "public static java.lang.String join(java.lang.String, byte...)"], ["java.util.Comparator<byte[]>", "com.google.common.primitives.SignedBytes.lexicographicalComparator()", "public static java.util.Comparator<byte[]> lexicographicalComparator()"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[]", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.values()", "public static com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] values()"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["sun.misc.Unsafe", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()", "public sun.misc.Unsafe run() throws java.lang.Exception"], ["java.lang.Object", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[]", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.values()", "public static com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[] values()"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.UnsignedBytes.toInt(byte)", "public static int toInt(byte)"], ["byte", "com.google.common.primitives.UnsignedBytes.checkedCast(long)", "public static byte checkedCast(long)"], ["byte", "com.google.common.primitives.UnsignedBytes.saturatedCast(long)", "public static byte saturatedCast(long)"], ["int", "com.google.common.primitives.UnsignedBytes.compare(byte, byte)", "public static int compare(byte, byte)"], ["byte", "com.google.common.primitives.UnsignedBytes.min(byte...)", "public static byte min(byte...)"], ["byte", "com.google.common.primitives.UnsignedBytes.max(byte...)", "public static byte max(byte...)"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes.toString(byte)", "public static java.lang.String toString(byte)"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes.toString(byte, int)", "public static java.lang.String toString(byte, int)"], ["byte", "com.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String)", "public static byte parseUnsignedByte(java.lang.String)"], ["byte", "com.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String, int)", "public static byte parseUnsignedByte(java.lang.String, int)"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes.join(java.lang.String, byte...)", "public static java.lang.String join(java.lang.String, byte...)"], ["java.util.Comparator<byte[]>", "com.google.common.primitives.UnsignedBytes.lexicographicalComparator()", "public static java.util.Comparator<byte[]> lexicographicalComparator()"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.fromIntBits(int)", "public static com.google.common.primitives.UnsignedInteger fromIntBits(int)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(long)", "public static com.google.common.primitives.UnsignedInteger valueOf(long)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(java.math.BigInteger)", "public static com.google.common.primitives.UnsignedInteger valueOf(java.math.BigInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(java.lang.String)", "public static com.google.common.primitives.UnsignedInteger valueOf(java.lang.String)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(java.lang.String, int)", "public static com.google.common.primitives.UnsignedInteger valueOf(java.lang.String, int)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.plus(com.google.common.primitives.UnsignedInteger)", "public com.google.common.primitives.UnsignedInteger plus(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.minus(com.google.common.primitives.UnsignedInteger)", "public com.google.common.primitives.UnsignedInteger minus(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.times(com.google.common.primitives.UnsignedInteger)", "public com.google.common.primitives.UnsignedInteger times(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.dividedBy(com.google.common.primitives.UnsignedInteger)", "public com.google.common.primitives.UnsignedInteger dividedBy(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.mod(com.google.common.primitives.UnsignedInteger)", "public com.google.common.primitives.UnsignedInteger mod(com.google.common.primitives.UnsignedInteger)"], ["int", "com.google.common.primitives.UnsignedInteger.intValue()", "public int intValue()"], ["long", "com.google.common.primitives.UnsignedInteger.longValue()", "public long longValue()"], ["float", "com.google.common.primitives.UnsignedInteger.floatValue()", "public float floatValue()"], ["double", "com.google.common.primitives.UnsignedInteger.doubleValue()", "public double doubleValue()"], ["java.math.BigInteger", "com.google.common.primitives.UnsignedInteger.bigIntegerValue()", "public java.math.BigInteger bigIntegerValue()"], ["int", "com.google.common.primitives.UnsignedInteger.compareTo(com.google.common.primitives.UnsignedInteger)", "public int compareTo(com.google.common.primitives.UnsignedInteger)"], ["int", "com.google.common.primitives.UnsignedInteger.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.primitives.UnsignedInteger.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.primitives.UnsignedInteger.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.primitives.UnsignedInteger.toString(int)", "public java.lang.String toString(int)"], ["int", "com.google.common.primitives.UnsignedInteger.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["com.google.common.primitives.UnsignedInts$LexicographicalComparator[]", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.values()", "public static com.google.common.primitives.UnsignedInts$LexicographicalComparator[] values()"], ["com.google.common.primitives.UnsignedInts$LexicographicalComparator", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.UnsignedInts$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(int[], int[])", "public int compare(int[], int[])"], ["int", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.UnsignedInts.compare(int, int)", "public static int compare(int, int)"], ["long", "com.google.common.primitives.UnsignedInts.toLong(int)", "public static long toLong(int)"], ["int", "com.google.common.primitives.UnsignedInts.min(int...)", "public static int min(int...)"], ["int", "com.google.common.primitives.UnsignedInts.max(int...)", "public static int max(int...)"], ["java.lang.String", "com.google.common.primitives.UnsignedInts.join(java.lang.String, int...)", "public static java.lang.String join(java.lang.String, int...)"], ["java.util.Comparator<int[]>", "com.google.common.primitives.UnsignedInts.lexicographicalComparator()", "public static java.util.Comparator<int[]> lexicographicalComparator()"], ["int", "com.google.common.primitives.UnsignedInts.divide(int, int)", "public static int divide(int, int)"], ["int", "com.google.common.primitives.UnsignedInts.remainder(int, int)", "public static int remainder(int, int)"], ["int", "com.google.common.primitives.UnsignedInts.decode(java.lang.String)", "public static int decode(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String)", "public static int parseUnsignedInt(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String, int)", "public static int parseUnsignedInt(java.lang.String, int)"], ["java.lang.String", "com.google.common.primitives.UnsignedInts.toString(int)", "public static java.lang.String toString(int)"], ["java.lang.String", "com.google.common.primitives.UnsignedInts.toString(int, int)", "public static java.lang.String toString(int, int)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.fromLongBits(long)", "public static com.google.common.primitives.UnsignedLong fromLongBits(long)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(long)", "public static com.google.common.primitives.UnsignedLong valueOf(long)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(java.math.BigInteger)", "public static com.google.common.primitives.UnsignedLong valueOf(java.math.BigInteger)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(java.lang.String)", "public static com.google.common.primitives.UnsignedLong valueOf(java.lang.String)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(java.lang.String, int)", "public static com.google.common.primitives.UnsignedLong valueOf(java.lang.String, int)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.plus(com.google.common.primitives.UnsignedLong)", "public com.google.common.primitives.UnsignedLong plus(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.minus(com.google.common.primitives.UnsignedLong)", "public com.google.common.primitives.UnsignedLong minus(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.times(com.google.common.primitives.UnsignedLong)", "public com.google.common.primitives.UnsignedLong times(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.dividedBy(com.google.common.primitives.UnsignedLong)", "public com.google.common.primitives.UnsignedLong dividedBy(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.mod(com.google.common.primitives.UnsignedLong)", "public com.google.common.primitives.UnsignedLong mod(com.google.common.primitives.UnsignedLong)"], ["int", "com.google.common.primitives.UnsignedLong.intValue()", "public int intValue()"], ["long", "com.google.common.primitives.UnsignedLong.longValue()", "public long longValue()"], ["float", "com.google.common.primitives.UnsignedLong.floatValue()", "public float floatValue()"], ["double", "com.google.common.primitives.UnsignedLong.doubleValue()", "public double doubleValue()"], ["java.math.BigInteger", "com.google.common.primitives.UnsignedLong.bigIntegerValue()", "public java.math.BigInteger bigIntegerValue()"], ["int", "com.google.common.primitives.UnsignedLong.compareTo(com.google.common.primitives.UnsignedLong)", "public int compareTo(com.google.common.primitives.UnsignedLong)"], ["int", "com.google.common.primitives.UnsignedLong.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.primitives.UnsignedLong.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.primitives.UnsignedLong.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.primitives.UnsignedLong.toString(int)", "public java.lang.String toString(int)"], ["int", "com.google.common.primitives.UnsignedLong.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["com.google.common.primitives.UnsignedLongs$LexicographicalComparator[]", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.values()", "public static com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] values()"], ["com.google.common.primitives.UnsignedLongs$LexicographicalComparator", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.valueOf(java.lang.String)", "public static com.google.common.primitives.UnsignedLongs$LexicographicalComparator valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(long[], long[])", "public int compare(long[], long[])"], ["int", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.UnsignedLongs.compare(long, long)", "public static int compare(long, long)"], ["long", "com.google.common.primitives.UnsignedLongs.min(long...)", "public static long min(long...)"], ["long", "com.google.common.primitives.UnsignedLongs.max(long...)", "public static long max(long...)"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs.join(java.lang.String, long...)", "public static java.lang.String join(java.lang.String, long...)"], ["java.util.Comparator<long[]>", "com.google.common.primitives.UnsignedLongs.lexicographicalComparator()", "public static java.util.Comparator<long[]> lexicographicalComparator()"], ["long", "com.google.common.primitives.UnsignedLongs.divide(long, long)", "public static long divide(long, long)"], ["long", "com.google.common.primitives.UnsignedLongs.remainder(long, long)", "public static long remainder(long, long)"], ["long", "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)", "public static long parseUnsignedLong(java.lang.String)"], ["long", "com.google.common.primitives.UnsignedLongs.decode(java.lang.String)", "public static long decode(java.lang.String)"], ["long", "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)", "public static long parseUnsignedLong(java.lang.String, int)"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs.toString(long)", "public static java.lang.String toString(long)"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs.toString(long, int)", "public static java.lang.String toString(long, int)"], ["com.google.common.reflect.AbstractInvocationHandler", "com.google.common.reflect.AbstractInvocationHandler()", "public com.google.common.reflect.AbstractInvocationHandler()"], ["java.lang.Object", "com.google.common.reflect.AbstractInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public final java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["boolean", "com.google.common.reflect.AbstractInvocationHandler.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.reflect.AbstractInvocationHandler.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.reflect.AbstractInvocationHandler.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.reflect.ClassPath$1.apply(com.google.common.reflect.ClassPath$ClassInfo)", "public boolean apply(com.google.common.reflect.ClassPath$ClassInfo)"], ["boolean", "com.google.common.reflect.ClassPath$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.getPackageName()", "public java.lang.String getPackageName()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.getSimpleName()", "public java.lang.String getSimpleName()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.getName()", "public java.lang.String getName()"], ["java.lang.Class<?>", "com.google.common.reflect.ClassPath$ClassInfo.load()", "public java.lang.Class<?> load()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.toString()", "public java.lang.String toString()"], ["java.net.URL", "com.google.common.reflect.ClassPath$ResourceInfo.url()", "public final java.net.URL url()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ResourceInfo.getResourceName()", "public final java.lang.String getResourceName()"], ["int", "com.google.common.reflect.ClassPath$ResourceInfo.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.reflect.ClassPath$ResourceInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.ClassPath$ResourceInfo.toString()", "public java.lang.String toString()"], ["com.google.common.reflect.ClassPath", "com.google.common.reflect.ClassPath.from(java.lang.ClassLoader)", "public static com.google.common.reflect.ClassPath from(java.lang.ClassLoader) throws java.io.IOException"], ["com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ResourceInfo>", "com.google.common.reflect.ClassPath.getResources()", "public com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ResourceInfo> getResources()"], ["com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo>", "com.google.common.reflect.ClassPath.getAllClasses()", "public com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo> getAllClasses()"], ["com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo>", "com.google.common.reflect.ClassPath.getTopLevelClasses()", "public com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo> getTopLevelClasses()"], ["com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo>", "com.google.common.reflect.ClassPath.getTopLevelClasses(java.lang.String)", "public com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo> getTopLevelClasses(java.lang.String)"], ["com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo>", "com.google.common.reflect.ClassPath.getTopLevelClassesRecursive(java.lang.String)", "public com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath$ClassInfo> getTopLevelClassesRecursive(java.lang.String)"], ["com.google.common.reflect.TypeToken<?>", "com.google.common.reflect.Element.getOwnerType()", "public com.google.common.reflect.TypeToken<?> getOwnerType()"], ["boolean", "com.google.common.reflect.Element.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public final boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "com.google.common.reflect.Element.getAnnotation(java.lang.Class<A>)", "public final <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Element.getAnnotations()", "public final java.lang.annotation.Annotation[] getAnnotations()"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Element.getDeclaredAnnotations()", "public final java.lang.annotation.Annotation[] getDeclaredAnnotations()"], ["void", "com.google.common.reflect.Element.setAccessible(boolean)", "public final void setAccessible(boolean) throws java.lang.SecurityException"], ["boolean", "com.google.common.reflect.Element.isAccessible()", "public final boolean isAccessible()"], ["java.lang.Class<?>", "com.google.common.reflect.Element.getDeclaringClass()", "public java.lang.Class<?> getDeclaringClass()"], ["java.lang.String", "com.google.common.reflect.Element.getName()", "public final java.lang.String getName()"], ["int", "com.google.common.reflect.Element.getModifiers()", "public final int getModifiers()"], ["boolean", "com.google.common.reflect.Element.isSynthetic()", "public final boolean isSynthetic()"], ["boolean", "com.google.common.reflect.Element.isPublic()", "public final boolean isPublic()"], ["boolean", "com.google.common.reflect.Element.isProtected()", "public final boolean isProtected()"], ["boolean", "com.google.common.reflect.Element.isPackagePrivate()", "public final boolean isPackagePrivate()"], ["boolean", "com.google.common.reflect.Element.isPrivate()", "public final boolean isPrivate()"], ["boolean", "com.google.common.reflect.Element.isStatic()", "public final boolean isStatic()"], ["boolean", "com.google.common.reflect.Element.isFinal()", "public final boolean isFinal()"], ["boolean", "com.google.common.reflect.Element.isAbstract()", "public final boolean isAbstract()"], ["boolean", "com.google.common.reflect.Element.isNative()", "public final boolean isNative()"], ["boolean", "com.google.common.reflect.Element.isSynchronized()", "public final boolean isSynchronized()"], ["boolean", "com.google.common.reflect.Element.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.reflect.Element.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.reflect.Element.toString()", "public java.lang.String toString()"], ["<T extends B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(java.lang.Class<T>, T)", "public <T extends B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B> put(java.lang.Class<T>, T)"], ["<T extends B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(com.google.common.reflect.TypeToken<T>, T)", "public <T extends B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B> put(com.google.common.reflect.TypeToken<T>, T)"], ["com.google.common.reflect.ImmutableTypeToInstanceMap<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder.build()", "public com.google.common.reflect.ImmutableTypeToInstanceMap<B> build()"], ["<B> com.google.common.reflect.ImmutableTypeToInstanceMap<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap.of()", "public static <B> com.google.common.reflect.ImmutableTypeToInstanceMap<B> of()"], ["<B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap.builder()", "public static <B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B> builder()"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(com.google.common.reflect.TypeToken<T>)", "public <T extends B> T getInstance(com.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(com.google.common.reflect.TypeToken<T>, T)", "public <T extends B> T putInstance(com.google.common.reflect.TypeToken<T>, T)"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["java.lang.reflect.TypeVariable<?>[]", "com.google.common.reflect.Invokable$ConstructorInvokable.getTypeParameters()", "public final java.lang.reflect.TypeVariable<?>[] getTypeParameters()"], ["boolean", "com.google.common.reflect.Invokable$ConstructorInvokable.isOverridable()", "public final boolean isOverridable()"], ["boolean", "com.google.common.reflect.Invokable$ConstructorInvokable.isVarArgs()", "public final boolean isVarArgs()"], ["java.lang.reflect.TypeVariable<?>[]", "com.google.common.reflect.Invokable$MethodInvokable.getTypeParameters()", "public final java.lang.reflect.TypeVariable<?>[] getTypeParameters()"], ["boolean", "com.google.common.reflect.Invokable$MethodInvokable.isOverridable()", "public final boolean isOverridable()"], ["boolean", "com.google.common.reflect.Invokable$MethodInvokable.isVarArgs()", "public final boolean isVarArgs()"], ["com.google.common.reflect.Invokable<?, java.lang.Object>", "com.google.common.reflect.Invokable.from(java.lang.reflect.Method)", "public static com.google.common.reflect.Invokable<?, java.lang.Object> from(java.lang.reflect.Method)"], ["<T> com.google.common.reflect.Invokable<T, T>", "com.google.common.reflect.Invokable.from(java.lang.reflect.Constructor<T>)", "public static <T> com.google.common.reflect.Invokable<T, T> from(java.lang.reflect.Constructor<T>)"], ["R", "com.google.common.reflect.Invokable.invoke(T, java.lang.Object...)", "public final R invoke(T, java.lang.Object...) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException"], ["com.google.common.reflect.TypeToken<? extends R>", "com.google.common.reflect.Invokable.getReturnType()", "public final com.google.common.reflect.TypeToken<? extends R> getReturnType()"], ["com.google.common.collect.ImmutableList<com.google.common.reflect.Parameter>", "com.google.common.reflect.Invokable.getParameters()", "public final com.google.common.collect.ImmutableList<com.google.common.reflect.Parameter> getParameters()"], ["com.google.common.collect.ImmutableList<com.google.common.reflect.TypeToken<? extends java.lang.Throwable>>", "com.google.common.reflect.Invokable.getExceptionTypes()", "public final com.google.common.collect.ImmutableList<com.google.common.reflect.TypeToken<? extends java.lang.Throwable>> getExceptionTypes()"], ["<R1 extends R> com.google.common.reflect.Invokable<T, R1>", "com.google.common.reflect.Invokable.returning(java.lang.Class<R1>)", "public final <R1 extends R> com.google.common.reflect.Invokable<T, R1> returning(java.lang.Class<R1>)"], ["<R1 extends R> com.google.common.reflect.Invokable<T, R1>", "com.google.common.reflect.Invokable.returning(com.google.common.reflect.TypeToken<R1>)", "public final <R1 extends R> com.google.common.reflect.Invokable<T, R1> returning(com.google.common.reflect.TypeToken<R1>)"], ["java.lang.Class<? super T>", "com.google.common.reflect.Invokable.getDeclaringClass()", "public final java.lang.Class<? super T> getDeclaringClass()"], ["com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.Invokable.getOwnerType()", "public com.google.common.reflect.TypeToken<T> getOwnerType()"], ["java.lang.String", "com.google.common.reflect.Invokable.toString()", "public java.lang.String toString()"], ["int", "com.google.common.reflect.Invokable.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.reflect.Invokable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Map$Entry<K, V>", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.util.Map$Entry<K, V>)", "public java.util.Map$Entry<K, V> apply(java.util.Map$Entry<K, V>)"], ["java.lang.Object", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["V", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.setValue(V)", "public V setValue(V)"], ["com.google.common.reflect.MutableTypeToInstanceMap", "com.google.common.reflect.MutableTypeToInstanceMap()", "public com.google.common.reflect.MutableTypeToInstanceMap()"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.getInstance(com.google.common.reflect.TypeToken<T>)", "public <T extends B> T getInstance(com.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.putInstance(com.google.common.reflect.TypeToken<T>, T)", "public <T extends B> T putInstance(com.google.common.reflect.TypeToken<T>, T)"], ["B", "com.google.common.reflect.MutableTypeToInstanceMap.put(com.google.common.reflect.TypeToken<? extends B>, B)", "public B put(com.google.common.reflect.TypeToken<? extends B>, B)"], ["void", "com.google.common.reflect.MutableTypeToInstanceMap.putAll(java.util.Map<? extends com.google.common.reflect.TypeToken<? extends B>, ? extends B>)", "public void putAll(java.util.Map<? extends com.google.common.reflect.TypeToken<? extends B>, ? extends B>)"], ["java.util.Set<java.util.Map$Entry<com.google.common.reflect.TypeToken<? extends B>, B>>", "com.google.common.reflect.MutableTypeToInstanceMap.entrySet()", "public java.util.Set<java.util.Map$Entry<com.google.common.reflect.TypeToken<? extends B>, B>> entrySet()"], ["java.lang.Object", "com.google.common.reflect.MutableTypeToInstanceMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["com.google.common.reflect.TypeToken<?>", "com.google.common.reflect.Parameter.getType()", "public com.google.common.reflect.TypeToken<?> getType()"], ["com.google.common.reflect.Invokable<?, ?>", "com.google.common.reflect.Parameter.getDeclaringInvokable()", "public com.google.common.reflect.Invokable<?, ?> getDeclaringInvokable()"], ["boolean", "com.google.common.reflect.Parameter.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "com.google.common.reflect.Parameter.getAnnotation(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Parameter.getAnnotations()", "public java.lang.annotation.Annotation[] getAnnotations()"], ["<A extends java.lang.annotation.Annotation> A[]", "com.google.common.reflect.Parameter.getAnnotationsByType(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A[] getAnnotationsByType(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Parameter.getDeclaredAnnotations()", "public java.lang.annotation.Annotation[] getDeclaredAnnotations()"], ["<A extends java.lang.annotation.Annotation> A", "com.google.common.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A getDeclaredAnnotation(java.lang.Class<A>)"], ["<A extends java.lang.annotation.Annotation> A[]", "com.google.common.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A[] getDeclaredAnnotationsByType(java.lang.Class<A>)"], ["boolean", "com.google.common.reflect.Parameter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.reflect.Parameter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.reflect.Parameter.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.google.common.reflect.Reflection.getPackageName(java.lang.Class<?>)", "public static java.lang.String getPackageName(java.lang.Class<?>)"], ["java.lang.String", "com.google.common.reflect.Reflection.getPackageName(java.lang.String)", "public static java.lang.String getPackageName(java.lang.String)"], ["void", "com.google.common.reflect.Reflection.initialize(java.lang.Class<?>...)", "public static void initialize(java.lang.Class<?>...)"], ["<T> T", "com.google.common.reflect.Reflection.newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)", "public static <T> T newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)"], ["int", "com.google.common.reflect.TypeParameter.hashCode()", "public final int hashCode()"], ["boolean", "com.google.common.reflect.TypeParameter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.TypeParameter.toString()", "public java.lang.String toString()"], ["java.lang.reflect.Type", "com.google.common.reflect.TypeResolver$TypeTable$1.resolveInternal(java.lang.reflect.TypeVariable<?>, com.google.common.reflect.TypeResolver$TypeTable)", "public java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable<?>, com.google.common.reflect.TypeResolver$TypeTable)"], ["int", "com.google.common.reflect.TypeResolver$TypeVariableKey.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.reflect.TypeResolver$TypeVariableKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.TypeResolver$TypeVariableKey.toString()", "public java.lang.String toString()"], ["com.google.common.reflect.TypeResolver", "com.google.common.reflect.TypeResolver()", "public com.google.common.reflect.TypeResolver()"], ["com.google.common.reflect.TypeResolver", "com.google.common.reflect.TypeResolver.where(java.lang.reflect.Type, java.lang.reflect.Type)", "public com.google.common.reflect.TypeResolver where(java.lang.reflect.Type, java.lang.reflect.Type)"], ["java.lang.reflect.Type", "com.google.common.reflect.TypeResolver.resolveType(java.lang.reflect.Type)", "public java.lang.reflect.Type resolveType(java.lang.reflect.Type)"], ["com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken$1.getOwnerType()", "public com.google.common.reflect.TypeToken<T> getOwnerType()"], ["java.lang.String", "com.google.common.reflect.TypeToken$1.toString()", "public java.lang.String toString()"], ["com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken$2.getOwnerType()", "public com.google.common.reflect.TypeToken<T> getOwnerType()"], ["java.lang.String", "com.google.common.reflect.TypeToken$2.toString()", "public java.lang.String toString()"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken$ClassSet.classes()", "public com.google.common.reflect.TypeToken<T>.TypeSet classes()"], ["java.util.Set<java.lang.Class<? super T>>", "com.google.common.reflect.TypeToken$ClassSet.rawTypes()", "public java.util.Set<java.lang.Class<? super T>> rawTypes()"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken$ClassSet.interfaces()", "public com.google.common.reflect.TypeToken<T>.TypeSet interfaces()"], ["boolean", "com.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Class<?>)", "public boolean apply(java.lang.Class<?>)"], ["boolean", "com.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken$InterfaceSet.interfaces()", "public com.google.common.reflect.TypeToken<T>.TypeSet interfaces()"], ["java.util.Set<java.lang.Class<? super T>>", "com.google.common.reflect.TypeToken$InterfaceSet.rawTypes()", "public java.util.Set<java.lang.Class<? super T>> rawTypes()"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken$InterfaceSet.classes()", "public com.google.common.reflect.TypeToken<T>.TypeSet classes()"], ["int", "com.google.common.reflect.TypeToken$TypeCollector$4.compare(K, K)", "public int compare(K, K)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$1.apply(com.google.common.reflect.TypeToken<?>)", "public boolean apply(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$2.apply(com.google.common.reflect.TypeToken<?>)", "public boolean apply(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["com.google.common.reflect.TypeToken$TypeFilter[]", "com.google.common.reflect.TypeToken$TypeFilter.values()", "public static com.google.common.reflect.TypeToken$TypeFilter[] values()"], ["com.google.common.reflect.TypeToken$TypeFilter", "com.google.common.reflect.TypeToken$TypeFilter.valueOf(java.lang.String)", "public static com.google.common.reflect.TypeToken$TypeFilter valueOf(java.lang.String)"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken$TypeSet.interfaces()", "public com.google.common.reflect.TypeToken<T>.TypeSet interfaces()"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken$TypeSet.classes()", "public com.google.common.reflect.TypeToken<T>.TypeSet classes()"], ["java.util.Set<java.lang.Class<? super T>>", "com.google.common.reflect.TypeToken$TypeSet.rawTypes()", "public java.util.Set<java.lang.Class<? super T>> rawTypes()"], ["<T> com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.of(java.lang.Class<T>)", "public static <T> com.google.common.reflect.TypeToken<T> of(java.lang.Class<T>)"], ["com.google.common.reflect.TypeToken<?>", "com.google.common.reflect.TypeToken.of(java.lang.reflect.Type)", "public static com.google.common.reflect.TypeToken<?> of(java.lang.reflect.Type)"], ["java.lang.Class<? super T>", "com.google.common.reflect.TypeToken.getRawType()", "public final java.lang.Class<? super T> getRawType()"], ["java.lang.reflect.Type", "com.google.common.reflect.TypeToken.getType()", "public final java.lang.reflect.Type getType()"], ["<X> com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>)", "public final <X> com.google.common.reflect.TypeToken<T> where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>)"], ["<X> com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.where(com.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)", "public final <X> com.google.common.reflect.TypeToken<T> where(com.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)"], ["com.google.common.reflect.TypeToken<?>", "com.google.common.reflect.TypeToken.resolveType(java.lang.reflect.Type)", "public final com.google.common.reflect.TypeToken<?> resolveType(java.lang.reflect.Type)"], ["com.google.common.reflect.TypeToken<T>.TypeSet", "com.google.common.reflect.TypeToken.getTypes()", "public final com.google.common.reflect.TypeToken<T>.TypeSet getTypes()"], ["com.google.common.reflect.TypeToken<? super T>", "com.google.common.reflect.TypeToken.getSupertype(java.lang.Class<? super T>)", "public final com.google.common.reflect.TypeToken<? super T> getSupertype(java.lang.Class<? super T>)"], ["com.google.common.reflect.TypeToken<? extends T>", "com.google.common.reflect.TypeToken.getSubtype(java.lang.Class<?>)", "public final com.google.common.reflect.TypeToken<? extends T> getSubtype(java.lang.Class<?>)"], ["boolean", "com.google.common.reflect.TypeToken.isAssignableFrom(com.google.common.reflect.TypeToken<?>)", "public final boolean isAssignableFrom(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type)", "public final boolean isAssignableFrom(java.lang.reflect.Type)"], ["boolean", "com.google.common.reflect.TypeToken.isArray()", "public final boolean isArray()"], ["boolean", "com.google.common.reflect.TypeToken.isPrimitive()", "public final boolean isPrimitive()"], ["com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.wrap()", "public final com.google.common.reflect.TypeToken<T> wrap()"], ["com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.unwrap()", "public final com.google.common.reflect.TypeToken<T> unwrap()"], ["com.google.common.reflect.TypeToken<?>", "com.google.common.reflect.TypeToken.getComponentType()", "public final com.google.common.reflect.TypeToken<?> getComponentType()"], ["com.google.common.reflect.Invokable<T, java.lang.Object>", "com.google.common.reflect.TypeToken.method(java.lang.reflect.Method)", "public final com.google.common.reflect.Invokable<T, java.lang.Object> method(java.lang.reflect.Method)"], ["com.google.common.reflect.Invokable<T, T>", "com.google.common.reflect.TypeToken.constructor(java.lang.reflect.Constructor<?>)", "public final com.google.common.reflect.Invokable<T, T> constructor(java.lang.reflect.Constructor<?>)"], ["boolean", "com.google.common.reflect.TypeToken.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.reflect.TypeToken.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.reflect.TypeToken.toString()", "public java.lang.String toString()"], ["void", "com.google.common.reflect.TypeVisitor.visit(java.lang.reflect.Type...)", "public final void visit(java.lang.reflect.Type...)"], ["java.lang.String", "com.google.common.reflect.Types$1.apply(java.lang.reflect.Type)", "public java.lang.String apply(java.lang.reflect.Type)"], ["java.lang.Object", "com.google.common.reflect.Types$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.google.common.reflect.Types$ClassOwnership[]", "com.google.common.reflect.Types$ClassOwnership.values()", "public static com.google.common.reflect.Types$ClassOwnership[] values()"], ["com.google.common.reflect.Types$ClassOwnership", "com.google.common.reflect.Types$ClassOwnership.valueOf(java.lang.String)", "public static com.google.common.reflect.Types$ClassOwnership valueOf(java.lang.String)"], ["java.lang.reflect.Type", "com.google.common.reflect.Types$GenericArrayTypeImpl.getGenericComponentType()", "public java.lang.reflect.Type getGenericComponentType()"], ["java.lang.String", "com.google.common.reflect.Types$GenericArrayTypeImpl.toString()", "public java.lang.String toString()"], ["int", "com.google.common.reflect.Types$GenericArrayTypeImpl.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.reflect.Types$GenericArrayTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.google.common.reflect.Types$JavaVersion[]", "com.google.common.reflect.Types$JavaVersion.values()", "public static com.google.common.reflect.Types$JavaVersion[] values()"], ["com.google.common.reflect.Types$JavaVersion", "com.google.common.reflect.Types$JavaVersion.valueOf(java.lang.String)", "public static com.google.common.reflect.Types$JavaVersion valueOf(java.lang.String)"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$ParameterizedTypeImpl.getActualTypeArguments()", "public java.lang.reflect.Type[] getActualTypeArguments()"], ["java.lang.reflect.Type", "com.google.common.reflect.Types$ParameterizedTypeImpl.getRawType()", "public java.lang.reflect.Type getRawType()"], ["java.lang.reflect.Type", "com.google.common.reflect.Types$ParameterizedTypeImpl.getOwnerType()", "public java.lang.reflect.Type getOwnerType()"], ["java.lang.String", "com.google.common.reflect.Types$ParameterizedTypeImpl.toString()", "public java.lang.String toString()"], ["int", "com.google.common.reflect.Types$ParameterizedTypeImpl.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.reflect.Types$ParameterizedTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$TypeVariableImpl.getBounds()", "public java.lang.reflect.Type[] getBounds()"], ["D", "com.google.common.reflect.Types$TypeVariableImpl.getGenericDeclaration()", "public D getGenericDeclaration()"], ["java.lang.String", "com.google.common.reflect.Types$TypeVariableImpl.getName()", "public java.lang.String getName()"], ["java.lang.String", "com.google.common.reflect.Types$TypeVariableImpl.toString()", "public java.lang.String toString()"], ["int", "com.google.common.reflect.Types$TypeVariableImpl.hashCode()", "public int hashCode()"], ["boolean", "com.google.common.reflect.Types$TypeVariableImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$WildcardTypeImpl.getLowerBounds()", "public java.lang.reflect.Type[] getLowerBounds()"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$WildcardTypeImpl.getUpperBounds()", "public java.lang.reflect.Type[] getUpperBounds()"], ["boolean", "com.google.common.reflect.Types$WildcardTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.google.common.reflect.Types$WildcardTypeImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "com.google.common.reflect.Types$WildcardTypeImpl.toString()", "public java.lang.String toString()"], ["V", "com.google.common.util.concurrent.AbstractCheckedFuture.checkedGet()", "public V checkedGet() throws X"], ["V", "com.google.common.util.concurrent.AbstractCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit) throws java/util/concurrent/TimeoutException, X"], ["java.lang.String", "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()", "public java.lang.String get()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()", "public java.lang.Object get()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService$1$2.run()", "public void run()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService$2.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractExecutionThreadService.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.util.concurrent.AbstractExecutionThreadService.isRunning()", "public final boolean isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractExecutionThreadService.state()", "public final com.google.common.util.concurrent.Service$State state()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractExecutionThreadService.failureCause()", "public final java.lang.Throwable failureCause()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractExecutionThreadService.startAsync()", "public final com.google.common.util.concurrent.Service startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractExecutionThreadService.stopAsync()", "public final com.google.common.util.concurrent.Service stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning()", "public final void awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["V", "com.google.common.util.concurrent.AbstractFuture.get(long, java.util.concurrent.TimeUnit)", "public V get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException"], ["V", "com.google.common.util.concurrent.AbstractFuture.get()", "public V get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["boolean", "com.google.common.util.concurrent.AbstractFuture.isDone()", "public boolean isDone()"], ["boolean", "com.google.common.util.concurrent.AbstractFuture.isCancelled()", "public boolean isCancelled()"], ["boolean", "com.google.common.util.concurrent.AbstractFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "com.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractIdleService$1.get()", "public java.lang.String get()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractIdleService$1.get()", "public java.lang.Object get()"], ["void", "com.google.common.util.concurrent.AbstractIdleService$2$1.run()", "public void run()"], ["void", "com.google.common.util.concurrent.AbstractIdleService$2$2.run()", "public void run()"], ["void", "com.google.common.util.concurrent.AbstractIdleService$3.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractIdleService.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.util.concurrent.AbstractIdleService.isRunning()", "public final boolean isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractIdleService.state()", "public final com.google.common.util.concurrent.Service$State state()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractIdleService.failureCause()", "public final java.lang.Throwable failureCause()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractIdleService.startAsync()", "public final com.google.common.util.concurrent.Service startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractIdleService.stopAsync()", "public final com.google.common.util.concurrent.Service stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitRunning()", "public final void awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["com.google.common.util.concurrent.AbstractListeningExecutorService", "com.google.common.util.concurrent.AbstractListeningExecutorService()", "public com.google.common.util.concurrent.AbstractListeningExecutorService()"], ["com.google.common.util.concurrent.ListenableFuture<?>", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable)", "public com.google.common.util.concurrent.ListenableFuture<?> submit(java.lang.Runnable)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, T)", "public <T> com.google.common.util.concurrent.ListenableFuture<T> submit(java.lang.Runnable, T)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable<T>)", "public <T> com.google.common.util.concurrent.ListenableFuture<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable)", "public java.util.concurrent.Future submit(java.util.concurrent.Callable)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)", "public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable)", "public java.util.concurrent.Future submit(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$1$1.run()", "public void run()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractScheduledService$1$2.get()", "public java.lang.String get()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractScheduledService$1$2.get()", "public java.lang.Object get()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$1$3.run()", "public void run()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$1$4.run()", "public void run()"], ["java.lang.Thread", "com.google.common.util.concurrent.AbstractScheduledService$2.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$3.terminated(com.google.common.util.concurrent.Service$State)", "public void terminated(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$3.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)", "public void failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.lang.Void", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()", "public java.lang.Void call() throws java.lang.Exception"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.reschedule()", "public void reschedule()"], ["boolean", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.cancel(boolean)", "public boolean cancel(boolean)"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()", "public java.lang.Object call() throws java.lang.Exception"], ["com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule(long, java.util.concurrent.TimeUnit)", "public com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule(long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler()", "public com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler()"], ["java.util.concurrent.Future<?>", "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1.schedule(com.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)", "public java.util.concurrent.Future<?> schedule(com.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)"], ["java.util.concurrent.Future<?>", "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2.schedule(com.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)", "public java.util.concurrent.Future<?> schedule(com.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)"], ["com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "com.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)", "public static com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "com.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)", "public static com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractScheduledService.toString()", "public java.lang.String toString()"], ["boolean", "com.google.common.util.concurrent.AbstractScheduledService.isRunning()", "public final boolean isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractScheduledService.state()", "public final com.google.common.util.concurrent.Service$State state()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractScheduledService.failureCause()", "public final java.lang.Throwable failureCause()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractScheduledService.startAsync()", "public final com.google.common.util.concurrent.Service startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractScheduledService.stopAsync()", "public final com.google.common.util.concurrent.Service stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitRunning()", "public final void awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["boolean", "com.google.common.util.concurrent.AbstractService$5.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "com.google.common.util.concurrent.AbstractService$6.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "com.google.common.util.concurrent.AbstractService$7.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "com.google.common.util.concurrent.AbstractService$8.isSatisfied()", "public boolean isSatisfied()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractService.startAsync()", "public final com.google.common.util.concurrent.Service startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractService.stopAsync()", "public final com.google.common.util.concurrent.Service stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractService.awaitRunning()", "public final void awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.AbstractService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["boolean", "com.google.common.util.concurrent.AbstractService.isRunning()", "public final boolean isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractService.state()", "public final com.google.common.util.concurrent.Service$State state()"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractService.failureCause()", "public final java.lang.Throwable failureCause()"], ["void", "com.google.common.util.concurrent.AbstractService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService.toString()", "public java.lang.String toString()"], ["<V> com.google.common.util.concurrent.AsyncSettableFuture<V>", "com.google.common.util.concurrent.AsyncSettableFuture.create()", "public static <V> com.google.common.util.concurrent.AsyncSettableFuture<V> create()"], ["boolean", "com.google.common.util.concurrent.AsyncSettableFuture.setFuture(com.google.common.util.concurrent.ListenableFuture<? extends V>)", "public boolean setFuture(com.google.common.util.concurrent.ListenableFuture<? extends V>)"], ["boolean", "com.google.common.util.concurrent.AsyncSettableFuture.setValue(V)", "public boolean setValue(V)"], ["boolean", "com.google.common.util.concurrent.AsyncSettableFuture.setException(java.lang.Throwable)", "public boolean setException(java.lang.Throwable)"], ["boolean", "com.google.common.util.concurrent.AsyncSettableFuture.isSet()", "public boolean isSet()"], ["com.google.common.util.concurrent.AtomicDouble", "com.google.common.util.concurrent.AtomicDouble(double)", "public com.google.common.util.concurrent.AtomicDouble(double)"], ["com.google.common.util.concurrent.AtomicDouble", "com.google.common.util.concurrent.AtomicDouble()", "public com.google.common.util.concurrent.AtomicDouble()"], ["double", "com.google.common.util.concurrent.AtomicDouble.get()", "public final double get()"], ["void", "com.google.common.util.concurrent.AtomicDouble.set(double)", "public final void set(double)"], ["void", "com.google.common.util.concurrent.AtomicDouble.lazySet(double)", "public final void lazySet(double)"], ["double", "com.google.common.util.concurrent.AtomicDouble.getAndSet(double)", "public final double getAndSet(double)"], ["boolean", "com.google.common.util.concurrent.AtomicDouble.compareAndSet(double, double)", "public final boolean compareAndSet(double, double)"], ["boolean", "com.google.common.util.concurrent.AtomicDouble.weakCompareAndSet(double, double)", "public final boolean weakCompareAndSet(double, double)"], ["double", "com.google.common.util.concurrent.AtomicDouble.getAndAdd(double)", "public final double getAndAdd(double)"], ["double", "com.google.common.util.concurrent.AtomicDouble.addAndGet(double)", "public final double addAndGet(double)"], ["java.lang.String", "com.google.common.util.concurrent.AtomicDouble.toString()", "public java.lang.String toString()"], ["int", "com.google.common.util.concurrent.AtomicDouble.intValue()", "public int intValue()"], ["long", "com.google.common.util.concurrent.AtomicDouble.longValue()", "public long longValue()"], ["float", "com.google.common.util.concurrent.AtomicDouble.floatValue()", "public float floatValue()"], ["double", "com.google.common.util.concurrent.AtomicDouble.doubleValue()", "public double doubleValue()"], ["com.google.common.util.concurrent.AtomicDoubleArray", "com.google.common.util.concurrent.AtomicDoubleArray(int)", "public com.google.common.util.concurrent.AtomicDoubleArray(int)"], ["com.google.common.util.concurrent.AtomicDoubleArray", "com.google.common.util.concurrent.AtomicDoubleArray(double[])", "public com.google.common.util.concurrent.AtomicDoubleArray(double[])"], ["int", "com.google.common.util.concurrent.AtomicDoubleArray.length()", "public final int length()"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.get(int)", "public final double get(int)"], ["void", "com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)", "public final void set(int, double)"], ["void", "com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)", "public final void lazySet(int, double)"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)", "public final double getAndSet(int, double)"], ["boolean", "com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)", "public final boolean compareAndSet(int, double, double)"], ["boolean", "com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)", "public final boolean weakCompareAndSet(int, double, double)"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)", "public final double getAndAdd(int, double)"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)", "public double addAndGet(int, double)"], ["java.lang.String", "com.google.common.util.concurrent.AtomicDoubleArray.toString()", "public java.lang.String toString()"], ["java.lang.Long", "com.google.common.util.concurrent.AtomicLongMap$1.apply(java.util.concurrent.atomic.AtomicLong)", "public java.lang.Long apply(java.util.concurrent.atomic.AtomicLong)"], ["java.lang.Object", "com.google.common.util.concurrent.AtomicLongMap$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["<K> com.google.common.util.concurrent.AtomicLongMap<K>", "com.google.common.util.concurrent.AtomicLongMap.create()", "public static <K> com.google.common.util.concurrent.AtomicLongMap<K> create()"], ["<K> com.google.common.util.concurrent.AtomicLongMap<K>", "com.google.common.util.concurrent.AtomicLongMap.create(java.util.Map<? extends K, ? extends java.lang.Long>)", "public static <K> com.google.common.util.concurrent.AtomicLongMap<K> create(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.get(K)", "public long get(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.incrementAndGet(K)", "public long incrementAndGet(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.decrementAndGet(K)", "public long decrementAndGet(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.addAndGet(K, long)", "public long addAndGet(K, long)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndIncrement(K)", "public long getAndIncrement(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndDecrement(K)", "public long getAndDecrement(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndAdd(K, long)", "public long getAndAdd(K, long)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.put(K, long)", "public long put(K, long)"], ["void", "com.google.common.util.concurrent.AtomicLongMap.putAll(java.util.Map<? extends K, ? extends java.lang.Long>)", "public void putAll(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.remove(K)", "public long remove(K)"], ["void", "com.google.common.util.concurrent.AtomicLongMap.removeAllZeros()", "public void removeAllZeros()"], ["long", "com.google.common.util.concurrent.AtomicLongMap.sum()", "public long sum()"], ["java.util.Map<K, java.lang.Long>", "com.google.common.util.concurrent.AtomicLongMap.asMap()", "public java.util.Map<K, java.lang.Long> asMap()"], ["boolean", "com.google.common.util.concurrent.AtomicLongMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "com.google.common.util.concurrent.AtomicLongMap.size()", "public int size()"], ["boolean", "com.google.common.util.concurrent.AtomicLongMap.isEmpty()", "public boolean isEmpty()"], ["void", "com.google.common.util.concurrent.AtomicLongMap.clear()", "public void clear()"], ["java.lang.String", "com.google.common.util.concurrent.AtomicLongMap.toString()", "public java.lang.String toString()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "com.google.common.util.concurrent.Atomics.newReference()", "public static <V> java.util.concurrent.atomic.AtomicReference<V> newReference()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "com.google.common.util.concurrent.Atomics.newReference(V)", "public static <V> java.util.concurrent.atomic.AtomicReference<V> newReference(V)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "com.google.common.util.concurrent.Atomics.newReferenceArray(int)", "public static <E> java.util.concurrent.atomic.AtomicReferenceArray<E> newReferenceArray(int)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "com.google.common.util.concurrent.Atomics.newReferenceArray(E[])", "public static <E> java.util.concurrent.atomic.AtomicReferenceArray<E> newReferenceArray(E[])"], ["T", "com.google.common.util.concurrent.Callables$1.call()", "public T call()"], ["T", "com.google.common.util.concurrent.Callables$2.call()", "public T call() throws java.lang.Exception"], ["void", "com.google.common.util.concurrent.Callables$3.run()", "public void run()"], ["<T> java.util.concurrent.Callable<T>", "com.google.common.util.concurrent.Callables.returning(T)", "public static <T> java.util.concurrent.Callable<T> returning(T)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.getLockGraphNode()", "public com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.isAcquiredByCurrentThread()", "public boolean isAcquiredByCurrentThread()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lock()", "public void lock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lockInterruptibly()", "public void lockInterruptibly() throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock()", "public boolean tryLock()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.unlock()", "public void unlock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lock()", "public void lock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lockInterruptibly()", "public void lockInterruptibly() throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock()", "public boolean tryLock()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.unlock()", "public void unlock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()", "public java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()", "public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.getLockGraphNode()", "public com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.isAcquiredByCurrentThread()", "public boolean isAcquiredByCurrentThread()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()", "public java.util.concurrent.locks.Lock writeLock()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()", "public java.util.concurrent.locks.Lock readLock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lock()", "public void lock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lockInterruptibly()", "public void lockInterruptibly() throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock()", "public boolean tryLock()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.unlock()", "public void unlock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)", "public void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)", "public void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)", "public void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[]", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies.values()", "public static com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] values()"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies.valueOf(java.lang.String)", "public static com.google.common.util.concurrent.CycleDetectingLockFactory$Policies valueOf(java.lang.String)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getConflictingStackTrace()", "public com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace()"], ["java.lang.String", "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getMessage()", "public java.lang.String getMessage()"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(E)"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E, boolean)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(E, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(E)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E, boolean)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(E, boolean)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory", "com.google.common.util.concurrent.CycleDetectingLockFactory.newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)", "public static com.google.common.util.concurrent.CycleDetectingLockFactory newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String, boolean)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String, boolean)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String, boolean)"], ["<E extends java.lang.Enum<E>> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E>", "com.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering(java.lang.Class<E>, com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)", "public static <E extends java.lang.Enum<E>> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E> newInstanceWithExplicitOrdering(java.lang.Class<E>, com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["com.google.common.util.concurrent.ExecutionError", "com.google.common.util.concurrent.ExecutionError(java.lang.String, java.lang.Error)", "public com.google.common.util.concurrent.ExecutionError(java.lang.String, java.lang.Error)"], ["com.google.common.util.concurrent.ExecutionError", "com.google.common.util.concurrent.ExecutionError(java.lang.Error)", "public com.google.common.util.concurrent.ExecutionError(java.lang.Error)"], ["com.google.common.util.concurrent.ExecutionList", "com.google.common.util.concurrent.ExecutionList()", "public com.google.common.util.concurrent.ExecutionList()"], ["void", "com.google.common.util.concurrent.ExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)", "public void add(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ExecutionList.execute()", "public void execute()"], ["com.google.common.util.concurrent.FakeTimeLimiter", "com.google.common.util.concurrent.FakeTimeLimiter()", "public com.google.common.util.concurrent.FakeTimeLimiter()"], ["<T> T", "com.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)", "public <T> T newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.FakeTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean)", "public <T> T callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception"], ["int", "com.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>, int)", "public int drainTo(java.util.Collection<? super E>, int)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>)", "public int drainTo(java.util.Collection<? super E>)"], ["boolean", "com.google.common.util.concurrent.ForwardingBlockingQueue.offer(E, long, java.util.concurrent.TimeUnit)", "public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "com.google.common.util.concurrent.ForwardingBlockingQueue.poll(long, java.util.concurrent.TimeUnit)", "public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "com.google.common.util.concurrent.ForwardingBlockingQueue.put(E)", "public void put(E) throws java.lang.InterruptedException"], ["int", "com.google.common.util.concurrent.ForwardingBlockingQueue.remainingCapacity()", "public int remainingCapacity()"], ["E", "com.google.common.util.concurrent.ForwardingBlockingQueue.take()", "public E take() throws java.lang.InterruptedException"], ["com.google.common.util.concurrent.ForwardingCheckedFuture", "com.google.common.util.concurrent.ForwardingCheckedFuture()", "public com.google.common.util.concurrent.ForwardingCheckedFuture()"], ["V", "com.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet()", "public V checkedGet() throws X"], ["V", "com.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit) throws java/util/concurrent/TimeoutException, X"], ["boolean", "com.google.common.util.concurrent.ForwardingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> T", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["<T> T", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["boolean", "com.google.common.util.concurrent.ForwardingExecutorService.isShutdown()", "public boolean isShutdown()"], ["boolean", "com.google.common.util.concurrent.ForwardingExecutorService.isTerminated()", "public boolean isTerminated()"], ["void", "com.google.common.util.concurrent.ForwardingExecutorService.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "com.google.common.util.concurrent.ForwardingExecutorService.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["void", "com.google.common.util.concurrent.ForwardingExecutorService.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.ForwardingExecutorService.submit(java.util.concurrent.Callable<T>)", "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future<?>", "com.google.common.util.concurrent.ForwardingExecutorService.submit(java.lang.Runnable)", "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.ForwardingExecutorService.submit(java.lang.Runnable, T)", "public <T> java.util.concurrent.Future<T> submit(java.lang.Runnable, T)"], ["boolean", "com.google.common.util.concurrent.ForwardingFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.ForwardingFuture.isCancelled()", "public boolean isCancelled()"], ["boolean", "com.google.common.util.concurrent.ForwardingFuture.isDone()", "public boolean isDone()"], ["V", "com.google.common.util.concurrent.ForwardingFuture.get()", "public V get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["V", "com.google.common.util.concurrent.ForwardingFuture.get(long, java.util.concurrent.TimeUnit)", "public V get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.ForwardingListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable<T>)", "public <T> com.google.common.util.concurrent.ListenableFuture<T> submit(java.util.concurrent.Callable<T>)"], ["com.google.common.util.concurrent.ListenableFuture<?>", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable)", "public com.google.common.util.concurrent.ListenableFuture<?> submit(java.lang.Runnable)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, T)", "public <T> com.google.common.util.concurrent.ListenableFuture<T> submit(java.lang.Runnable, T)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)", "public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable)", "public java.util.concurrent.Future submit(java.lang.Runnable)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable)", "public java.util.concurrent.Future submit(java.util.concurrent.Callable)"], ["void", "com.google.common.util.concurrent.Futures$1$1.run()", "public void run()"], ["void", "com.google.common.util.concurrent.Futures$1.run()", "public void run()"], ["com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures$2.apply(I)", "public com.google.common.util.concurrent.ListenableFuture<O> apply(I)"], ["boolean", "com.google.common.util.concurrent.Futures$3.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.Futures$3.isCancelled()", "public boolean isCancelled()"], ["boolean", "com.google.common.util.concurrent.Futures$3.isDone()", "public boolean isDone()"], ["O", "com.google.common.util.concurrent.Futures$3.get()", "public O get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["O", "com.google.common.util.concurrent.Futures$3.get(long, java.util.concurrent.TimeUnit)", "public O get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["com.google.common.util.concurrent.ListenableFuture<java.lang.Object>", "com.google.common.util.concurrent.Futures$4.apply(com.google.common.util.concurrent.ListenableFuture<java.lang.Object>)", "public com.google.common.util.concurrent.ListenableFuture<java.lang.Object> apply(com.google.common.util.concurrent.ListenableFuture<java.lang.Object>)"], ["com.google.common.util.concurrent.ListenableFuture", "com.google.common.util.concurrent.Futures$4.apply(java.lang.Object)", "public com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) throws java.lang.Exception"], ["void", "com.google.common.util.concurrent.Futures$5.run()", "public void run()"], ["void", "com.google.common.util.concurrent.Futures$6.run()", "public void run()"], ["java.lang.Boolean", "com.google.common.util.concurrent.Futures$7.apply(java.lang.reflect.Constructor<?>)", "public java.lang.Boolean apply(java.lang.reflect.Constructor<?>)"], ["java.lang.Object", "com.google.common.util.concurrent.Futures$7.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.List<V>", "com.google.common.util.concurrent.Futures$8.combine(java.util.List<com.google.common.base.Optional<V>>)", "public java.util.List<V> combine(java.util.List<com.google.common.base.Optional<V>>)"], ["java.lang.Object", "com.google.common.util.concurrent.Futures$8.combine(java.util.List)", "public java.lang.Object combine(java.util.List)"], ["void", "com.google.common.util.concurrent.Futures$ChainingListenableFuture$1.run()", "public void run()"], ["boolean", "com.google.common.util.concurrent.Futures$ChainingListenableFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "com.google.common.util.concurrent.Futures$ChainingListenableFuture.run()", "public void run()"], ["void", "com.google.common.util.concurrent.Futures$CombinedFuture$1.run()", "public void run()"], ["void", "com.google.common.util.concurrent.Futures$CombinedFuture$2.run()", "public void run()"], ["boolean", "com.google.common.util.concurrent.Futures$CombinerFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "com.google.common.util.concurrent.Futures$FallbackFuture$1$1.onSuccess(V)", "public void onSuccess(V)"], ["void", "com.google.common.util.concurrent.Futures$FallbackFuture$1$1.onFailure(java.lang.Throwable)", "public void onFailure(java.lang.Throwable)"], ["void", "com.google.common.util.concurrent.Futures$FallbackFuture$1.onSuccess(V)", "public void onSuccess(V)"], ["void", "com.google.common.util.concurrent.Futures$FallbackFuture$1.onFailure(java.lang.Throwable)", "public void onFailure(java.lang.Throwable)"], ["boolean", "com.google.common.util.concurrent.Futures$FallbackFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.Futures$ImmediateCancelledFuture.isCancelled()", "public boolean isCancelled()"], ["V", "com.google.common.util.concurrent.Futures$ImmediateCancelledFuture.get()", "public V get()"], ["V", "com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.get()", "public V get() throws java.util.concurrent.ExecutionException"], ["V", "com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.checkedGet()", "public V checkedGet() throws X"], ["V", "com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit) throws X"], ["V", "com.google.common.util.concurrent.Futures$ImmediateFailedFuture.get()", "public V get() throws java.util.concurrent.ExecutionException"], ["void", "com.google.common.util.concurrent.Futures$ImmediateFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["boolean", "com.google.common.util.concurrent.Futures$ImmediateFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["V", "com.google.common.util.concurrent.Futures$ImmediateFuture.get(long, java.util.concurrent.TimeUnit)", "public V get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException"], ["boolean", "com.google.common.util.concurrent.Futures$ImmediateFuture.isCancelled()", "public boolean isCancelled()"], ["boolean", "com.google.common.util.concurrent.Futures$ImmediateFuture.isDone()", "public boolean isDone()"], ["V", "com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.get()", "public V get()"], ["V", "com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.checkedGet()", "public V checkedGet()"], ["V", "com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit)"], ["V", "com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture.get()", "public V get()"], ["void", "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1.onSuccess(V)", "public void onSuccess(V)"], ["void", "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1.onFailure(java.lang.Throwable)", "public void onFailure(java.lang.Throwable)"], ["T", "com.google.common.util.concurrent.Futures$WrappedCombiner.call()", "public T call() throws java.lang.Exception"], ["<V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X>", "com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.base.Function<? super java.lang.Exception, X>)", "public static <V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X> makeChecked(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.base.Function<? super java.lang.Exception, X>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.immediateFuture(V)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> immediateFuture(V)"], ["<V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X>", "com.google.common.util.concurrent.Futures.immediateCheckedFuture(V)", "public static <V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X> immediateCheckedFuture(V)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.immediateFailedFuture(java.lang.Throwable)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> immediateFailedFuture(java.lang.Throwable)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.immediateCancelledFuture()", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> immediateCancelledFuture()"], ["<V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X>", "com.google.common.util.concurrent.Futures.immediateFailedCheckedFuture(X)", "public static <V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X> immediateFailedCheckedFuture(X)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.withFallback(com.google.common.util.concurrent.ListenableFuture<? extends V>, com.google.common.util.concurrent.FutureFallback<? extends V>)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> withFallback(com.google.common.util.concurrent.ListenableFuture<? extends V>, com.google.common.util.concurrent.FutureFallback<? extends V>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.withFallback(com.google.common.util.concurrent.ListenableFuture<? extends V>, com.google.common.util.concurrent.FutureFallback<? extends V>, java.util.concurrent.Executor)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> withFallback(com.google.common.util.concurrent.ListenableFuture<? extends V>, com.google.common.util.concurrent.FutureFallback<? extends V>, java.util.concurrent.Executor)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>)", "public static <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)", "public static <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>)", "public static <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)", "public static <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> java.util.concurrent.Future<O>", "com.google.common.util.concurrent.Futures.lazyTransform(java.util.concurrent.Future<I>, com.google.common.base.Function<? super I, ? extends O>)", "public static <I, O> java.util.concurrent.Future<O> lazyTransform(java.util.concurrent.Future<I>, com.google.common.base.Function<? super I, ? extends O>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.dereference(com.google.common.util.concurrent.ListenableFuture<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> dereference(com.google.common.util.concurrent.ListenableFuture<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.allAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)", "public static <V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>> allAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.allAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)", "public static <V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>> allAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture<V>)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture<V>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.successfulAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)", "public static <V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>> successfulAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.successfulAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)", "public static <V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>> successfulAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<T> com.google.common.collect.ImmutableList<com.google.common.util.concurrent.ListenableFuture<T>>", "com.google.common.util.concurrent.Futures.inCompletionOrder(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends T>>)", "public static <T> com.google.common.collect.ImmutableList<com.google.common.util.concurrent.ListenableFuture<T>> inCompletionOrder(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends T>>)"], ["<V> void", "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>)", "public static <V> void addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>)"], ["<V> void", "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)", "public static <V> void addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)"], ["<V, X extends java.lang.Exception> V", "com.google.common.util.concurrent.Futures.get(java.util.concurrent.Future<V>, java.lang.Class<X>)", "public static <V, X extends java.lang.Exception> V get(java.util.concurrent.Future<V>, java.lang.Class<X>) throws X"], ["<V, X extends java.lang.Exception> V", "com.google.common.util.concurrent.Futures.get(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit, java.lang.Class<X>)", "public static <V, X extends java.lang.Exception> V get(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit, java.lang.Class<X>) throws X"], ["<V> V", "com.google.common.util.concurrent.Futures.getUnchecked(java.util.concurrent.Future<V>)", "public static <V> V getUnchecked(java.util.concurrent.Future<V>)"], ["void", "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1.run()", "public void run()"], ["void", "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> listenInPoolThread(java.util.concurrent.Future<V>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)", "public static <V> com.google.common.util.concurrent.ListenableFuture<V> listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)"], ["<V> com.google.common.util.concurrent.ListenableFutureTask<V>", "com.google.common.util.concurrent.ListenableFutureTask.create(java.util.concurrent.Callable<V>)", "public static <V> com.google.common.util.concurrent.ListenableFutureTask<V> create(java.util.concurrent.Callable<V>)"], ["<V> com.google.common.util.concurrent.ListenableFutureTask<V>", "com.google.common.util.concurrent.ListenableFutureTask.create(java.lang.Runnable, V)", "public static <V> com.google.common.util.concurrent.ListenableFutureTask<V> create(java.lang.Runnable, V)"], ["void", "com.google.common.util.concurrent.ListenableFutureTask.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ListenerCallQueue.run()", "public void run()"], ["com.google.common.util.concurrent.Monitor", "com.google.common.util.concurrent.Monitor()", "public com.google.common.util.concurrent.Monitor()"], ["com.google.common.util.concurrent.Monitor", "com.google.common.util.concurrent.Monitor(boolean)", "public com.google.common.util.concurrent.Monitor(boolean)"], ["void", "com.google.common.util.concurrent.Monitor.enter()", "public void enter()"], ["void", "com.google.common.util.concurrent.Monitor.enterInterruptibly()", "public void enterInterruptibly() throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.Monitor.enter(long, java.util.concurrent.TimeUnit)", "public boolean enter(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterInterruptibly(long, java.util.concurrent.TimeUnit)", "public boolean enterInterruptibly(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.Monitor.tryEnter()", "public boolean tryEnter()"], ["void", "com.google.common.util.concurrent.Monitor.enterWhen(com.google.common.util.concurrent.Monitor$Guard)", "public void enterWhen(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException"], ["void", "com.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)", "public void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterWhen(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIf(com.google.common.util.concurrent.Monitor$Guard)", "public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard)", "public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIf(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.Monitor.tryEnterIf(com.google.common.util.concurrent.Monitor$Guard)", "public boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard)"], ["void", "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard)", "public void waitFor(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException"], ["void", "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)", "public void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean waitFor(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.Monitor.leave()", "public void leave()"], ["boolean", "com.google.common.util.concurrent.Monitor.isFair()", "public boolean isFair()"], ["boolean", "com.google.common.util.concurrent.Monitor.isOccupied()", "public boolean isOccupied()"], ["boolean", "com.google.common.util.concurrent.Monitor.isOccupiedByCurrentThread()", "public boolean isOccupiedByCurrentThread()"], ["int", "com.google.common.util.concurrent.Monitor.getOccupiedDepth()", "public int getOccupiedDepth()"], ["int", "com.google.common.util.concurrent.Monitor.getQueueLength()", "public int getQueueLength()"], ["boolean", "com.google.common.util.concurrent.Monitor.hasQueuedThreads()", "public boolean hasQueuedThreads()"], ["boolean", "com.google.common.util.concurrent.Monitor.hasQueuedThread(java.lang.Thread)", "public boolean hasQueuedThread(java.lang.Thread)"], ["boolean", "com.google.common.util.concurrent.Monitor.hasWaiters(com.google.common.util.concurrent.Monitor$Guard)", "public boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard)"], ["int", "com.google.common.util.concurrent.Monitor.getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard)", "public int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard)"], ["void", "com.google.common.util.concurrent.MoreExecutors$1.run()", "public void run()"], ["void", "com.google.common.util.concurrent.MoreExecutors$2.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.MoreExecutors$Application$1.run()", "public void run()"], ["com.google.common.util.concurrent.MoreExecutors$DirectExecutor[]", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.values()", "public static com.google.common.util.concurrent.MoreExecutors$DirectExecutor[] values()"], ["com.google.common.util.concurrent.MoreExecutors$DirectExecutor", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.valueOf(java.lang.String)", "public static com.google.common.util.concurrent.MoreExecutors$DirectExecutor valueOf(java.lang.String)"], ["void", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown()", "public boolean isShutdown()"], ["void", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()", "public boolean isTerminated()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isShutdown()", "public boolean isShutdown()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isTerminated()", "public boolean isTerminated()"], ["void", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["void", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask(com.google.common.util.concurrent.ListenableFuture<V>, java.util.concurrent.ScheduledFuture<?>)", "public com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask(com.google.common.util.concurrent.ListenableFuture<V>, java.util.concurrent.ScheduledFuture<?>)"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.cancel(boolean)", "public boolean cancel(boolean)"], ["long", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.getDelay(java.util.concurrent.TimeUnit)", "public long getDelay(java.util.concurrent.TimeUnit)"], ["int", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.util.concurrent.Delayed)", "public int compareTo(java.util.concurrent.Delayed)"], ["int", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask(java.lang.Runnable)", "public com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask.run()", "public void run()"], ["com.google.common.util.concurrent.ListenableScheduledFuture<?>", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public com.google.common.util.concurrent.ListenableScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> com.google.common.util.concurrent.ListenableScheduledFuture<V>", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)", "public <V> com.google.common.util.concurrent.ListenableScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.ListenableScheduledFuture<?>", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public com.google.common.util.concurrent.ListenableScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.ListenableScheduledFuture<?>", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public com.google.common.util.concurrent.ListenableScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)", "public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)", "public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)", "public static void addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)", "public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)"], ["java.util.concurrent.ScheduledExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)", "public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)"], ["com.google.common.util.concurrent.ListeningExecutorService", "com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()", "public static com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()"], ["com.google.common.util.concurrent.ListeningExecutorService", "com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()", "public static com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService()"], ["java.util.concurrent.Executor", "com.google.common.util.concurrent.MoreExecutors.directExecutor()", "public static java.util.concurrent.Executor directExecutor()"], ["com.google.common.util.concurrent.ListeningExecutorService", "com.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ExecutorService)", "public static com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)"], ["com.google.common.util.concurrent.ListeningScheduledExecutorService", "com.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ScheduledExecutorService)", "public static com.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService)"], ["java.util.concurrent.ThreadFactory", "com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()", "public static java.util.concurrent.ThreadFactory platformThreadFactory()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)", "public static boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.RateLimiter", "com.google.common.util.concurrent.RateLimiter.create(double)", "public static com.google.common.util.concurrent.RateLimiter create(double)"], ["com.google.common.util.concurrent.RateLimiter", "com.google.common.util.concurrent.RateLimiter.create(double, long, java.util.concurrent.TimeUnit)", "public static com.google.common.util.concurrent.RateLimiter create(double, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.RateLimiter.setRate(double)", "public final void setRate(double)"], ["double", "com.google.common.util.concurrent.RateLimiter.getRate()", "public final double getRate()"], ["double", "com.google.common.util.concurrent.RateLimiter.acquire()", "public double acquire()"], ["double", "com.google.common.util.concurrent.RateLimiter.acquire(int)", "public double acquire(int)"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire(long, java.util.concurrent.TimeUnit)", "public boolean tryAcquire(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire(int)", "public boolean tryAcquire(int)"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire()", "public boolean tryAcquire()"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire(int, long, java.util.concurrent.TimeUnit)", "public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.RateLimiter.toString()", "public java.lang.String toString()"], ["void", "com.google.common.util.concurrent.Runnables$1.run()", "public void run()"], ["java.lang.Runnable", "com.google.common.util.concurrent.Runnables.doNothing()", "public static java.lang.Runnable doNothing()"], ["java.lang.String", "com.google.common.util.concurrent.SerializingExecutor$1.toString()", "public java.lang.String toString()"], ["void", "com.google.common.util.concurrent.SerializingExecutor$TaskRunner.run()", "public void run()"], ["com.google.common.util.concurrent.SerializingExecutor", "com.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor)", "public com.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.SerializingExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["com.google.common.util.concurrent.Service$Listener", "com.google.common.util.concurrent.Service$Listener()", "public com.google.common.util.concurrent.Service$Listener()"], ["void", "com.google.common.util.concurrent.Service$Listener.starting()", "public void starting()"], ["void", "com.google.common.util.concurrent.Service$Listener.running()", "public void running()"], ["void", "com.google.common.util.concurrent.Service$Listener.stopping(com.google.common.util.concurrent.Service$State)", "public void stopping(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.Service$Listener.terminated(com.google.common.util.concurrent.Service$State)", "public void terminated(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.Service$Listener.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)", "public void failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["com.google.common.util.concurrent.Service$State[]", "com.google.common.util.concurrent.Service$State.values()", "public static com.google.common.util.concurrent.Service$State[] values()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.Service$State.valueOf(java.lang.String)", "public static com.google.common.util.concurrent.Service$State valueOf(java.lang.String)"], ["com.google.common.util.concurrent.ServiceManager$Listener", "com.google.common.util.concurrent.ServiceManager$Listener()", "public com.google.common.util.concurrent.ServiceManager$Listener()"], ["void", "com.google.common.util.concurrent.ServiceManager$Listener.healthy()", "public void healthy()"], ["void", "com.google.common.util.concurrent.ServiceManager$Listener.stopped()", "public void stopped()"], ["void", "com.google.common.util.concurrent.ServiceManager$Listener.failure(com.google.common.util.concurrent.Service)", "public void failure(com.google.common.util.concurrent.Service)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.starting()", "public void starting()"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.running()", "public void running()"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.stopping(com.google.common.util.concurrent.Service$State)", "public void stopping(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.terminated(com.google.common.util.concurrent.Service$State)", "public void terminated(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)", "public void failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.util.Set<com.google.common.util.concurrent.Service>", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.get()", "public java.util.Set<com.google.common.util.concurrent.Service> get()"], ["java.lang.Object", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.get()", "public java.lang.Object get()"], ["boolean", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$3.isSatisfied()", "public boolean isSatisfied()"], ["java.lang.Long", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$4.apply(java.util.Map$Entry<com.google.common.util.concurrent.Service, java.lang.Long>)", "public java.lang.Long apply(java.util.Map$Entry<com.google.common.util.concurrent.Service, java.lang.Long>)"], ["java.lang.Object", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.google.common.util.concurrent.ServiceManager", "com.google.common.util.concurrent.ServiceManager(java.lang.Iterable<? extends com.google.common.util.concurrent.Service>)", "public com.google.common.util.concurrent.ServiceManager(java.lang.Iterable<? extends com.google.common.util.concurrent.Service>)"], ["void", "com.google.common.util.concurrent.ServiceManager.addListener(com.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)", "public void addListener(com.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ServiceManager.addListener(com.google.common.util.concurrent.ServiceManager$Listener)", "public void addListener(com.google.common.util.concurrent.ServiceManager$Listener)"], ["com.google.common.util.concurrent.ServiceManager", "com.google.common.util.concurrent.ServiceManager.startAsync()", "public com.google.common.util.concurrent.ServiceManager startAsync()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitHealthy()", "public void awaitHealthy()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitHealthy(long, java.util.concurrent.TimeUnit)", "public void awaitHealthy(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["com.google.common.util.concurrent.ServiceManager", "com.google.common.util.concurrent.ServiceManager.stopAsync()", "public com.google.common.util.concurrent.ServiceManager stopAsync()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitStopped()", "public void awaitStopped()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitStopped(long, java.util.concurrent.TimeUnit)", "public void awaitStopped(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["boolean", "com.google.common.util.concurrent.ServiceManager.isHealthy()", "public boolean isHealthy()"], ["com.google.common.collect.ImmutableMultimap<com.google.common.util.concurrent.Service$State, com.google.common.util.concurrent.Service>", "com.google.common.util.concurrent.ServiceManager.servicesByState()", "public com.google.common.collect.ImmutableMultimap<com.google.common.util.concurrent.Service$State, com.google.common.util.concurrent.Service> servicesByState()"], ["com.google.common.collect.ImmutableMap<com.google.common.util.concurrent.Service, java.lang.Long>", "com.google.common.util.concurrent.ServiceManager.startupTimes()", "public com.google.common.collect.ImmutableMap<com.google.common.util.concurrent.Service, java.lang.Long> startupTimes()"], ["java.lang.String", "com.google.common.util.concurrent.ServiceManager.toString()", "public java.lang.String toString()"], ["<V> com.google.common.util.concurrent.SettableFuture<V>", "com.google.common.util.concurrent.SettableFuture.create()", "public static <V> com.google.common.util.concurrent.SettableFuture<V> create()"], ["boolean", "com.google.common.util.concurrent.SettableFuture.set(V)", "public boolean set(V)"], ["boolean", "com.google.common.util.concurrent.SettableFuture.setException(java.lang.Throwable)", "public boolean setException(java.lang.Throwable)"], ["java.lang.Object", "com.google.common.util.concurrent.SimpleTimeLimiter$1$1.call()", "public java.lang.Object call() throws java.lang.Exception"], ["java.lang.Object", "com.google.common.util.concurrent.SimpleTimeLimiter$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["com.google.common.util.concurrent.SimpleTimeLimiter", "com.google.common.util.concurrent.SimpleTimeLimiter(java.util.concurrent.ExecutorService)", "public com.google.common.util.concurrent.SimpleTimeLimiter(java.util.concurrent.ExecutorService)"], ["com.google.common.util.concurrent.SimpleTimeLimiter", "com.google.common.util.concurrent.SimpleTimeLimiter()", "public com.google.common.util.concurrent.SimpleTimeLimiter()"], ["<T> T", "com.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)", "public <T> T newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean)", "public <T> T callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.Striped$1.get()", "public java.util.concurrent.locks.Lock get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$1.get()", "public java.lang.Object get()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.Striped$2.get()", "public java.util.concurrent.locks.Lock get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$2.get()", "public java.lang.Object get()"], ["java.util.concurrent.Semaphore", "com.google.common.util.concurrent.Striped$3.get()", "public java.util.concurrent.Semaphore get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$3.get()", "public java.lang.Object get()"], ["java.util.concurrent.Semaphore", "com.google.common.util.concurrent.Striped$4.get()", "public java.util.concurrent.Semaphore get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$4.get()", "public java.lang.Object get()"], ["java.util.concurrent.locks.ReadWriteLock", "com.google.common.util.concurrent.Striped$5.get()", "public java.util.concurrent.locks.ReadWriteLock get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$5.get()", "public java.lang.Object get()"], ["L", "com.google.common.util.concurrent.Striped$CompactStriped.getAt(int)", "public L getAt(int)"], ["int", "com.google.common.util.concurrent.Striped$CompactStriped.size()", "public int size()"], ["L", "com.google.common.util.concurrent.Striped$LargeLazyStriped.getAt(int)", "public L getAt(int)"], ["int", "com.google.common.util.concurrent.Striped$LargeLazyStriped.size()", "public int size()"], ["L", "com.google.common.util.concurrent.Striped$PowerOfTwoStriped.get(java.lang.Object)", "public final L get(java.lang.Object)"], ["L", "com.google.common.util.concurrent.Striped$SmallLazyStriped.getAt(int)", "public L getAt(int)"], ["int", "com.google.common.util.concurrent.Striped$SmallLazyStriped.size()", "public int size()"], ["java.lang.Iterable<L>", "com.google.common.util.concurrent.Striped.bulkGet(java.lang.Iterable<?>)", "public java.lang.Iterable<L> bulkGet(java.lang.Iterable<?>)"], ["com.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock>", "com.google.common.util.concurrent.Striped.lock(int)", "public static com.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock> lock(int)"], ["com.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock>", "com.google.common.util.concurrent.Striped.lazyWeakLock(int)", "public static com.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock> lazyWeakLock(int)"], ["com.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore>", "com.google.common.util.concurrent.Striped.semaphore(int, int)", "public static com.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore> semaphore(int, int)"], ["com.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore>", "com.google.common.util.concurrent.Striped.lazyWeakSemaphore(int, int)", "public static com.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore> lazyWeakSemaphore(int, int)"], ["com.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock>", "com.google.common.util.concurrent.Striped.readWriteLock(int)", "public static com.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock> readWriteLock(int)"], ["com.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock>", "com.google.common.util.concurrent.Striped.lazyWeakReadWriteLock(int)", "public static com.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock> lazyWeakReadWriteLock(int)"], ["java.lang.Thread", "com.google.common.util.concurrent.ThreadFactoryBuilder$1.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder()", "public com.google.common.util.concurrent.ThreadFactoryBuilder()"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setNameFormat(java.lang.String)", "public com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setDaemon(boolean)", "public com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setPriority(int)", "public com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)", "public com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setThreadFactory(java.util.concurrent.ThreadFactory)", "public com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)"], ["java.util.concurrent.ThreadFactory", "com.google.common.util.concurrent.ThreadFactoryBuilder.build()", "public java.util.concurrent.ThreadFactory build()"], ["void", "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter.uncaughtException(java.lang.Thread, java.lang.Throwable)", "public void uncaughtException(java.lang.Thread, java.lang.Throwable)"], ["java.lang.Thread$UncaughtExceptionHandler", "com.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit()", "public static java.lang.Thread$UncaughtExceptionHandler systemExit()"], ["com.google.common.util.concurrent.UncheckedExecutionException", "com.google.common.util.concurrent.UncheckedExecutionException(java.lang.String, java.lang.Throwable)", "public com.google.common.util.concurrent.UncheckedExecutionException(java.lang.String, java.lang.Throwable)"], ["com.google.common.util.concurrent.UncheckedExecutionException", "com.google.common.util.concurrent.UncheckedExecutionException(java.lang.Throwable)", "public com.google.common.util.concurrent.UncheckedExecutionException(java.lang.Throwable)"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException()", "public com.google.common.util.concurrent.UncheckedTimeoutException()"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String)", "public com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String)"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.Throwable)", "public com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.Throwable)"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String, java.lang.Throwable)", "public com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String, java.lang.Throwable)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch)", "public static void awaitUninterruptibly(java.util.concurrent.CountDownLatch)"], ["boolean", "com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)", "public static boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread)", "public static void joinUninterruptibly(java.lang.Thread)"], ["<V> V", "com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>)", "public static <V> V getUninterruptibly(java.util.concurrent.Future<V>) throws java.util.concurrent.ExecutionException"], ["<V> V", "com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit)", "public static <V> V getUninterruptibly(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)", "public static void joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)"], ["<E> E", "com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly(java.util.concurrent.BlockingQueue<E>)", "public static <E> E takeUninterruptibly(java.util.concurrent.BlockingQueue<E>)"], ["<E> void", "com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly(java.util.concurrent.BlockingQueue<E>, E)", "public static <E> void putUninterruptibly(java.util.concurrent.BlockingQueue<E>, E)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(long, java.util.concurrent.TimeUnit)", "public static void sleepUninterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)", "public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)", "public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.WrappingExecutorService$1.run()", "public void run()"], ["void", "com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable)", "public final void execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.WrappingExecutorService.submit(java.util.concurrent.Callable<T>)", "public final <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future<?>", "com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable)", "public final java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable, T)", "public final <T> java.util.concurrent.Future<T> submit(java.lang.Runnable, T)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public final <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public final <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> T", "com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public final <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["<T> T", "com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public final <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "com.google.common.util.concurrent.WrappingExecutorService.shutdown()", "public final void shutdown()"], ["java.util.List<java.lang.Runnable>", "com.google.common.util.concurrent.WrappingExecutorService.shutdownNow()", "public final java.util.List<java.lang.Runnable> shutdownNow()"], ["boolean", "com.google.common.util.concurrent.WrappingExecutorService.isShutdown()", "public final boolean isShutdown()"], ["boolean", "com.google.common.util.concurrent.WrappingExecutorService.isTerminated()", "public final boolean isTerminated()"], ["boolean", "com.google.common.util.concurrent.WrappingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public final boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["java.util.concurrent.ScheduledFuture<?>", "com.google.common.util.concurrent.WrappingScheduledExecutorService.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public final java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.concurrent.ScheduledFuture<V>", "com.google.common.util.concurrent.WrappingScheduledExecutorService.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)", "public final <V> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture<?>", "com.google.common.util.concurrent.WrappingScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public final java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture<?>", "com.google.common.util.concurrent.WrappingScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public final java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["com.google.common.escape.Escaper", "com.google.common.xml.XmlEscapers.xmlContentEscaper()", "public static com.google.common.escape.Escaper xmlContentEscaper()"], ["com.google.common.escape.Escaper", "com.google.common.xml.XmlEscapers.xmlAttributeEscaper()", "public static com.google.common.escape.Escaper xmlAttributeEscaper()"], ["com.google.thirdparty.publicsuffix.PublicSuffixType[]", "com.google.thirdparty.publicsuffix.PublicSuffixType.values()", "public static com.google.thirdparty.publicsuffix.PublicSuffixType[] values()"], ["com.google.thirdparty.publicsuffix.PublicSuffixType", "com.google.thirdparty.publicsuffix.PublicSuffixType.valueOf(java.lang.String)", "public static com.google.thirdparty.publicsuffix.PublicSuffixType valueOf(java.lang.String)"]]}