{"jetty-server-9.2.4.v20141103.jar": [["org.eclipse.jetty.server.HomeBaseWarning", "org.eclipse.jetty.server.HomeBaseWarning()", "public org.eclipse.jetty.server.HomeBaseWarning()"], ["org.eclipse.jetty.server.Server$DateField", "org.eclipse.jetty.server.Server$DateField(long, org.eclipse.jetty.http.HttpField)", "public org.eclipse.jetty.server.Server$DateField(long, org.eclipse.jetty.http.HttpField)"], ["int", "org.eclipse.jetty.server.ResourceCache$1.compare(org.eclipse.jetty.server.ResourceCache$Content, org.eclipse.jetty.server.ResourceCache$Content)", "public int compare(org.eclipse.jetty.server.ResourceCache$Content, org.eclipse.jetty.server.ResourceCache$Content)"], ["int", "org.eclipse.jetty.server.ResourceCache$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$4.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Request$MultiPartCleanerListener", "org.eclipse.jetty.server.Request$MultiPartCleanerListener()", "public org.eclipse.jetty.server.Request$MultiPartCleanerListener()"], ["void", "org.eclipse.jetty.server.Request$MultiPartCleanerListener.requestDestroyed(javax.servlet.ServletRequestEvent)", "public void requestDestroyed(javax.servlet.ServletRequestEvent)"], ["void", "org.eclipse.jetty.server.Request$MultiPartCleanerListener.requestInitialized(javax.servlet.ServletRequestEvent)", "public void requestInitialized(javax.servlet.ServletRequestEvent)"], ["org.eclipse.jetty.server.ResourceCache", "org.eclipse.jetty.server.ResourceCache(org.eclipse.jetty.server.ResourceCache, org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, boolean, boolean)", "public org.eclipse.jetty.server.ResourceCache(org.eclipse.jetty.server.ResourceCache, org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, boolean, boolean)"], ["int", "org.eclipse.jetty.server.ResourceCache.getCachedSize()", "public int getCachedSize()"], ["int", "org.eclipse.jetty.server.ResourceCache.getCachedFiles()", "public int getCachedFiles()"], ["int", "org.eclipse.jetty.server.ResourceCache.getMaxCachedFileSize()", "public int getMaxCachedFileSize()"], ["void", "org.eclipse.jetty.server.ResourceCache.setMaxCachedFileSize(int)", "public void setMaxCachedFileSize(int)"], ["int", "org.eclipse.jetty.server.ResourceCache.getMaxCacheSize()", "public int getMaxCacheSize()"], ["void", "org.eclipse.jetty.server.ResourceCache.setMaxCacheSize(int)", "public void setMaxCacheSize(int)"], ["int", "org.eclipse.jetty.server.ResourceCache.getMaxCachedFiles()", "public int getMaxCachedFiles()"], ["void", "org.eclipse.jetty.server.ResourceCache.setMaxCachedFiles(int)", "public void setMaxCachedFiles(int)"], ["boolean", "org.eclipse.jetty.server.ResourceCache.isUseFileMappedBuffer()", "public boolean isUseFileMappedBuffer()"], ["void", "org.eclipse.jetty.server.ResourceCache.flushCache()", "public void flushCache()"], ["org.eclipse.jetty.http.HttpContent", "org.eclipse.jetty.server.ResourceCache.lookup(java.lang.String)", "public org.eclipse.jetty.http.HttpContent lookup(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.ResourceCache.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AsyncContextEvent", "org.eclipse.jetty.server.AsyncContextEvent(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.AsyncContextState, org.eclipse.jetty.server.HttpChannelState, org.eclipse.jetty.server.Request, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public org.eclipse.jetty.server.AsyncContextEvent(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.AsyncContextState, org.eclipse.jetty.server.HttpChannelState, org.eclipse.jetty.server.Request, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.AsyncContextEvent.getSuspendedContext()", "public javax.servlet.ServletContext getSuspendedContext()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.AsyncContextEvent.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.AsyncContextEvent.getDispatchContext()", "public javax.servlet.ServletContext getDispatchContext()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.AsyncContextEvent.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.eclipse.jetty.server.AsyncContextEvent.getPath()", "public java.lang.String getPath()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setTimeoutTask(org.eclipse.jetty.util.thread.Scheduler$Task)", "public void setTimeoutTask(org.eclipse.jetty.util.thread.Scheduler$Task)"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.cancelTimeoutTask()", "public void cancelTimeoutTask()"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.AsyncContextEvent.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["java.lang.Throwable", "org.eclipse.jetty.server.AsyncContextEvent.getThrowable()", "public java.lang.Throwable getThrowable()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setThrowable(java.lang.Throwable)", "public void setThrowable(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setDispatchContext(javax.servlet.ServletContext)", "public void setDispatchContext(javax.servlet.ServletContext)"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setDispatchPath(java.lang.String)", "public void setDispatchPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.completed()", "public void completed()"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.AsyncContextEvent.getHttpChannelState()", "public org.eclipse.jetty.server.HttpChannelState getHttpChannelState()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.run()", "public void run()"], ["org.eclipse.jetty.server.HttpConnection", "org.eclipse.jetty.server.HttpConnection.getCurrentConnection()", "public static org.eclipse.jetty.server.HttpConnection getCurrentConnection()"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConnection.getHttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration getHttpConfiguration()"], ["org.eclipse.jetty.server.HttpConnection", "org.eclipse.jetty.server.HttpConnection(org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.server.HttpConnection(org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.HttpConnection.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["org.eclipse.jetty.server.Connector", "org.eclipse.jetty.server.HttpConnection.getConnector()", "public org.eclipse.jetty.server.Connector getConnector()"], ["org.eclipse.jetty.server.HttpChannel<?>", "org.eclipse.jetty.server.HttpConnection.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel<?> getHttpChannel()"], ["org.eclipse.jetty.http.HttpParser", "org.eclipse.jetty.server.HttpConnection.getParser()", "public org.eclipse.jetty.http.HttpParser getParser()"], ["int", "org.eclipse.jetty.server.HttpConnection.getMessagesIn()", "public int getMessagesIn()"], ["int", "org.eclipse.jetty.server.HttpConnection.getMessagesOut()", "public int getMessagesOut()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.HttpConnection.getRequestBuffer()", "public java.nio.ByteBuffer getRequestBuffer()"], ["void", "org.eclipse.jetty.server.HttpConnection.onFillable()", "public void onFillable()"], ["void", "org.eclipse.jetty.server.HttpConnection.completed()", "public void completed()"], ["void", "org.eclipse.jetty.server.HttpConnection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.HttpConnection.onClose()", "public void onClose()"], ["void", "org.eclipse.jetty.server.HttpConnection.run()", "public void run()"], ["void", "org.eclipse.jetty.server.HttpConnection.send(org.eclipse.jetty.http.HttpGenerator$ResponseInfo, java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public void send(org.eclipse.jetty.http.HttpGenerator$ResponseInfo, java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpConnection.send(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public void send(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpConnection.abort()", "public void abort()"], ["org.eclipse.jetty.util.IteratingCallback$Action", "org.eclipse.jetty.server.HttpConnection$SendCallback.process()", "public org.eclipse.jetty.util.IteratingCallback$Action process() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.HttpConnection$SendCallback.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.HttpConnection$SendCallback.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.ServerConnector$ServerConnectorManager.newConnection(java.nio.channels.SocketChannel, org.eclipse.jetty.io.EndPoint, java.lang.Object)", "public org.eclipse.jetty.io.Connection newConnection(java.nio.channels.SocketChannel, org.eclipse.jetty.io.EndPoint, java.lang.Object) throws java.io.IOException"], ["org.eclipse.jetty.server.Iso88591HttpWriter", "org.eclipse.jetty.server.Iso88591HttpWriter(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.Iso88591HttpWriter(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.Iso88591HttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.server.jmx.ServerMBean", "org.eclipse.jetty.server.jmx.ServerMBean(java.lang.Object)", "public org.eclipse.jetty.server.jmx.ServerMBean(java.lang.Object)"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.jmx.ServerMBean.getContexts()", "public org.eclipse.jetty.server.Handler[] getContexts()"], ["long", "org.eclipse.jetty.server.jmx.ServerMBean.getStartupTime()", "public long getStartupTime()"], ["org.eclipse.jetty.server.jmx.AbstractConnectorMBean", "org.eclipse.jetty.server.jmx.AbstractConnectorMBean(java.lang.Object)", "public org.eclipse.jetty.server.jmx.AbstractConnectorMBean(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.jmx.AbstractConnectorMBean.getObjectContextBasis()", "public java.lang.String getObjectContextBasis()"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$3.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.ConnectorStatistics", "org.eclipse.jetty.server.ConnectorStatistics()", "public org.eclipse.jetty.server.ConnectorStatistics()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.onOpened(org.eclipse.jetty.io.Connection)", "public void onOpened(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.onClosed(org.eclipse.jetty.io.Connection)", "public void onClosed(org.eclipse.jetty.io.Connection)"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getBytesIn()", "public int getBytesIn()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getBytesOut()", "public int getBytesOut()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getConnections()", "public int getConnections()"], ["long", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionDurationMax()", "public long getConnectionDurationMax()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionDurationMean()", "public double getConnectionDurationMean()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionDurationStdDev()", "public double getConnectionDurationStdDev()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesIn()", "public int getMessagesIn()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerConnectionMax()", "public int getMessagesInPerConnectionMax()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerConnectionMean()", "public double getMessagesInPerConnectionMean()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerConnectionStdDev()", "public double getMessagesInPerConnectionStdDev()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionsOpen()", "public int getConnectionsOpen()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionsOpenMax()", "public int getConnectionsOpenMax()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOut()", "public int getMessagesOut()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerConnectionMax()", "public int getMessagesOutPerConnectionMax()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerConnectionMean()", "public double getMessagesOutPerConnectionMean()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerConnectionStdDev()", "public double getMessagesOutPerConnectionStdDev()"], ["long", "org.eclipse.jetty.server.ConnectorStatistics.getStartedMillis()", "public long getStartedMillis()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerSecond()", "public int getMessagesInPerSecond()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerSecond()", "public int getMessagesOutPerSecond()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.doStart()", "public void doStart()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.doStop()", "public void doStop()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.reset()", "public void reset()"], ["java.lang.String", "org.eclipse.jetty.server.ConnectorStatistics.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.addToAllConnectors(org.eclipse.jetty.server.Server)", "public static void addToAllConnectors(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration()"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConfiguration(org.eclipse.jetty.server.HttpConfiguration)", "public org.eclipse.jetty.server.HttpConfiguration(org.eclipse.jetty.server.HttpConfiguration)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.addCustomizer(org.eclipse.jetty.server.HttpConfiguration$Customizer)", "public void addCustomizer(org.eclipse.jetty.server.HttpConfiguration$Customizer)"], ["java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer>", "org.eclipse.jetty.server.HttpConfiguration.getCustomizers()", "public java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer> getCustomizers()"], ["<T> T", "org.eclipse.jetty.server.HttpConfiguration.getCustomizer(java.lang.Class<T>)", "public <T> T getCustomizer(java.lang.Class<T>)"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getOutputBufferSize()", "public int getOutputBufferSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getRequestHeaderSize()", "public int getRequestHeaderSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getResponseHeaderSize()", "public int getResponseHeaderSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getHeaderCacheSize()", "public int getHeaderCacheSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getSecurePort()", "public int getSecurePort()"], ["java.lang.String", "org.eclipse.jetty.server.HttpConfiguration.getSecureScheme()", "public java.lang.String getSecureScheme()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSendServerVersion(boolean)", "public void setSendServerVersion(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.getSendServerVersion()", "public boolean getSendServerVersion()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSendXPoweredBy(boolean)", "public void setSendXPoweredBy(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.getSendXPoweredBy()", "public boolean getSendXPoweredBy()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSendDateHeader(boolean)", "public void setSendDateHeader(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.getSendDateHeader()", "public boolean getSendDateHeader()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setCustomizers(java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer>)", "public void setCustomizers(java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer>)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setOutputBufferSize(int)", "public void setOutputBufferSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setRequestHeaderSize(int)", "public void setRequestHeaderSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setResponseHeaderSize(int)", "public void setResponseHeaderSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setHeaderCacheSize(int)", "public void setHeaderCacheSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSecurePort(int)", "public void setSecurePort(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSecureScheme(java.lang.String)", "public void setSecureScheme(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.HttpConfiguration.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.SecureRequestCustomizer", "org.eclipse.jetty.server.SecureRequestCustomizer()", "public org.eclipse.jetty.server.SecureRequestCustomizer()"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)", "public void customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.customize(javax.net.ssl.SSLEngine, org.eclipse.jetty.server.Request)", "public void customize(javax.net.ssl.SSLEngine, org.eclipse.jetty.server.Request)"], ["java.lang.String", "org.eclipse.jetty.server.SecureRequestCustomizer.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpWriter", "org.eclipse.jetty.server.HttpWriter(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.HttpWriter(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.HttpWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.server.ShutdownMonitor", "org.eclipse.jetty.server.ShutdownMonitor.getInstance()", "public static org.eclipse.jetty.server.ShutdownMonitor getInstance()"], ["synchronized", "org.eclipse.jetty.server.ShutdownMonitor.void register(org.eclipse.jetty.util.component.LifeCycle...)", "public static synchronized void register(org.eclipse.jetty.util.component.LifeCycle...)"], ["synchronized", "org.eclipse.jetty.server.ShutdownMonitor.void deregister(org.eclipse.jetty.util.component.LifeCycle)", "public static synchronized void deregister(org.eclipse.jetty.util.component.LifeCycle)"], ["synchronized", "org.eclipse.jetty.server.ShutdownMonitor.boolean isRegistered(org.eclipse.jetty.util.component.LifeCycle)", "public static synchronized boolean isRegistered(org.eclipse.jetty.util.component.LifeCycle)"], ["java.lang.String", "org.eclipse.jetty.server.ShutdownMonitor.getKey()", "public java.lang.String getKey()"], ["int", "org.eclipse.jetty.server.ShutdownMonitor.getPort()", "public int getPort()"], ["java.net.ServerSocket", "org.eclipse.jetty.server.ShutdownMonitor.getServerSocket()", "public java.net.ServerSocket getServerSocket()"], ["boolean", "org.eclipse.jetty.server.ShutdownMonitor.isExitVm()", "public boolean isExitVm()"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setDebug(boolean)", "public void setDebug(boolean)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setExitVm(boolean)", "public void setExitVm(boolean)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setKey(java.lang.String)", "public void setKey(java.lang.String)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setPort(int)", "public void setPort(int)"], ["java.lang.String", "org.eclipse.jetty.server.ShutdownMonitor.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpOutput$AsyncFlush", "org.eclipse.jetty.server.HttpOutput$AsyncFlush(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.HttpOutput$AsyncFlush(org.eclipse.jetty.server.HttpOutput)"], ["java.lang.Object", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["boolean", "org.eclipse.jetty.server.ServerConnector.isOpen()", "public boolean isOpen()"], ["int", "org.eclipse.jetty.server.ServerConnector.getSelectorPriorityDelta()", "public int getSelectorPriorityDelta()"], ["void", "org.eclipse.jetty.server.ServerConnector.setSelectorPriorityDelta(int)", "public void setSelectorPriorityDelta(int)"], ["boolean", "org.eclipse.jetty.server.ServerConnector.isInheritChannel()", "public boolean isInheritChannel()"], ["void", "org.eclipse.jetty.server.ServerConnector.setInheritChannel(boolean)", "public void setInheritChannel(boolean)"], ["void", "org.eclipse.jetty.server.ServerConnector.open()", "public void open() throws java.io.IOException"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.ServerConnector.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["void", "org.eclipse.jetty.server.ServerConnector.close()", "public void close()"], ["void", "org.eclipse.jetty.server.ServerConnector.accept(int)", "public void accept(int) throws java.io.IOException"], ["org.eclipse.jetty.io.SelectorManager", "org.eclipse.jetty.server.ServerConnector.getSelectorManager()", "public org.eclipse.jetty.io.SelectorManager getSelectorManager()"], ["java.lang.Object", "org.eclipse.jetty.server.ServerConnector.getTransport()", "public java.lang.Object getTransport()"], ["int", "org.eclipse.jetty.server.ServerConnector.getLocalPort()", "public int getLocalPort()"], ["int", "org.eclipse.jetty.server.ServerConnector.getSoLingerTime()", "public int getSoLingerTime()"], ["void", "org.eclipse.jetty.server.ServerConnector.setSoLingerTime(int)", "public void setSoLingerTime(int)"], ["int", "org.eclipse.jetty.server.ServerConnector.getAcceptQueueSize()", "public int getAcceptQueueSize()"], ["void", "org.eclipse.jetty.server.ServerConnector.setAcceptQueueSize(int)", "public void setAcceptQueueSize(int)"], ["boolean", "org.eclipse.jetty.server.ServerConnector.getReuseAddress()", "public boolean getReuseAddress()"], ["void", "org.eclipse.jetty.server.ServerConnector.setReuseAddress(boolean)", "public void setReuseAddress(boolean)"], ["org.eclipse.jetty.server.AbstractNetworkConnector", "org.eclipse.jetty.server.AbstractNetworkConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.AbstractNetworkConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.setHost(java.lang.String)", "public void setHost(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNetworkConnector.getHost()", "public java.lang.String getHost()"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.setPort(int)", "public void setPort(int)"], ["int", "org.eclipse.jetty.server.AbstractNetworkConnector.getPort()", "public int getPort()"], ["int", "org.eclipse.jetty.server.AbstractNetworkConnector.getLocalPort()", "public int getLocalPort()"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.open()", "public void open() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.close()", "public void close()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.AbstractNetworkConnector.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNetworkConnector.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.AsyncNCSARequestLog$WriterThread.run()", "public void run()"], ["org.eclipse.jetty.server.AsyncContextState", "org.eclipse.jetty.server.AsyncContextState(org.eclipse.jetty.server.HttpChannelState)", "public org.eclipse.jetty.server.AsyncContextState(org.eclipse.jetty.server.HttpChannelState)"], ["void", "org.eclipse.jetty.server.AsyncContextState.addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["void", "org.eclipse.jetty.server.AsyncContextState.addListener(javax.servlet.AsyncListener)", "public void addListener(javax.servlet.AsyncListener)"], ["void", "org.eclipse.jetty.server.AsyncContextState.complete()", "public void complete()"], ["<T extends javax.servlet.AsyncListener> T", "org.eclipse.jetty.server.AsyncContextState.createListener(java.lang.Class<T>)", "public <T extends javax.servlet.AsyncListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.AsyncContextState.dispatch()", "public void dispatch()"], ["void", "org.eclipse.jetty.server.AsyncContextState.dispatch(java.lang.String)", "public void dispatch(java.lang.String)"], ["void", "org.eclipse.jetty.server.AsyncContextState.dispatch(javax.servlet.ServletContext, java.lang.String)", "public void dispatch(javax.servlet.ServletContext, java.lang.String)"], ["javax.servlet.ServletRequest", "org.eclipse.jetty.server.AsyncContextState.getRequest()", "public javax.servlet.ServletRequest getRequest()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.AsyncContextState.getResponse()", "public javax.servlet.ServletResponse getResponse()"], ["long", "org.eclipse.jetty.server.AsyncContextState.getTimeout()", "public long getTimeout()"], ["boolean", "org.eclipse.jetty.server.AsyncContextState.hasOriginalRequestAndResponse()", "public boolean hasOriginalRequestAndResponse()"], ["void", "org.eclipse.jetty.server.AsyncContextState.setTimeout(long)", "public void setTimeout(long)"], ["void", "org.eclipse.jetty.server.AsyncContextState.start(java.lang.Runnable)", "public void start(java.lang.Runnable)"], ["void", "org.eclipse.jetty.server.AsyncContextState.reset()", "public void reset()"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.AsyncContextState.getHttpChannelState()", "public org.eclipse.jetty.server.HttpChannelState getHttpChannelState()"], ["org.eclipse.jetty.server.AbstractConnector", "org.eclipse.jetty.server.AbstractConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.AbstractConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.AbstractConnector.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["java.util.concurrent.Executor", "org.eclipse.jetty.server.AbstractConnector.getExecutor()", "public java.util.concurrent.Executor getExecutor()"], ["org.eclipse.jetty.io.ByteBufferPool", "org.eclipse.jetty.server.AbstractConnector.getByteBufferPool()", "public org.eclipse.jetty.io.ByteBufferPool getByteBufferPool()"], ["long", "org.eclipse.jetty.server.AbstractConnector.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["int", "org.eclipse.jetty.server.AbstractConnector.getAcceptors()", "public int getAcceptors()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.AbstractConnector.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["void", "org.eclipse.jetty.server.AbstractConnector.join()", "public void join() throws java.lang.InterruptedException"], ["void", "org.eclipse.jetty.server.AbstractConnector.join(long)", "public void join(long) throws java.lang.InterruptedException"], ["org.eclipse.jetty.server.ConnectionFactory", "org.eclipse.jetty.server.AbstractConnector.getConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.ConnectionFactory getConnectionFactory(java.lang.String)"], ["<T> T", "org.eclipse.jetty.server.AbstractConnector.getConnectionFactory(java.lang.Class<T>)", "public <T> T getConnectionFactory(java.lang.Class<T>)"], ["void", "org.eclipse.jetty.server.AbstractConnector.addConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)", "public void addConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.ConnectionFactory", "org.eclipse.jetty.server.AbstractConnector.removeConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.ConnectionFactory removeConnectionFactory(java.lang.String)"], ["java.util.Collection<org.eclipse.jetty.server.ConnectionFactory>", "org.eclipse.jetty.server.AbstractConnector.getConnectionFactories()", "public java.util.Collection<org.eclipse.jetty.server.ConnectionFactory> getConnectionFactories()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setConnectionFactories(java.util.Collection<org.eclipse.jetty.server.ConnectionFactory>)", "public void setConnectionFactories(java.util.Collection<org.eclipse.jetty.server.ConnectionFactory>)"], ["int", "org.eclipse.jetty.server.AbstractConnector.getAcceptorPriorityDelta()", "public int getAcceptorPriorityDelta()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setAcceptorPriorityDelta(int)", "public void setAcceptorPriorityDelta(int)"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.AbstractConnector.getProtocols()", "public java.util.List<java.lang.String> getProtocols()"], ["void", "org.eclipse.jetty.server.AbstractConnector.clearConnectionFactories()", "public void clearConnectionFactories()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector.getDefaultProtocol()", "public java.lang.String getDefaultProtocol()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setDefaultProtocol(java.lang.String)", "public void setDefaultProtocol(java.lang.String)"], ["org.eclipse.jetty.server.ConnectionFactory", "org.eclipse.jetty.server.AbstractConnector.getDefaultConnectionFactory()", "public org.eclipse.jetty.server.ConnectionFactory getDefaultConnectionFactory()"], ["java.util.Collection<org.eclipse.jetty.io.EndPoint>", "org.eclipse.jetty.server.AbstractConnector.getConnectedEndPoints()", "public java.util.Collection<org.eclipse.jetty.io.EndPoint> getConnectedEndPoints()"], ["org.eclipse.jetty.util.thread.Scheduler", "org.eclipse.jetty.server.AbstractConnector.getScheduler()", "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AbstractNCSARequestLog", "org.eclipse.jetty.server.AbstractNCSARequestLog()", "public org.eclipse.jetty.server.AbstractNCSARequestLog()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)", "public void log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setIgnorePaths(java.lang.String[])", "public void setIgnorePaths(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.AbstractNCSARequestLog.getIgnorePaths()", "public java.lang.String[] getIgnorePaths()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogCookies(boolean)", "public void setLogCookies(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogCookies()", "public boolean getLogCookies()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogServer(boolean)", "public void setLogServer(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogServer()", "public boolean getLogServer()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogLatency(boolean)", "public void setLogLatency(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogLatency()", "public boolean getLogLatency()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogDispatch(boolean)", "public void setLogDispatch(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.isLogDispatch()", "public boolean isLogDispatch()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setPreferProxiedForAddress(boolean)", "public void setPreferProxiedForAddress(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getPreferProxiedForAddress()", "public boolean getPreferProxiedForAddress()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setExtended(boolean)", "public void setExtended(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.isExtended()", "public boolean isExtended()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogDateFormat(java.lang.String)", "public void setLogDateFormat(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogDateFormat()", "public java.lang.String getLogDateFormat()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogLocale(java.util.Locale)", "public void setLogLocale(java.util.Locale)"], ["java.util.Locale", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogLocale()", "public java.util.Locale getLogLocale()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogTimeZone(java.lang.String)", "public void setLogTimeZone(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogTimeZone()", "public java.lang.String getLogTimeZone()"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.Response.getResponse(javax.servlet.http.HttpServletResponse)", "public static org.eclipse.jetty.server.Response getResponse(javax.servlet.http.HttpServletResponse)"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.Response(org.eclipse.jetty.server.HttpChannel<?>, org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.Response(org.eclipse.jetty.server.HttpChannel<?>, org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.Response.setHeaders(org.eclipse.jetty.http.HttpContent)", "public void setHeaders(org.eclipse.jetty.http.HttpContent)"], ["org.eclipse.jetty.server.HttpOutput", "org.eclipse.jetty.server.Response.getHttpOutput()", "public org.eclipse.jetty.server.HttpOutput getHttpOutput()"], ["void", "org.eclipse.jetty.server.Response.setHttpOutput(org.eclipse.jetty.server.HttpOutput)", "public void setHttpOutput(org.eclipse.jetty.server.HttpOutput)"], ["boolean", "org.eclipse.jetty.server.Response.isIncluding()", "public boolean isIncluding()"], ["void", "org.eclipse.jetty.server.Response.include()", "public void include()"], ["void", "org.eclipse.jetty.server.Response.included()", "public void included()"], ["void", "org.eclipse.jetty.server.Response.addCookie(org.eclipse.jetty.http.HttpCookie)", "public void addCookie(org.eclipse.jetty.http.HttpCookie)"], ["void", "org.eclipse.jetty.server.Response.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["void", "org.eclipse.jetty.server.Response.addSetCookie(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.String, boolean, boolean, int)", "public void addSetCookie(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.String, boolean, boolean, int)"], ["boolean", "org.eclipse.jetty.server.Response.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendProcessing()", "public void sendProcessing() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendRedirect(int, java.lang.String)", "public void sendRedirect(int, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.Response.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.Response.setHeader(org.eclipse.jetty.http.HttpHeader, java.lang.String)", "public void setHeader(org.eclipse.jetty.http.HttpHeader, java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.Response.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.lang.String", "org.eclipse.jetty.server.Response.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.Response.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.Response.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.Response.setStatus(int)", "public void setStatus(int)"], ["void", "org.eclipse.jetty.server.Response.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setStatusWithReason(int, java.lang.String)", "public void setStatusWithReason(int, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["java.lang.String", "org.eclipse.jetty.server.Response.getContentType()", "public java.lang.String getContentType()"], ["javax.servlet.ServletOutputStream", "org.eclipse.jetty.server.Response.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.Response.isWriting()", "public boolean isWriting()"], ["java.io.PrintWriter", "org.eclipse.jetty.server.Response.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.setContentLength(int)", "public void setContentLength(int)"], ["long", "org.eclipse.jetty.server.Response.getContentLength()", "public long getContentLength()"], ["boolean", "org.eclipse.jetty.server.Response.isAllContentWritten(long)", "public boolean isAllContentWritten(long)"], ["void", "org.eclipse.jetty.server.Response.closeOutput()", "public void closeOutput() throws java.io.IOException"], ["long", "org.eclipse.jetty.server.Response.getLongContentLength()", "public long getLongContentLength()"], ["void", "org.eclipse.jetty.server.Response.setLongContentLength(long)", "public void setLongContentLength(long)"], ["void", "org.eclipse.jetty.server.Response.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "org.eclipse.jetty.server.Response.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setBufferSize(int)", "public void setBufferSize(int)"], ["int", "org.eclipse.jetty.server.Response.getBufferSize()", "public int getBufferSize()"], ["void", "org.eclipse.jetty.server.Response.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.Response.reset(boolean)", "public void reset(boolean)"], ["void", "org.eclipse.jetty.server.Response.resetForForward()", "public void resetForForward()"], ["void", "org.eclipse.jetty.server.Response.resetBuffer()", "public void resetBuffer()"], ["boolean", "org.eclipse.jetty.server.Response.isCommitted()", "public boolean isCommitted()"], ["void", "org.eclipse.jetty.server.Response.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.util.Locale", "org.eclipse.jetty.server.Response.getLocale()", "public java.util.Locale getLocale()"], ["int", "org.eclipse.jetty.server.Response.getStatus()", "public int getStatus()"], ["java.lang.String", "org.eclipse.jetty.server.Response.getReason()", "public java.lang.String getReason()"], ["org.eclipse.jetty.http.HttpFields", "org.eclipse.jetty.server.Response.getHttpFields()", "public org.eclipse.jetty.http.HttpFields getHttpFields()"], ["long", "org.eclipse.jetty.server.Response.getContentCount()", "public long getContentCount()"], ["java.lang.String", "org.eclipse.jetty.server.Response.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannelState$Async[]", "org.eclipse.jetty.server.HttpChannelState$Async.values()", "public static org.eclipse.jetty.server.HttpChannelState$Async[] values()"], ["org.eclipse.jetty.server.HttpChannelState$Async", "org.eclipse.jetty.server.HttpChannelState$Async.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$Async valueOf(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpOutput$2.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpOutput$2.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB", "org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB(org.eclipse.jetty.server.HttpOutput, java.io.InputStream, org.eclipse.jetty.util.Callback)", "public org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB(org.eclipse.jetty.server.HttpOutput, java.io.InputStream, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["org.eclipse.jetty.server.HttpOutput$OutputState[]", "org.eclipse.jetty.server.HttpOutput$OutputState.values()", "public static org.eclipse.jetty.server.HttpOutput$OutputState[] values()"], ["org.eclipse.jetty.server.HttpOutput$OutputState", "org.eclipse.jetty.server.HttpOutput$OutputState.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpOutput$OutputState valueOf(java.lang.String)"], ["void", "org.eclipse.jetty.server.AsyncContextState$2.run()", "public void run()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.handler.ErrorHandler()", "public org.eclipse.jetty.server.handler.ErrorHandler()"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.handler.ErrorHandler.badMessageError(int, java.lang.String, org.eclipse.jetty.http.HttpFields)", "public java.nio.ByteBuffer badMessageError(int, java.lang.String, org.eclipse.jetty.http.HttpFields)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ErrorHandler.getCacheControl()", "public java.lang.String getCacheControl()"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.setCacheControl(java.lang.String)", "public void setCacheControl(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.ErrorHandler.isShowStacks()", "public boolean isShowStacks()"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.setShowStacks(boolean)", "public void setShowStacks(boolean)"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.setShowMessageInTitle(boolean)", "public void setShowMessageInTitle(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ErrorHandler.getShowMessageInTitle()", "public boolean getShowMessageInTitle()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.handler.ErrorHandler.getErrorHandler(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.handler.ContextHandler)", "public static org.eclipse.jetty.server.handler.ErrorHandler getErrorHandler(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.handler.ContextHandler)"], ["org.eclipse.jetty.server.handler.AbstractHandlerContainer", "org.eclipse.jetty.server.handler.AbstractHandlerContainer()", "public org.eclipse.jetty.server.handler.AbstractHandlerContainer()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.getChildHandlers()", "public org.eclipse.jetty.server.Handler[] getChildHandlers()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.getChildHandlersByClass(java.lang.Class<?>)", "public org.eclipse.jetty.server.Handler[] getChildHandlersByClass(java.lang.Class<?>)"], ["<T extends org.eclipse.jetty.server.Handler> T", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.getChildHandlerByClass(java.lang.Class<T>)", "public <T extends org.eclipse.jetty.server.Handler> T getChildHandlerByClass(java.lang.Class<T>)"], ["<T extends org.eclipse.jetty.server.HandlerContainer> T", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.findContainerOf(org.eclipse.jetty.server.HandlerContainer, java.lang.Class<T>, org.eclipse.jetty.server.Handler)", "public static <T extends org.eclipse.jetty.server.HandlerContainer> T findContainerOf(org.eclipse.jetty.server.HandlerContainer, java.lang.Class<T>, org.eclipse.jetty.server.Handler)"], ["org.eclipse.jetty.server.handler.IPAccessHandler", "org.eclipse.jetty.server.handler.IPAccessHandler()", "public org.eclipse.jetty.server.handler.IPAccessHandler()"], ["org.eclipse.jetty.server.handler.IPAccessHandler", "org.eclipse.jetty.server.handler.IPAccessHandler(java.lang.String[], java.lang.String[])", "public org.eclipse.jetty.server.handler.IPAccessHandler(java.lang.String[], java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.addWhite(java.lang.String)", "public void addWhite(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.addBlack(java.lang.String)", "public void addBlack(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.setWhite(java.lang.String[])", "public void setWhite(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.setBlack(java.lang.String[])", "public void setBlack(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.setWhiteListByPath(boolean)", "public void setWhiteListByPath(boolean)"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.handler.IPAccessHandler.dump()", "public java.lang.String dump()"], ["org.eclipse.jetty.server.handler.ContextHandler$ApproveSameSuffixAliases", "org.eclipse.jetty.server.handler.ContextHandler$ApproveSameSuffixAliases()", "public org.eclipse.jetty.server.handler.ContextHandler$ApproveSameSuffixAliases()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$ApproveSameSuffixAliases.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean(java.lang.Object)", "public org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean(java.lang.Object)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.getContextAttributes()", "public java.util.Map<java.lang.String, java.lang.Object> getContextAttributes()"], ["void", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.setContextAttribute(java.lang.String, java.lang.Object)", "public void setContextAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.setContextAttribute(java.lang.String, java.lang.String)", "public void setContextAttribute(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.removeContextAttribute(java.lang.String)", "public void removeContextAttribute(java.lang.String)"], ["org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean", "org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean(java.lang.Object)", "public org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean.getObjectContextBasis()", "public java.lang.String getObjectContextBasis()"], ["org.eclipse.jetty.server.handler.ContextHandlerCollection", "org.eclipse.jetty.server.handler.ContextHandlerCollection()", "public org.eclipse.jetty.server.handler.ContextHandlerCollection()"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.mapContexts()", "public void mapContexts()"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.setHandlers(org.eclipse.jetty.server.Handler[])", "public void setHandlers(org.eclipse.jetty.server.Handler[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandlerCollection.addContext(java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String, java.lang.String)"], ["java.lang.Class<?>", "org.eclipse.jetty.server.handler.ContextHandlerCollection.getContextClass()", "public java.lang.Class<?> getContextClass()"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.setContextClass(java.lang.Class<? extends org.eclipse.jetty.server.handler.ContextHandler>)", "public void setContextClass(java.lang.Class<? extends org.eclipse.jetty.server.handler.ContextHandler>)"], ["org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases", "org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases()", "public org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.server.handler.IdleTimeoutHandler", "org.eclipse.jetty.server.handler.IdleTimeoutHandler()", "public org.eclipse.jetty.server.handler.IdleTimeoutHandler()"], ["boolean", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.isApplyToAsync()", "public boolean isApplyToAsync()"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.setApplyToAsync(boolean)", "public void setApplyToAsync(boolean)"], ["long", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.getIdleTimeoutMs()", "public long getIdleTimeoutMs()"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.setIdleTimeoutMs(long)", "public void setIdleTimeoutMs(long)"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandlerCollection$Branch.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.HotSwapHandler", "org.eclipse.jetty.server.handler.HotSwapHandler()", "public org.eclipse.jetty.server.handler.HotSwapHandler()"], ["org.eclipse.jetty.server.Handler", "org.eclipse.jetty.server.handler.HotSwapHandler.getHandler()", "public org.eclipse.jetty.server.Handler getHandler()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.HotSwapHandler.getHandlers()", "public org.eclipse.jetty.server.Handler[] getHandlers()"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.setHandler(org.eclipse.jetty.server.Handler)", "public void setHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.handler.AsyncDelayHandler", "org.eclipse.jetty.server.handler.AsyncDelayHandler()", "public org.eclipse.jetty.server.handler.AsyncDelayHandler()"], ["void", "org.eclipse.jetty.server.handler.AsyncDelayHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler$NullRequestLog.log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)", "public void log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)"], ["org.eclipse.jetty.server.handler.ContextHandler$Availability[]", "org.eclipse.jetty.server.handler.ContextHandler$Availability.values()", "public static org.eclipse.jetty.server.handler.ContextHandler$Availability[] values()"], ["org.eclipse.jetty.server.handler.ContextHandler$Availability", "org.eclipse.jetty.server.handler.ContextHandler$Availability.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.handler.ContextHandler$Availability valueOf(java.lang.String)"], ["org.eclipse.jetty.server.handler.DefaultHandler", "org.eclipse.jetty.server.handler.DefaultHandler()", "public org.eclipse.jetty.server.handler.DefaultHandler()"], ["void", "org.eclipse.jetty.server.handler.DefaultHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.eclipse.jetty.server.handler.DefaultHandler.getServeIcon()", "public boolean getServeIcon()"], ["void", "org.eclipse.jetty.server.handler.DefaultHandler.setServeIcon(boolean)", "public void setServeIcon(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.DefaultHandler.getShowContexts()", "public boolean getShowContexts()"], ["void", "org.eclipse.jetty.server.handler.DefaultHandler.setShowContexts(boolean)", "public void setShowContexts(boolean)"], ["org.eclipse.jetty.server.handler.ContextHandler$NoContext", "org.eclipse.jetty.server.handler.ContextHandler$NoContext()", "public org.eclipse.jetty.server.handler.ContextHandler$NoContext()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getMajorVersion()", "public int getMajorVersion()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getMinorVersion()", "public int getMinorVersion()"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getNamedDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.net.URL", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServerInfo()", "public java.lang.String getServerInfo()"], ["javax.servlet.Servlet", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServlet(java.lang.String)", "public javax.servlet.Servlet getServlet(java.lang.String) throws javax.servlet.ServletException"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServletNames()", "public java.util.Enumeration<java.lang.String> getServletNames()"], ["java.util.Enumeration<javax.servlet.Servlet>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServlets()", "public java.util.Enumeration<javax.servlet.Servlet> getServlets()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServletContextName()", "public java.lang.String getServletContextName()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getContextPath()", "public java.lang.String getContextPath()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["javax.servlet.FilterRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)"], ["javax.servlet.FilterRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addFilter(java.lang.String, javax.servlet.Filter)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, javax.servlet.Filter)"], ["javax.servlet.FilterRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addFilter(java.lang.String, java.lang.String)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)"], ["javax.servlet.ServletRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addServlet(java.lang.String, javax.servlet.Servlet)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, javax.servlet.Servlet)"], ["javax.servlet.ServletRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addServlet(java.lang.String, java.lang.String)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String)"], ["<T extends javax.servlet.Filter> T", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.createFilter(java.lang.Class<T>)", "public <T extends javax.servlet.Filter> T createFilter(java.lang.Class<T>) throws javax.servlet.ServletException"], ["<T extends javax.servlet.Servlet> T", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.createServlet(java.lang.Class<T>)", "public <T extends javax.servlet.Servlet> T createServlet(java.lang.Class<T>) throws javax.servlet.ServletException"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["javax.servlet.FilterRegistration", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getFilterRegistration(java.lang.String)", "public javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)"], ["java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getFilterRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations()"], ["javax.servlet.ServletRegistration", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServletRegistration(java.lang.String)", "public javax.servlet.ServletRegistration getServletRegistration(java.lang.String)"], ["java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration>", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getServletRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration> getServletRegistrations()"], ["javax.servlet.SessionCookieConfig", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["<T extends java.util.EventListener> T", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.setEffectiveMajorVersion(int)", "public void setEffectiveMajorVersion(int)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.setEffectiveMinorVersion(int)", "public void setEffectiveMinorVersion(int)"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$NoContext.getVirtualServerName()", "public java.lang.String getVirtualServerName()"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler$1.run()", "public void run()"], ["org.eclipse.jetty.server.handler.ContextHandler$ApprovePathPrefixAliases", "org.eclipse.jetty.server.handler.ContextHandler$ApprovePathPrefixAliases()", "public org.eclipse.jetty.server.handler.ContextHandler$ApprovePathPrefixAliases()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$ApprovePathPrefixAliases.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler$Context.getContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler getContextHandler()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.handler.ContextHandler$Context.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.handler.ContextHandler$Context.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.net.URL", "org.eclipse.jetty.server.handler.ContextHandler$Context.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.eclipse.jetty.server.handler.ContextHandler$Context.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$Context.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$Context.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["synchronized", "org.eclipse.jetty.server.handler.ContextHandler$Context.java.lang.Object getAttribute(java.lang.String)", "public synchronized java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$Context.getAttributeNames()", "public synchronized java.util.Enumeration<java.lang.String> getAttributeNames()"], ["synchronized", "org.eclipse.jetty.server.handler.ContextHandler$Context.void setAttribute(java.lang.String, java.lang.Object)", "public synchronized void setAttribute(java.lang.String, java.lang.Object)"], ["synchronized", "org.eclipse.jetty.server.handler.ContextHandler$Context.void removeAttribute(java.lang.String)", "public synchronized void removeAttribute(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getServletContextName()", "public java.lang.String getServletContextName()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$Context.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.eclipse.jetty.server.handler.ContextHandler$Context.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["<T extends java.util.EventListener> T", "org.eclipse.jetty.server.handler.ContextHandler$Context.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.checkListener(java.lang.Class<? extends java.util.EventListener>)", "public void checkListener(java.lang.Class<? extends java.util.EventListener>) throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.setExtendedListenerTypes(boolean)", "public void setExtendedListenerTypes(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$Context.isExtendedListenerTypes()", "public boolean isExtendedListenerTypes()"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler$Context.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.eclipse.jetty.server.handler.ContextHandler$Context.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)", "public void setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.setEnabled(boolean)", "public void setEnabled(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$Context.isEnabled()", "public boolean isEnabled()"], ["<T> T", "org.eclipse.jetty.server.handler.ContextHandler$Context.createInstance(java.lang.Class<T>)", "public <T> T createInstance(java.lang.Class<T>) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.RequestLogHandler", "org.eclipse.jetty.server.handler.RequestLogHandler()", "public org.eclipse.jetty.server.handler.RequestLogHandler()"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler.setRequestLog(org.eclipse.jetty.server.RequestLog)", "public void setRequestLog(org.eclipse.jetty.server.RequestLog)"], ["org.eclipse.jetty.server.RequestLog", "org.eclipse.jetty.server.handler.RequestLogHandler.getRequestLog()", "public org.eclipse.jetty.server.RequestLog getRequestLog()"], ["org.eclipse.jetty.server.handler.ScopedHandler", "org.eclipse.jetty.server.handler.ScopedHandler()", "public org.eclipse.jetty.server.handler.ScopedHandler()"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.nextScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void nextScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void nextHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.SecuredRedirectHandler", "org.eclipse.jetty.server.handler.SecuredRedirectHandler()", "public org.eclipse.jetty.server.handler.SecuredRedirectHandler()"], ["void", "org.eclipse.jetty.server.handler.SecuredRedirectHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ShutdownHandler", "org.eclipse.jetty.server.handler.ShutdownHandler(org.eclipse.jetty.server.Server, java.lang.String)", "public org.eclipse.jetty.server.handler.ShutdownHandler(org.eclipse.jetty.server.Server, java.lang.String)"], ["org.eclipse.jetty.server.handler.ShutdownHandler", "org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String)", "public org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String)"], ["org.eclipse.jetty.server.handler.ShutdownHandler", "org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String, boolean, boolean)", "public org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String, boolean, boolean)"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.sendShutdown()", "public void sendShutdown() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.setExitJvm(boolean)", "public void setExitJvm(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ShutdownHandler.isSendShutdownAtStart()", "public boolean isSendShutdownAtStart()"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.setSendShutdownAtStart(boolean)", "public void setSendShutdownAtStart(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ShutdownHandler.getShutdownToken()", "public java.lang.String getShutdownToken()"], ["boolean", "org.eclipse.jetty.server.handler.ShutdownHandler.isExitJvm()", "public boolean isExitJvm()"], ["org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases", "org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases()", "public org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.server.handler.StatisticsHandler", "org.eclipse.jetty.server.handler.StatisticsHandler()", "public org.eclipse.jetty.server.handler.StatisticsHandler()"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler.statsReset()", "public void statsReset()"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequests()", "public int getRequests()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestsActive()", "public int getRequestsActive()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestsActiveMax()", "public int getRequestsActiveMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeMax()", "public long getRequestTimeMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeTotal()", "public long getRequestTimeTotal()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeMean()", "public double getRequestTimeMean()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeStdDev()", "public double getRequestTimeStdDev()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatched()", "public int getDispatched()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedActive()", "public int getDispatchedActive()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedActiveMax()", "public int getDispatchedActiveMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeMax()", "public long getDispatchedTimeMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeTotal()", "public long getDispatchedTimeTotal()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeMean()", "public double getDispatchedTimeMean()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeStdDev()", "public double getDispatchedTimeStdDev()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncRequests()", "public int getAsyncRequests()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncRequestsWaiting()", "public int getAsyncRequestsWaiting()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncRequestsWaitingMax()", "public int getAsyncRequestsWaitingMax()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncDispatches()", "public int getAsyncDispatches()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getExpires()", "public int getExpires()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses1xx()", "public int getResponses1xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses2xx()", "public int getResponses2xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses3xx()", "public int getResponses3xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses4xx()", "public int getResponses4xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses5xx()", "public int getResponses5xx()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getStatsOnMs()", "public long getStatsOnMs()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponsesBytesTotal()", "public long getResponsesBytesTotal()"], ["java.lang.String", "org.eclipse.jetty.server.handler.StatisticsHandler.toStatsHTML()", "public java.lang.String toStatsHTML()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.handler.StatisticsHandler.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["org.eclipse.jetty.server.handler.MovedContextHandler", "org.eclipse.jetty.server.handler.MovedContextHandler()", "public org.eclipse.jetty.server.handler.MovedContextHandler()"], ["org.eclipse.jetty.server.handler.MovedContextHandler", "org.eclipse.jetty.server.handler.MovedContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.handler.MovedContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.MovedContextHandler.isDiscardPathInfo()", "public boolean isDiscardPathInfo()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setDiscardPathInfo(boolean)", "public void setDiscardPathInfo(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.MovedContextHandler.getNewContextURL()", "public java.lang.String getNewContextURL()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setNewContextURL(java.lang.String)", "public void setNewContextURL(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.MovedContextHandler.isPermanent()", "public boolean isPermanent()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setPermanent(boolean)", "public void setPermanent(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.MovedContextHandler.isDiscardQuery()", "public boolean isDiscardQuery()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setDiscardQuery(boolean)", "public void setDiscardQuery(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.MovedContextHandler.getExpires()", "public java.lang.String getExpires()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setExpires(java.lang.String)", "public void setExpires(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.handler.ContextHandler.getCurrentContext()", "public static org.eclipse.jetty.server.handler.ContextHandler$Context getCurrentContext()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler.getContextHandler(javax.servlet.ServletContext)", "public static org.eclipse.jetty.server.handler.ContextHandler getContextHandler(javax.servlet.ServletContext)"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler(java.lang.String)", "public org.eclipse.jetty.server.handler.ContextHandler(java.lang.String)"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String)", "public org.eclipse.jetty.server.handler.ContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.handler.ContextHandler.getServletContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getServletContext()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.getAllowNullPathInfo()", "public boolean getAllowNullPathInfo()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAllowNullPathInfo(boolean)", "public void setAllowNullPathInfo(boolean)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setVirtualHosts(java.lang.String[])", "public void setVirtualHosts(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addVirtualHosts(java.lang.String[])", "public void addVirtualHosts(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.removeVirtualHosts(java.lang.String[])", "public void removeVirtualHosts(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ContextHandler.getVirtualHosts()", "public java.lang.String[] getVirtualHosts()"], ["java.lang.Object", "org.eclipse.jetty.server.handler.ContextHandler.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["org.eclipse.jetty.util.Attributes", "org.eclipse.jetty.server.handler.ContextHandler.getAttributes()", "public org.eclipse.jetty.util.Attributes getAttributes()"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getClassPath()", "public java.lang.String getClassPath()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.setInitParameter(java.lang.String, java.lang.String)", "public java.lang.String setInitParameter(java.lang.String, java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getInitParams()", "public java.util.Map<java.lang.String, java.lang.String> getInitParams()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getDisplayName()", "public java.lang.String getDisplayName()"], ["java.util.EventListener[]", "org.eclipse.jetty.server.handler.ContextHandler.getEventListeners()", "public java.util.EventListener[] getEventListeners()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setEventListeners(java.util.EventListener[])", "public void setEventListeners(java.util.EventListener[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isShutdown()", "public boolean isShutdown()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.handler.ContextHandler.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isAvailable()", "public boolean isAvailable()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAvailable(boolean)", "public void setAvailable(boolean)"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.server.handler.ContextHandler.getLogger()", "public org.eclipse.jetty.util.log.Logger getLogger()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setLogger(org.eclipse.jetty.util.log.Logger)", "public void setLogger(org.eclipse.jetty.util.log.Logger)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkVirtualHost(org.eclipse.jetty.server.Request)", "public boolean checkVirtualHost(org.eclipse.jetty.server.Request)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkContextPath(java.lang.String)", "public boolean checkContextPath(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkContext(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletResponse)", "public boolean checkContext(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.handle(java.lang.Runnable)", "public void handle(java.lang.Runnable)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isProtectedTarget(java.lang.String)", "public boolean isProtectedTarget(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setProtectedTargets(java.lang.String[])", "public void setProtectedTargets(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ContextHandler.getProtectedTargets()", "public java.lang.String[] getProtectedTargets()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAttributes(org.eclipse.jetty.util.Attributes)", "public void setAttributes(org.eclipse.jetty.util.Attributes)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.checkManagedAttribute(java.lang.String, java.lang.Object)", "public void checkManagedAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setManagedAttribute(java.lang.String, java.lang.Object)", "public void setManagedAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setClassLoader(java.lang.ClassLoader)", "public void setClassLoader(java.lang.ClassLoader)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setContextPath(java.lang.String)", "public void setContextPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.getBaseResource()", "public org.eclipse.jetty.util.resource.Resource getBaseResource()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getResourceBase()", "public java.lang.String getResourceBase()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setBaseResource(org.eclipse.jetty.util.resource.Resource)", "public void setBaseResource(org.eclipse.jetty.util.resource.Resource)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setResourceBase(java.lang.String)", "public void setResourceBase(java.lang.String)"], ["org.eclipse.jetty.http.MimeTypes", "org.eclipse.jetty.server.handler.ContextHandler.getMimeTypes()", "public org.eclipse.jetty.http.MimeTypes getMimeTypes()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setMimeTypes(org.eclipse.jetty.http.MimeTypes)", "public void setMimeTypes(org.eclipse.jetty.http.MimeTypes)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setWelcomeFiles(java.lang.String[])", "public void setWelcomeFiles(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ContextHandler.getWelcomeFiles()", "public java.lang.String[] getWelcomeFiles()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.handler.ContextHandler.getErrorHandler()", "public org.eclipse.jetty.server.handler.ErrorHandler getErrorHandler()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)", "public void setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler.getMaxFormContentSize()", "public int getMaxFormContentSize()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setMaxFormContentSize(int)", "public void setMaxFormContentSize(int)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler.getMaxFormKeys()", "public int getMaxFormKeys()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setMaxFormKeys(int)", "public void setMaxFormKeys(int)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isCompactPath()", "public boolean isCompactPath()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setCompactPath(boolean)", "public void setCompactPath(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.toString()", "public java.lang.String toString()"], ["java.lang.Class<?>", "org.eclipse.jetty.server.handler.ContextHandler.loadClass(java.lang.String)", "public synchronized java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addLocaleEncoding(java.lang.String, java.lang.String)", "public void addLocaleEncoding(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getLocaleEncoding(java.lang.String)", "public java.lang.String getLocaleEncoding(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getLocaleEncoding(java.util.Locale)", "public java.lang.String getLocaleEncoding(java.util.Locale)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getLocaleEncodings()", "public java.util.Map<java.lang.String, java.lang.String> getLocaleEncodings()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.getResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource getResource(java.lang.String) throws java.net.MalformedURLException"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkAlias(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean checkAlias(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.newResource(java.net.URL)", "public org.eclipse.jetty.util.resource.Resource newResource(java.net.URL) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.newResource(java.net.URI)", "public org.eclipse.jetty.util.resource.Resource newResource(java.net.URI) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.newResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource newResource(java.lang.String) throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler$AliasCheck)", "public void addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler$AliasCheck)"], ["java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck>", "org.eclipse.jetty.server.handler.ContextHandler.getAliasChecks()", "public java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck> getAliasChecks()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAliasChecks(java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck>)", "public void setAliasChecks(java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck>)"], ["org.eclipse.jetty.server.handler.DebugHandler", "org.eclipse.jetty.server.handler.DebugHandler()", "public org.eclipse.jetty.server.handler.DebugHandler()"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.io.OutputStream", "org.eclipse.jetty.server.handler.DebugHandler.getOutputStream()", "public java.io.OutputStream getOutputStream()"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.setOutputStream(java.io.OutputStream)", "public void setOutputStream(java.io.OutputStream)"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.onOpened(org.eclipse.jetty.io.Connection)", "public void onOpened(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.onClosed(org.eclipse.jetty.io.Connection)", "public void onClosed(org.eclipse.jetty.io.Connection)"], ["org.eclipse.jetty.server.handler.AbstractHandler", "org.eclipse.jetty.server.handler.AbstractHandler()", "public org.eclipse.jetty.server.handler.AbstractHandler()"], ["void", "org.eclipse.jetty.server.handler.AbstractHandler.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.handler.AbstractHandler.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["void", "org.eclipse.jetty.server.handler.AbstractHandler.destroy()", "public void destroy()"], ["void", "org.eclipse.jetty.server.handler.AbstractHandler.dumpThis(java.lang.Appendable)", "public void dumpThis(java.lang.Appendable) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.HandlerWrapper", "org.eclipse.jetty.server.handler.HandlerWrapper()", "public org.eclipse.jetty.server.handler.HandlerWrapper()"], ["org.eclipse.jetty.server.Handler", "org.eclipse.jetty.server.handler.HandlerWrapper.getHandler()", "public org.eclipse.jetty.server.Handler getHandler()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.HandlerWrapper.getHandlers()", "public org.eclipse.jetty.server.Handler[] getHandlers()"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.setHandler(org.eclipse.jetty.server.Handler)", "public void setHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.destroy()", "public void destroy()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler$1.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.server.handler.HandlerCollection", "org.eclipse.jetty.server.handler.HandlerCollection()", "public org.eclipse.jetty.server.handler.HandlerCollection()"], ["org.eclipse.jetty.server.handler.HandlerCollection", "org.eclipse.jetty.server.handler.HandlerCollection(boolean)", "public org.eclipse.jetty.server.handler.HandlerCollection(boolean)"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.HandlerCollection.getHandlers()", "public org.eclipse.jetty.server.Handler[] getHandlers()"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.setHandlers(org.eclipse.jetty.server.Handler[])", "public void setHandlers(org.eclipse.jetty.server.Handler[])"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.addHandler(org.eclipse.jetty.server.Handler)", "public void addHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.removeHandler(org.eclipse.jetty.server.Handler)", "public void removeHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.destroy()", "public void destroy()"], ["java.lang.String", "org.eclipse.jetty.server.handler.HandlerCollection.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.handler.HandlerList", "org.eclipse.jetty.server.handler.HandlerList()", "public org.eclipse.jetty.server.handler.HandlerList()"], ["void", "org.eclipse.jetty.server.handler.HandlerList.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ResourceHandler", "org.eclipse.jetty.server.handler.ResourceHandler()", "public org.eclipse.jetty.server.handler.ResourceHandler()"], ["org.eclipse.jetty.http.MimeTypes", "org.eclipse.jetty.server.handler.ResourceHandler.getMimeTypes()", "public org.eclipse.jetty.http.MimeTypes getMimeTypes()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setMimeTypes(org.eclipse.jetty.http.MimeTypes)", "public void setMimeTypes(org.eclipse.jetty.http.MimeTypes)"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isDirectoriesListed()", "public boolean isDirectoriesListed()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setDirectoriesListed(boolean)", "public void setDirectoriesListed(boolean)"], ["int", "org.eclipse.jetty.server.handler.ResourceHandler.getMinMemoryMappedContentLength()", "public int getMinMemoryMappedContentLength()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setMinMemoryMappedContentLength(int)", "public void setMinMemoryMappedContentLength(int)"], ["int", "org.eclipse.jetty.server.handler.ResourceHandler.getMinAsyncContentLength()", "public int getMinAsyncContentLength()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setMinAsyncContentLength(int)", "public void setMinAsyncContentLength(int)"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isEtags()", "public boolean isEtags()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setEtags(boolean)", "public void setEtags(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.doStart()", "public void doStart() throws java.lang.Exception"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ResourceHandler.getBaseResource()", "public org.eclipse.jetty.util.resource.Resource getBaseResource()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ResourceHandler.getResourceBase()", "public java.lang.String getResourceBase()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setBaseResource(org.eclipse.jetty.util.resource.Resource)", "public void setBaseResource(org.eclipse.jetty.util.resource.Resource)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setResourceBase(java.lang.String)", "public void setResourceBase(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ResourceHandler.getStylesheet()", "public org.eclipse.jetty.util.resource.Resource getStylesheet()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setStylesheet(java.lang.String)", "public void setStylesheet(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ResourceHandler.getCacheControl()", "public java.lang.String getCacheControl()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setCacheControl(java.lang.String)", "public void setCacheControl(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ResourceHandler.getResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ResourceHandler.getWelcomeFiles()", "public java.lang.String[] getWelcomeFiles()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setWelcomeFiles(java.lang.String[])", "public void setWelcomeFiles(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker", "org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker()", "public org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker()"], ["boolean", "org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["javax.security.auth.Subject", "org.eclipse.jetty.server.UserIdentity$1.getSubject()", "public javax.security.auth.Subject getSubject()"], ["java.security.Principal", "org.eclipse.jetty.server.UserIdentity$1.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["boolean", "org.eclipse.jetty.server.UserIdentity$1.isUserInRole(java.lang.String, org.eclipse.jetty.server.UserIdentity$Scope)", "public boolean isUserInRole(java.lang.String, org.eclipse.jetty.server.UserIdentity$Scope)"], ["java.lang.String", "org.eclipse.jetty.server.UserIdentity$1.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor()", "public org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.adaptTo(java.sql.DatabaseMetaData)", "public void adaptTo(java.sql.DatabaseMetaData) throws java.sql.SQLException"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.setBlobType(java.lang.String)", "public void setBlobType(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.getBlobType()", "public java.lang.String getBlobType()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.setLongType(java.lang.String)", "public void setLongType(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.getLongType()", "public java.lang.String getLongType()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.convertIdentifier(java.lang.String)", "public java.lang.String convertIdentifier(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.getDBName()", "public java.lang.String getDBName()"], ["java.io.InputStream", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.getBlobInputStream(java.sql.ResultSet, java.lang.String)", "public java.io.InputStream getBlobInputStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.isEmptyStringNull()", "public boolean isEmptyStringNull()"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor.isRowIdReserved()", "public boolean isRowIdReserved()"], ["org.eclipse.jetty.server.session.jmx.AbstractSessionManagerMBean", "org.eclipse.jetty.server.session.jmx.AbstractSessionManagerMBean(java.lang.Object)", "public org.eclipse.jetty.server.session.jmx.AbstractSessionManagerMBean(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.session.jmx.AbstractSessionManagerMBean.getObjectContextBasis()", "public java.lang.String getObjectContextBasis()"], ["org.eclipse.jetty.server.session.MemSession", "org.eclipse.jetty.server.session.MemSession(org.eclipse.jetty.server.session.AbstractSessionManager, long, long, java.lang.String)", "public org.eclipse.jetty.server.session.MemSession(org.eclipse.jetty.server.session.AbstractSessionManager, long, long, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.eclipse.jetty.server.session.MemSession.getAttributeMap()", "public java.util.Map<java.lang.String, java.lang.Object> getAttributeMap()"], ["int", "org.eclipse.jetty.server.session.MemSession.getAttributes()", "public int getAttributes()"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.session.MemSession.doGetAttributeNames()", "public java.util.Enumeration<java.lang.String> doGetAttributeNames()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.MemSession.getNames()", "public java.util.Set<java.lang.String> getNames()"], ["void", "org.eclipse.jetty.server.session.MemSession.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.session.MemSession.addAttributes(java.util.Map<java.lang.String, java.lang.Object>)", "public void addAttributes(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.lang.Object", "org.eclipse.jetty.server.session.MemSession.doPutOrRemove(java.lang.String, java.lang.Object)", "public java.lang.Object doPutOrRemove(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.server.session.MemSession.doGet(java.lang.String)", "public java.lang.Object doGet(java.lang.String)"], ["org.eclipse.jetty.server.session.AbstractSessionManager", "org.eclipse.jetty.server.session.AbstractSessionManager()", "public org.eclipse.jetty.server.session.AbstractSessionManager()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.session.AbstractSessionManager.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.session.AbstractSessionManager.getContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler getContextHandler()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionPath()", "public java.lang.String getSessionPath()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager.getMaxCookieAge()", "public int getMaxCookieAge()"], ["org.eclipse.jetty.http.HttpCookie", "org.eclipse.jetty.server.session.AbstractSessionManager.access(javax.servlet.http.HttpSession, boolean)", "public org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession, boolean)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.clearEventListeners()", "public void clearEventListeners()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.complete(javax.servlet.http.HttpSession)", "public void complete(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.doStart()", "public void doStart() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.doStop()", "public void doStop() throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.getHttpOnly()", "public boolean getHttpOnly()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.session.AbstractSessionManager.getHttpSession(java.lang.String)", "public javax.servlet.http.HttpSession getHttpSession(java.lang.String)"], ["org.eclipse.jetty.server.SessionIdManager", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionIdManager()", "public org.eclipse.jetty.server.SessionIdManager getSessionIdManager()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionsMax()", "public int getSessionsMax()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionsTotal()", "public int getSessionsTotal()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager.getRefreshCookieAge()", "public int getRefreshCookieAge()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.getSecureCookies()", "public boolean getSecureCookies()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.isSecureRequestOnly()", "public boolean isSecureRequestOnly()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setSecureRequestOnly(boolean)", "public void setSecureRequestOnly(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionCookie()", "public java.lang.String getSessionCookie()"], ["org.eclipse.jetty.http.HttpCookie", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionCookie(javax.servlet.http.HttpSession, java.lang.String, boolean)", "public org.eclipse.jetty.http.HttpCookie getSessionCookie(javax.servlet.http.HttpSession, java.lang.String, boolean)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionDomain()", "public java.lang.String getSessionDomain()"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler getSessionHandler()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessions()", "public int getSessions()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionIdPathParameterName()", "public java.lang.String getSessionIdPathParameterName()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionIdPathParameterNamePrefix()", "public java.lang.String getSessionIdPathParameterNamePrefix()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.isUsingCookies()", "public boolean isUsingCookies()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.isValid(javax.servlet.http.HttpSession)", "public boolean isValid(javax.servlet.http.HttpSession)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getClusterId(javax.servlet.http.HttpSession)", "public java.lang.String getClusterId(javax.servlet.http.HttpSession)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager.getNodeId(javax.servlet.http.HttpSession)", "public java.lang.String getNodeId(javax.servlet.http.HttpSession)"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.session.AbstractSessionManager.newHttpSession(javax.servlet.http.HttpServletRequest)", "public javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.statsReset()", "public void statsReset()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setHttpOnly(boolean)", "public void setHttpOnly(boolean)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)", "public void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setRefreshCookieAge(int)", "public void setRefreshCookieAge(int)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setSessionCookie(java.lang.String)", "public void setSessionCookie(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)", "public void setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setSessionIdPathParameterName(java.lang.String)", "public void setSessionIdPathParameterName(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setUsingCookies(boolean)", "public void setUsingCookies(boolean)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.isNodeIdInSessionId()", "public boolean isNodeIdInSessionId()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setNodeIdInSessionId(boolean)", "public void setNodeIdInSessionId(boolean)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.removeSession(javax.servlet.http.HttpSession, boolean)", "public void removeSession(javax.servlet.http.HttpSession, boolean)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.removeSession(org.eclipse.jetty.server.session.AbstractSession, boolean)", "public boolean removeSession(org.eclipse.jetty.server.session.AbstractSession, boolean)"], ["long", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionTimeMax()", "public long getSessionTimeMax()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.session.AbstractSessionManager.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.session.AbstractSessionManager.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.isUsingURLs()", "public boolean isUsingURLs()"], ["javax.servlet.SessionCookieConfig", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["long", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionTimeTotal()", "public long getSessionTimeTotal()"], ["double", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionTimeMean()", "public double getSessionTimeMean()"], ["double", "org.eclipse.jetty.server.session.AbstractSessionManager.getSessionTimeStdDev()", "public double getSessionTimeStdDev()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager.isCheckingRemoteSessionIdEncoding()", "public boolean isCheckingRemoteSessionIdEncoding()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.setCheckingRemoteSessionIdEncoding(boolean)", "public void setCheckingRemoteSessionIdEncoding(boolean)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager.doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession, java.lang.String, java.lang.Object, java.lang.Object)", "public void doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession, java.lang.String, java.lang.Object, java.lang.Object)"], ["org.eclipse.jetty.server.SessionIdManager", "org.eclipse.jetty.server.session.AbstractSessionManager.getMetaManager()", "public org.eclipse.jetty.server.SessionIdManager getMetaManager()"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema()", "public org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getTableName()", "public java.lang.String getTableName()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setTableName(java.lang.String)", "public void setTableName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getRowIdColumn()", "public java.lang.String getRowIdColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setRowIdColumn(java.lang.String)", "public void setRowIdColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getIdColumn()", "public java.lang.String getIdColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setIdColumn(java.lang.String)", "public void setIdColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getContextPathColumn()", "public java.lang.String getContextPathColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setContextPathColumn(java.lang.String)", "public void setContextPathColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getVirtualHostColumn()", "public java.lang.String getVirtualHostColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setVirtualHostColumn(java.lang.String)", "public void setVirtualHostColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getLastNodeColumn()", "public java.lang.String getLastNodeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setLastNodeColumn(java.lang.String)", "public void setLastNodeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getAccessTimeColumn()", "public java.lang.String getAccessTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setAccessTimeColumn(java.lang.String)", "public void setAccessTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getLastAccessTimeColumn()", "public java.lang.String getLastAccessTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setLastAccessTimeColumn(java.lang.String)", "public void setLastAccessTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getCreateTimeColumn()", "public java.lang.String getCreateTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setCreateTimeColumn(java.lang.String)", "public void setCreateTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getCookieTimeColumn()", "public java.lang.String getCookieTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setCookieTimeColumn(java.lang.String)", "public void setCookieTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getLastSavedTimeColumn()", "public java.lang.String getLastSavedTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setLastSavedTimeColumn(java.lang.String)", "public void setLastSavedTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getExpiryTimeColumn()", "public java.lang.String getExpiryTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setExpiryTimeColumn(java.lang.String)", "public void setExpiryTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getMaxIntervalColumn()", "public java.lang.String getMaxIntervalColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setMaxIntervalColumn(java.lang.String)", "public void setMaxIntervalColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getMapColumn()", "public java.lang.String getMapColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.setMapColumn(java.lang.String)", "public void setMapColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getCreateStatementAsString()", "public java.lang.String getCreateStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getCreateIndexOverExpiryStatementAsString(java.lang.String)", "public java.lang.String getCreateIndexOverExpiryStatementAsString(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getCreateIndexOverSessionStatementAsString(java.lang.String)", "public java.lang.String getCreateIndexOverSessionStatementAsString(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getAlterTableForMaxIntervalAsString()", "public java.lang.String getAlterTableForMaxIntervalAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getInsertSessionStatementAsString()", "public java.lang.String getInsertSessionStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getDeleteSessionStatementAsString()", "public java.lang.String getDeleteSessionStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getUpdateSessionStatementAsString()", "public java.lang.String getUpdateSessionStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getUpdateSessionNodeStatementAsString()", "public java.lang.String getUpdateSessionNodeStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getUpdateSessionAccessTimeStatementAsString()", "public java.lang.String getUpdateSessionAccessTimeStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getBoundedExpiredSessionsStatementAsString()", "public java.lang.String getBoundedExpiredSessionsStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getSelectExpiredSessionsStatementAsString()", "public java.lang.String getSelectExpiredSessionsStatementAsString()"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema.getLoadStatement(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String)", "public java.sql.PreparedStatement getLoadStatement(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException"], ["void", "org.eclipse.jetty.server.session.HashedSession.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.void save(java.io.OutputStream)", "public synchronized void save(java.io.OutputStream) throws java.io.IOException"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.void deIdle()", "public synchronized void deIdle()"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.void idle()", "public synchronized void idle() throws java.lang.Exception"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.boolean isIdled()", "public synchronized boolean isIdled()"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.boolean isSaveFailed()", "public synchronized boolean isSaveFailed()"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.void saveFailed()", "public synchronized void saveFailed()"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.void deIdleFailed()", "public synchronized void deIdleFailed()"], ["synchronized", "org.eclipse.jetty.server.session.HashedSession.boolean isDeIdleFailed()", "public synchronized boolean isDeIdleFailed()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$Scavenger.run()", "public void run()"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.SessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler()"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.SessionHandler(org.eclipse.jetty.server.SessionManager)", "public org.eclipse.jetty.server.session.SessionHandler(org.eclipse.jetty.server.SessionManager)"], ["org.eclipse.jetty.server.SessionManager", "org.eclipse.jetty.server.session.SessionHandler.getSessionManager()", "public org.eclipse.jetty.server.SessionManager getSessionManager()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSessionManager(org.eclipse.jetty.server.SessionManager)", "public void setSessionManager(org.eclipse.jetty.server.SessionManager)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.session.SessionHandler.doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.session.SessionHandler.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.clearEventListeners()", "public void clearEventListeners()"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema()", "public org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.setDatabaseAdaptor(org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor)", "public void setDatabaseAdaptor(org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.getIdColumn()", "public java.lang.String getIdColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.setIdColumn(java.lang.String)", "public void setIdColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.getTableName()", "public java.lang.String getTableName()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.setTableName(java.lang.String)", "public void setTableName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.getInsertStatementAsString()", "public java.lang.String getInsertStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.getDeleteStatementAsString()", "public java.lang.String getDeleteStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.getSelectStatementAsString()", "public java.lang.String getSelectStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema.getCreateStatementAsString()", "public java.lang.String getCreateStatementAsString()"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager", "org.eclipse.jetty.server.session.JDBCSessionIdManager(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.session.JDBCSessionIdManager(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager", "org.eclipse.jetty.server.session.JDBCSessionIdManager(org.eclipse.jetty.server.Server, java.util.Random)", "public org.eclipse.jetty.server.session.JDBCSessionIdManager(org.eclipse.jetty.server.Server, java.util.Random)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setDriverInfo(java.lang.String, java.lang.String)", "public void setDriverInfo(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setDriverInfo(java.sql.Driver, java.lang.String)", "public void setDriverInfo(java.sql.Driver, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setDatasource(javax.sql.DataSource)", "public void setDatasource(javax.sql.DataSource)"], ["javax.sql.DataSource", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getDataSource()", "public javax.sql.DataSource getDataSource()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getDriverClassName()", "public java.lang.String getDriverClassName()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getConnectionUrl()", "public java.lang.String getConnectionUrl()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setDatasourceName(java.lang.String)", "public void setDatasourceName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getDatasourceName()", "public java.lang.String getDatasourceName()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setBlobType(java.lang.String)", "public void setBlobType(java.lang.String)"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getDbAdaptor()", "public org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor getDbAdaptor()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setDbAdaptor(org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor)", "public void setDbAdaptor(org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getBlobType()", "public java.lang.String getBlobType()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getLongType()", "public java.lang.String getLongType()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setLongType(java.lang.String)", "public void setLongType(java.lang.String)"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getSessionIdTableSchema()", "public org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema getSessionIdTableSchema()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setSessionIdTableSchema(org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema)", "public void setSessionIdTableSchema(org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionIdTableSchema)"], ["org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getSessionTableSchema()", "public org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema getSessionTableSchema()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setSessionTableSchema(org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema)", "public void setSessionTableSchema(org.eclipse.jetty.server.session.JDBCSessionIdManager$SessionTableSchema)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setDeleteBlockSize(int)", "public void setDeleteBlockSize(int)"], ["int", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getDeleteBlockSize()", "public int getDeleteBlockSize()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.setScavengeInterval(long)", "public void setScavengeInterval(long)"], ["long", "org.eclipse.jetty.server.session.JDBCSessionIdManager.getScavengeInterval()", "public long getScavengeInterval()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.addSession(javax.servlet.http.HttpSession)", "public void addSession(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.addSession(java.lang.String)", "public void addSession(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.removeSession(javax.servlet.http.HttpSession)", "public void removeSession(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.removeSession(java.lang.String)", "public void removeSession(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionIdManager.idInUse(java.lang.String)", "public boolean idInUse(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.invalidateAll(java.lang.String)", "public void invalidateAll(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.renewSessionId(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)", "public void renewSessionId(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.doStart()", "public void doStart() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.JDBCSessionIdManager.doStop()", "public void doStop() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager$1.run()", "public void run()"], ["org.eclipse.jetty.server.session.AbstractSession", "org.eclipse.jetty.server.session.AbstractSession.getSession()", "public org.eclipse.jetty.server.session.AbstractSession getSession()"], ["long", "org.eclipse.jetty.server.session.AbstractSession.getAccessed()", "public long getAccessed()"], ["long", "org.eclipse.jetty.server.session.AbstractSession.getCookieSetTime()", "public long getCookieSetTime()"], ["long", "org.eclipse.jetty.server.session.AbstractSession.getCreationTime()", "public long getCreationTime() throws java.lang.IllegalStateException"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSession.getId()", "public java.lang.String getId() throws java.lang.IllegalStateException"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSession.getNodeId()", "public java.lang.String getNodeId()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSession.getClusterId()", "public java.lang.String getClusterId()"], ["long", "org.eclipse.jetty.server.session.AbstractSession.getLastAccessedTime()", "public long getLastAccessedTime() throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.session.AbstractSession.setLastAccessedTime(long)", "public void setLastAccessedTime(long)"], ["int", "org.eclipse.jetty.server.session.AbstractSession.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.session.AbstractSession.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.http.HttpSessionContext", "org.eclipse.jetty.server.session.AbstractSession.getSessionContext()", "public javax.servlet.http.HttpSessionContext getSessionContext() throws java.lang.IllegalStateException"], ["java.lang.Object", "org.eclipse.jetty.server.session.AbstractSession.getValue(java.lang.String)", "public java.lang.Object getValue(java.lang.String) throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.session.AbstractSession.renewId(javax.servlet.http.HttpServletRequest)", "public void renewId(javax.servlet.http.HttpServletRequest)"], ["org.eclipse.jetty.server.SessionManager", "org.eclipse.jetty.server.session.AbstractSession.getSessionManager()", "public org.eclipse.jetty.server.SessionManager getSessionManager()"], ["void", "org.eclipse.jetty.server.session.AbstractSession.invalidate()", "public void invalidate() throws java.lang.IllegalStateException"], ["boolean", "org.eclipse.jetty.server.session.AbstractSession.isIdChanged()", "public boolean isIdChanged()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSession.isNew()", "public boolean isNew() throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.session.AbstractSession.putValue(java.lang.String, java.lang.Object)", "public void putValue(java.lang.String, java.lang.Object) throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.session.AbstractSession.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSession.removeValue(java.lang.String)", "public void removeValue(java.lang.String) throws java.lang.IllegalStateException"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.session.AbstractSession.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.lang.String[]", "org.eclipse.jetty.server.session.AbstractSession.getValueNames()", "public java.lang.String[] getValueNames() throws java.lang.IllegalStateException"], ["java.lang.Object", "org.eclipse.jetty.server.session.AbstractSession.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSession.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.AbstractSession.setIdChanged(boolean)", "public void setIdChanged(boolean)"], ["void", "org.eclipse.jetty.server.session.AbstractSession.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSession.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.session.AbstractSession.bindValue(java.lang.String, java.lang.Object)", "public void bindValue(java.lang.String, java.lang.Object)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSession.isValid()", "public boolean isValid()"], ["int", "org.eclipse.jetty.server.session.AbstractSession.getRequests()", "public int getRequests()"], ["void", "org.eclipse.jetty.server.session.AbstractSession.setRequests(int)", "public void setRequests(int)"], ["void", "org.eclipse.jetty.server.session.AbstractSession.unbindValue(java.lang.String, java.lang.Object)", "public void unbindValue(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.AbstractSession.willPassivate()", "public void willPassivate()"], ["void", "org.eclipse.jetty.server.session.AbstractSession.didActivate()", "public void didActivate()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager$Saver.run()", "public void run()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager$Scavenger.run()", "public void run()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.session.AbstractSessionManager$1.getSession(java.lang.String)", "public javax.servlet.http.HttpSession getSession(java.lang.String)"], ["java.util.Enumeration", "org.eclipse.jetty.server.session.AbstractSessionManager$1.getIds()", "public java.util.Enumeration getIds()"], ["org.eclipse.jetty.server.session.AbstractSessionIdManager", "org.eclipse.jetty.server.session.AbstractSessionIdManager()", "public org.eclipse.jetty.server.session.AbstractSessionIdManager()"], ["org.eclipse.jetty.server.session.AbstractSessionIdManager", "org.eclipse.jetty.server.session.AbstractSessionIdManager(java.util.Random)", "public org.eclipse.jetty.server.session.AbstractSessionIdManager(java.util.Random)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionIdManager.getWorkerName()", "public java.lang.String getWorkerName()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionIdManager.setWorkerName(java.lang.String)", "public void setWorkerName(java.lang.String)"], ["java.util.Random", "org.eclipse.jetty.server.session.AbstractSessionIdManager.getRandom()", "public java.util.Random getRandom()"], ["synchronized", "org.eclipse.jetty.server.session.AbstractSessionIdManager.void setRandom(java.util.Random)", "public synchronized void setRandom(java.util.Random)"], ["long", "org.eclipse.jetty.server.session.AbstractSessionIdManager.getReseed()", "public long getReseed()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionIdManager.setReseed(long)", "public void setReseed(long)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionIdManager.newSessionId(javax.servlet.http.HttpServletRequest, long)", "public java.lang.String newSessionId(javax.servlet.http.HttpServletRequest, long)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionIdManager.newSessionId(long)", "public java.lang.String newSessionId(long)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionIdManager.initRandom()", "public void initRandom()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionIdManager.getNodeId(java.lang.String, javax.servlet.http.HttpServletRequest)", "public java.lang.String getNodeId(java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionIdManager.getClusterId(java.lang.String)", "public java.lang.String getClusterId(java.lang.String)"], ["org.eclipse.jetty.server.session.HashSessionManager", "org.eclipse.jetty.server.session.HashSessionManager()", "public org.eclipse.jetty.server.session.HashSessionManager()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.doStart()", "public void doStart() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.doStop()", "public void doStop() throws java.lang.Exception"], ["int", "org.eclipse.jetty.server.session.HashSessionManager.getScavengePeriod()", "public int getScavengePeriod()"], ["int", "org.eclipse.jetty.server.session.HashSessionManager.getSessions()", "public int getSessions()"], ["int", "org.eclipse.jetty.server.session.HashSessionManager.getIdleSavePeriod()", "public int getIdleSavePeriod()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setIdleSavePeriod(int)", "public void setIdleSavePeriod(int)"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setSavePeriod(int)", "public void setSavePeriod(int)"], ["int", "org.eclipse.jetty.server.session.HashSessionManager.getSavePeriod()", "public int getSavePeriod()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setScavengePeriod(int)", "public void setScavengePeriod(int)"], ["org.eclipse.jetty.server.session.AbstractSession", "org.eclipse.jetty.server.session.HashSessionManager.getSession(java.lang.String)", "public org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setStoreDirectory(java.io.File)", "public void setStoreDirectory(java.io.File) throws java.io.IOException"], ["java.io.File", "org.eclipse.jetty.server.session.HashSessionManager.getStoreDirectory()", "public java.io.File getStoreDirectory()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setLazyLoad(boolean)", "public void setLazyLoad(boolean)"], ["boolean", "org.eclipse.jetty.server.session.HashSessionManager.isLazyLoad()", "public boolean isLazyLoad()"], ["boolean", "org.eclipse.jetty.server.session.HashSessionManager.isDeleteUnrestorableSessions()", "public boolean isDeleteUnrestorableSessions()"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.setDeleteUnrestorableSessions(boolean)", "public void setDeleteUnrestorableSessions(boolean)"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.restoreSessions()", "public void restoreSessions() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.HashSessionManager.saveSessions(boolean)", "public void saveSessions(boolean) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.HashedSession", "org.eclipse.jetty.server.session.HashSessionManager.restoreSession(java.io.InputStream, org.eclipse.jetty.server.session.HashedSession)", "public org.eclipse.jetty.server.session.HashedSession restoreSession(java.io.InputStream, org.eclipse.jetty.server.session.HashedSession) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.HashSessionIdManager", "org.eclipse.jetty.server.session.HashSessionIdManager()", "public org.eclipse.jetty.server.session.HashSessionIdManager()"], ["org.eclipse.jetty.server.session.HashSessionIdManager", "org.eclipse.jetty.server.session.HashSessionIdManager(java.util.Random)", "public org.eclipse.jetty.server.session.HashSessionIdManager(java.util.Random)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.session.HashSessionIdManager.getSessions()", "public java.util.Collection<java.lang.String> getSessions()"], ["java.util.Collection<javax.servlet.http.HttpSession>", "org.eclipse.jetty.server.session.HashSessionIdManager.getSession(java.lang.String)", "public java.util.Collection<javax.servlet.http.HttpSession> getSession(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.session.HashSessionIdManager.idInUse(java.lang.String)", "public boolean idInUse(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.HashSessionIdManager.addSession(javax.servlet.http.HttpSession)", "public void addSession(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.session.HashSessionIdManager.removeSession(javax.servlet.http.HttpSession)", "public void removeSession(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.session.HashSessionIdManager.invalidateAll(java.lang.String)", "public void invalidateAll(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.HashSessionIdManager.renewSessionId(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)", "public void renewSessionId(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.void setVirtualHost(java.lang.String)", "public synchronized void setVirtualHost(java.lang.String)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.java.lang.String getVirtualHost()", "public synchronized java.lang.String getVirtualHost()"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.long getLastSaved()", "public synchronized long getLastSaved()"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.void setLastSaved(long)", "public synchronized void setLastSaved(long)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.void setExpiryTime(long)", "public synchronized void setExpiryTime(long)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.long getExpiryTime()", "public synchronized long getExpiryTime()"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.void setCanonicalContext(java.lang.String)", "public synchronized void setCanonicalContext(java.lang.String)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.java.lang.String getCanonicalContext()", "public synchronized java.lang.String getCanonicalContext()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.setCookieSet(long)", "public void setCookieSet(long)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.long getCookieSet()", "public synchronized long getCookieSet()"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.void setLastNode(java.lang.String)", "public synchronized void setLastNode(java.lang.String)"], ["synchronized", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.java.lang.String getLastNode()", "public synchronized java.lang.String getLastNode()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionManager$Session.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig(org.eclipse.jetty.server.session.AbstractSessionManager)", "public org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig(org.eclipse.jetty.server.session.AbstractSessionManager)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.getComment()", "public java.lang.String getComment()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.getDomain()", "public java.lang.String getDomain()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.getMaxAge()", "public int getMaxAge()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.getPath()", "public java.lang.String getPath()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.isHttpOnly()", "public boolean isHttpOnly()"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.isSecure()", "public boolean isSecure()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setComment(java.lang.String)", "public void setComment(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setDomain(java.lang.String)", "public void setDomain(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setHttpOnly(boolean)", "public void setHttpOnly(boolean)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setMaxAge(int)", "public void setMaxAge(int)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionManager$CookieConfig.setSecure(boolean)", "public void setSecure(boolean)"], ["org.eclipse.jetty.server.session.JDBCSessionManager", "org.eclipse.jetty.server.session.JDBCSessionManager()", "public org.eclipse.jetty.server.session.JDBCSessionManager()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager.setSaveInterval(long)", "public void setSaveInterval(long)"], ["long", "org.eclipse.jetty.server.session.JDBCSessionManager.getSaveInterval()", "public long getSaveInterval()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager.cacheInvalidate(org.eclipse.jetty.server.session.JDBCSessionManager$Session)", "public void cacheInvalidate(org.eclipse.jetty.server.session.JDBCSessionManager$Session)"], ["org.eclipse.jetty.server.session.JDBCSessionManager$Session", "org.eclipse.jetty.server.session.JDBCSessionManager.getSession(java.lang.String)", "public org.eclipse.jetty.server.session.JDBCSessionManager$Session getSession(java.lang.String)"], ["int", "org.eclipse.jetty.server.session.JDBCSessionManager.getSessions()", "public int getSessions()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager.doStart()", "public void doStart() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager.doStop()", "public void doStop() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.JDBCSessionManager.renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionManager.removeSession(org.eclipse.jetty.server.session.AbstractSession, boolean)", "public boolean removeSession(org.eclipse.jetty.server.session.AbstractSession, boolean)"], ["org.eclipse.jetty.server.session.AbstractSession", "org.eclipse.jetty.server.session.JDBCSessionManager.getSession(java.lang.String)", "public org.eclipse.jetty.server.session.AbstractSession getSession(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$2.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.NCSARequestLog", "org.eclipse.jetty.server.NCSARequestLog()", "public org.eclipse.jetty.server.NCSARequestLog()"], ["org.eclipse.jetty.server.NCSARequestLog", "org.eclipse.jetty.server.NCSARequestLog(java.lang.String)", "public org.eclipse.jetty.server.NCSARequestLog(java.lang.String)"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setFilename(java.lang.String)", "public void setFilename(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.NCSARequestLog.getFilename()", "public java.lang.String getFilename()"], ["java.lang.String", "org.eclipse.jetty.server.NCSARequestLog.getDatedFilename()", "public java.lang.String getDatedFilename()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setRetainDays(int)", "public void setRetainDays(int)"], ["int", "org.eclipse.jetty.server.NCSARequestLog.getRetainDays()", "public int getRetainDays()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setAppend(boolean)", "public void setAppend(boolean)"], ["boolean", "org.eclipse.jetty.server.NCSARequestLog.isAppend()", "public boolean isAppend()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setFilenameDateFormat(java.lang.String)", "public void setFilenameDateFormat(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.NCSARequestLog.getFilenameDateFormat()", "public java.lang.String getFilenameDateFormat()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport, org.eclipse.jetty.server.HttpInput<java.nio.ByteBuffer>)", "public org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport, org.eclipse.jetty.server.HttpInput<java.nio.ByteBuffer>)"], ["void", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.earlyEOF()", "public void earlyEOF()"], ["boolean", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.content(java.nio.ByteBuffer)", "public boolean content(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.badMessage(int, java.lang.String)", "public void badMessage(int, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.headerComplete()", "public boolean headerComplete()"], ["void", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.abort()", "public void abort()"], ["boolean", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.messageComplete()", "public boolean messageComplete()"], ["boolean", "org.eclipse.jetty.server.HttpConnection$HttpChannelOverHttp.content(java.lang.Object)", "public boolean content(java.lang.Object)"], ["org.eclipse.jetty.server.HttpInputOverHTTP", "org.eclipse.jetty.server.HttpInputOverHTTP(org.eclipse.jetty.server.HttpConnection)", "public org.eclipse.jetty.server.HttpInputOverHTTP(org.eclipse.jetty.server.HttpConnection)"], ["void", "org.eclipse.jetty.server.HttpInputOverHTTP.recycle()", "public void recycle()"], ["java.lang.String", "org.eclipse.jetty.server.HttpInputOverHTTP.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpInputOverHTTP.content(java.nio.ByteBuffer)", "public void content(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.server.HttpInputOverHTTP.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpInputOverHTTP.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpInputOverHTTP.content(java.lang.Object)", "public void content(java.lang.Object)"], ["org.eclipse.jetty.server.HttpChannelState$Action[]", "org.eclipse.jetty.server.HttpChannelState$Action.values()", "public static org.eclipse.jetty.server.HttpChannelState$Action[] values()"], ["org.eclipse.jetty.server.HttpChannelState$Action", "org.eclipse.jetty.server.HttpChannelState$Action.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$Action valueOf(java.lang.String)"], ["org.eclipse.jetty.server.QueuedHttpInput", "org.eclipse.jetty.server.QueuedHttpInput()", "public org.eclipse.jetty.server.QueuedHttpInput()"], ["void", "org.eclipse.jetty.server.QueuedHttpInput.content(T)", "public void content(T)"], ["void", "org.eclipse.jetty.server.QueuedHttpInput.recycle()", "public void recycle()"], ["void", "org.eclipse.jetty.server.QueuedHttpInput.earlyEOF()", "public void earlyEOF()"], ["void", "org.eclipse.jetty.server.QueuedHttpInput.messageComplete()", "public void messageComplete()"], ["org.eclipse.jetty.server.Authentication$Failed", "org.eclipse.jetty.server.Authentication$Failed(java.lang.String)", "public org.eclipse.jetty.server.Authentication$Failed(java.lang.String)"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["org.eclipse.jetty.server.Response$ResponseWriter", "org.eclipse.jetty.server.Response$ResponseWriter(org.eclipse.jetty.server.HttpWriter, java.lang.String)", "public org.eclipse.jetty.server.Response$ResponseWriter(org.eclipse.jetty.server.HttpWriter, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.Response$ResponseWriter.isFor(java.lang.String)", "public boolean isFor(java.lang.String)"], ["org.eclipse.jetty.server.ForwardedRequestCustomizer", "org.eclipse.jetty.server.ForwardedRequestCustomizer()", "public org.eclipse.jetty.server.ForwardedRequestCustomizer()"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getHostHeader()", "public java.lang.String getHostHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setHostHeader(java.lang.String)", "public void setHostHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedHostHeader()", "public java.lang.String getForwardedHostHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedHostHeader(java.lang.String)", "public void setForwardedHostHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedServerHeader()", "public java.lang.String getForwardedServerHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedServerHeader(java.lang.String)", "public void setForwardedServerHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedForHeader()", "public java.lang.String getForwardedForHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedForHeader(java.lang.String)", "public void setForwardedForHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedProtoHeader()", "public java.lang.String getForwardedProtoHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedProtoHeader(java.lang.String)", "public void setForwardedProtoHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedCipherSuiteHeader()", "public java.lang.String getForwardedCipherSuiteHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedCipherSuiteHeader(java.lang.String)", "public void setForwardedCipherSuiteHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedSslSessionIdHeader()", "public java.lang.String getForwardedSslSessionIdHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedSslSessionIdHeader(java.lang.String)", "public void setForwardedSslSessionIdHeader(java.lang.String)"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)", "public void customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.InclusiveByteRange", "org.eclipse.jetty.server.InclusiveByteRange(long, long)", "public org.eclipse.jetty.server.InclusiveByteRange(long, long)"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getFirst()", "public long getFirst()"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getLast()", "public long getLast()"], ["java.util.List<org.eclipse.jetty.server.InclusiveByteRange>", "org.eclipse.jetty.server.InclusiveByteRange.satisfiableRanges(java.util.Enumeration<java.lang.String>, long)", "public static java.util.List<org.eclipse.jetty.server.InclusiveByteRange> satisfiableRanges(java.util.Enumeration<java.lang.String>, long)"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getFirst(long)", "public long getFirst(long)"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getLast(long)", "public long getLast(long)"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getSize(long)", "public long getSize(long)"], ["java.lang.String", "org.eclipse.jetty.server.InclusiveByteRange.toHeaderRangeString(long)", "public java.lang.String toHeaderRangeString(long)"], ["java.lang.String", "org.eclipse.jetty.server.InclusiveByteRange.to416HeaderRangeString(long)", "public static java.lang.String to416HeaderRangeString(long)"], ["java.lang.String", "org.eclipse.jetty.server.InclusiveByteRange.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpOutput$AsyncWrite", "org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, byte[], int, int, boolean)", "public org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, byte[], int, int, boolean)"], ["org.eclipse.jetty.server.HttpOutput$AsyncWrite", "org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, java.nio.ByteBuffer, boolean)", "public org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, java.nio.ByteBuffer, boolean)"], ["org.eclipse.jetty.server.HttpOutput", "org.eclipse.jetty.server.HttpOutput(org.eclipse.jetty.server.HttpChannel<?>)", "public org.eclipse.jetty.server.HttpOutput(org.eclipse.jetty.server.HttpChannel<?>)"], ["org.eclipse.jetty.server.HttpChannel<?>", "org.eclipse.jetty.server.HttpOutput.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel<?> getHttpChannel()"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isWritten()", "public boolean isWritten()"], ["long", "org.eclipse.jetty.server.HttpOutput.getWritten()", "public long getWritten()"], ["void", "org.eclipse.jetty.server.HttpOutput.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.HttpOutput.reopen()", "public void reopen()"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isAllContentWritten()", "public boolean isAllContentWritten()"], ["void", "org.eclipse.jetty.server.HttpOutput.close()", "public void close()"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isClosed()", "public boolean isClosed()"], ["void", "org.eclipse.jetty.server.HttpOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.write(java.nio.ByteBuffer)", "public void write(java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.print(java.lang.String)", "public void print(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.ByteBuffer)", "public void sendContent(java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.io.InputStream)", "public void sendContent(java.io.InputStream) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.channels.ReadableByteChannel)", "public void sendContent(java.nio.channels.ReadableByteChannel) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(org.eclipse.jetty.http.HttpContent)", "public void sendContent(org.eclipse.jetty.http.HttpContent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.ByteBuffer, org.eclipse.jetty.util.Callback)", "public void sendContent(java.nio.ByteBuffer, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.io.InputStream, org.eclipse.jetty.util.Callback)", "public void sendContent(java.io.InputStream, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)", "public void sendContent(java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(org.eclipse.jetty.http.HttpContent, org.eclipse.jetty.util.Callback)", "public void sendContent(org.eclipse.jetty.http.HttpContent, org.eclipse.jetty.util.Callback)"], ["int", "org.eclipse.jetty.server.HttpOutput.getBufferSize()", "public int getBufferSize()"], ["void", "org.eclipse.jetty.server.HttpOutput.setBufferSize(int)", "public void setBufferSize(int)"], ["void", "org.eclipse.jetty.server.HttpOutput.resetBuffer()", "public void resetBuffer()"], ["void", "org.eclipse.jetty.server.HttpOutput.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isReady()", "public boolean isReady()"], ["void", "org.eclipse.jetty.server.HttpOutput.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpOutput.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannelState$State[]", "org.eclipse.jetty.server.HttpChannelState$State.values()", "public static org.eclipse.jetty.server.HttpChannelState$State[] values()"], ["org.eclipse.jetty.server.HttpChannelState$State", "org.eclipse.jetty.server.HttpChannelState$State.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$State valueOf(java.lang.String)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["void", "org.eclipse.jetty.server.NetworkTrafficServerConnector.addNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)", "public void addNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)"], ["void", "org.eclipse.jetty.server.NetworkTrafficServerConnector.removeNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)", "public void removeNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback$1.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["java.lang.Object", "org.eclipse.jetty.server.LocalConnector.getTransport()", "public java.lang.Object getTransport()"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponses(java.lang.String)", "public java.lang.String getResponses(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponses(java.lang.String, long, java.util.concurrent.TimeUnit)", "public java.lang.String getResponses(java.lang.String, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponses(java.nio.ByteBuffer)", "public java.nio.ByteBuffer getResponses(java.nio.ByteBuffer) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponses(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit)", "public java.nio.ByteBuffer getResponses(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["org.eclipse.jetty.server.LocalConnector$LocalEndPoint", "org.eclipse.jetty.server.LocalConnector.executeRequest(java.lang.String)", "public org.eclipse.jetty.server.LocalConnector$LocalEndPoint executeRequest(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$5.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.ServletResponseHttpWrapper", "org.eclipse.jetty.server.ServletResponseHttpWrapper(javax.servlet.ServletResponse)", "public org.eclipse.jetty.server.ServletResponseHttpWrapper(javax.servlet.ServletResponse)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["boolean", "org.eclipse.jetty.server.ServletResponseHttpWrapper.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setStatus(int)", "public void setStatus(int)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["int", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getStatus()", "public int getStatus()"], ["void", "org.eclipse.jetty.server.HttpOutput$AsyncICB.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["org.eclipse.jetty.server.EncodingHttpWriter", "org.eclipse.jetty.server.EncodingHttpWriter(org.eclipse.jetty.server.HttpOutput, java.lang.String)", "public org.eclipse.jetty.server.EncodingHttpWriter(org.eclipse.jetty.server.HttpOutput, java.lang.String)"], ["void", "org.eclipse.jetty.server.EncodingHttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Request$1.close()", "public void close() throws java.io.IOException"], ["org.eclipse.jetty.server.HttpChannelState$State", "org.eclipse.jetty.server.HttpChannelState.getState()", "public org.eclipse.jetty.server.HttpChannelState$State getState()"], ["void", "org.eclipse.jetty.server.HttpChannelState.addListener(javax.servlet.AsyncListener)", "public void addListener(javax.servlet.AsyncListener)"], ["void", "org.eclipse.jetty.server.HttpChannelState.setTimeout(long)", "public void setTimeout(long)"], ["long", "org.eclipse.jetty.server.HttpChannelState.getTimeout()", "public long getTimeout()"], ["org.eclipse.jetty.server.AsyncContextEvent", "org.eclipse.jetty.server.HttpChannelState.getAsyncContextEvent()", "public org.eclipse.jetty.server.AsyncContextEvent getAsyncContextEvent()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState.getStatusString()", "public java.lang.String getStatusString()"], ["void", "org.eclipse.jetty.server.HttpChannelState.startAsync(org.eclipse.jetty.server.AsyncContextEvent)", "public void startAsync(org.eclipse.jetty.server.AsyncContextEvent)"], ["void", "org.eclipse.jetty.server.HttpChannelState.dispatch(javax.servlet.ServletContext, java.lang.String)", "public void dispatch(javax.servlet.ServletContext, java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState.complete()", "public void complete()"], ["void", "org.eclipse.jetty.server.HttpChannelState.errorComplete()", "public void errorComplete()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isExpired()", "public boolean isExpired()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isInitial()", "public boolean isInitial()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isSuspended()", "public boolean isSuspended()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isAsync()", "public boolean isAsync()"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.HttpChannelState.getBaseRequest()", "public org.eclipse.jetty.server.Request getBaseRequest()"], ["org.eclipse.jetty.server.HttpChannel<?>", "org.eclipse.jetty.server.HttpChannelState.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel<?> getHttpChannel()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.HttpChannelState.getContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler getContextHandler()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.HttpChannelState.getServletResponse()", "public javax.servlet.ServletResponse getServletResponse()"], ["java.lang.Object", "org.eclipse.jetty.server.HttpChannelState.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.HttpChannelState.onReadPossible()", "public void onReadPossible()"], ["void", "org.eclipse.jetty.server.HttpChannelState.onWritePossible()", "public void onWritePossible()"], ["org.eclipse.jetty.server.CookieCutter", "org.eclipse.jetty.server.CookieCutter()", "public org.eclipse.jetty.server.CookieCutter()"], ["javax.servlet.http.Cookie[]", "org.eclipse.jetty.server.CookieCutter.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["void", "org.eclipse.jetty.server.CookieCutter.setCookies(javax.servlet.http.Cookie[])", "public void setCookies(javax.servlet.http.Cookie[])"], ["void", "org.eclipse.jetty.server.CookieCutter.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.CookieCutter.addCookieField(java.lang.String)", "public void addCookieField(java.lang.String)"], ["org.eclipse.jetty.server.NegotiatingServerConnectionFactory", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory(java.lang.String, java.lang.String...)", "public org.eclipse.jetty.server.NegotiatingServerConnectionFactory(java.lang.String, java.lang.String...)"], ["java.lang.String", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.getDefaultProtocol()", "public java.lang.String getDefaultProtocol()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.setDefaultProtocol(java.lang.String)", "public void setDefaultProtocol(java.lang.String)"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.getProtocols()", "public java.util.List<java.lang.String> getProtocols()"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["java.lang.String", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpChannel$Commit100Callback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpInput$State.waitForContent(org.eclipse.jetty.server.HttpInput<?>)", "public void waitForContent(org.eclipse.jetty.server.HttpInput<?>) throws java.io.IOException"], ["int", "org.eclipse.jetty.server.HttpInput$State.noContent()", "public int noContent() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.HttpInput$State.isEOF()", "public boolean isEOF()"], ["org.eclipse.jetty.server.ByteBufferQueuedHttpInput", "org.eclipse.jetty.server.ByteBufferQueuedHttpInput()", "public org.eclipse.jetty.server.ByteBufferQueuedHttpInput()"], ["org.eclipse.jetty.server.SslConnectionFactory", "org.eclipse.jetty.server.SslConnectionFactory()", "public org.eclipse.jetty.server.SslConnectionFactory()"], ["org.eclipse.jetty.server.SslConnectionFactory", "org.eclipse.jetty.server.SslConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.SslConnectionFactory(java.lang.String)"], ["org.eclipse.jetty.server.SslConnectionFactory", "org.eclipse.jetty.server.SslConnectionFactory(org.eclipse.jetty.util.ssl.SslContextFactory, java.lang.String)", "public org.eclipse.jetty.server.SslConnectionFactory(org.eclipse.jetty.util.ssl.SslContextFactory, java.lang.String)"], ["org.eclipse.jetty.util.ssl.SslContextFactory", "org.eclipse.jetty.server.SslConnectionFactory.getSslContextFactory()", "public org.eclipse.jetty.util.ssl.SslContextFactory getSslContextFactory()"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.SslConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["java.lang.String", "org.eclipse.jetty.server.SslConnectionFactory.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Slf4jRequestLog", "org.eclipse.jetty.server.Slf4jRequestLog()", "public org.eclipse.jetty.server.Slf4jRequestLog()"], ["void", "org.eclipse.jetty.server.Slf4jRequestLog.setLoggerName(java.lang.String)", "public void setLoggerName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Slf4jRequestLog.getLoggerName()", "public java.lang.String getLoggerName()"], ["void", "org.eclipse.jetty.server.Slf4jRequestLog.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable(org.eclipse.jetty.server.ShutdownMonitor)", "public org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable(org.eclipse.jetty.server.ShutdownMonitor)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.run()", "public void run()"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.stopInput(java.net.Socket)", "public void stopInput(java.net.Socket)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.stopOutput(java.net.Socket)", "public void stopOutput(java.net.Socket) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.informClient(java.io.OutputStream, java.lang.String)", "public void informClient(java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.stopLifeCycles(boolean)", "public void stopLifeCycles(boolean)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.startListenSocket()", "public void startListenSocket()"], ["org.eclipse.jetty.server.HostHeaderCustomizer", "org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String)", "public org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String)"], ["org.eclipse.jetty.server.HostHeaderCustomizer", "org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String, int)", "public org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.HostHeaderCustomizer.customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)", "public void customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)"], ["org.eclipse.jetty.server.ClassLoaderDump", "org.eclipse.jetty.server.ClassLoaderDump(java.lang.ClassLoader)", "public org.eclipse.jetty.server.ClassLoaderDump(java.lang.ClassLoader)"], ["java.lang.String", "org.eclipse.jetty.server.ClassLoaderDump.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.server.ClassLoaderDump.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpInput.init(org.eclipse.jetty.server.HttpChannelState)", "public void init(org.eclipse.jetty.server.HttpChannelState)"], ["java.lang.Object", "org.eclipse.jetty.server.HttpInput.lock()", "public final java.lang.Object lock()"], ["void", "org.eclipse.jetty.server.HttpInput.recycle()", "public void recycle()"], ["int", "org.eclipse.jetty.server.HttpInput.available()", "public int available()"], ["int", "org.eclipse.jetty.server.HttpInput.read()", "public int read() throws java.io.IOException"], ["int", "org.eclipse.jetty.server.HttpInput.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.eclipse.jetty.server.HttpInput.getContentRead()", "public long getContentRead()"], ["void", "org.eclipse.jetty.server.HttpInput.earlyEOF()", "public void earlyEOF()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isEarlyEOF()", "public boolean isEarlyEOF()"], ["void", "org.eclipse.jetty.server.HttpInput.messageComplete()", "public void messageComplete()"], ["void", "org.eclipse.jetty.server.HttpInput.consumeAll()", "public void consumeAll()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isAsync()", "public boolean isAsync()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isEOF()", "public boolean isEOF()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isFinished()", "public boolean isFinished()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isReady()", "public boolean isReady()"], ["void", "org.eclipse.jetty.server.HttpInput.setReadListener(javax.servlet.ReadListener)", "public void setReadListener(javax.servlet.ReadListener)"], ["void", "org.eclipse.jetty.server.HttpInput.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpInput.run()", "public void run()"], ["org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB", "org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB(org.eclipse.jetty.server.HttpOutput, java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)", "public org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB(org.eclipse.jetty.server.HttpOutput, java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["org.eclipse.jetty.server.LowResourceMonitor", "org.eclipse.jetty.server.LowResourceMonitor(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.LowResourceMonitor(org.eclipse.jetty.server.Server)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor.isLowOnResources()", "public boolean isLowOnResources()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourcesReasons()", "public java.lang.String getLowResourcesReasons()"], ["long", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourcesStarted()", "public long getLowResourcesStarted()"], ["java.util.Collection<org.eclipse.jetty.server.Connector>", "org.eclipse.jetty.server.LowResourceMonitor.getMonitoredConnectors()", "public java.util.Collection<org.eclipse.jetty.server.Connector> getMonitoredConnectors()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMonitoredConnectors(java.util.Collection<org.eclipse.jetty.server.Connector>)", "public void setMonitoredConnectors(java.util.Collection<org.eclipse.jetty.server.Connector>)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getPeriod()", "public int getPeriod()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setPeriod(int)", "public void setPeriod(int)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor.getMonitorThreads()", "public boolean getMonitorThreads()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMonitorThreads(boolean)", "public void setMonitorThreads(boolean)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getMaxConnections()", "public int getMaxConnections()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMaxConnections(int)", "public void setMaxConnections(int)"], ["long", "org.eclipse.jetty.server.LowResourceMonitor.getMaxMemory()", "public long getMaxMemory()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMaxMemory(long)", "public void setMaxMemory(long)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourcesIdleTimeout()", "public int getLowResourcesIdleTimeout()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setLowResourcesIdleTimeout(int)", "public void setLowResourcesIdleTimeout(int)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getMaxLowResourcesTime()", "public int getMaxLowResourcesTime()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMaxLowResourcesTime(int)", "public void setMaxLowResourcesTime(int)"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.Request(org.eclipse.jetty.server.HttpChannel<?>, org.eclipse.jetty.server.HttpInput<?>)", "public org.eclipse.jetty.server.Request(org.eclipse.jetty.server.HttpChannel<?>, org.eclipse.jetty.server.HttpInput<?>)"], ["org.eclipse.jetty.http.HttpFields", "org.eclipse.jetty.server.Request.getHttpFields()", "public org.eclipse.jetty.http.HttpFields getHttpFields()"], ["org.eclipse.jetty.server.HttpInput<?>", "org.eclipse.jetty.server.Request.getHttpInput()", "public org.eclipse.jetty.server.HttpInput<?> getHttpInput()"], ["void", "org.eclipse.jetty.server.Request.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.Request.extractParameters()", "public void extractParameters()"], ["void", "org.eclipse.jetty.server.Request.extractFormParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public void extractFormParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.Request.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.Request.getHttpChannelState()", "public org.eclipse.jetty.server.HttpChannelState getHttpChannelState()"], ["java.lang.Object", "org.eclipse.jetty.server.Request.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["org.eclipse.jetty.util.Attributes", "org.eclipse.jetty.server.Request.getAttributes()", "public org.eclipse.jetty.util.Attributes getAttributes()"], ["org.eclipse.jetty.server.Authentication", "org.eclipse.jetty.server.Request.getAuthentication()", "public org.eclipse.jetty.server.Authentication getAuthentication()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getAuthType()", "public java.lang.String getAuthType()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["org.eclipse.jetty.server.HttpChannel<?>", "org.eclipse.jetty.server.Request.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel<?> getHttpChannel()"], ["int", "org.eclipse.jetty.server.Request.getContentLength()", "public int getContentLength()"], ["long", "org.eclipse.jetty.server.Request.getContentLengthLong()", "public long getContentLengthLong()"], ["long", "org.eclipse.jetty.server.Request.getContentRead()", "public long getContentRead()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getContentType()", "public java.lang.String getContentType()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.Request.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getContextPath()", "public java.lang.String getContextPath()"], ["javax.servlet.http.Cookie[]", "org.eclipse.jetty.server.Request.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "org.eclipse.jetty.server.Request.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["javax.servlet.DispatcherType", "org.eclipse.jetty.server.Request.getDispatcherType()", "public javax.servlet.DispatcherType getDispatcherType()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["int", "org.eclipse.jetty.server.Request.getInputState()", "public int getInputState()"], ["javax.servlet.ServletInputStream", "org.eclipse.jetty.server.Request.getInputStream()", "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"], ["int", "org.eclipse.jetty.server.Request.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.util.Locale", "org.eclipse.jetty.server.Request.getLocale()", "public java.util.Locale getLocale()"], ["java.util.Enumeration<java.util.Locale>", "org.eclipse.jetty.server.Request.getLocales()", "public java.util.Enumeration<java.util.Locale> getLocales()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getLocalAddr()", "public java.lang.String getLocalAddr()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getLocalName()", "public java.lang.String getLocalName()"], ["int", "org.eclipse.jetty.server.Request.getLocalPort()", "public int getLocalPort()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.eclipse.jetty.server.Request.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String[]", "org.eclipse.jetty.server.Request.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["org.eclipse.jetty.util.MultiMap<java.lang.String>", "org.eclipse.jetty.server.Request.getQueryParameters()", "public org.eclipse.jetty.util.MultiMap<java.lang.String> getQueryParameters()"], ["void", "org.eclipse.jetty.server.Request.setQueryParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public void setQueryParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["void", "org.eclipse.jetty.server.Request.setContentParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public void setContentParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["void", "org.eclipse.jetty.server.Request.resetParameters()", "public void resetParameters()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getProtocol()", "public java.lang.String getProtocol()"], ["org.eclipse.jetty.http.HttpVersion", "org.eclipse.jetty.server.Request.getHttpVersion()", "public org.eclipse.jetty.http.HttpVersion getHttpVersion()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getQueryEncoding()", "public java.lang.String getQueryEncoding()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getQueryString()", "public java.lang.String getQueryString()"], ["java.io.BufferedReader", "org.eclipse.jetty.server.Request.getReader()", "public java.io.BufferedReader getReader() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.Request.getRemoteInetSocketAddress()", "public java.net.InetSocketAddress getRemoteInetSocketAddress()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["int", "org.eclipse.jetty.server.Request.getRemotePort()", "public int getRemotePort()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.Request.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.eclipse.jetty.server.Request.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.Request.getResponse()", "public org.eclipse.jetty.server.Response getResponse()"], ["java.lang.StringBuilder", "org.eclipse.jetty.server.Request.getRootURL()", "public java.lang.StringBuilder getRootURL()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getScheme()", "public java.lang.String getScheme()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getServerName()", "public java.lang.String getServerName()"], ["int", "org.eclipse.jetty.server.Request.getServerPort()", "public int getServerPort()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.Request.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getServletName()", "public java.lang.String getServletName()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.Request.getServletResponse()", "public javax.servlet.ServletResponse getServletResponse()"], ["java.lang.String", "org.eclipse.jetty.server.Request.changeSessionId()", "public java.lang.String changeSessionId()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.Request.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.Request.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["org.eclipse.jetty.server.SessionManager", "org.eclipse.jetty.server.Request.getSessionManager()", "public org.eclipse.jetty.server.SessionManager getSessionManager()"], ["long", "org.eclipse.jetty.server.Request.getTimeStamp()", "public long getTimeStamp()"], ["org.eclipse.jetty.http.HttpURI", "org.eclipse.jetty.server.Request.getUri()", "public org.eclipse.jetty.http.HttpURI getUri()"], ["org.eclipse.jetty.server.UserIdentity", "org.eclipse.jetty.server.Request.getUserIdentity()", "public org.eclipse.jetty.server.UserIdentity getUserIdentity()"], ["org.eclipse.jetty.server.UserIdentity", "org.eclipse.jetty.server.Request.getResolvedUserIdentity()", "public org.eclipse.jetty.server.UserIdentity getResolvedUserIdentity()"], ["org.eclipse.jetty.server.UserIdentity$Scope", "org.eclipse.jetty.server.Request.getUserIdentityScope()", "public org.eclipse.jetty.server.UserIdentity$Scope getUserIdentityScope()"], ["java.security.Principal", "org.eclipse.jetty.server.Request.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["boolean", "org.eclipse.jetty.server.Request.isHandled()", "public boolean isHandled()"], ["boolean", "org.eclipse.jetty.server.Request.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.eclipse.jetty.server.Request.isAsyncSupported()", "public boolean isAsyncSupported()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "org.eclipse.jetty.server.Request.isSecure()", "public boolean isSecure()"], ["void", "org.eclipse.jetty.server.Request.setSecure(boolean)", "public void setSecure(boolean)"], ["boolean", "org.eclipse.jetty.server.Request.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.Request.recoverNewSession(java.lang.Object)", "public javax.servlet.http.HttpSession recoverNewSession(java.lang.Object)"], ["void", "org.eclipse.jetty.server.Request.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.Request.saveNewSession(java.lang.Object, javax.servlet.http.HttpSession)", "public void saveNewSession(java.lang.Object, javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.Request.setAsyncSupported(boolean)", "public void setAsyncSupported(boolean)"], ["void", "org.eclipse.jetty.server.Request.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.Request.setAttributes(org.eclipse.jetty.util.Attributes)", "public void setAttributes(org.eclipse.jetty.util.Attributes)"], ["void", "org.eclipse.jetty.server.Request.setAuthentication(org.eclipse.jetty.server.Authentication)", "public void setAuthentication(org.eclipse.jetty.server.Authentication)"], ["void", "org.eclipse.jetty.server.Request.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException"], ["void", "org.eclipse.jetty.server.Request.setCharacterEncodingUnchecked(java.lang.String)", "public void setCharacterEncodingUnchecked(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setContext(org.eclipse.jetty.server.handler.ContextHandler$Context)", "public void setContext(org.eclipse.jetty.server.handler.ContextHandler$Context)"], ["boolean", "org.eclipse.jetty.server.Request.takeNewContext()", "public boolean takeNewContext()"], ["void", "org.eclipse.jetty.server.Request.setContextPath(java.lang.String)", "public void setContextPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setCookies(javax.servlet.http.Cookie[])", "public void setCookies(javax.servlet.http.Cookie[])"], ["void", "org.eclipse.jetty.server.Request.setDispatcherType(javax.servlet.DispatcherType)", "public void setDispatcherType(javax.servlet.DispatcherType)"], ["void", "org.eclipse.jetty.server.Request.setHandled(boolean)", "public void setHandled(boolean)"], ["void", "org.eclipse.jetty.server.Request.setMethod(org.eclipse.jetty.http.HttpMethod, java.lang.String)", "public void setMethod(org.eclipse.jetty.http.HttpMethod, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.Request.isHead()", "public boolean isHead()"], ["void", "org.eclipse.jetty.server.Request.setPathInfo(java.lang.String)", "public void setPathInfo(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setHttpVersion(org.eclipse.jetty.http.HttpVersion)", "public void setHttpVersion(org.eclipse.jetty.http.HttpVersion)"], ["void", "org.eclipse.jetty.server.Request.setQueryEncoding(java.lang.String)", "public void setQueryEncoding(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setQueryString(java.lang.String)", "public void setQueryString(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setRemoteAddr(java.net.InetSocketAddress)", "public void setRemoteAddr(java.net.InetSocketAddress)"], ["void", "org.eclipse.jetty.server.Request.setRequestedSessionId(java.lang.String)", "public void setRequestedSessionId(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setRequestedSessionIdFromCookie(boolean)", "public void setRequestedSessionIdFromCookie(boolean)"], ["void", "org.eclipse.jetty.server.Request.setRequestURI(java.lang.String)", "public void setRequestURI(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setScheme(java.lang.String)", "public void setScheme(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setServerName(java.lang.String)", "public void setServerName(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setServerPort(int)", "public void setServerPort(int)"], ["void", "org.eclipse.jetty.server.Request.setServletPath(java.lang.String)", "public void setServletPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setSession(javax.servlet.http.HttpSession)", "public void setSession(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.Request.setSessionManager(org.eclipse.jetty.server.SessionManager)", "public void setSessionManager(org.eclipse.jetty.server.SessionManager)"], ["void", "org.eclipse.jetty.server.Request.setTimeStamp(long)", "public void setTimeStamp(long)"], ["void", "org.eclipse.jetty.server.Request.setUri(org.eclipse.jetty.http.HttpURI)", "public void setUri(org.eclipse.jetty.http.HttpURI)"], ["void", "org.eclipse.jetty.server.Request.setUserIdentityScope(org.eclipse.jetty.server.UserIdentity$Scope)", "public void setUserIdentityScope(org.eclipse.jetty.server.UserIdentity$Scope)"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.Request.startAsync()", "public javax.servlet.AsyncContext startAsync() throws java.lang.IllegalStateException"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.Request.startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.lang.IllegalStateException"], ["java.lang.String", "org.eclipse.jetty.server.Request.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.Request.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.eclipse.jetty.server.Request.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.server.Request.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Request.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Request.logout()", "public void logout() throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Request.mergeQueryParameters(java.lang.String, boolean)", "public void mergeQueryParameters(java.lang.String, boolean)"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "org.eclipse.jetty.server.Request.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.ResourceCache$Content.getKey()", "public java.lang.String getKey()"], ["boolean", "org.eclipse.jetty.server.ResourceCache$Content.isCached()", "public boolean isCached()"], ["boolean", "org.eclipse.jetty.server.ResourceCache$Content.isMiss()", "public boolean isMiss()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.ResourceCache$Content.getResource()", "public org.eclipse.jetty.util.resource.Resource getResource()"], ["java.lang.String", "org.eclipse.jetty.server.ResourceCache$Content.getETag()", "public java.lang.String getETag()"], ["java.lang.String", "org.eclipse.jetty.server.ResourceCache$Content.getLastModified()", "public java.lang.String getLastModified()"], ["java.lang.String", "org.eclipse.jetty.server.ResourceCache$Content.getContentType()", "public java.lang.String getContentType()"], ["void", "org.eclipse.jetty.server.ResourceCache$Content.release()", "public void release()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.ResourceCache$Content.getIndirectBuffer()", "public java.nio.ByteBuffer getIndirectBuffer()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.ResourceCache$Content.getDirectBuffer()", "public java.nio.ByteBuffer getDirectBuffer()"], ["long", "org.eclipse.jetty.server.ResourceCache$Content.getContentLength()", "public long getContentLength()"], ["java.io.InputStream", "org.eclipse.jetty.server.ResourceCache$Content.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.server.ResourceCache$Content.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.ResourceCache$Content.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannel<?>", "org.eclipse.jetty.server.HttpChannel.getCurrentHttpChannel()", "public static org.eclipse.jetty.server.HttpChannel<?> getCurrentHttpChannel()"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.HttpChannel(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport, org.eclipse.jetty.server.HttpInput<T>)", "public org.eclipse.jetty.server.HttpChannel(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport, org.eclipse.jetty.server.HttpInput<T>)"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.HttpChannel.getState()", "public org.eclipse.jetty.server.HttpChannelState getState()"], ["org.eclipse.jetty.http.HttpVersion", "org.eclipse.jetty.server.HttpChannel.getHttpVersion()", "public org.eclipse.jetty.http.HttpVersion getHttpVersion()"], ["int", "org.eclipse.jetty.server.HttpChannel.getRequests()", "public int getRequests()"], ["org.eclipse.jetty.server.Connector", "org.eclipse.jetty.server.HttpChannel.getConnector()", "public org.eclipse.jetty.server.Connector getConnector()"], ["org.eclipse.jetty.server.HttpTransport", "org.eclipse.jetty.server.HttpChannel.getHttpTransport()", "public org.eclipse.jetty.server.HttpTransport getHttpTransport()"], ["long", "org.eclipse.jetty.server.HttpChannel.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.HttpChannel.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["org.eclipse.jetty.io.ByteBufferPool", "org.eclipse.jetty.server.HttpChannel.getByteBufferPool()", "public org.eclipse.jetty.io.ByteBufferPool getByteBufferPool()"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpChannel.getHttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration getHttpConfiguration()"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.HttpChannel.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.HttpChannel.getRequest()", "public org.eclipse.jetty.server.Request getRequest()"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.HttpChannel.getResponse()", "public org.eclipse.jetty.server.Response getResponse()"], ["org.eclipse.jetty.io.EndPoint", "org.eclipse.jetty.server.HttpChannel.getEndPoint()", "public org.eclipse.jetty.io.EndPoint getEndPoint()"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.HttpChannel.getLocalAddress()", "public java.net.InetSocketAddress getLocalAddress()"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.HttpChannel.getRemoteAddress()", "public java.net.InetSocketAddress getRemoteAddress()"], ["int", "org.eclipse.jetty.server.HttpChannel.getHeaderCacheSize()", "public int getHeaderCacheSize()"], ["void", "org.eclipse.jetty.server.HttpChannel.continue100(int)", "public void continue100(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpChannel.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.HttpChannel.run()", "public void run()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.handle()", "public boolean handle()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isExpecting100Continue()", "public boolean isExpecting100Continue()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isExpecting102Processing()", "public boolean isExpecting102Processing()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannel.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpChannel.proxied(java.lang.String, java.lang.String, java.lang.String, int, int)", "public void proxied(java.lang.String, java.lang.String, java.lang.String, int, int)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.startRequest(org.eclipse.jetty.http.HttpMethod, java.lang.String, java.nio.ByteBuffer, org.eclipse.jetty.http.HttpVersion)", "public boolean startRequest(org.eclipse.jetty.http.HttpMethod, java.lang.String, java.nio.ByteBuffer, org.eclipse.jetty.http.HttpVersion)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.parsedHeader(org.eclipse.jetty.http.HttpField)", "public boolean parsedHeader(org.eclipse.jetty.http.HttpField)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.parsedHostHeader(java.lang.String, int)", "public boolean parsedHostHeader(java.lang.String, int)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.headerComplete()", "public boolean headerComplete()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.content(T)", "public boolean content(T)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.messageComplete()", "public boolean messageComplete()"], ["void", "org.eclipse.jetty.server.HttpChannel.earlyEOF()", "public void earlyEOF()"], ["void", "org.eclipse.jetty.server.HttpChannel.badMessage(int, java.lang.String)", "public void badMessage(int, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isCommitted()", "public boolean isCommitted()"], ["org.eclipse.jetty.util.thread.Scheduler", "org.eclipse.jetty.server.HttpChannel.getScheduler()", "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.useDirectBuffers()", "public boolean useDirectBuffers()"], ["void", "org.eclipse.jetty.server.HttpChannel.abort()", "public void abort()"], ["org.eclipse.jetty.server.Response$OutputType[]", "org.eclipse.jetty.server.Response$OutputType.values()", "public static org.eclipse.jetty.server.Response$OutputType[] values()"], ["org.eclipse.jetty.server.Response$OutputType", "org.eclipse.jetty.server.Response$OutputType.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.Response$OutputType valueOf(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$1.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpInput$1.waitForContent(org.eclipse.jetty.server.HttpInput<?>)", "public void waitForContent(org.eclipse.jetty.server.HttpInput<?>) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$1.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server()", "public org.eclipse.jetty.server.Server()"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server(int)", "public org.eclipse.jetty.server.Server(int)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server(java.net.InetSocketAddress)", "public org.eclipse.jetty.server.Server(java.net.InetSocketAddress)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server(org.eclipse.jetty.util.thread.ThreadPool)", "public org.eclipse.jetty.server.Server(org.eclipse.jetty.util.thread.ThreadPool)"], ["java.lang.String", "org.eclipse.jetty.server.Server.getVersion()", "public static java.lang.String getVersion()"], ["boolean", "org.eclipse.jetty.server.Server.getStopAtShutdown()", "public boolean getStopAtShutdown()"], ["void", "org.eclipse.jetty.server.Server.setStopTimeout(long)", "public void setStopTimeout(long)"], ["void", "org.eclipse.jetty.server.Server.setStopAtShutdown(boolean)", "public void setStopAtShutdown(boolean)"], ["org.eclipse.jetty.server.Connector[]", "org.eclipse.jetty.server.Server.getConnectors()", "public org.eclipse.jetty.server.Connector[] getConnectors()"], ["void", "org.eclipse.jetty.server.Server.addConnector(org.eclipse.jetty.server.Connector)", "public void addConnector(org.eclipse.jetty.server.Connector)"], ["void", "org.eclipse.jetty.server.Server.removeConnector(org.eclipse.jetty.server.Connector)", "public void removeConnector(org.eclipse.jetty.server.Connector)"], ["void", "org.eclipse.jetty.server.Server.setConnectors(org.eclipse.jetty.server.Connector[])", "public void setConnectors(org.eclipse.jetty.server.Connector[])"], ["org.eclipse.jetty.util.thread.ThreadPool", "org.eclipse.jetty.server.Server.getThreadPool()", "public org.eclipse.jetty.util.thread.ThreadPool getThreadPool()"], ["boolean", "org.eclipse.jetty.server.Server.isDumpAfterStart()", "public boolean isDumpAfterStart()"], ["void", "org.eclipse.jetty.server.Server.setDumpAfterStart(boolean)", "public void setDumpAfterStart(boolean)"], ["boolean", "org.eclipse.jetty.server.Server.isDumpBeforeStop()", "public boolean isDumpBeforeStop()"], ["void", "org.eclipse.jetty.server.Server.setDumpBeforeStop(boolean)", "public void setDumpBeforeStop(boolean)"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.Server.getDateField()", "public org.eclipse.jetty.http.HttpField getDateField()"], ["void", "org.eclipse.jetty.server.Server.handle(org.eclipse.jetty.server.HttpChannel<?>)", "public void handle(org.eclipse.jetty.server.HttpChannel<?>) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Server.handleAsync(org.eclipse.jetty.server.HttpChannel<?>)", "public void handleAsync(org.eclipse.jetty.server.HttpChannel<?>) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Server.join()", "public void join() throws java.lang.InterruptedException"], ["org.eclipse.jetty.server.SessionIdManager", "org.eclipse.jetty.server.Server.getSessionIdManager()", "public org.eclipse.jetty.server.SessionIdManager getSessionIdManager()"], ["void", "org.eclipse.jetty.server.Server.setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)", "public void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)"], ["void", "org.eclipse.jetty.server.Server.clearAttributes()", "public void clearAttributes()"], ["java.lang.Object", "org.eclipse.jetty.server.Server.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Server.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.eclipse.jetty.server.Server.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.Server.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.net.URI", "org.eclipse.jetty.server.Server.getURI()", "public java.net.URI getURI()"], ["java.lang.String", "org.eclipse.jetty.server.Server.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Server.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Server.main(java.lang.String...)", "public static void main(java.lang.String...) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnectionFactory.getProtocol()", "public java.lang.String getProtocol()"], ["int", "org.eclipse.jetty.server.AbstractConnectionFactory.getInputBufferSize()", "public int getInputBufferSize()"], ["void", "org.eclipse.jetty.server.AbstractConnectionFactory.setInputBufferSize(int)", "public void setInputBufferSize(int)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnectionFactory.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.ConnectionFactory[]", "org.eclipse.jetty.server.AbstractConnectionFactory.getFactories(org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)", "public static org.eclipse.jetty.server.ConnectionFactory[] getFactories(org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)"], ["int", "org.eclipse.jetty.server.HttpInput$3.noContent()", "public int noContent() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.HttpInput$3.isEOF()", "public boolean isEOF()"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$3.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.HttpInput$4.isEOF()", "public boolean isEOF()"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$4.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Dispatcher", "org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String, java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String, java.lang.String, java.lang.String)"], ["org.eclipse.jetty.server.Dispatcher", "org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String)", "public org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String) throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.Dispatcher.forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.eclipse.jetty.server.Dispatcher.error(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void error(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.eclipse.jetty.server.Dispatcher.include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void include(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["int", "org.eclipse.jetty.server.HttpInput$2.noContent()", "public int noContent() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$2.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.LowResourceMonitor$1.run()", "public void run()"], ["void", "org.eclipse.jetty.server.AbstractConnector$Acceptor.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector$Acceptor.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog()", "public org.eclipse.jetty.server.AsyncNCSARequestLog()"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog(java.util.concurrent.BlockingQueue<java.lang.String>)", "public org.eclipse.jetty.server.AsyncNCSARequestLog(java.util.concurrent.BlockingQueue<java.lang.String>)"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String)", "public org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String)"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String, java.util.concurrent.BlockingQueue<java.lang.String>)", "public org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String, java.util.concurrent.BlockingQueue<java.lang.String>)"], ["void", "org.eclipse.jetty.server.AsyncNCSARequestLog.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.HttpConnectionFactory", "org.eclipse.jetty.server.HttpConnectionFactory()", "public org.eclipse.jetty.server.HttpConnectionFactory()"], ["org.eclipse.jetty.server.HttpConnectionFactory", "org.eclipse.jetty.server.HttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration)", "public org.eclipse.jetty.server.HttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration)"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConnectionFactory.getHttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration getHttpConfiguration()"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.HttpConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnection.onFillable()", "public void onFillable()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnection.close()", "public void close()"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException()", "public org.eclipse.jetty.server.QuietServletException()"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException(java.lang.String, java.lang.Throwable)", "public org.eclipse.jetty.server.QuietServletException(java.lang.String, java.lang.Throwable)"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException(java.lang.String)", "public org.eclipse.jetty.server.QuietServletException(java.lang.String)"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException(java.lang.Throwable)", "public org.eclipse.jetty.server.QuietServletException(java.lang.Throwable)"], ["org.eclipse.jetty.server.Utf8HttpWriter", "org.eclipse.jetty.server.Utf8HttpWriter(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.Utf8HttpWriter(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.Utf8HttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.server.LocalConnector$LocalEndPoint", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint(org.eclipse.jetty.server.LocalConnector)", "public org.eclipse.jetty.server.LocalConnector$LocalEndPoint(org.eclipse.jetty.server.LocalConnector)"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.addInput(java.lang.String)", "public void addInput(java.lang.String)"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.close()", "public void close()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.onClose()", "public void onClose()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.shutdownOutput()", "public void shutdownOutput()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.waitUntilClosed()", "public void waitUntilClosed()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.waitUntilClosedOrIdleFor(long, java.util.concurrent.TimeUnit)", "public void waitUntilClosedOrIdleFor(long, java.util.concurrent.TimeUnit)"], ["org.eclipse.jetty.server.ServletRequestHttpWrapper", "org.eclipse.jetty.server.ServletRequestHttpWrapper(javax.servlet.ServletRequest)", "public org.eclipse.jetty.server.ServletRequestHttpWrapper(javax.servlet.ServletRequest)"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getAuthType()", "public java.lang.String getAuthType()"], ["javax.servlet.http.Cookie[]", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["int", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getQueryString()", "public java.lang.String getQueryString()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["java.security.Principal", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.ServletRequestHttpWrapper.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.ServletRequestHttpWrapper.logout()", "public void logout() throws javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.changeSessionId()", "public java.lang.String changeSessionId()"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "org.eclipse.jetty.server.ServletRequestHttpWrapper.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"]]}