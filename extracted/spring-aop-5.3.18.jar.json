{"spring-aop-5.3.18.jar": [["org.aopalliance.aop.AspectException", "org.aopalliance.aop.AspectException(java.lang.String)", "public org.aopalliance.aop.AspectException(java.lang.String)"], ["org.aopalliance.aop.AspectException", "org.aopalliance.aop.AspectException(java.lang.String, java.lang.Throwable)", "public org.aopalliance.aop.AspectException(java.lang.String, java.lang.Throwable)"], ["boolean", "org.springframework.aop.TrueMethodMatcher.isRuntime()", "public boolean isRuntime()"], ["boolean", "org.springframework.aop.TrueMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.TrueMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["java.lang.String", "org.springframework.aop.TrueMethodMatcher.toString()", "public java.lang.String toString()"], ["boolean", "org.springframework.aop.TrueClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["java.lang.String", "org.springframework.aop.TrueClassFilter.toString()", "public java.lang.String toString()"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.TruePointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.TruePointcut.getMethodMatcher()", "public org.springframework.aop.MethodMatcher getMethodMatcher()"], ["java.lang.String", "org.springframework.aop.TruePointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.target.CommonsPool2TargetSource", "org.springframework.aop.target.CommonsPool2TargetSource()", "public org.springframework.aop.target.CommonsPool2TargetSource()"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.setMaxIdle(int)", "public void setMaxIdle(int)"], ["int", "org.springframework.aop.target.CommonsPool2TargetSource.getMaxIdle()", "public int getMaxIdle()"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.setMinIdle(int)", "public void setMinIdle(int)"], ["int", "org.springframework.aop.target.CommonsPool2TargetSource.getMinIdle()", "public int getMinIdle()"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.setMaxWait(long)", "public void setMaxWait(long)"], ["long", "org.springframework.aop.target.CommonsPool2TargetSource.getMaxWait()", "public long getMaxWait()"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.setTimeBetweenEvictionRunsMillis(long)", "public void setTimeBetweenEvictionRunsMillis(long)"], ["long", "org.springframework.aop.target.CommonsPool2TargetSource.getTimeBetweenEvictionRunsMillis()", "public long getTimeBetweenEvictionRunsMillis()"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.setMinEvictableIdleTimeMillis(long)", "public void setMinEvictableIdleTimeMillis(long)"], ["long", "org.springframework.aop.target.CommonsPool2TargetSource.getMinEvictableIdleTimeMillis()", "public long getMinEvictableIdleTimeMillis()"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.setBlockWhenExhausted(boolean)", "public void setBlockWhenExhausted(boolean)"], ["boolean", "org.springframework.aop.target.CommonsPool2TargetSource.isBlockWhenExhausted()", "public boolean isBlockWhenExhausted()"], ["java.lang.Object", "org.springframework.aop.target.CommonsPool2TargetSource.getTarget()", "public java.lang.Object getTarget() throws java.lang.Exception"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object) throws java.lang.Exception"], ["int", "org.springframework.aop.target.CommonsPool2TargetSource.getActiveCount()", "public int getActiveCount() throws java.lang.UnsupportedOperationException"], ["int", "org.springframework.aop.target.CommonsPool2TargetSource.getIdleCount()", "public int getIdleCount() throws java.lang.UnsupportedOperationException"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.destroy()", "public void destroy() throws java.lang.Exception"], ["org.apache.commons.pool2.PooledObject<java.lang.Object>", "org.springframework.aop.target.CommonsPool2TargetSource.makeObject()", "public org.apache.commons.pool2.PooledObject<java.lang.Object> makeObject() throws java.lang.Exception"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.destroyObject(org.apache.commons.pool2.PooledObject<java.lang.Object>)", "public void destroyObject(org.apache.commons.pool2.PooledObject<java.lang.Object>) throws java.lang.Exception"], ["boolean", "org.springframework.aop.target.CommonsPool2TargetSource.validateObject(org.apache.commons.pool2.PooledObject<java.lang.Object>)", "public boolean validateObject(org.apache.commons.pool2.PooledObject<java.lang.Object>)"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.activateObject(org.apache.commons.pool2.PooledObject<java.lang.Object>)", "public void activateObject(org.apache.commons.pool2.PooledObject<java.lang.Object>) throws java.lang.Exception"], ["void", "org.springframework.aop.target.CommonsPool2TargetSource.passivateObject(org.apache.commons.pool2.PooledObject<java.lang.Object>)", "public void passivateObject(org.apache.commons.pool2.PooledObject<java.lang.Object>) throws java.lang.Exception"], ["org.springframework.aop.target.EmptyTargetSource", "org.springframework.aop.target.EmptyTargetSource.forClass(java.lang.Class<?>)", "public static org.springframework.aop.target.EmptyTargetSource forClass(java.lang.Class<?>)"], ["org.springframework.aop.target.EmptyTargetSource", "org.springframework.aop.target.EmptyTargetSource.forClass(java.lang.Class<?>, boolean)", "public static org.springframework.aop.target.EmptyTargetSource forClass(java.lang.Class<?>, boolean)"], ["java.lang.Class<?>", "org.springframework.aop.target.EmptyTargetSource.getTargetClass()", "public java.lang.Class<?> getTargetClass()"], ["boolean", "org.springframework.aop.target.EmptyTargetSource.isStatic()", "public boolean isStatic()"], ["java.lang.Object", "org.springframework.aop.target.EmptyTargetSource.getTarget()", "public java.lang.Object getTarget()"], ["void", "org.springframework.aop.target.EmptyTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object)"], ["boolean", "org.springframework.aop.target.EmptyTargetSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.target.EmptyTargetSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.target.EmptyTargetSource.toString()", "public java.lang.String toString()"], ["org.springframework.aop.target.dynamic.BeanFactoryRefreshableTargetSource", "org.springframework.aop.target.dynamic.BeanFactoryRefreshableTargetSource(org.springframework.beans.factory.BeanFactory, java.lang.String)", "public org.springframework.aop.target.dynamic.BeanFactoryRefreshableTargetSource(org.springframework.beans.factory.BeanFactory, java.lang.String)"], ["org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource()", "public org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource()"], ["void", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.setRefreshCheckDelay(long)", "public void setRefreshCheckDelay(long)"], ["java.lang.Class<?>", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.getTargetClass()", "public synchronized java.lang.Class<?> getTargetClass()"], ["boolean", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.isStatic()", "public boolean isStatic()"], ["synchronized", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.java.lang.Object getTarget()", "public final synchronized java.lang.Object getTarget()"], ["void", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object)"], ["synchronized", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.void refresh()", "public final synchronized void refresh()"], ["synchronized", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.long getRefreshCount()", "public synchronized long getRefreshCount()"], ["synchronized", "org.springframework.aop.target.dynamic.AbstractRefreshableTargetSource.long getLastRefreshTime()", "public synchronized long getLastRefreshTime()"], ["org.springframework.aop.target.ThreadLocalTargetSource", "org.springframework.aop.target.ThreadLocalTargetSource()", "public org.springframework.aop.target.ThreadLocalTargetSource()"], ["java.lang.Object", "org.springframework.aop.target.ThreadLocalTargetSource.getTarget()", "public java.lang.Object getTarget() throws org.springframework.beans.BeansException"], ["void", "org.springframework.aop.target.ThreadLocalTargetSource.destroy()", "public void destroy()"], ["int", "org.springframework.aop.target.ThreadLocalTargetSource.getInvocationCount()", "public int getInvocationCount()"], ["int", "org.springframework.aop.target.ThreadLocalTargetSource.getHitCount()", "public int getHitCount()"], ["int", "org.springframework.aop.target.ThreadLocalTargetSource.getObjectCount()", "public int getObjectCount()"], ["org.springframework.aop.IntroductionAdvisor", "org.springframework.aop.target.ThreadLocalTargetSource.getStatsMixin()", "public org.springframework.aop.IntroductionAdvisor getStatsMixin()"], ["org.springframework.aop.target.AbstractPrototypeBasedTargetSource", "org.springframework.aop.target.AbstractPrototypeBasedTargetSource()", "public org.springframework.aop.target.AbstractPrototypeBasedTargetSource()"], ["void", "org.springframework.aop.target.AbstractPrototypeBasedTargetSource.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"], ["org.springframework.aop.target.AbstractLazyCreationTargetSource", "org.springframework.aop.target.AbstractLazyCreationTargetSource()", "public org.springframework.aop.target.AbstractLazyCreationTargetSource()"], ["synchronized", "org.springframework.aop.target.AbstractLazyCreationTargetSource.boolean isInitialized()", "public synchronized boolean isInitialized()"], ["java.lang.Class<?>", "org.springframework.aop.target.AbstractLazyCreationTargetSource.getTargetClass()", "public synchronized java.lang.Class<?> getTargetClass()"], ["boolean", "org.springframework.aop.target.AbstractLazyCreationTargetSource.isStatic()", "public boolean isStatic()"], ["synchronized", "org.springframework.aop.target.AbstractLazyCreationTargetSource.java.lang.Object getTarget()", "public synchronized java.lang.Object getTarget() throws java.lang.Exception"], ["void", "org.springframework.aop.target.AbstractLazyCreationTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object) throws java.lang.Exception"], ["org.springframework.aop.target.HotSwappableTargetSource", "org.springframework.aop.target.HotSwappableTargetSource(java.lang.Object)", "public org.springframework.aop.target.HotSwappableTargetSource(java.lang.Object)"], ["java.lang.Class<?>", "org.springframework.aop.target.HotSwappableTargetSource.getTargetClass()", "public synchronized java.lang.Class<?> getTargetClass()"], ["boolean", "org.springframework.aop.target.HotSwappableTargetSource.isStatic()", "public final boolean isStatic()"], ["synchronized", "org.springframework.aop.target.HotSwappableTargetSource.java.lang.Object getTarget()", "public synchronized java.lang.Object getTarget()"], ["void", "org.springframework.aop.target.HotSwappableTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object)"], ["synchronized", "org.springframework.aop.target.HotSwappableTargetSource.java.lang.Object swap(java.lang.Object)", "public synchronized java.lang.Object swap(java.lang.Object) throws java.lang.IllegalArgumentException"], ["boolean", "org.springframework.aop.target.HotSwappableTargetSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.target.HotSwappableTargetSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.target.HotSwappableTargetSource.toString()", "public java.lang.String toString()"], ["org.springframework.aop.target.AbstractPoolingTargetSource", "org.springframework.aop.target.AbstractPoolingTargetSource()", "public org.springframework.aop.target.AbstractPoolingTargetSource()"], ["void", "org.springframework.aop.target.AbstractPoolingTargetSource.setMaxSize(int)", "public void setMaxSize(int)"], ["int", "org.springframework.aop.target.AbstractPoolingTargetSource.getMaxSize()", "public int getMaxSize()"], ["void", "org.springframework.aop.target.AbstractPoolingTargetSource.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public final void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"], ["org.springframework.aop.support.DefaultIntroductionAdvisor", "org.springframework.aop.target.AbstractPoolingTargetSource.getPoolingConfigMixin()", "public org.springframework.aop.support.DefaultIntroductionAdvisor getPoolingConfigMixin()"], ["org.springframework.aop.target.LazyInitTargetSource", "org.springframework.aop.target.LazyInitTargetSource()", "public org.springframework.aop.target.LazyInitTargetSource()"], ["synchronized", "org.springframework.aop.target.LazyInitTargetSource.java.lang.Object getTarget()", "public synchronized java.lang.Object getTarget() throws org.springframework.beans.BeansException"], ["org.springframework.aop.target.PrototypeTargetSource", "org.springframework.aop.target.PrototypeTargetSource()", "public org.springframework.aop.target.PrototypeTargetSource()"], ["java.lang.Object", "org.springframework.aop.target.PrototypeTargetSource.getTarget()", "public java.lang.Object getTarget() throws org.springframework.beans.BeansException"], ["void", "org.springframework.aop.target.PrototypeTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object)"], ["java.lang.String", "org.springframework.aop.target.PrototypeTargetSource.toString()", "public java.lang.String toString()"], ["org.springframework.aop.target.SingletonTargetSource", "org.springframework.aop.target.SingletonTargetSource(java.lang.Object)", "public org.springframework.aop.target.SingletonTargetSource(java.lang.Object)"], ["java.lang.Class<?>", "org.springframework.aop.target.SingletonTargetSource.getTargetClass()", "public java.lang.Class<?> getTargetClass()"], ["java.lang.Object", "org.springframework.aop.target.SingletonTargetSource.getTarget()", "public java.lang.Object getTarget()"], ["void", "org.springframework.aop.target.SingletonTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object)"], ["boolean", "org.springframework.aop.target.SingletonTargetSource.isStatic()", "public boolean isStatic()"], ["boolean", "org.springframework.aop.target.SingletonTargetSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.target.SingletonTargetSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.target.SingletonTargetSource.toString()", "public java.lang.String toString()"], ["org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource()", "public org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource()"], ["void", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetBeanName(java.lang.String)", "public void setTargetBeanName(java.lang.String)"], ["java.lang.String", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.getTargetBeanName()", "public java.lang.String getTargetBeanName()"], ["void", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setTargetClass(java.lang.Class<?>)", "public void setTargetClass(java.lang.Class<?>)"], ["void", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.beans.factory.BeanFactory", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.getBeanFactory()", "public org.springframework.beans.factory.BeanFactory getBeanFactory()"], ["java.lang.Class<?>", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.getTargetClass()", "public java.lang.Class<?> getTargetClass()"], ["boolean", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.isStatic()", "public boolean isStatic()"], ["void", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.releaseTarget(java.lang.Object)", "public void releaseTarget(java.lang.Object) throws java.lang.Exception"], ["boolean", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource.toString()", "public java.lang.String toString()"], ["org.springframework.aop.target.SimpleBeanTargetSource", "org.springframework.aop.target.SimpleBeanTargetSource()", "public org.springframework.aop.target.SimpleBeanTargetSource()"], ["java.lang.Object", "org.springframework.aop.target.SimpleBeanTargetSource.getTarget()", "public java.lang.Object getTarget() throws java.lang.Exception"], ["org.springframework.aop.AopInvocationException", "org.springframework.aop.AopInvocationException(java.lang.String)", "public org.springframework.aop.AopInvocationException(java.lang.String)"], ["org.springframework.aop.AopInvocationException", "org.springframework.aop.AopInvocationException(java.lang.String, java.lang.Throwable)", "public org.springframework.aop.AopInvocationException(java.lang.String, java.lang.Throwable)"], ["org.springframework.aop.config.MethodLocatingFactoryBean", "org.springframework.aop.config.MethodLocatingFactoryBean()", "public org.springframework.aop.config.MethodLocatingFactoryBean()"], ["void", "org.springframework.aop.config.MethodLocatingFactoryBean.setTargetBeanName(java.lang.String)", "public void setTargetBeanName(java.lang.String)"], ["void", "org.springframework.aop.config.MethodLocatingFactoryBean.setMethodName(java.lang.String)", "public void setMethodName(java.lang.String)"], ["void", "org.springframework.aop.config.MethodLocatingFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["java.lang.reflect.Method", "org.springframework.aop.config.MethodLocatingFactoryBean.getObject()", "public java.lang.reflect.Method getObject() throws java.lang.Exception"], ["java.lang.Class<java.lang.reflect.Method>", "org.springframework.aop.config.MethodLocatingFactoryBean.getObjectType()", "public java.lang.Class<java.lang.reflect.Method> getObjectType()"], ["boolean", "org.springframework.aop.config.MethodLocatingFactoryBean.isSingleton()", "public boolean isSingleton()"], ["java.lang.Object", "org.springframework.aop.config.MethodLocatingFactoryBean.getObject()", "public java.lang.Object getObject() throws java.lang.Exception"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AspectJAutoProxyBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)", "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.aop.config.AopConfigUtils", "org.springframework.aop.config.AopConfigUtils()", "public org.springframework.aop.config.AopConfigUtils()"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AopConfigUtils.registerAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)", "public static org.springframework.beans.factory.config.BeanDefinition registerAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AopConfigUtils.registerAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)", "public static org.springframework.beans.factory.config.BeanDefinition registerAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)", "public static org.springframework.beans.factory.config.BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AopConfigUtils.registerAspectJAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)", "public static org.springframework.beans.factory.config.BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)", "public static org.springframework.beans.factory.config.BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)", "public static org.springframework.beans.factory.config.BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)"], ["void", "org.springframework.aop.config.AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)", "public static void forceAutoProxyCreatorToUseClassProxying(org.springframework.beans.factory.support.BeanDefinitionRegistry)"], ["void", "org.springframework.aop.config.AopConfigUtils.forceAutoProxyCreatorToExposeProxy(org.springframework.beans.factory.support.BeanDefinitionRegistry)", "public static void forceAutoProxyCreatorToExposeProxy(org.springframework.beans.factory.support.BeanDefinitionRegistry)"], ["org.springframework.aop.config.AopNamespaceHandler", "org.springframework.aop.config.AopNamespaceHandler()", "public org.springframework.aop.config.AopNamespaceHandler()"], ["void", "org.springframework.aop.config.AopNamespaceHandler.init()", "public void init()"], ["org.springframework.beans.factory.config.BeanDefinitionHolder", "org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator.decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)", "public org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.aop.config.AspectEntry", "org.springframework.aop.config.AspectEntry(java.lang.String, java.lang.String)", "public org.springframework.aop.config.AspectEntry(java.lang.String, java.lang.String)"], ["java.lang.String", "org.springframework.aop.config.AspectEntry.toString()", "public java.lang.String toString()"], ["org.springframework.aop.config.AopNamespaceUtils", "org.springframework.aop.config.AopNamespaceUtils()", "public org.springframework.aop.config.AopNamespaceUtils()"], ["void", "org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)", "public static void registerAutoProxyCreatorIfNecessary(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)"], ["void", "org.springframework.aop.config.AopNamespaceUtils.registerAspectJAutoProxyCreatorIfNecessary(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)", "public static void registerAspectJAutoProxyCreatorIfNecessary(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)"], ["void", "org.springframework.aop.config.AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)", "public static void registerAspectJAnnotationAutoProxyCreatorIfNecessary(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.SpringConfiguredBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)", "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.aop.config.PointcutComponentDefinition", "org.springframework.aop.config.PointcutComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, java.lang.String)", "public org.springframework.aop.config.PointcutComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, java.lang.String)"], ["java.lang.String", "org.springframework.aop.config.PointcutComponentDefinition.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.springframework.aop.config.PointcutComponentDefinition.getDescription()", "public java.lang.String getDescription()"], ["org.springframework.beans.factory.config.BeanDefinition[]", "org.springframework.aop.config.PointcutComponentDefinition.getBeanDefinitions()", "public org.springframework.beans.factory.config.BeanDefinition[] getBeanDefinitions()"], ["java.lang.Object", "org.springframework.aop.config.PointcutComponentDefinition.getSource()", "public java.lang.Object getSource()"], ["org.springframework.aop.config.AdvisorComponentDefinition", "org.springframework.aop.config.AdvisorComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)", "public org.springframework.aop.config.AdvisorComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)"], ["org.springframework.aop.config.AdvisorComponentDefinition", "org.springframework.aop.config.AdvisorComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)", "public org.springframework.aop.config.AdvisorComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)"], ["java.lang.String", "org.springframework.aop.config.AdvisorComponentDefinition.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.springframework.aop.config.AdvisorComponentDefinition.getDescription()", "public java.lang.String getDescription()"], ["org.springframework.beans.factory.config.BeanDefinition[]", "org.springframework.aop.config.AdvisorComponentDefinition.getBeanDefinitions()", "public org.springframework.beans.factory.config.BeanDefinition[] getBeanDefinitions()"], ["org.springframework.beans.factory.config.BeanReference[]", "org.springframework.aop.config.AdvisorComponentDefinition.getBeanReferences()", "public org.springframework.beans.factory.config.BeanReference[] getBeanReferences()"], ["java.lang.Object", "org.springframework.aop.config.AdvisorComponentDefinition.getSource()", "public java.lang.Object getSource()"], ["org.springframework.aop.config.AdvisorEntry", "org.springframework.aop.config.AdvisorEntry(java.lang.String)", "public org.springframework.aop.config.AdvisorEntry(java.lang.String)"], ["java.lang.String", "org.springframework.aop.config.AdvisorEntry.toString()", "public java.lang.String toString()"], ["org.springframework.aop.config.PointcutEntry", "org.springframework.aop.config.PointcutEntry(java.lang.String)", "public org.springframework.aop.config.PointcutEntry(java.lang.String)"], ["java.lang.String", "org.springframework.aop.config.PointcutEntry.toString()", "public java.lang.String toString()"], ["org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator", "org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator()", "public org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator()"], ["org.springframework.beans.factory.config.BeanDefinitionHolder", "org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator.decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)", "public final org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.beans.factory.config.BeanDefinition", "org.springframework.aop.config.ConfigBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)", "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"], ["org.springframework.aop.config.AdviceEntry", "org.springframework.aop.config.AdviceEntry(java.lang.String)", "public org.springframework.aop.config.AdviceEntry(java.lang.String)"], ["java.lang.String", "org.springframework.aop.config.AdviceEntry.toString()", "public java.lang.String toString()"], ["org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory", "org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory()", "public org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory()"], ["void", "org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory.setAspectBeanName(java.lang.String)", "public void setAspectBeanName(java.lang.String)"], ["void", "org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["java.lang.Object", "org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory.getAspectInstance()", "public java.lang.Object getAspectInstance()"], ["java.lang.ClassLoader", "org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory.getAspectClassLoader()", "public java.lang.ClassLoader getAspectClassLoader()"], ["int", "org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory.getOrder()", "public int getOrder()"], ["org.springframework.aop.config.AspectComponentDefinition", "org.springframework.aop.config.AspectComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition[], org.springframework.beans.factory.config.BeanReference[], java.lang.Object)", "public org.springframework.aop.config.AspectComponentDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition[], org.springframework.beans.factory.config.BeanReference[], java.lang.Object)"], ["org.springframework.beans.factory.config.BeanDefinition[]", "org.springframework.aop.config.AspectComponentDefinition.getBeanDefinitions()", "public org.springframework.beans.factory.config.BeanDefinition[] getBeanDefinitions()"], ["org.springframework.beans.factory.config.BeanReference[]", "org.springframework.aop.config.AspectComponentDefinition.getBeanReferences()", "public org.springframework.beans.factory.config.BeanReference[] getBeanReferences()"], ["org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator", "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator()", "public org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator()"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator", "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator()", "public org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator()"], ["void", "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator.setUsePrefix(boolean)", "public void setUsePrefix(boolean)"], ["boolean", "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator.isUsePrefix()", "public boolean isUsePrefix()"], ["void", "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator.setAdvisorBeanNamePrefix(java.lang.String)", "public void setAdvisorBeanNamePrefix(java.lang.String)"], ["java.lang.String", "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator.getAdvisorBeanNamePrefix()", "public java.lang.String getAdvisorBeanNamePrefix()"], ["void", "org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator.setBeanName(java.lang.String)", "public void setBeanName(java.lang.String)"], ["org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator", "org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator()", "public org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator()"], ["org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor", "org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor()", "public org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor()"], ["void", "org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.aop.framework.autoproxy.target.QuickTargetSourceCreator", "org.springframework.aop.framework.autoproxy.target.QuickTargetSourceCreator()", "public org.springframework.aop.framework.autoproxy.target.QuickTargetSourceCreator()"], ["org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator", "org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator()", "public org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator()"], ["void", "org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public final void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.aop.TargetSource", "org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator.getTargetSource(java.lang.Class<?>, java.lang.String)", "public final org.springframework.aop.TargetSource getTargetSource(java.lang.Class<?>, java.lang.String)"], ["void", "org.springframework.aop.framework.autoproxy.target.AbstractBeanFactoryBasedTargetSourceCreator.destroy()", "public void destroy()"], ["org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator", "org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator()", "public org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator()"], ["org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator", "org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator()", "public org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator()"], ["void", "org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator.setBeanNames(java.lang.String...)", "public void setBeanNames(java.lang.String...)"], ["org.springframework.aop.framework.autoproxy.AutoProxyUtils", "org.springframework.aop.framework.autoproxy.AutoProxyUtils()", "public org.springframework.aop.framework.autoproxy.AutoProxyUtils()"], ["boolean", "org.springframework.aop.framework.autoproxy.AutoProxyUtils.shouldProxyTargetClass(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.lang.String)", "public static boolean shouldProxyTargetClass(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.lang.String)"], ["java.lang.Class<?>", "org.springframework.aop.framework.autoproxy.AutoProxyUtils.determineTargetClass(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.lang.String)", "public static java.lang.Class<?> determineTargetClass(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.lang.String)"], ["org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper", "org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)", "public org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"], ["java.util.List<org.springframework.aop.Advisor>", "org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans()", "public java.util.List<org.springframework.aop.Advisor> findAdvisorBeans()"], ["org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator$BeanFactoryAdvisorRetrievalHelperAdapter", "org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator$BeanFactoryAdvisorRetrievalHelperAdapter(org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator, org.springframework.beans.factory.config.ConfigurableListableBeanFactory)", "public org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator$BeanFactoryAdvisorRetrievalHelperAdapter(org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator, org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"], ["org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator()", "public org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator()"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.setFrozen(boolean)", "public void setFrozen(boolean)"], ["boolean", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.isFrozen()", "public boolean isFrozen()"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)", "public void setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.setCustomTargetSourceCreators(org.springframework.aop.framework.autoproxy.TargetSourceCreator...)", "public void setCustomTargetSourceCreators(org.springframework.aop.framework.autoproxy.TargetSourceCreator...)"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.setInterceptorNames(java.lang.String...)", "public void setInterceptorNames(java.lang.String...)"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.setApplyCommonInterceptorsFirst(boolean)", "public void setApplyCommonInterceptorsFirst(boolean)"], ["void", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["java.lang.Class<?>", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.predictBeanType(java.lang.Class<?>, java.lang.String)", "public java.lang.Class<?> predictBeanType(java.lang.Class<?>, java.lang.String)"], ["java.lang.reflect.Constructor<?>[]", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.determineCandidateConstructors(java.lang.Class<?>, java.lang.String)", "public java.lang.reflect.Constructor<?>[] determineCandidateConstructors(java.lang.Class<?>, java.lang.String)"], ["java.lang.Object", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.getEarlyBeanReference(java.lang.Object, java.lang.String)", "public java.lang.Object getEarlyBeanReference(java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)", "public java.lang.Object postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)"], ["org.springframework.beans.PropertyValues", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)", "public org.springframework.beans.PropertyValues postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.springframework.aop.framework.autoproxy.ProxyCreationContext.getCurrentProxiedBeanName()", "public static java.lang.String getCurrentProxiedBeanName()"], ["org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor", "org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor(java.lang.String)", "public org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor(java.lang.String)"], ["java.lang.String", "org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor.getBeanName()", "public java.lang.String getBeanName()"], ["org.aopalliance.aop.Advice", "org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["boolean", "org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor.isPerInstance()", "public boolean isPerInstance()"], ["java.lang.String", "org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor.toString()", "public java.lang.String toString()"], ["org.springframework.aop.framework.AdvisedSupport", "org.springframework.aop.framework.AdvisedSupport()", "public org.springframework.aop.framework.AdvisedSupport()"], ["org.springframework.aop.framework.AdvisedSupport", "org.springframework.aop.framework.AdvisedSupport(java.lang.Class<?>...)", "public org.springframework.aop.framework.AdvisedSupport(java.lang.Class<?>...)"], ["void", "org.springframework.aop.framework.AdvisedSupport.setTarget(java.lang.Object)", "public void setTarget(java.lang.Object)"], ["void", "org.springframework.aop.framework.AdvisedSupport.setTargetSource(org.springframework.aop.TargetSource)", "public void setTargetSource(org.springframework.aop.TargetSource)"], ["org.springframework.aop.TargetSource", "org.springframework.aop.framework.AdvisedSupport.getTargetSource()", "public org.springframework.aop.TargetSource getTargetSource()"], ["void", "org.springframework.aop.framework.AdvisedSupport.setTargetClass(java.lang.Class<?>)", "public void setTargetClass(java.lang.Class<?>)"], ["java.lang.Class<?>", "org.springframework.aop.framework.AdvisedSupport.getTargetClass()", "public java.lang.Class<?> getTargetClass()"], ["void", "org.springframework.aop.framework.AdvisedSupport.setPreFiltered(boolean)", "public void setPreFiltered(boolean)"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.isPreFiltered()", "public boolean isPreFiltered()"], ["void", "org.springframework.aop.framework.AdvisedSupport.setAdvisorChainFactory(org.springframework.aop.framework.AdvisorChainFactory)", "public void setAdvisorChainFactory(org.springframework.aop.framework.AdvisorChainFactory)"], ["org.springframework.aop.framework.AdvisorChainFactory", "org.springframework.aop.framework.AdvisedSupport.getAdvisorChainFactory()", "public org.springframework.aop.framework.AdvisorChainFactory getAdvisorChainFactory()"], ["void", "org.springframework.aop.framework.AdvisedSupport.setInterfaces(java.lang.Class<?>...)", "public void setInterfaces(java.lang.Class<?>...)"], ["void", "org.springframework.aop.framework.AdvisedSupport.addInterface(java.lang.Class<?>)", "public void addInterface(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.removeInterface(java.lang.Class<?>)", "public boolean removeInterface(java.lang.Class<?>)"], ["java.lang.Class<?>[]", "org.springframework.aop.framework.AdvisedSupport.getProxiedInterfaces()", "public java.lang.Class<?>[] getProxiedInterfaces()"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.isInterfaceProxied(java.lang.Class<?>)", "public boolean isInterfaceProxied(java.lang.Class<?>)"], ["org.springframework.aop.Advisor[]", "org.springframework.aop.framework.AdvisedSupport.getAdvisors()", "public final org.springframework.aop.Advisor[] getAdvisors()"], ["int", "org.springframework.aop.framework.AdvisedSupport.getAdvisorCount()", "public int getAdvisorCount()"], ["void", "org.springframework.aop.framework.AdvisedSupport.addAdvisor(org.springframework.aop.Advisor)", "public void addAdvisor(org.springframework.aop.Advisor)"], ["void", "org.springframework.aop.framework.AdvisedSupport.addAdvisor(int, org.springframework.aop.Advisor)", "public void addAdvisor(int, org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.removeAdvisor(org.springframework.aop.Advisor)", "public boolean removeAdvisor(org.springframework.aop.Advisor)"], ["void", "org.springframework.aop.framework.AdvisedSupport.removeAdvisor(int)", "public void removeAdvisor(int) throws org.springframework.aop.framework.AopConfigException"], ["int", "org.springframework.aop.framework.AdvisedSupport.indexOf(org.springframework.aop.Advisor)", "public int indexOf(org.springframework.aop.Advisor)"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.replaceAdvisor(org.springframework.aop.Advisor, org.springframework.aop.Advisor)", "public boolean replaceAdvisor(org.springframework.aop.Advisor, org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException"], ["void", "org.springframework.aop.framework.AdvisedSupport.addAdvisors(org.springframework.aop.Advisor...)", "public void addAdvisors(org.springframework.aop.Advisor...)"], ["void", "org.springframework.aop.framework.AdvisedSupport.addAdvisors(java.util.Collection<org.springframework.aop.Advisor>)", "public void addAdvisors(java.util.Collection<org.springframework.aop.Advisor>)"], ["void", "org.springframework.aop.framework.AdvisedSupport.addAdvice(org.aopalliance.aop.Advice)", "public void addAdvice(org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException"], ["void", "org.springframework.aop.framework.AdvisedSupport.addAdvice(int, org.aopalliance.aop.Advice)", "public void addAdvice(int, org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.removeAdvice(org.aopalliance.aop.Advice)", "public boolean removeAdvice(org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException"], ["int", "org.springframework.aop.framework.AdvisedSupport.indexOf(org.aopalliance.aop.Advice)", "public int indexOf(org.aopalliance.aop.Advice)"], ["boolean", "org.springframework.aop.framework.AdvisedSupport.adviceIncluded(org.aopalliance.aop.Advice)", "public boolean adviceIncluded(org.aopalliance.aop.Advice)"], ["int", "org.springframework.aop.framework.AdvisedSupport.countAdvicesOfType(java.lang.Class<?>)", "public int countAdvicesOfType(java.lang.Class<?>)"], ["java.util.List<java.lang.Object>", "org.springframework.aop.framework.AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice(java.lang.reflect.Method, java.lang.Class<?>)", "public java.util.List<java.lang.Object> getInterceptorsAndDynamicInterceptionAdvice(java.lang.reflect.Method, java.lang.Class<?>)"], ["java.lang.String", "org.springframework.aop.framework.AdvisedSupport.toProxyConfigString()", "public java.lang.String toProxyConfigString()"], ["java.lang.String", "org.springframework.aop.framework.AdvisedSupport.toString()", "public java.lang.String toString()"], ["org.springframework.aop.framework.CglibAopProxy$FixedChainStaticTargetInterceptor", "org.springframework.aop.framework.CglibAopProxy$FixedChainStaticTargetInterceptor(java.util.List<java.lang.Object>, java.lang.Object, java.lang.Class<?>)", "public org.springframework.aop.framework.CglibAopProxy$FixedChainStaticTargetInterceptor(java.util.List<java.lang.Object>, java.lang.Object, java.lang.Class<?>)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$FixedChainStaticTargetInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"], ["org.springframework.aop.framework.DefaultAdvisorChainFactory", "org.springframework.aop.framework.DefaultAdvisorChainFactory()", "public org.springframework.aop.framework.DefaultAdvisorChainFactory()"], ["java.util.List<java.lang.Object>", "org.springframework.aop.framework.DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(org.springframework.aop.framework.Advised, java.lang.reflect.Method, java.lang.Class<?>)", "public java.util.List<java.lang.Object> getInterceptorsAndDynamicInterceptionAdvice(org.springframework.aop.framework.Advised, java.lang.reflect.Method, java.lang.Class<?>)"], ["org.springframework.aop.framework.AopProxyUtils", "org.springframework.aop.framework.AopProxyUtils()", "public org.springframework.aop.framework.AopProxyUtils()"], ["java.lang.Object", "org.springframework.aop.framework.AopProxyUtils.getSingletonTarget(java.lang.Object)", "public static java.lang.Object getSingletonTarget(java.lang.Object)"], ["java.lang.Class<?>", "org.springframework.aop.framework.AopProxyUtils.ultimateTargetClass(java.lang.Object)", "public static java.lang.Class<?> ultimateTargetClass(java.lang.Object)"], ["java.lang.Class<?>[]", "org.springframework.aop.framework.AopProxyUtils.completeProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport)", "public static java.lang.Class<?>[] completeProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport)"], ["java.lang.Class<?>[]", "org.springframework.aop.framework.AopProxyUtils.proxiedUserInterfaces(java.lang.Object)", "public static java.lang.Class<?>[] proxiedUserInterfaces(java.lang.Object)"], ["boolean", "org.springframework.aop.framework.AopProxyUtils.equalsInProxy(org.springframework.aop.framework.AdvisedSupport, org.springframework.aop.framework.AdvisedSupport)", "public static boolean equalsInProxy(org.springframework.aop.framework.AdvisedSupport, org.springframework.aop.framework.AdvisedSupport)"], ["boolean", "org.springframework.aop.framework.AopProxyUtils.equalsProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport, org.springframework.aop.framework.AdvisedSupport)", "public static boolean equalsProxiedInterfaces(org.springframework.aop.framework.AdvisedSupport, org.springframework.aop.framework.AdvisedSupport)"], ["boolean", "org.springframework.aop.framework.AopProxyUtils.equalsAdvisors(org.springframework.aop.framework.AdvisedSupport, org.springframework.aop.framework.AdvisedSupport)", "public static boolean equalsAdvisors(org.springframework.aop.framework.AdvisedSupport, org.springframework.aop.framework.AdvisedSupport)"], ["org.springframework.aop.framework.DefaultAopProxyFactory", "org.springframework.aop.framework.DefaultAopProxyFactory()", "public org.springframework.aop.framework.DefaultAopProxyFactory()"], ["org.springframework.aop.framework.AopProxy", "org.springframework.aop.framework.DefaultAopProxyFactory.createAopProxy(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.AopProxy createAopProxy(org.springframework.aop.framework.AdvisedSupport) throws org.springframework.aop.framework.AopConfigException"], ["org.springframework.aop.framework.CglibAopProxy", "org.springframework.aop.framework.CglibAopProxy(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.CglibAopProxy(org.springframework.aop.framework.AdvisedSupport) throws org.springframework.aop.framework.AopConfigException"], ["void", "org.springframework.aop.framework.CglibAopProxy.setConstructorArguments(java.lang.Object[], java.lang.Class<?>[])", "public void setConstructorArguments(java.lang.Object[], java.lang.Class<?>[])"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy.getProxy()", "public java.lang.Object getProxy()"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy.getProxy(java.lang.ClassLoader)", "public java.lang.Object getProxy(java.lang.ClassLoader)"], ["boolean", "org.springframework.aop.framework.CglibAopProxy.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.framework.CglibAopProxy.hashCode()", "public int hashCode()"], ["org.springframework.aop.framework.ProxyCreatorSupport", "org.springframework.aop.framework.ProxyCreatorSupport()", "public org.springframework.aop.framework.ProxyCreatorSupport()"], ["org.springframework.aop.framework.ProxyCreatorSupport", "org.springframework.aop.framework.ProxyCreatorSupport(org.springframework.aop.framework.AopProxyFactory)", "public org.springframework.aop.framework.ProxyCreatorSupport(org.springframework.aop.framework.AopProxyFactory)"], ["void", "org.springframework.aop.framework.ProxyCreatorSupport.setAopProxyFactory(org.springframework.aop.framework.AopProxyFactory)", "public void setAopProxyFactory(org.springframework.aop.framework.AopProxyFactory)"], ["org.springframework.aop.framework.AopProxyFactory", "org.springframework.aop.framework.ProxyCreatorSupport.getAopProxyFactory()", "public org.springframework.aop.framework.AopProxyFactory getAopProxyFactory()"], ["void", "org.springframework.aop.framework.ProxyCreatorSupport.addListener(org.springframework.aop.framework.AdvisedSupportListener)", "public void addListener(org.springframework.aop.framework.AdvisedSupportListener)"], ["void", "org.springframework.aop.framework.ProxyCreatorSupport.removeListener(org.springframework.aop.framework.AdvisedSupportListener)", "public void removeListener(org.springframework.aop.framework.AdvisedSupportListener)"], ["org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor", "org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor(org.springframework.aop.framework.AdvisedSupport)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"], ["boolean", "org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.hashCode()", "public int hashCode()"], ["org.springframework.aop.framework.ProxyFactoryBean", "org.springframework.aop.framework.ProxyFactoryBean()", "public org.springframework.aop.framework.ProxyFactoryBean()"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setProxyInterfaces(java.lang.Class<?>[])", "public void setProxyInterfaces(java.lang.Class<?>[]) throws java.lang.ClassNotFoundException"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setInterceptorNames(java.lang.String...)", "public void setInterceptorNames(java.lang.String...)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setTargetName(java.lang.String)", "public void setTargetName(java.lang.String)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setAutodetectInterfaces(boolean)", "public void setAutodetectInterfaces(boolean)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setSingleton(boolean)", "public void setSingleton(boolean)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)", "public void setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setFrozen(boolean)", "public void setFrozen(boolean)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setProxyClassLoader(java.lang.ClassLoader)", "public void setProxyClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)", "public void setBeanClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.aop.framework.ProxyFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["java.lang.Object", "org.springframework.aop.framework.ProxyFactoryBean.getObject()", "public java.lang.Object getObject() throws org.springframework.beans.BeansException"], ["java.lang.Class<?>", "org.springframework.aop.framework.ProxyFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.aop.framework.ProxyFactoryBean.isSingleton()", "public boolean isSingleton()"], ["org.springframework.aop.framework.ProxyProcessorSupport", "org.springframework.aop.framework.ProxyProcessorSupport()", "public org.springframework.aop.framework.ProxyProcessorSupport()"], ["void", "org.springframework.aop.framework.ProxyProcessorSupport.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.aop.framework.ProxyProcessorSupport.getOrder()", "public int getOrder()"], ["void", "org.springframework.aop.framework.ProxyProcessorSupport.setProxyClassLoader(java.lang.ClassLoader)", "public void setProxyClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.aop.framework.ProxyProcessorSupport.setBeanClassLoader(java.lang.ClassLoader)", "public void setBeanClassLoader(java.lang.ClassLoader)"], ["org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor", "org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor()", "public org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor()"], ["void", "org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor.setBeforeExistingAdvisors(boolean)", "public void setBeforeExistingAdvisors(boolean)"], ["java.lang.Object", "org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"], ["org.springframework.aop.framework.AdvisedSupport$MethodCacheKey", "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey(java.lang.reflect.Method)", "public org.springframework.aop.framework.AdvisedSupport$MethodCacheKey(java.lang.reflect.Method)"], ["boolean", "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.toString()", "public java.lang.String toString()"], ["int", "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.compareTo(org.springframework.aop.framework.AdvisedSupport$MethodCacheKey)", "public int compareTo(org.springframework.aop.framework.AdvisedSupport$MethodCacheKey)"], ["int", "org.springframework.aop.framework.AdvisedSupport$MethodCacheKey.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.springframework.aop.framework.ProxyConfig", "org.springframework.aop.framework.ProxyConfig()", "public org.springframework.aop.framework.ProxyConfig()"], ["void", "org.springframework.aop.framework.ProxyConfig.setProxyTargetClass(boolean)", "public void setProxyTargetClass(boolean)"], ["boolean", "org.springframework.aop.framework.ProxyConfig.isProxyTargetClass()", "public boolean isProxyTargetClass()"], ["void", "org.springframework.aop.framework.ProxyConfig.setOptimize(boolean)", "public void setOptimize(boolean)"], ["boolean", "org.springframework.aop.framework.ProxyConfig.isOptimize()", "public boolean isOptimize()"], ["void", "org.springframework.aop.framework.ProxyConfig.setOpaque(boolean)", "public void setOpaque(boolean)"], ["boolean", "org.springframework.aop.framework.ProxyConfig.isOpaque()", "public boolean isOpaque()"], ["void", "org.springframework.aop.framework.ProxyConfig.setExposeProxy(boolean)", "public void setExposeProxy(boolean)"], ["boolean", "org.springframework.aop.framework.ProxyConfig.isExposeProxy()", "public boolean isExposeProxy()"], ["void", "org.springframework.aop.framework.ProxyConfig.setFrozen(boolean)", "public void setFrozen(boolean)"], ["boolean", "org.springframework.aop.framework.ProxyConfig.isFrozen()", "public boolean isFrozen()"], ["void", "org.springframework.aop.framework.ProxyConfig.copyFrom(org.springframework.aop.framework.ProxyConfig)", "public void copyFrom(org.springframework.aop.framework.ProxyConfig)"], ["java.lang.String", "org.springframework.aop.framework.ProxyConfig.toString()", "public java.lang.String toString()"], ["org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation", "org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation(java.lang.Object, java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Class<?>, java.util.List<java.lang.Object>, org.springframework.cglib.proxy.MethodProxy)", "public org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation(java.lang.Object, java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Class<?>, java.util.List<java.lang.Object>, org.springframework.cglib.proxy.MethodProxy)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed()", "public java.lang.Object proceed() throws java.lang.Throwable"], ["org.springframework.aop.framework.ProxyFactory", "org.springframework.aop.framework.ProxyFactory()", "public org.springframework.aop.framework.ProxyFactory()"], ["org.springframework.aop.framework.ProxyFactory", "org.springframework.aop.framework.ProxyFactory(java.lang.Object)", "public org.springframework.aop.framework.ProxyFactory(java.lang.Object)"], ["org.springframework.aop.framework.ProxyFactory", "org.springframework.aop.framework.ProxyFactory(java.lang.Class<?>...)", "public org.springframework.aop.framework.ProxyFactory(java.lang.Class<?>...)"], ["org.springframework.aop.framework.ProxyFactory", "org.springframework.aop.framework.ProxyFactory(java.lang.Class<?>, org.aopalliance.intercept.Interceptor)", "public org.springframework.aop.framework.ProxyFactory(java.lang.Class<?>, org.aopalliance.intercept.Interceptor)"], ["org.springframework.aop.framework.ProxyFactory", "org.springframework.aop.framework.ProxyFactory(java.lang.Class<?>, org.springframework.aop.TargetSource)", "public org.springframework.aop.framework.ProxyFactory(java.lang.Class<?>, org.springframework.aop.TargetSource)"], ["java.lang.Object", "org.springframework.aop.framework.ProxyFactory.getProxy()", "public java.lang.Object getProxy()"], ["java.lang.Object", "org.springframework.aop.framework.ProxyFactory.getProxy(java.lang.ClassLoader)", "public java.lang.Object getProxy(java.lang.ClassLoader)"], ["<T> T", "org.springframework.aop.framework.ProxyFactory.getProxy(java.lang.Class<T>, org.aopalliance.intercept.Interceptor)", "public static <T> T getProxy(java.lang.Class<T>, org.aopalliance.intercept.Interceptor)"], ["<T> T", "org.springframework.aop.framework.ProxyFactory.getProxy(java.lang.Class<T>, org.springframework.aop.TargetSource)", "public static <T> T getProxy(java.lang.Class<T>, org.springframework.aop.TargetSource)"], ["java.lang.Object", "org.springframework.aop.framework.ProxyFactory.getProxy(org.springframework.aop.TargetSource)", "public static java.lang.Object getProxy(org.springframework.aop.TargetSource)"], ["boolean", "org.springframework.aop.framework.adapter.MethodBeforeAdviceAdapter.supportsAdvice(org.aopalliance.aop.Advice)", "public boolean supportsAdvice(org.aopalliance.aop.Advice)"], ["org.aopalliance.intercept.MethodInterceptor", "org.springframework.aop.framework.adapter.MethodBeforeAdviceAdapter.getInterceptor(org.springframework.aop.Advisor)", "public org.aopalliance.intercept.MethodInterceptor getInterceptor(org.springframework.aop.Advisor)"], ["org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor", "org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor(org.springframework.aop.MethodBeforeAdvice)", "public org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor(org.springframework.aop.MethodBeforeAdvice)"], ["java.lang.Object", "org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationManager", "org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationManager()", "public org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationManager()"], ["void", "org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationManager.setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)", "public void setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)"], ["java.lang.Object", "org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationManager.postProcessBeforeInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"], ["java.lang.Object", "org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationManager.postProcessAfterInitialization(java.lang.Object, java.lang.String)", "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"], ["org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor", "org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor(org.springframework.aop.AfterReturningAdvice)", "public org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor(org.springframework.aop.AfterReturningAdvice)"], ["java.lang.Object", "org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.framework.adapter.AdvisorAdapterRegistry", "org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry.getInstance()", "public static org.springframework.aop.framework.adapter.AdvisorAdapterRegistry getInstance()"], ["org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry", "org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry()", "public org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry()"], ["org.springframework.aop.Advisor", "org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry.wrap(java.lang.Object)", "public org.springframework.aop.Advisor wrap(java.lang.Object) throws org.springframework.aop.framework.adapter.UnknownAdviceTypeException"], ["org.aopalliance.intercept.MethodInterceptor[]", "org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry.getInterceptors(org.springframework.aop.Advisor)", "public org.aopalliance.intercept.MethodInterceptor[] getInterceptors(org.springframework.aop.Advisor) throws org.springframework.aop.framework.adapter.UnknownAdviceTypeException"], ["void", "org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry.registerAdvisorAdapter(org.springframework.aop.framework.adapter.AdvisorAdapter)", "public void registerAdvisorAdapter(org.springframework.aop.framework.adapter.AdvisorAdapter)"], ["boolean", "org.springframework.aop.framework.adapter.ThrowsAdviceAdapter.supportsAdvice(org.aopalliance.aop.Advice)", "public boolean supportsAdvice(org.aopalliance.aop.Advice)"], ["org.aopalliance.intercept.MethodInterceptor", "org.springframework.aop.framework.adapter.ThrowsAdviceAdapter.getInterceptor(org.springframework.aop.Advisor)", "public org.aopalliance.intercept.MethodInterceptor getInterceptor(org.springframework.aop.Advisor)"], ["org.springframework.aop.framework.adapter.UnknownAdviceTypeException", "org.springframework.aop.framework.adapter.UnknownAdviceTypeException(java.lang.Object)", "public org.springframework.aop.framework.adapter.UnknownAdviceTypeException(java.lang.Object)"], ["org.springframework.aop.framework.adapter.UnknownAdviceTypeException", "org.springframework.aop.framework.adapter.UnknownAdviceTypeException(java.lang.String)", "public org.springframework.aop.framework.adapter.UnknownAdviceTypeException(java.lang.String)"], ["org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor", "org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor(java.lang.Object)", "public org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor(java.lang.Object)"], ["int", "org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor.getHandlerMethodCount()", "public int getHandlerMethodCount()"], ["java.lang.Object", "org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["boolean", "org.springframework.aop.framework.adapter.AfterReturningAdviceAdapter.supportsAdvice(org.aopalliance.aop.Advice)", "public boolean supportsAdvice(org.aopalliance.aop.Advice)"], ["org.aopalliance.intercept.MethodInterceptor", "org.springframework.aop.framework.adapter.AfterReturningAdviceAdapter.getInterceptor(org.springframework.aop.Advisor)", "public org.aopalliance.intercept.MethodInterceptor getInterceptor(org.springframework.aop.Advisor)"], ["org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedInterceptor", "org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedInterceptor(java.lang.Object)", "public org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedInterceptor(java.lang.Object)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"], ["org.springframework.aop.framework.JdkDynamicAopProxy", "org.springframework.aop.framework.JdkDynamicAopProxy(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.JdkDynamicAopProxy(org.springframework.aop.framework.AdvisedSupport) throws org.springframework.aop.framework.AopConfigException"], ["java.lang.Object", "org.springframework.aop.framework.JdkDynamicAopProxy.getProxy()", "public java.lang.Object getProxy()"], ["java.lang.Object", "org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(java.lang.ClassLoader)", "public java.lang.Object getProxy(java.lang.ClassLoader)"], ["java.lang.Object", "org.springframework.aop.framework.JdkDynamicAopProxy.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["boolean", "org.springframework.aop.framework.JdkDynamicAopProxy.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.framework.JdkDynamicAopProxy.hashCode()", "public int hashCode()"], ["org.springframework.aop.framework.ObjenesisCglibAopProxy", "org.springframework.aop.framework.ObjenesisCglibAopProxy(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.ObjenesisCglibAopProxy(org.springframework.aop.framework.AdvisedSupport)"], ["java.lang.Object", "org.springframework.aop.framework.ReflectiveMethodInvocation.getProxy()", "public final java.lang.Object getProxy()"], ["java.lang.Object", "org.springframework.aop.framework.ReflectiveMethodInvocation.getThis()", "public final java.lang.Object getThis()"], ["java.lang.reflect.AccessibleObject", "org.springframework.aop.framework.ReflectiveMethodInvocation.getStaticPart()", "public final java.lang.reflect.AccessibleObject getStaticPart()"], ["java.lang.reflect.Method", "org.springframework.aop.framework.ReflectiveMethodInvocation.getMethod()", "public final java.lang.reflect.Method getMethod()"], ["java.lang.Object[]", "org.springframework.aop.framework.ReflectiveMethodInvocation.getArguments()", "public final java.lang.Object[] getArguments()"], ["void", "org.springframework.aop.framework.ReflectiveMethodInvocation.setArguments(java.lang.Object...)", "public void setArguments(java.lang.Object...)"], ["java.lang.Object", "org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()", "public java.lang.Object proceed() throws java.lang.Throwable"], ["org.aopalliance.intercept.MethodInvocation", "org.springframework.aop.framework.ReflectiveMethodInvocation.invocableClone()", "public org.aopalliance.intercept.MethodInvocation invocableClone()"], ["org.aopalliance.intercept.MethodInvocation", "org.springframework.aop.framework.ReflectiveMethodInvocation.invocableClone(java.lang.Object...)", "public org.aopalliance.intercept.MethodInvocation invocableClone(java.lang.Object...)"], ["void", "org.springframework.aop.framework.ReflectiveMethodInvocation.setUserAttribute(java.lang.String, java.lang.Object)", "public void setUserAttribute(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.springframework.aop.framework.ReflectiveMethodInvocation.getUserAttribute(java.lang.String)", "public java.lang.Object getUserAttribute(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.springframework.aop.framework.ReflectiveMethodInvocation.getUserAttributes()", "public java.util.Map<java.lang.String, java.lang.Object> getUserAttributes()"], ["java.lang.String", "org.springframework.aop.framework.ReflectiveMethodInvocation.toString()", "public java.lang.String toString()"], ["org.springframework.aop.framework.AopConfigException", "org.springframework.aop.framework.AopConfigException(java.lang.String)", "public org.springframework.aop.framework.AopConfigException(java.lang.String)"], ["org.springframework.aop.framework.AopConfigException", "org.springframework.aop.framework.AopConfigException(java.lang.String, java.lang.Throwable)", "public org.springframework.aop.framework.AopConfigException(java.lang.String, java.lang.Throwable)"], ["org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedExposedInterceptor", "org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedExposedInterceptor(java.lang.Object)", "public org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedExposedInterceptor(java.lang.Object)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$StaticUnadvisedExposedInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"], ["org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedInterceptor", "org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedInterceptor(org.springframework.aop.TargetSource)", "public org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedInterceptor(org.springframework.aop.TargetSource)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"], ["org.springframework.aop.framework.CglibAopProxy$EqualsInterceptor", "org.springframework.aop.framework.CglibAopProxy$EqualsInterceptor(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.CglibAopProxy$EqualsInterceptor(org.springframework.aop.framework.AdvisedSupport)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$EqualsInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)"], ["org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher", "org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher(org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.MethodMatcher)", "public org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher(org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.MethodMatcher)"], ["org.springframework.aop.framework.CglibAopProxy$SerializableNoOp", "org.springframework.aop.framework.CglibAopProxy$SerializableNoOp()", "public org.springframework.aop.framework.CglibAopProxy$SerializableNoOp()"], ["org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter", "org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter(org.springframework.aop.framework.AdvisedSupport, java.util.Map<java.lang.reflect.Method, java.lang.Integer>, int)", "public org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter(org.springframework.aop.framework.AdvisedSupport, java.util.Map<java.lang.reflect.Method, java.lang.Integer>, int)"], ["int", "org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter.accept(java.lang.reflect.Method)", "public int accept(java.lang.reflect.Method)"], ["boolean", "org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.framework.CglibAopProxy$ProxyCallbackFilter.hashCode()", "public int hashCode()"], ["org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedExposedInterceptor", "org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedExposedInterceptor(org.springframework.aop.TargetSource)", "public org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedExposedInterceptor(org.springframework.aop.TargetSource)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedExposedInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"], ["org.springframework.aop.framework.CglibAopProxy$HashCodeInterceptor", "org.springframework.aop.framework.CglibAopProxy$HashCodeInterceptor(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.CglibAopProxy$HashCodeInterceptor(org.springframework.aop.framework.AdvisedSupport)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$HashCodeInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)", "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)"], ["org.springframework.aop.framework.CglibAopProxy$StaticDispatcher", "org.springframework.aop.framework.CglibAopProxy$StaticDispatcher(java.lang.Object)", "public org.springframework.aop.framework.CglibAopProxy$StaticDispatcher(java.lang.Object)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$StaticDispatcher.loadObject()", "public java.lang.Object loadObject()"], ["org.springframework.aop.framework.CglibAopProxy$AdvisedDispatcher", "org.springframework.aop.framework.CglibAopProxy$AdvisedDispatcher(org.springframework.aop.framework.AdvisedSupport)", "public org.springframework.aop.framework.CglibAopProxy$AdvisedDispatcher(org.springframework.aop.framework.AdvisedSupport)"], ["java.lang.Object", "org.springframework.aop.framework.CglibAopProxy$AdvisedDispatcher.loadObject()", "public java.lang.Object loadObject()"], ["org.springframework.aop.framework.AbstractSingletonProxyFactoryBean", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean()", "public org.springframework.aop.framework.AbstractSingletonProxyFactoryBean()"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setTarget(java.lang.Object)", "public void setTarget(java.lang.Object)"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setProxyInterfaces(java.lang.Class<?>[])", "public void setProxyInterfaces(java.lang.Class<?>[])"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setPreInterceptors(java.lang.Object[])", "public void setPreInterceptors(java.lang.Object[])"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setPostInterceptors(java.lang.Object[])", "public void setPostInterceptors(java.lang.Object[])"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)", "public void setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setProxyClassLoader(java.lang.ClassLoader)", "public void setProxyClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)", "public void setBeanClassLoader(java.lang.ClassLoader)"], ["void", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.afterPropertiesSet()", "public void afterPropertiesSet()"], ["java.lang.Object", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.getObject()", "public java.lang.Object getObject()"], ["java.lang.Class<?>", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.isSingleton()", "public final boolean isSingleton()"], ["java.lang.Object", "org.springframework.aop.framework.AopContext.currentProxy()", "public static java.lang.Object currentProxy() throws java.lang.IllegalStateException"], ["default", "org.springframework.aop.framework.Advised.int getAdvisorCount()", "public default int getAdvisorCount()"], ["org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler", "org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler()", "public org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler()"], ["void", "org.springframework.aop.interceptor.SimpleAsyncUncaughtExceptionHandler.handleUncaughtException(java.lang.Throwable, java.lang.reflect.Method, java.lang.Object...)", "public void handleUncaughtException(java.lang.Throwable, java.lang.reflect.Method, java.lang.Object...)"], ["org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction(java.lang.String)", "public org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction(java.lang.String)"], ["java.lang.Object", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["java.lang.String", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction.getBeanName()", "public java.lang.String getBeanName()"], ["org.springframework.aop.interceptor.AsyncExecutionAspectSupport", "org.springframework.aop.interceptor.AsyncExecutionAspectSupport(java.util.concurrent.Executor)", "public org.springframework.aop.interceptor.AsyncExecutionAspectSupport(java.util.concurrent.Executor)"], ["org.springframework.aop.interceptor.AsyncExecutionAspectSupport", "org.springframework.aop.interceptor.AsyncExecutionAspectSupport(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)", "public org.springframework.aop.interceptor.AsyncExecutionAspectSupport(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)"], ["void", "org.springframework.aop.interceptor.AsyncExecutionAspectSupport.configure(java.util.function.Supplier<java.util.concurrent.Executor>, java.util.function.Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler>)", "public void configure(java.util.function.Supplier<java.util.concurrent.Executor>, java.util.function.Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler>)"], ["void", "org.springframework.aop.interceptor.AsyncExecutionAspectSupport.setExecutor(java.util.concurrent.Executor)", "public void setExecutor(java.util.concurrent.Executor)"], ["void", "org.springframework.aop.interceptor.AsyncExecutionAspectSupport.setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)", "public void setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)"], ["void", "org.springframework.aop.interceptor.AsyncExecutionAspectSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.aop.interceptor.SimpleTraceInterceptor", "org.springframework.aop.interceptor.SimpleTraceInterceptor()", "public org.springframework.aop.interceptor.SimpleTraceInterceptor()"], ["org.springframework.aop.interceptor.SimpleTraceInterceptor", "org.springframework.aop.interceptor.SimpleTraceInterceptor(boolean)", "public org.springframework.aop.interceptor.SimpleTraceInterceptor(boolean)"], ["org.springframework.aop.interceptor.CustomizableTraceInterceptor", "org.springframework.aop.interceptor.CustomizableTraceInterceptor()", "public org.springframework.aop.interceptor.CustomizableTraceInterceptor()"], ["void", "org.springframework.aop.interceptor.CustomizableTraceInterceptor.setEnterMessage(java.lang.String)", "public void setEnterMessage(java.lang.String) throws java.lang.IllegalArgumentException"], ["void", "org.springframework.aop.interceptor.CustomizableTraceInterceptor.setExitMessage(java.lang.String)", "public void setExitMessage(java.lang.String)"], ["void", "org.springframework.aop.interceptor.CustomizableTraceInterceptor.setExceptionMessage(java.lang.String)", "public void setExceptionMessage(java.lang.String)"], ["java.lang.String", "org.springframework.aop.interceptor.ExposeInvocationInterceptor$1.toString()", "public java.lang.String toString()"], ["org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor", "org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor()", "public org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor()"], ["java.lang.Object", "org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.interceptor.ExposeBeanNameAdvisors", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors()", "public org.springframework.aop.interceptor.ExposeBeanNameAdvisors()"], ["java.lang.String", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors.getBeanName()", "public static java.lang.String getBeanName() throws java.lang.IllegalStateException"], ["java.lang.String", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors.getBeanName(org.aopalliance.intercept.MethodInvocation)", "public static java.lang.String getBeanName(org.aopalliance.intercept.MethodInvocation) throws java.lang.IllegalStateException"], ["org.springframework.aop.Advisor", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors.createAdvisorWithoutIntroduction(java.lang.String)", "public static org.springframework.aop.Advisor createAdvisorWithoutIntroduction(java.lang.String)"], ["org.springframework.aop.Advisor", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors.createAdvisorIntroducingNamedBean(java.lang.String)", "public static org.springframework.aop.Advisor createAdvisorIntroducingNamedBean(java.lang.String)"], ["org.springframework.aop.interceptor.AbstractTraceInterceptor", "org.springframework.aop.interceptor.AbstractTraceInterceptor()", "public org.springframework.aop.interceptor.AbstractTraceInterceptor()"], ["void", "org.springframework.aop.interceptor.AbstractTraceInterceptor.setUseDynamicLogger(boolean)", "public void setUseDynamicLogger(boolean)"], ["void", "org.springframework.aop.interceptor.AbstractTraceInterceptor.setLoggerName(java.lang.String)", "public void setLoggerName(java.lang.String)"], ["void", "org.springframework.aop.interceptor.AbstractTraceInterceptor.setHideProxyClassNames(boolean)", "public void setHideProxyClassNames(boolean)"], ["void", "org.springframework.aop.interceptor.AbstractTraceInterceptor.setLogExceptionStackTrace(boolean)", "public void setLogExceptionStackTrace(boolean)"], ["java.lang.Object", "org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.aopalliance.intercept.MethodInvocation", "org.springframework.aop.interceptor.ExposeInvocationInterceptor.currentInvocation()", "public static org.aopalliance.intercept.MethodInvocation currentInvocation() throws java.lang.IllegalStateException"], ["java.lang.Object", "org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["int", "org.springframework.aop.interceptor.ExposeInvocationInterceptor.getOrder()", "public int getOrder()"], ["org.springframework.aop.interceptor.PerformanceMonitorInterceptor", "org.springframework.aop.interceptor.PerformanceMonitorInterceptor()", "public org.springframework.aop.interceptor.PerformanceMonitorInterceptor()"], ["org.springframework.aop.interceptor.PerformanceMonitorInterceptor", "org.springframework.aop.interceptor.PerformanceMonitorInterceptor(boolean)", "public org.springframework.aop.interceptor.PerformanceMonitorInterceptor(boolean)"], ["org.springframework.aop.interceptor.AbstractMonitoringInterceptor", "org.springframework.aop.interceptor.AbstractMonitoringInterceptor()", "public org.springframework.aop.interceptor.AbstractMonitoringInterceptor()"], ["void", "org.springframework.aop.interceptor.AbstractMonitoringInterceptor.setPrefix(java.lang.String)", "public void setPrefix(java.lang.String)"], ["void", "org.springframework.aop.interceptor.AbstractMonitoringInterceptor.setSuffix(java.lang.String)", "public void setSuffix(java.lang.String)"], ["void", "org.springframework.aop.interceptor.AbstractMonitoringInterceptor.setLogTargetClassInvocation(boolean)", "public void setLogTargetClassInvocation(boolean)"], ["org.springframework.aop.interceptor.AsyncExecutionInterceptor", "org.springframework.aop.interceptor.AsyncExecutionInterceptor(java.util.concurrent.Executor)", "public org.springframework.aop.interceptor.AsyncExecutionInterceptor(java.util.concurrent.Executor)"], ["org.springframework.aop.interceptor.AsyncExecutionInterceptor", "org.springframework.aop.interceptor.AsyncExecutionInterceptor(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)", "public org.springframework.aop.interceptor.AsyncExecutionInterceptor(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)"], ["java.lang.Object", "org.springframework.aop.interceptor.AsyncExecutionInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["int", "org.springframework.aop.interceptor.AsyncExecutionInterceptor.getOrder()", "public int getOrder()"], ["org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor", "org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor()", "public org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor()"], ["org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor", "org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor(boolean)", "public org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor(boolean)"], ["org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor", "org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor(boolean, boolean)", "public org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor(boolean, boolean)"], ["void", "org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor.setTrackAllInvocations(boolean)", "public void setTrackAllInvocations(boolean)"], ["org.springframework.aop.interceptor.DebugInterceptor", "org.springframework.aop.interceptor.DebugInterceptor()", "public org.springframework.aop.interceptor.DebugInterceptor()"], ["org.springframework.aop.interceptor.DebugInterceptor", "org.springframework.aop.interceptor.DebugInterceptor(boolean)", "public org.springframework.aop.interceptor.DebugInterceptor(boolean)"], ["java.lang.Object", "org.springframework.aop.interceptor.DebugInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["long", "org.springframework.aop.interceptor.DebugInterceptor.getCount()", "public long getCount()"], ["synchronized", "org.springframework.aop.interceptor.DebugInterceptor.void resetCount()", "public synchronized void resetCount()"], ["org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor(java.lang.String)", "public org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor(java.lang.String)"], ["java.lang.Object", "org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.support.DelegatingIntroductionInterceptor", "org.springframework.aop.support.DelegatingIntroductionInterceptor(java.lang.Object)", "public org.springframework.aop.support.DelegatingIntroductionInterceptor(java.lang.Object)"], ["java.lang.Object", "org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionIntroductionAwareMethodMatcher", "org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionIntroductionAwareMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter)", "public org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionIntroductionAwareMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter)"], ["boolean", "org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionIntroductionAwareMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)"], ["org.springframework.aop.support.MethodMatchers$UnionIntroductionAwareMethodMatcher", "org.springframework.aop.support.MethodMatchers$UnionIntroductionAwareMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.MethodMatchers$UnionIntroductionAwareMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)"], ["boolean", "org.springframework.aop.support.MethodMatchers$UnionIntroductionAwareMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)"], ["org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)"], ["boolean", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.isRuntime()", "public boolean isRuntime()"], ["boolean", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["boolean", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.toString()", "public java.lang.String toString()"], ["boolean", "org.springframework.aop.support.ClassFilters$IntersectionClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.ClassFilters$IntersectionClassFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.ClassFilters$IntersectionClassFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.ClassFilters$IntersectionClassFilter.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.DynamicMethodMatcher", "org.springframework.aop.support.DynamicMethodMatcher()", "public org.springframework.aop.support.DynamicMethodMatcher()"], ["boolean", "org.springframework.aop.support.DynamicMethodMatcher.isRuntime()", "public final boolean isRuntime()"], ["boolean", "org.springframework.aop.support.DynamicMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["org.springframework.aop.support.DefaultIntroductionAdvisor", "org.springframework.aop.support.DefaultIntroductionAdvisor(org.aopalliance.aop.Advice)", "public org.springframework.aop.support.DefaultIntroductionAdvisor(org.aopalliance.aop.Advice)"], ["org.springframework.aop.support.DefaultIntroductionAdvisor", "org.springframework.aop.support.DefaultIntroductionAdvisor(org.aopalliance.aop.Advice, org.springframework.aop.IntroductionInfo)", "public org.springframework.aop.support.DefaultIntroductionAdvisor(org.aopalliance.aop.Advice, org.springframework.aop.IntroductionInfo)"], ["org.springframework.aop.support.DefaultIntroductionAdvisor", "org.springframework.aop.support.DefaultIntroductionAdvisor(org.springframework.aop.DynamicIntroductionAdvice, java.lang.Class<?>)", "public org.springframework.aop.support.DefaultIntroductionAdvisor(org.springframework.aop.DynamicIntroductionAdvice, java.lang.Class<?>)"], ["void", "org.springframework.aop.support.DefaultIntroductionAdvisor.addInterface(java.lang.Class<?>)", "public void addInterface(java.lang.Class<?>)"], ["java.lang.Class<?>[]", "org.springframework.aop.support.DefaultIntroductionAdvisor.getInterfaces()", "public java.lang.Class<?>[] getInterfaces()"], ["void", "org.springframework.aop.support.DefaultIntroductionAdvisor.validateInterfaces()", "public void validateInterfaces() throws java.lang.IllegalArgumentException"], ["void", "org.springframework.aop.support.DefaultIntroductionAdvisor.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.aop.support.DefaultIntroductionAdvisor.getOrder()", "public int getOrder()"], ["org.aopalliance.aop.Advice", "org.springframework.aop.support.DefaultIntroductionAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["boolean", "org.springframework.aop.support.DefaultIntroductionAdvisor.isPerInstance()", "public boolean isPerInstance()"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.DefaultIntroductionAdvisor.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["boolean", "org.springframework.aop.support.DefaultIntroductionAdvisor.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.DefaultIntroductionAdvisor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.DefaultIntroductionAdvisor.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.DefaultIntroductionAdvisor.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.MethodMatchers$UnionMethodMatcher", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.MethodMatchers$UnionMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)"], ["boolean", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher.isRuntime()", "public boolean isRuntime()"], ["boolean", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["boolean", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.MethodMatchers$UnionMethodMatcher.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.AbstractExpressionPointcut", "org.springframework.aop.support.AbstractExpressionPointcut()", "public org.springframework.aop.support.AbstractExpressionPointcut()"], ["void", "org.springframework.aop.support.AbstractExpressionPointcut.setLocation(java.lang.String)", "public void setLocation(java.lang.String)"], ["java.lang.String", "org.springframework.aop.support.AbstractExpressionPointcut.getLocation()", "public java.lang.String getLocation()"], ["void", "org.springframework.aop.support.AbstractExpressionPointcut.setExpression(java.lang.String)", "public void setExpression(java.lang.String)"], ["java.lang.String", "org.springframework.aop.support.AbstractExpressionPointcut.getExpression()", "public java.lang.String getExpression()"], ["org.springframework.aop.support.ClassFilters", "org.springframework.aop.support.ClassFilters()", "public org.springframework.aop.support.ClassFilters()"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.ClassFilters.union(org.springframework.aop.ClassFilter, org.springframework.aop.ClassFilter)", "public static org.springframework.aop.ClassFilter union(org.springframework.aop.ClassFilter, org.springframework.aop.ClassFilter)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.ClassFilters.union(org.springframework.aop.ClassFilter[])", "public static org.springframework.aop.ClassFilter union(org.springframework.aop.ClassFilter[])"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.ClassFilters.intersection(org.springframework.aop.ClassFilter, org.springframework.aop.ClassFilter)", "public static org.springframework.aop.ClassFilter intersection(org.springframework.aop.ClassFilter, org.springframework.aop.ClassFilter)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.ClassFilters.intersection(org.springframework.aop.ClassFilter[])", "public static org.springframework.aop.ClassFilter intersection(org.springframework.aop.ClassFilter[])"], ["org.springframework.aop.support.DelegatePerTargetObjectIntroductionInterceptor", "org.springframework.aop.support.DelegatePerTargetObjectIntroductionInterceptor(java.lang.Class<?>, java.lang.Class<?>)", "public org.springframework.aop.support.DelegatePerTargetObjectIntroductionInterceptor(java.lang.Class<?>, java.lang.Class<?>)"], ["java.lang.Object", "org.springframework.aop.support.DelegatePerTargetObjectIntroductionInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.support.JdkRegexpMethodPointcut", "org.springframework.aop.support.JdkRegexpMethodPointcut()", "public org.springframework.aop.support.JdkRegexpMethodPointcut()"], ["boolean", "org.springframework.aop.support.Pointcuts$GetterPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["java.lang.String", "org.springframework.aop.support.Pointcuts$GetterPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor()", "public org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor()"], ["void", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.setAdviceBeanName(java.lang.String)", "public void setAdviceBeanName(java.lang.String)"], ["java.lang.String", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.getAdviceBeanName()", "public java.lang.String getAdviceBeanName()"], ["void", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["void", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.setAdvice(org.aopalliance.aop.Advice)", "public void setAdvice(org.aopalliance.aop.Advice)"], ["org.aopalliance.aop.Advice", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["java.lang.String", "org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor()", "public org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor()"], ["org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor(org.aopalliance.aop.Advice)", "public org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor(org.aopalliance.aop.Advice)"], ["void", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor.getOrder()", "public int getOrder()"], ["void", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor.setAdvice(org.aopalliance.aop.Advice)", "public void setAdvice(org.aopalliance.aop.Advice)"], ["org.aopalliance.aop.Advice", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["boolean", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor.isPerInstance()", "public boolean isPerInstance()"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.aop.support.IntroductionInfoSupport", "org.springframework.aop.support.IntroductionInfoSupport()", "public org.springframework.aop.support.IntroductionInfoSupport()"], ["void", "org.springframework.aop.support.IntroductionInfoSupport.suppressInterface(java.lang.Class<?>)", "public void suppressInterface(java.lang.Class<?>)"], ["java.lang.Class<?>[]", "org.springframework.aop.support.IntroductionInfoSupport.getInterfaces()", "public java.lang.Class<?>[] getInterfaces()"], ["boolean", "org.springframework.aop.support.IntroductionInfoSupport.implementsInterface(java.lang.Class<?>)", "public boolean implementsInterface(java.lang.Class<?>)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut()", "public org.springframework.aop.support.ComposablePointcut()"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut(org.springframework.aop.Pointcut)", "public org.springframework.aop.support.ComposablePointcut(org.springframework.aop.Pointcut)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut(org.springframework.aop.ClassFilter)", "public org.springframework.aop.support.ComposablePointcut(org.springframework.aop.ClassFilter)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut(org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.ComposablePointcut(org.springframework.aop.MethodMatcher)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut(org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.ComposablePointcut(org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut.union(org.springframework.aop.ClassFilter)", "public org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.ClassFilter)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut.intersection(org.springframework.aop.ClassFilter)", "public org.springframework.aop.support.ComposablePointcut intersection(org.springframework.aop.ClassFilter)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut.union(org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.MethodMatcher)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut.intersection(org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.ComposablePointcut intersection(org.springframework.aop.MethodMatcher)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut.union(org.springframework.aop.Pointcut)", "public org.springframework.aop.support.ComposablePointcut union(org.springframework.aop.Pointcut)"], ["org.springframework.aop.support.ComposablePointcut", "org.springframework.aop.support.ComposablePointcut.intersection(org.springframework.aop.Pointcut)", "public org.springframework.aop.support.ComposablePointcut intersection(org.springframework.aop.Pointcut)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.ComposablePointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.ComposablePointcut.getMethodMatcher()", "public org.springframework.aop.MethodMatcher getMethodMatcher()"], ["boolean", "org.springframework.aop.support.ComposablePointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.ComposablePointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.ComposablePointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.RegexpMethodPointcutAdvisor", "org.springframework.aop.support.RegexpMethodPointcutAdvisor()", "public org.springframework.aop.support.RegexpMethodPointcutAdvisor()"], ["org.springframework.aop.support.RegexpMethodPointcutAdvisor", "org.springframework.aop.support.RegexpMethodPointcutAdvisor(org.aopalliance.aop.Advice)", "public org.springframework.aop.support.RegexpMethodPointcutAdvisor(org.aopalliance.aop.Advice)"], ["org.springframework.aop.support.RegexpMethodPointcutAdvisor", "org.springframework.aop.support.RegexpMethodPointcutAdvisor(java.lang.String, org.aopalliance.aop.Advice)", "public org.springframework.aop.support.RegexpMethodPointcutAdvisor(java.lang.String, org.aopalliance.aop.Advice)"], ["org.springframework.aop.support.RegexpMethodPointcutAdvisor", "org.springframework.aop.support.RegexpMethodPointcutAdvisor(java.lang.String[], org.aopalliance.aop.Advice)", "public org.springframework.aop.support.RegexpMethodPointcutAdvisor(java.lang.String[], org.aopalliance.aop.Advice)"], ["void", "org.springframework.aop.support.RegexpMethodPointcutAdvisor.setPattern(java.lang.String)", "public void setPattern(java.lang.String)"], ["void", "org.springframework.aop.support.RegexpMethodPointcutAdvisor.setPatterns(java.lang.String...)", "public void setPatterns(java.lang.String...)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.RegexpMethodPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["java.lang.String", "org.springframework.aop.support.RegexpMethodPointcutAdvisor.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.MethodMatchers", "org.springframework.aop.support.MethodMatchers()", "public org.springframework.aop.support.MethodMatchers()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.MethodMatchers.union(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)", "public static org.springframework.aop.MethodMatcher union(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.MethodMatchers.intersection(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)", "public static org.springframework.aop.MethodMatcher intersection(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)"], ["boolean", "org.springframework.aop.support.MethodMatchers.matches(org.springframework.aop.MethodMatcher, java.lang.reflect.Method, java.lang.Class<?>, boolean)", "public static boolean matches(org.springframework.aop.MethodMatcher, java.lang.reflect.Method, java.lang.Class<?>, boolean)"], ["org.springframework.aop.support.AbstractRegexpMethodPointcut", "org.springframework.aop.support.AbstractRegexpMethodPointcut()", "public org.springframework.aop.support.AbstractRegexpMethodPointcut()"], ["void", "org.springframework.aop.support.AbstractRegexpMethodPointcut.setPattern(java.lang.String)", "public void setPattern(java.lang.String)"], ["void", "org.springframework.aop.support.AbstractRegexpMethodPointcut.setPatterns(java.lang.String...)", "public void setPatterns(java.lang.String...)"], ["java.lang.String[]", "org.springframework.aop.support.AbstractRegexpMethodPointcut.getPatterns()", "public java.lang.String[] getPatterns()"], ["void", "org.springframework.aop.support.AbstractRegexpMethodPointcut.setExcludedPattern(java.lang.String)", "public void setExcludedPattern(java.lang.String)"], ["void", "org.springframework.aop.support.AbstractRegexpMethodPointcut.setExcludedPatterns(java.lang.String...)", "public void setExcludedPatterns(java.lang.String...)"], ["java.lang.String[]", "org.springframework.aop.support.AbstractRegexpMethodPointcut.getExcludedPatterns()", "public java.lang.String[] getExcludedPatterns()"], ["boolean", "org.springframework.aop.support.AbstractRegexpMethodPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.AbstractRegexpMethodPointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.AbstractRegexpMethodPointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.AbstractRegexpMethodPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.annotation.AnnotationMatchingPointcut", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.springframework.aop.support.annotation.AnnotationMatchingPointcut", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)", "public org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)"], ["org.springframework.aop.support.annotation.AnnotationMatchingPointcut", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)", "public org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.springframework.aop.support.annotation.AnnotationMatchingPointcut", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)", "public org.springframework.aop.support.annotation.AnnotationMatchingPointcut(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.getMethodMatcher()", "public org.springframework.aop.MethodMatcher getMethodMatcher()"], ["boolean", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.annotation.AnnotationMatchingPointcut", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.forClassAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public static org.springframework.aop.support.annotation.AnnotationMatchingPointcut forClassAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.springframework.aop.support.annotation.AnnotationMatchingPointcut", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut.forMethodAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public static org.springframework.aop.support.annotation.AnnotationMatchingPointcut forMethodAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.springframework.aop.support.annotation.AnnotationMethodMatcher", "org.springframework.aop.support.annotation.AnnotationMethodMatcher(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public org.springframework.aop.support.annotation.AnnotationMethodMatcher(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.springframework.aop.support.annotation.AnnotationMethodMatcher", "org.springframework.aop.support.annotation.AnnotationMethodMatcher(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)", "public org.springframework.aop.support.annotation.AnnotationMethodMatcher(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)"], ["boolean", "org.springframework.aop.support.annotation.AnnotationMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.annotation.AnnotationMethodMatcher.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.annotation.AnnotationMethodMatcher.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.annotation.AnnotationMethodMatcher.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.annotation.AnnotationClassFilter", "org.springframework.aop.support.annotation.AnnotationClassFilter(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public org.springframework.aop.support.annotation.AnnotationClassFilter(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["org.springframework.aop.support.annotation.AnnotationClassFilter", "org.springframework.aop.support.annotation.AnnotationClassFilter(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)", "public org.springframework.aop.support.annotation.AnnotationClassFilter(java.lang.Class<? extends java.lang.annotation.Annotation>, boolean)"], ["boolean", "org.springframework.aop.support.annotation.AnnotationClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.annotation.AnnotationClassFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.annotation.AnnotationClassFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.annotation.AnnotationClassFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut$AnnotationCandidateClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut$AnnotationCandidateClassFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut$AnnotationCandidateClassFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.annotation.AnnotationMatchingPointcut$AnnotationCandidateClassFilter.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.NameMatchMethodPointcutAdvisor", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor()", "public org.springframework.aop.support.NameMatchMethodPointcutAdvisor()"], ["org.springframework.aop.support.NameMatchMethodPointcutAdvisor", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor(org.aopalliance.aop.Advice)", "public org.springframework.aop.support.NameMatchMethodPointcutAdvisor(org.aopalliance.aop.Advice)"], ["void", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor.setClassFilter(org.springframework.aop.ClassFilter)", "public void setClassFilter(org.springframework.aop.ClassFilter)"], ["void", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor.setMappedName(java.lang.String)", "public void setMappedName(java.lang.String)"], ["void", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor.setMappedNames(java.lang.String...)", "public void setMappedNames(java.lang.String...)"], ["org.springframework.aop.support.NameMatchMethodPointcut", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor.addMethodName(java.lang.String)", "public org.springframework.aop.support.NameMatchMethodPointcut addMethodName(java.lang.String)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.NameMatchMethodPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor", "org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor()", "public org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor()"], ["void", "org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor.setPointcut(org.springframework.aop.Pointcut)", "public void setPointcut(org.springframework.aop.Pointcut)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["java.lang.String", "org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.AbstractPointcutAdvisor", "org.springframework.aop.support.AbstractPointcutAdvisor()", "public org.springframework.aop.support.AbstractPointcutAdvisor()"], ["void", "org.springframework.aop.support.AbstractPointcutAdvisor.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.aop.support.AbstractPointcutAdvisor.getOrder()", "public int getOrder()"], ["boolean", "org.springframework.aop.support.AbstractPointcutAdvisor.isPerInstance()", "public boolean isPerInstance()"], ["boolean", "org.springframework.aop.support.AbstractPointcutAdvisor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.AbstractPointcutAdvisor.hashCode()", "public int hashCode()"], ["org.springframework.aop.support.NameMatchMethodPointcut", "org.springframework.aop.support.NameMatchMethodPointcut()", "public org.springframework.aop.support.NameMatchMethodPointcut()"], ["void", "org.springframework.aop.support.NameMatchMethodPointcut.setMappedName(java.lang.String)", "public void setMappedName(java.lang.String)"], ["void", "org.springframework.aop.support.NameMatchMethodPointcut.setMappedNames(java.lang.String...)", "public void setMappedNames(java.lang.String...)"], ["org.springframework.aop.support.NameMatchMethodPointcut", "org.springframework.aop.support.NameMatchMethodPointcut.addMethodName(java.lang.String)", "public org.springframework.aop.support.NameMatchMethodPointcut addMethodName(java.lang.String)"], ["boolean", "org.springframework.aop.support.NameMatchMethodPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.NameMatchMethodPointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.NameMatchMethodPointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.NameMatchMethodPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher", "org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter)", "public org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter)"], ["boolean", "org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.DynamicMethodMatcherPointcut", "org.springframework.aop.support.DynamicMethodMatcherPointcut()", "public org.springframework.aop.support.DynamicMethodMatcherPointcut()"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.DynamicMethodMatcherPointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.DynamicMethodMatcherPointcut.getMethodMatcher()", "public final org.springframework.aop.MethodMatcher getMethodMatcher()"], ["org.springframework.aop.support.StaticMethodMatcher", "org.springframework.aop.support.StaticMethodMatcher()", "public org.springframework.aop.support.StaticMethodMatcher()"], ["boolean", "org.springframework.aop.support.StaticMethodMatcher.isRuntime()", "public final boolean isRuntime()"], ["boolean", "org.springframework.aop.support.StaticMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public final boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["org.springframework.aop.support.RootClassFilter", "org.springframework.aop.support.RootClassFilter(java.lang.Class<?>)", "public org.springframework.aop.support.RootClassFilter(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.RootClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.RootClassFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.RootClassFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.RootClassFilter.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.Pointcuts", "org.springframework.aop.support.Pointcuts()", "public org.springframework.aop.support.Pointcuts()"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.Pointcuts.union(org.springframework.aop.Pointcut, org.springframework.aop.Pointcut)", "public static org.springframework.aop.Pointcut union(org.springframework.aop.Pointcut, org.springframework.aop.Pointcut)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.Pointcuts.intersection(org.springframework.aop.Pointcut, org.springframework.aop.Pointcut)", "public static org.springframework.aop.Pointcut intersection(org.springframework.aop.Pointcut, org.springframework.aop.Pointcut)"], ["boolean", "org.springframework.aop.support.Pointcuts.matches(org.springframework.aop.Pointcut, java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public static boolean matches(org.springframework.aop.Pointcut, java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["org.springframework.aop.support.StaticMethodMatcherPointcut", "org.springframework.aop.support.StaticMethodMatcherPointcut()", "public org.springframework.aop.support.StaticMethodMatcherPointcut()"], ["void", "org.springframework.aop.support.StaticMethodMatcherPointcut.setClassFilter(org.springframework.aop.ClassFilter)", "public void setClassFilter(org.springframework.aop.ClassFilter)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.StaticMethodMatcherPointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.StaticMethodMatcherPointcut.getMethodMatcher()", "public final org.springframework.aop.MethodMatcher getMethodMatcher()"], ["org.springframework.aop.support.ControlFlowPointcut", "org.springframework.aop.support.ControlFlowPointcut(java.lang.Class<?>)", "public org.springframework.aop.support.ControlFlowPointcut(java.lang.Class<?>)"], ["org.springframework.aop.support.ControlFlowPointcut", "org.springframework.aop.support.ControlFlowPointcut(java.lang.Class<?>, java.lang.String)", "public org.springframework.aop.support.ControlFlowPointcut(java.lang.Class<?>, java.lang.String)"], ["boolean", "org.springframework.aop.support.ControlFlowPointcut.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.ControlFlowPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.ControlFlowPointcut.isRuntime()", "public boolean isRuntime()"], ["boolean", "org.springframework.aop.support.ControlFlowPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["int", "org.springframework.aop.support.ControlFlowPointcut.getEvaluations()", "public int getEvaluations()"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.support.ControlFlowPointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.support.ControlFlowPointcut.getMethodMatcher()", "public org.springframework.aop.MethodMatcher getMethodMatcher()"], ["boolean", "org.springframework.aop.support.ControlFlowPointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.ControlFlowPointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.ControlFlowPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.DefaultPointcutAdvisor", "org.springframework.aop.support.DefaultPointcutAdvisor()", "public org.springframework.aop.support.DefaultPointcutAdvisor()"], ["org.springframework.aop.support.DefaultPointcutAdvisor", "org.springframework.aop.support.DefaultPointcutAdvisor(org.aopalliance.aop.Advice)", "public org.springframework.aop.support.DefaultPointcutAdvisor(org.aopalliance.aop.Advice)"], ["org.springframework.aop.support.DefaultPointcutAdvisor", "org.springframework.aop.support.DefaultPointcutAdvisor(org.springframework.aop.Pointcut, org.aopalliance.aop.Advice)", "public org.springframework.aop.support.DefaultPointcutAdvisor(org.springframework.aop.Pointcut, org.aopalliance.aop.Advice)"], ["void", "org.springframework.aop.support.DefaultPointcutAdvisor.setPointcut(org.springframework.aop.Pointcut)", "public void setPointcut(org.springframework.aop.Pointcut)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.support.DefaultPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["java.lang.String", "org.springframework.aop.support.DefaultPointcutAdvisor.toString()", "public java.lang.String toString()"], ["boolean", "org.springframework.aop.support.ClassFilters$UnionClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.ClassFilters$UnionClassFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.support.ClassFilters$UnionClassFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.support.ClassFilters$UnionClassFilter.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.AopUtils", "org.springframework.aop.support.AopUtils()", "public org.springframework.aop.support.AopUtils()"], ["boolean", "org.springframework.aop.support.AopUtils.isAopProxy(java.lang.Object)", "public static boolean isAopProxy(java.lang.Object)"], ["boolean", "org.springframework.aop.support.AopUtils.isJdkDynamicProxy(java.lang.Object)", "public static boolean isJdkDynamicProxy(java.lang.Object)"], ["boolean", "org.springframework.aop.support.AopUtils.isCglibProxy(java.lang.Object)", "public static boolean isCglibProxy(java.lang.Object)"], ["java.lang.Class<?>", "org.springframework.aop.support.AopUtils.getTargetClass(java.lang.Object)", "public static java.lang.Class<?> getTargetClass(java.lang.Object)"], ["java.lang.reflect.Method", "org.springframework.aop.support.AopUtils.selectInvocableMethod(java.lang.reflect.Method, java.lang.Class<?>)", "public static java.lang.reflect.Method selectInvocableMethod(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.AopUtils.isEqualsMethod(java.lang.reflect.Method)", "public static boolean isEqualsMethod(java.lang.reflect.Method)"], ["boolean", "org.springframework.aop.support.AopUtils.isHashCodeMethod(java.lang.reflect.Method)", "public static boolean isHashCodeMethod(java.lang.reflect.Method)"], ["boolean", "org.springframework.aop.support.AopUtils.isToStringMethod(java.lang.reflect.Method)", "public static boolean isToStringMethod(java.lang.reflect.Method)"], ["boolean", "org.springframework.aop.support.AopUtils.isFinalizeMethod(java.lang.reflect.Method)", "public static boolean isFinalizeMethod(java.lang.reflect.Method)"], ["java.lang.reflect.Method", "org.springframework.aop.support.AopUtils.getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class<?>)", "public static java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.AopUtils.canApply(org.springframework.aop.Pointcut, java.lang.Class<?>)", "public static boolean canApply(org.springframework.aop.Pointcut, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.AopUtils.canApply(org.springframework.aop.Pointcut, java.lang.Class<?>, boolean)", "public static boolean canApply(org.springframework.aop.Pointcut, java.lang.Class<?>, boolean)"], ["boolean", "org.springframework.aop.support.AopUtils.canApply(org.springframework.aop.Advisor, java.lang.Class<?>)", "public static boolean canApply(org.springframework.aop.Advisor, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.support.AopUtils.canApply(org.springframework.aop.Advisor, java.lang.Class<?>, boolean)", "public static boolean canApply(org.springframework.aop.Advisor, java.lang.Class<?>, boolean)"], ["java.util.List<org.springframework.aop.Advisor>", "org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(java.util.List<org.springframework.aop.Advisor>, java.lang.Class<?>)", "public static java.util.List<org.springframework.aop.Advisor> findAdvisorsThatCanApply(java.util.List<org.springframework.aop.Advisor>, java.lang.Class<?>)"], ["java.lang.Object", "org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public static java.lang.Object invokeJoinpointUsingReflection(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["org.springframework.aop.support.AbstractGenericPointcutAdvisor", "org.springframework.aop.support.AbstractGenericPointcutAdvisor()", "public org.springframework.aop.support.AbstractGenericPointcutAdvisor()"], ["void", "org.springframework.aop.support.AbstractGenericPointcutAdvisor.setAdvice(org.aopalliance.aop.Advice)", "public void setAdvice(org.aopalliance.aop.Advice)"], ["org.aopalliance.aop.Advice", "org.springframework.aop.support.AbstractGenericPointcutAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["java.lang.String", "org.springframework.aop.support.AbstractGenericPointcutAdvisor.toString()", "public java.lang.String toString()"], ["boolean", "org.springframework.aop.support.Pointcuts$SetterPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["java.lang.String", "org.springframework.aop.support.Pointcuts$SetterPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.support.MethodMatchers$IntersectionIntroductionAwareMethodMatcher", "org.springframework.aop.support.MethodMatchers$IntersectionIntroductionAwareMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)", "public org.springframework.aop.support.MethodMatchers$IntersectionIntroductionAwareMethodMatcher(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)"], ["boolean", "org.springframework.aop.support.MethodMatchers$IntersectionIntroductionAwareMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)"], ["org.springframework.aop.scope.ScopedProxyFactoryBean", "org.springframework.aop.scope.ScopedProxyFactoryBean()", "public org.springframework.aop.scope.ScopedProxyFactoryBean()"], ["void", "org.springframework.aop.scope.ScopedProxyFactoryBean.setTargetBeanName(java.lang.String)", "public void setTargetBeanName(java.lang.String)"], ["void", "org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["java.lang.Object", "org.springframework.aop.scope.ScopedProxyFactoryBean.getObject()", "public java.lang.Object getObject()"], ["java.lang.Class<?>", "org.springframework.aop.scope.ScopedProxyFactoryBean.getObjectType()", "public java.lang.Class<?> getObjectType()"], ["boolean", "org.springframework.aop.scope.ScopedProxyFactoryBean.isSingleton()", "public boolean isSingleton()"], ["org.springframework.aop.scope.ScopedProxyUtils", "org.springframework.aop.scope.ScopedProxyUtils()", "public org.springframework.aop.scope.ScopedProxyUtils()"], ["org.springframework.beans.factory.config.BeanDefinitionHolder", "org.springframework.aop.scope.ScopedProxyUtils.createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)", "public static org.springframework.beans.factory.config.BeanDefinitionHolder createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)"], ["java.lang.String", "org.springframework.aop.scope.ScopedProxyUtils.getTargetBeanName(java.lang.String)", "public static java.lang.String getTargetBeanName(java.lang.String)"], ["java.lang.String", "org.springframework.aop.scope.ScopedProxyUtils.getOriginalBeanName(java.lang.String)", "public static java.lang.String getOriginalBeanName(java.lang.String)"], ["boolean", "org.springframework.aop.scope.ScopedProxyUtils.isScopedTarget(java.lang.String)", "public static boolean isScopedTarget(java.lang.String)"], ["org.springframework.aop.scope.DefaultScopedObject", "org.springframework.aop.scope.DefaultScopedObject(org.springframework.beans.factory.config.ConfigurableBeanFactory, java.lang.String)", "public org.springframework.aop.scope.DefaultScopedObject(org.springframework.beans.factory.config.ConfigurableBeanFactory, java.lang.String)"], ["java.lang.Object", "org.springframework.aop.scope.DefaultScopedObject.getTargetObject()", "public java.lang.Object getTargetObject()"], ["void", "org.springframework.aop.scope.DefaultScopedObject.removeFromScope()", "public void removeFromScope()"], ["org.springframework.aop.aspectj.AspectJExpressionPointcut", "org.springframework.aop.aspectj.AspectJExpressionPointcut()", "public org.springframework.aop.aspectj.AspectJExpressionPointcut()"], ["org.springframework.aop.aspectj.AspectJExpressionPointcut", "org.springframework.aop.aspectj.AspectJExpressionPointcut(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[])", "public org.springframework.aop.aspectj.AspectJExpressionPointcut(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[])"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcut.setPointcutDeclarationScope(java.lang.Class<?>)", "public void setPointcutDeclarationScope(java.lang.Class<?>)"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcut.setParameterNames(java.lang.String...)", "public void setParameterNames(java.lang.String...)"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcut.setParameterTypes(java.lang.Class<?>...)", "public void setParameterTypes(java.lang.Class<?>...)"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcut.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["org.springframework.aop.MethodMatcher", "org.springframework.aop.aspectj.AspectJExpressionPointcut.getMethodMatcher()", "public org.springframework.aop.MethodMatcher getMethodMatcher()"], ["org.aspectj.weaver.tools.PointcutExpression", "org.springframework.aop.aspectj.AspectJExpressionPointcut.getPointcutExpression()", "public org.aspectj.weaver.tools.PointcutExpression getPointcutExpression()"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, boolean)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut.isRuntime()", "public boolean isRuntime()"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.aspectj.AspectJExpressionPointcut.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.aspectj.AspectJExpressionPointcut.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder", "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder(org.springframework.aop.Advisor, java.util.Comparator<org.springframework.aop.Advisor>)", "public org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder(org.springframework.aop.Advisor, java.util.Comparator<org.springframework.aop.Advisor>)"], ["int", "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder.fallbackCompareTo(java.lang.Object)", "public int fallbackCompareTo(java.lang.Object)"], ["org.springframework.aop.Advisor", "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder.getAdvisor()", "public org.springframework.aop.Advisor getAdvisor()"], ["java.lang.String", "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator", "org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator()", "public org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator()"], ["org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator", "org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator(java.util.Comparator<? super org.springframework.aop.Advisor>)", "public org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator(java.util.Comparator<? super org.springframework.aop.Advisor>)"], ["int", "org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator.compare(org.springframework.aop.Advisor, org.springframework.aop.Advisor)", "public int compare(org.springframework.aop.Advisor, org.springframework.aop.Advisor)"], ["int", "org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator", "org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator()", "public org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator()"], ["org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer(java.lang.String)", "public org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer(java.lang.String)"], ["void", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setRaiseExceptions(boolean)", "public void setRaiseExceptions(boolean)"], ["void", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setReturningName(java.lang.String)", "public void setReturningName(java.lang.String)"], ["void", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.setThrowingName(java.lang.String)", "public void setThrowingName(java.lang.String)"], ["java.lang.String[]", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(java.lang.reflect.Method)", "public java.lang.String[] getParameterNames(java.lang.reflect.Method)"], ["java.lang.String[]", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(java.lang.reflect.Constructor<?>)", "public java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"], ["org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint(org.springframework.aop.ProxyMethodInvocation)", "public org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint(org.springframework.aop.ProxyMethodInvocation)"], ["void", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.set$AroundClosure(org.aspectj.runtime.internal.AroundClosure)", "public void set$AroundClosure(org.aspectj.runtime.internal.AroundClosure)"], ["java.lang.Object", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed()", "public java.lang.Object proceed() throws java.lang.Throwable"], ["java.lang.Object", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(java.lang.Object[])", "public java.lang.Object proceed(java.lang.Object[]) throws java.lang.Throwable"], ["java.lang.Object", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getThis()", "public java.lang.Object getThis()"], ["java.lang.Object", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getTarget()", "public java.lang.Object getTarget()"], ["java.lang.Object[]", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getArgs()", "public java.lang.Object[] getArgs()"], ["org.aspectj.lang.Signature", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getSignature()", "public org.aspectj.lang.Signature getSignature()"], ["org.aspectj.lang.reflect.SourceLocation", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getSourceLocation()", "public org.aspectj.lang.reflect.SourceLocation getSourceLocation()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getKind()", "public java.lang.String getKind()"], ["int", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getId()", "public int getId()"], ["org.aspectj.lang.JoinPoint$StaticPart", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.getStaticPart()", "public org.aspectj.lang.JoinPoint$StaticPart getStaticPart()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.toShortString()", "public java.lang.String toShortString()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.toLongString()", "public java.lang.String toLongString()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.AspectJAfterAdvice", "org.springframework.aop.aspectj.AspectJAfterAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)", "public org.springframework.aop.aspectj.AspectJAfterAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)"], ["java.lang.Object", "org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["boolean", "org.springframework.aop.aspectj.AspectJAfterAdvice.isBeforeAdvice()", "public boolean isBeforeAdvice()"], ["boolean", "org.springframework.aop.aspectj.AspectJAfterAdvice.isAfterAdvice()", "public boolean isAfterAdvice()"], ["org.springframework.aop.aspectj.RuntimeTestWalker", "org.springframework.aop.aspectj.RuntimeTestWalker(org.aspectj.weaver.tools.ShadowMatch)", "public org.springframework.aop.aspectj.RuntimeTestWalker(org.aspectj.weaver.tools.ShadowMatch)"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker.testsSubtypeSensitiveVars()", "public boolean testsSubtypeSensitiveVars()"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(java.lang.Class<?>)", "public boolean testThisInstanceOfResidue(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker.testTargetInstanceOfResidue(java.lang.Class<?>)", "public boolean testTargetInstanceOfResidue(java.lang.Class<?>)"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getName()", "public java.lang.String getName()"], ["int", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getModifiers()", "public int getModifiers()"], ["java.lang.Class<?>", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getDeclaringType()", "public java.lang.Class<?> getDeclaringType()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getDeclaringTypeName()", "public java.lang.String getDeclaringTypeName()"], ["java.lang.Class<?>", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getReturnType()", "public java.lang.Class<?> getReturnType()"], ["java.lang.reflect.Method", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getMethod()", "public java.lang.reflect.Method getMethod()"], ["java.lang.Class<?>[]", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getParameterTypes()", "public java.lang.Class<?>[] getParameterTypes()"], ["java.lang.String[]", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getParameterNames()", "public java.lang.String[] getParameterNames()"], ["java.lang.Class<?>[]", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.getExceptionTypes()", "public java.lang.Class<?>[] getExceptionTypes()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.toShortString()", "public java.lang.String toShortString()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.toLongString()", "public java.lang.String toLongString()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl.toString()", "public java.lang.String toString()"], ["org.aspectj.lang.JoinPoint", "org.springframework.aop.aspectj.AbstractAspectJAdvice.currentJoinPoint()", "public static org.aspectj.lang.JoinPoint currentJoinPoint()"], ["org.springframework.aop.aspectj.AbstractAspectJAdvice", "org.springframework.aop.aspectj.AbstractAspectJAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)", "public org.springframework.aop.aspectj.AbstractAspectJAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)"], ["java.lang.reflect.Method", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectJAdviceMethod()", "public final java.lang.reflect.Method getAspectJAdviceMethod()"], ["org.springframework.aop.aspectj.AspectJExpressionPointcut", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getPointcut()", "public final org.springframework.aop.aspectj.AspectJExpressionPointcut getPointcut()"], ["org.springframework.aop.Pointcut", "org.springframework.aop.aspectj.AbstractAspectJAdvice.buildSafePointcut()", "public final org.springframework.aop.Pointcut buildSafePointcut()"], ["org.springframework.aop.aspectj.AspectInstanceFactory", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectInstanceFactory()", "public final org.springframework.aop.aspectj.AspectInstanceFactory getAspectInstanceFactory()"], ["java.lang.ClassLoader", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectClassLoader()", "public final java.lang.ClassLoader getAspectClassLoader()"], ["int", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getOrder()", "public int getOrder()"], ["void", "org.springframework.aop.aspectj.AbstractAspectJAdvice.setAspectName(java.lang.String)", "public void setAspectName(java.lang.String)"], ["java.lang.String", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getAspectName()", "public java.lang.String getAspectName()"], ["void", "org.springframework.aop.aspectj.AbstractAspectJAdvice.setDeclarationOrder(int)", "public void setDeclarationOrder(int)"], ["int", "org.springframework.aop.aspectj.AbstractAspectJAdvice.getDeclarationOrder()", "public int getDeclarationOrder()"], ["void", "org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNames(java.lang.String)", "public void setArgumentNames(java.lang.String)"], ["void", "org.springframework.aop.aspectj.AbstractAspectJAdvice.setArgumentNamesFromStringArray(java.lang.String...)", "public void setArgumentNamesFromStringArray(java.lang.String...)"], ["void", "org.springframework.aop.aspectj.AbstractAspectJAdvice.setReturningName(java.lang.String)", "public void setReturningName(java.lang.String)"], ["void", "org.springframework.aop.aspectj.AbstractAspectJAdvice.setThrowingName(java.lang.String)", "public void setThrowingName(java.lang.String)"], ["synchronized", "org.springframework.aop.aspectj.AbstractAspectJAdvice.void calculateArgumentBindings()", "public final synchronized void calculateArgumentBindings()"], ["java.lang.String", "org.springframework.aop.aspectj.AbstractAspectJAdvice.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.DeclareParentsAdvisor", "org.springframework.aop.aspectj.DeclareParentsAdvisor(java.lang.Class<?>, java.lang.String, java.lang.Class<?>)", "public org.springframework.aop.aspectj.DeclareParentsAdvisor(java.lang.Class<?>, java.lang.String, java.lang.Class<?>)"], ["org.springframework.aop.aspectj.DeclareParentsAdvisor", "org.springframework.aop.aspectj.DeclareParentsAdvisor(java.lang.Class<?>, java.lang.String, java.lang.Object)", "public org.springframework.aop.aspectj.DeclareParentsAdvisor(java.lang.Class<?>, java.lang.String, java.lang.Object)"], ["org.springframework.aop.ClassFilter", "org.springframework.aop.aspectj.DeclareParentsAdvisor.getClassFilter()", "public org.springframework.aop.ClassFilter getClassFilter()"], ["void", "org.springframework.aop.aspectj.DeclareParentsAdvisor.validateInterfaces()", "public void validateInterfaces() throws java.lang.IllegalArgumentException"], ["boolean", "org.springframework.aop.aspectj.DeclareParentsAdvisor.isPerInstance()", "public boolean isPerInstance()"], ["org.aopalliance.aop.Advice", "org.springframework.aop.aspectj.DeclareParentsAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["java.lang.Class<?>[]", "org.springframework.aop.aspectj.DeclareParentsAdvisor.getInterfaces()", "public java.lang.Class<?>[] getInterfaces()"], ["org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor()", "public org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor()"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.setExpression(java.lang.String)", "public void setExpression(java.lang.String)"], ["java.lang.String", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.getExpression()", "public java.lang.String getExpression()"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.setLocation(java.lang.String)", "public void setLocation(java.lang.String)"], ["java.lang.String", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.getLocation()", "public java.lang.String getLocation()"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.setParameterNames(java.lang.String...)", "public void setParameterNames(java.lang.String...)"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.setParameterTypes(java.lang.Class<?>...)", "public void setParameterTypes(java.lang.Class<?>...)"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.setBeanFactory(org.springframework.beans.factory.BeanFactory)", "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["org.springframework.aop.aspectj.AspectJAroundAdvice", "org.springframework.aop.aspectj.AspectJAroundAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)", "public org.springframework.aop.aspectj.AspectJAroundAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)"], ["boolean", "org.springframework.aop.aspectj.AspectJAroundAdvice.isBeforeAdvice()", "public boolean isBeforeAdvice()"], ["boolean", "org.springframework.aop.aspectj.AspectJAroundAdvice.isAfterAdvice()", "public boolean isAfterAdvice()"], ["java.lang.Object", "org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["org.springframework.aop.aspectj.SimpleAspectInstanceFactory", "org.springframework.aop.aspectj.SimpleAspectInstanceFactory(java.lang.Class<?>)", "public org.springframework.aop.aspectj.SimpleAspectInstanceFactory(java.lang.Class<?>)"], ["java.lang.Class<?>", "org.springframework.aop.aspectj.SimpleAspectInstanceFactory.getAspectClass()", "public final java.lang.Class<?> getAspectClass()"], ["java.lang.Object", "org.springframework.aop.aspectj.SimpleAspectInstanceFactory.getAspectInstance()", "public final java.lang.Object getAspectInstance()"], ["java.lang.ClassLoader", "org.springframework.aop.aspectj.SimpleAspectInstanceFactory.getAspectClassLoader()", "public java.lang.ClassLoader getAspectClassLoader()"], ["int", "org.springframework.aop.aspectj.SimpleAspectInstanceFactory.getOrder()", "public int getOrder()"], ["org.springframework.aop.aspectj.RuntimeTestWalker$TargetInstanceOfResidueTestVisitor", "org.springframework.aop.aspectj.RuntimeTestWalker$TargetInstanceOfResidueTestVisitor(java.lang.Class<?>)", "public org.springframework.aop.aspectj.RuntimeTestWalker$TargetInstanceOfResidueTestVisitor(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker$TargetInstanceOfResidueTestVisitor.targetInstanceOfMatches(org.aspectj.weaver.ast.Test)", "public boolean targetInstanceOfMatches(org.aspectj.weaver.ast.Test)"], ["org.springframework.aop.aspectj.AspectJProxyUtils", "org.springframework.aop.aspectj.AspectJProxyUtils()", "public org.springframework.aop.aspectj.AspectJProxyUtils()"], ["boolean", "org.springframework.aop.aspectj.AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(java.util.List<org.springframework.aop.Advisor>)", "public static boolean makeAdvisorChainAspectJCapableIfNecessary(java.util.List<org.springframework.aop.Advisor>)"], ["org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory(org.springframework.beans.factory.BeanFactory, java.lang.String)", "public org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory(org.springframework.beans.factory.BeanFactory, java.lang.String)"], ["org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory(org.springframework.beans.factory.BeanFactory, java.lang.String, java.lang.Class<?>)", "public org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory(org.springframework.beans.factory.BeanFactory, java.lang.String, java.lang.Class<?>)"], ["java.lang.Object", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.getAspectInstance()", "public java.lang.Object getAspectInstance()"], ["java.lang.ClassLoader", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.getAspectClassLoader()", "public java.lang.ClassLoader getAspectClassLoader()"], ["org.springframework.aop.aspectj.annotation.AspectMetadata", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.getAspectMetadata()", "public org.springframework.aop.aspectj.annotation.AspectMetadata getAspectMetadata()"], ["java.lang.Object", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.getAspectCreationMutex()", "public java.lang.Object getAspectCreationMutex()"], ["int", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.getOrder()", "public int getOrder()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory()", "public org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory()"], ["boolean", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory.isAspect(java.lang.Class<?>)", "public boolean isAspect(java.lang.Class<?>)"], ["void", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory.validate(java.lang.Class<?>)", "public void validate(java.lang.Class<?>) throws org.springframework.aop.framework.AopConfigException"], ["java.lang.String[]", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer.getParameterNames(java.lang.reflect.Method)", "public java.lang.String[] getParameterNames(java.lang.reflect.Method)"], ["java.lang.String[]", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer.getParameterNames(java.lang.reflect.Constructor<?>)", "public java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"], ["org.springframework.aop.aspectj.annotation.SingletonMetadataAwareAspectInstanceFactory", "org.springframework.aop.aspectj.annotation.SingletonMetadataAwareAspectInstanceFactory(java.lang.Object, java.lang.String)", "public org.springframework.aop.aspectj.annotation.SingletonMetadataAwareAspectInstanceFactory(java.lang.Object, java.lang.String)"], ["org.springframework.aop.aspectj.annotation.AspectMetadata", "org.springframework.aop.aspectj.annotation.SingletonMetadataAwareAspectInstanceFactory.getAspectMetadata()", "public final org.springframework.aop.aspectj.annotation.AspectMetadata getAspectMetadata()"], ["java.lang.Object", "org.springframework.aop.aspectj.annotation.SingletonMetadataAwareAspectInstanceFactory.getAspectCreationMutex()", "public java.lang.Object getAspectCreationMutex()"], ["org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator(org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)", "public org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator(org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)"], ["java.lang.Object", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.getAspectInstance()", "public java.lang.Object getAspectInstance()"], ["boolean", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.isMaterialized()", "public boolean isMaterialized()"], ["java.lang.ClassLoader", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.getAspectClassLoader()", "public java.lang.ClassLoader getAspectClassLoader()"], ["org.springframework.aop.aspectj.annotation.AspectMetadata", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.getAspectMetadata()", "public org.springframework.aop.aspectj.annotation.AspectMetadata getAspectMetadata()"], ["java.lang.Object", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.getAspectCreationMutex()", "public java.lang.Object getAspectCreationMutex()"], ["int", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.getOrder()", "public int getOrder()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.annotation.AspectJProxyFactory", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory()", "public org.springframework.aop.aspectj.annotation.AspectJProxyFactory()"], ["org.springframework.aop.aspectj.annotation.AspectJProxyFactory", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory(java.lang.Object)", "public org.springframework.aop.aspectj.annotation.AspectJProxyFactory(java.lang.Object)"], ["org.springframework.aop.aspectj.annotation.AspectJProxyFactory", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory(java.lang.Class<?>...)", "public org.springframework.aop.aspectj.annotation.AspectJProxyFactory(java.lang.Class<?>...)"], ["void", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAspect(java.lang.Object)", "public void addAspect(java.lang.Object)"], ["void", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAspect(java.lang.Class<?>)", "public void addAspect(java.lang.Class<?>)"], ["<T> T", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory.getProxy()", "public <T> T getProxy()"], ["<T> T", "org.springframework.aop.aspectj.annotation.AspectJProxyFactory.getProxy(java.lang.ClassLoader)", "public <T> T getProxy(java.lang.ClassLoader)"], ["org.springframework.aop.aspectj.annotation.NotAnAtAspectException", "org.springframework.aop.aspectj.annotation.NotAnAtAspectException(java.lang.Class<?>)", "public org.springframework.aop.aspectj.annotation.NotAnAtAspectException(java.lang.Class<?>)"], ["java.lang.Class<?>", "org.springframework.aop.aspectj.annotation.NotAnAtAspectException.getNonAspectClass()", "public java.lang.Class<?> getNonAspectClass()"], ["org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl$PerTargetInstantiationModelPointcut", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl$PerTargetInstantiationModelPointcut(org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.Pointcut, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)", "public org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl$PerTargetInstantiationModelPointcut(org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.Pointcut, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)"], ["boolean", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl$PerTargetInstantiationModelPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl$PerTargetInstantiationModelPointcut.matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>, java.lang.Object...)"], ["org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder(org.springframework.beans.factory.ListableBeanFactory)", "public org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder(org.springframework.beans.factory.ListableBeanFactory)"], ["org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder(org.springframework.beans.factory.ListableBeanFactory, org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory)", "public org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder(org.springframework.beans.factory.ListableBeanFactory, org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory)"], ["java.util.List<org.springframework.aop.Advisor>", "org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors()", "public java.util.List<org.springframework.aop.Advisor> buildAspectJAdvisors()"], ["org.springframework.aop.aspectj.annotation.AspectMetadata", "org.springframework.aop.aspectj.annotation.AspectMetadata(java.lang.Class<?>, java.lang.String)", "public org.springframework.aop.aspectj.annotation.AspectMetadata(java.lang.Class<?>, java.lang.String)"], ["org.aspectj.lang.reflect.AjType<?>", "org.springframework.aop.aspectj.annotation.AspectMetadata.getAjType()", "public org.aspectj.lang.reflect.AjType<?> getAjType()"], ["java.lang.Class<?>", "org.springframework.aop.aspectj.annotation.AspectMetadata.getAspectClass()", "public java.lang.Class<?> getAspectClass()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.AspectMetadata.getAspectName()", "public java.lang.String getAspectName()"], ["org.springframework.aop.Pointcut", "org.springframework.aop.aspectj.annotation.AspectMetadata.getPerClausePointcut()", "public org.springframework.aop.Pointcut getPerClausePointcut()"], ["boolean", "org.springframework.aop.aspectj.annotation.AspectMetadata.isPerThisOrPerTarget()", "public boolean isPerThisOrPerTarget()"], ["boolean", "org.springframework.aop.aspectj.annotation.AspectMetadata.isPerTypeWithin()", "public boolean isPerTypeWithin()"], ["boolean", "org.springframework.aop.aspectj.annotation.AspectMetadata.isLazilyInstantiated()", "public boolean isLazilyInstantiated()"], ["org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType[]", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType.values()", "public static org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType[] values()"], ["org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType.valueOf(java.lang.String)", "public static org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType valueOf(java.lang.String)"], ["org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl(org.springframework.aop.aspectj.AspectJExpressionPointcut, java.lang.reflect.Method, org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory, int, java.lang.String)", "public org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl(org.springframework.aop.aspectj.AspectJExpressionPointcut, java.lang.reflect.Method, org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory, int, java.lang.String)"], ["org.springframework.aop.Pointcut", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["boolean", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.isLazy()", "public boolean isLazy()"], ["synchronized", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.boolean isAdviceInstantiated()", "public synchronized boolean isAdviceInstantiated()"], ["synchronized", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.org.aopalliance.aop.Advice getAdvice()", "public synchronized org.aopalliance.aop.Advice getAdvice()"], ["boolean", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.isPerInstance()", "public boolean isPerInstance()"], ["org.springframework.aop.aspectj.annotation.AspectMetadata", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getAspectMetadata()", "public org.springframework.aop.aspectj.annotation.AspectMetadata getAspectMetadata()"], ["org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getAspectInstanceFactory()", "public org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory getAspectInstanceFactory()"], ["org.springframework.aop.aspectj.AspectJExpressionPointcut", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getDeclaredPointcut()", "public org.springframework.aop.aspectj.AspectJExpressionPointcut getDeclaredPointcut()"], ["int", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getOrder()", "public int getOrder()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getAspectName()", "public java.lang.String getAspectName()"], ["int", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getDeclarationOrder()", "public int getDeclarationOrder()"], ["boolean", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.isBeforeAdvice()", "public boolean isBeforeAdvice()"], ["boolean", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.isAfterAdvice()", "public boolean isAfterAdvice()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.annotation.PrototypeAspectInstanceFactory", "org.springframework.aop.aspectj.annotation.PrototypeAspectInstanceFactory(org.springframework.beans.factory.BeanFactory, java.lang.String)", "public org.springframework.aop.aspectj.annotation.PrototypeAspectInstanceFactory(org.springframework.beans.factory.BeanFactory, java.lang.String)"], ["org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation(A)", "public org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation(A)"], ["org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation.getAnnotationType()", "public org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotationType getAnnotationType()"], ["A", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation.getAnnotation()", "public A getAnnotation()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation.getPointcutExpression()", "public java.lang.String getPointcutExpression()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation.getArgumentNames()", "public java.lang.String getArgumentNames()"], ["java.lang.String", "org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory$AspectJAnnotation.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.annotation.SimpleMetadataAwareAspectInstanceFactory", "org.springframework.aop.aspectj.annotation.SimpleMetadataAwareAspectInstanceFactory(java.lang.Class<?>, java.lang.String)", "public org.springframework.aop.aspectj.annotation.SimpleMetadataAwareAspectInstanceFactory(java.lang.Class<?>, java.lang.String)"], ["org.springframework.aop.aspectj.annotation.AspectMetadata", "org.springframework.aop.aspectj.annotation.SimpleMetadataAwareAspectInstanceFactory.getAspectMetadata()", "public final org.springframework.aop.aspectj.annotation.AspectMetadata getAspectMetadata()"], ["java.lang.Object", "org.springframework.aop.aspectj.annotation.SimpleMetadataAwareAspectInstanceFactory.getAspectCreationMutex()", "public java.lang.Object getAspectCreationMutex()"], ["org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory", "org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory()", "public org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory()"], ["org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory", "org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory(org.springframework.beans.factory.BeanFactory)", "public org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory(org.springframework.beans.factory.BeanFactory)"], ["java.util.List<org.springframework.aop.Advisor>", "org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.getAdvisors(org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)", "public java.util.List<org.springframework.aop.Advisor> getAdvisors(org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)"], ["org.springframework.aop.Advisor", "org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.getAdvisor(java.lang.reflect.Method, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory, int, java.lang.String)", "public org.springframework.aop.Advisor getAdvisor(java.lang.reflect.Method, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory, int, java.lang.String)"], ["org.aopalliance.aop.Advice", "org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.getAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory, int, java.lang.String)", "public org.aopalliance.aop.Advice getAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory, int, java.lang.String)"], ["org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory$SyntheticInstantiationAdvisor", "org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory$SyntheticInstantiationAdvisor(org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)", "public org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory$SyntheticInstantiationAdvisor(org.springframework.aop.aspectj.annotation.MetadataAwareAspectInstanceFactory)"], ["org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator$BeanFactoryAspectJAdvisorsBuilderAdapter", "org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator$BeanFactoryAspectJAdvisorsBuilderAdapter(org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator, org.springframework.beans.factory.ListableBeanFactory, org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory)", "public org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator$BeanFactoryAspectJAdvisorsBuilderAdapter(org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator, org.springframework.beans.factory.ListableBeanFactory, org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory)"], ["org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator", "org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator()", "public org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator()"], ["void", "org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.setIncludePatterns(java.util.List<java.lang.String>)", "public void setIncludePatterns(java.util.List<java.lang.String>)"], ["void", "org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.setAspectJAdvisorFactory(org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory)", "public void setAspectJAdvisorFactory(org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory)"], ["org.springframework.aop.aspectj.AspectJAopUtils", "org.springframework.aop.aspectj.AspectJAopUtils()", "public org.springframework.aop.aspectj.AspectJAopUtils()"], ["boolean", "org.springframework.aop.aspectj.AspectJAopUtils.isBeforeAdvice(org.springframework.aop.Advisor)", "public static boolean isBeforeAdvice(org.springframework.aop.Advisor)"], ["boolean", "org.springframework.aop.aspectj.AspectJAopUtils.isAfterAdvice(org.springframework.aop.Advisor)", "public static boolean isAfterAdvice(org.springframework.aop.Advisor)"], ["org.springframework.aop.aspectj.AspectJPrecedenceInformation", "org.springframework.aop.aspectj.AspectJAopUtils.getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)", "public static org.springframework.aop.aspectj.AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)"], ["org.springframework.aop.aspectj.RuntimeTestWalker$ThisInstanceOfResidueTestVisitor", "org.springframework.aop.aspectj.RuntimeTestWalker$ThisInstanceOfResidueTestVisitor(java.lang.Class<?>)", "public org.springframework.aop.aspectj.RuntimeTestWalker$ThisInstanceOfResidueTestVisitor(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker$ThisInstanceOfResidueTestVisitor.thisInstanceOfMatches(org.aspectj.weaver.ast.Test)", "public boolean thisInstanceOfMatches(org.aspectj.weaver.ast.Test)"], ["java.lang.Class<?>", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$SourceLocationImpl.getWithinType()", "public java.lang.Class<?> getWithinType()"], ["java.lang.String", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$SourceLocationImpl.getFileName()", "public java.lang.String getFileName()"], ["int", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$SourceLocationImpl.getLine()", "public int getLine()"], ["int", "org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$SourceLocationImpl.getColumn()", "public int getColumn()"], ["org.springframework.aop.aspectj.RuntimeTestWalker$InstanceOfResidueTestVisitor", "org.springframework.aop.aspectj.RuntimeTestWalker$InstanceOfResidueTestVisitor(java.lang.Class<?>, boolean, int)", "public org.springframework.aop.aspectj.RuntimeTestWalker$InstanceOfResidueTestVisitor(java.lang.Class<?>, boolean, int)"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker$InstanceOfResidueTestVisitor.instanceOfMatches(org.aspectj.weaver.ast.Test)", "public boolean instanceOfMatches(org.aspectj.weaver.ast.Test)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$InstanceOfResidueTestVisitor.visit(org.aspectj.weaver.ast.Instanceof)", "public void visit(org.aspectj.weaver.ast.Instanceof)"], ["java.lang.String", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanPointcutDesignatorHandler.getDesignatorName()", "public java.lang.String getDesignatorName()"], ["org.aspectj.weaver.tools.ContextBasedMatcher", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanPointcutDesignatorHandler.parse(java.lang.String)", "public org.aspectj.weaver.tools.ContextBasedMatcher parse(java.lang.String)"], ["org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher(org.springframework.aop.aspectj.AspectJExpressionPointcut, java.lang.String)", "public org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher(org.springframework.aop.aspectj.AspectJExpressionPointcut, java.lang.String)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher.couldMatchJoinPointsInType(java.lang.Class)", "public boolean couldMatchJoinPointsInType(java.lang.Class)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher.couldMatchJoinPointsInType(java.lang.Class, org.aspectj.weaver.tools.MatchingContext)", "public boolean couldMatchJoinPointsInType(java.lang.Class, org.aspectj.weaver.tools.MatchingContext)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher.matchesDynamically(org.aspectj.weaver.tools.MatchingContext)", "public boolean matchesDynamically(org.aspectj.weaver.tools.MatchingContext)"], ["org.aspectj.weaver.tools.FuzzyBoolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher.matchesStatically(org.aspectj.weaver.tools.MatchingContext)", "public org.aspectj.weaver.tools.FuzzyBoolean matchesStatically(org.aspectj.weaver.tools.MatchingContext)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanContextMatcher.mayNeedDynamicTest()", "public boolean mayNeedDynamicTest()"], ["org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher", "org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher(java.lang.reflect.Method)", "public org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher(java.lang.reflect.Method)"], ["boolean", "org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher.matches(java.lang.reflect.Method, java.lang.Class<?>)", "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.aspectj.AbstractAspectJAdvice$AdviceExcludingMethodMatcher.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.AspectJPointcutAdvisor", "org.springframework.aop.aspectj.AspectJPointcutAdvisor(org.springframework.aop.aspectj.AbstractAspectJAdvice)", "public org.springframework.aop.aspectj.AspectJPointcutAdvisor(org.springframework.aop.aspectj.AbstractAspectJAdvice)"], ["void", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.setOrder(int)", "public void setOrder(int)"], ["int", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.getOrder()", "public int getOrder()"], ["boolean", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.isPerInstance()", "public boolean isPerInstance()"], ["org.aopalliance.aop.Advice", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.getAdvice()", "public org.aopalliance.aop.Advice getAdvice()"], ["org.springframework.aop.Pointcut", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.getPointcut()", "public org.springframework.aop.Pointcut getPointcut()"], ["java.lang.String", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.getAspectName()", "public java.lang.String getAspectName()"], ["boolean", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.aspectj.AspectJPointcutAdvisor.hashCode()", "public int hashCode()"], ["org.springframework.aop.aspectj.TypePatternClassFilter", "org.springframework.aop.aspectj.TypePatternClassFilter()", "public org.springframework.aop.aspectj.TypePatternClassFilter()"], ["org.springframework.aop.aspectj.TypePatternClassFilter", "org.springframework.aop.aspectj.TypePatternClassFilter(java.lang.String)", "public org.springframework.aop.aspectj.TypePatternClassFilter(java.lang.String)"], ["void", "org.springframework.aop.aspectj.TypePatternClassFilter.setTypePattern(java.lang.String)", "public void setTypePattern(java.lang.String)"], ["java.lang.String", "org.springframework.aop.aspectj.TypePatternClassFilter.getTypePattern()", "public java.lang.String getTypePattern()"], ["boolean", "org.springframework.aop.aspectj.TypePatternClassFilter.matches(java.lang.Class<?>)", "public boolean matches(java.lang.Class<?>)"], ["boolean", "org.springframework.aop.aspectj.TypePatternClassFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.springframework.aop.aspectj.TypePatternClassFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.springframework.aop.aspectj.TypePatternClassFilter.toString()", "public java.lang.String toString()"], ["org.springframework.aop.aspectj.AspectJAfterThrowingAdvice", "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)", "public org.springframework.aop.aspectj.AspectJAfterThrowingAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)"], ["boolean", "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.isBeforeAdvice()", "public boolean isBeforeAdvice()"], ["boolean", "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.isAfterAdvice()", "public boolean isAfterAdvice()"], ["void", "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.setThrowingName(java.lang.String)", "public void setThrowingName(java.lang.String)"], ["java.lang.Object", "org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(org.aopalliance.intercept.MethodInvocation)", "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"], ["boolean", "org.springframework.aop.aspectj.RuntimeTestWalker$SubtypeSensitiveVarTypeTestVisitor.testsSubtypeSensitiveVars(org.aspectj.weaver.ast.Test)", "public boolean testsSubtypeSensitiveVars(org.aspectj.weaver.ast.Test)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$SubtypeSensitiveVarTypeTestVisitor.visit(org.aspectj.weaver.ast.Instanceof)", "public void visit(org.aspectj.weaver.ast.Instanceof)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$SubtypeSensitiveVarTypeTestVisitor.visit(org.aspectj.weaver.ast.HasAnnotation)", "public void visit(org.aspectj.weaver.ast.HasAnnotation)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.And)", "public void visit(org.aspectj.weaver.ast.And)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.Or)", "public void visit(org.aspectj.weaver.ast.Or)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.Not)", "public void visit(org.aspectj.weaver.ast.Not)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.Instanceof)", "public void visit(org.aspectj.weaver.ast.Instanceof)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.Literal)", "public void visit(org.aspectj.weaver.ast.Literal)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.Call)", "public void visit(org.aspectj.weaver.ast.Call)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.FieldGetCall)", "public void visit(org.aspectj.weaver.ast.FieldGetCall)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.ast.HasAnnotation)", "public void visit(org.aspectj.weaver.ast.HasAnnotation)"], ["void", "org.springframework.aop.aspectj.RuntimeTestWalker$TestVisitorAdapter.visit(org.aspectj.weaver.internal.tools.MatchingContextBasedTest)", "public void visit(org.aspectj.weaver.internal.tools.MatchingContextBasedTest)"], ["org.springframework.aop.aspectj.AspectJAfterReturningAdvice", "org.springframework.aop.aspectj.AspectJAfterReturningAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)", "public org.springframework.aop.aspectj.AspectJAfterReturningAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)"], ["boolean", "org.springframework.aop.aspectj.AspectJAfterReturningAdvice.isBeforeAdvice()", "public boolean isBeforeAdvice()"], ["boolean", "org.springframework.aop.aspectj.AspectJAfterReturningAdvice.isAfterAdvice()", "public boolean isAfterAdvice()"], ["void", "org.springframework.aop.aspectj.AspectJAfterReturningAdvice.setReturningName(java.lang.String)", "public void setReturningName(java.lang.String)"], ["void", "org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Object)", "public void afterReturning(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], java.lang.Object) throws java.lang.Throwable"], ["org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch", "org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch(org.aspectj.weaver.tools.ShadowMatch, org.aspectj.weaver.tools.ShadowMatch)", "public org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch(org.aspectj.weaver.tools.ShadowMatch, org.aspectj.weaver.tools.ShadowMatch)"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch.alwaysMatches()", "public boolean alwaysMatches()"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch.maybeMatches()", "public boolean maybeMatches()"], ["boolean", "org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch.neverMatches()", "public boolean neverMatches()"], ["org.aspectj.weaver.tools.JoinPointMatch", "org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch.matchesJoinPoint(java.lang.Object, java.lang.Object, java.lang.Object[])", "public org.aspectj.weaver.tools.JoinPointMatch matchesJoinPoint(java.lang.Object, java.lang.Object, java.lang.Object[])"], ["void", "org.springframework.aop.aspectj.AspectJExpressionPointcut$DefensiveShadowMatch.setMatchingContext(org.aspectj.weaver.tools.MatchingContext)", "public void setMatchingContext(org.aspectj.weaver.tools.MatchingContext)"], ["org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer$PointcutBody", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer$PointcutBody(int, java.lang.String)", "public org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer$PointcutBody(int, java.lang.String)"], ["org.springframework.aop.aspectj.AspectJWeaverMessageHandler", "org.springframework.aop.aspectj.AspectJWeaverMessageHandler()", "public org.springframework.aop.aspectj.AspectJWeaverMessageHandler()"], ["boolean", "org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(org.aspectj.bridge.IMessage)", "public boolean handleMessage(org.aspectj.bridge.IMessage) throws org.aspectj.bridge.AbortException"], ["boolean", "org.springframework.aop.aspectj.AspectJWeaverMessageHandler.isIgnoring(org.aspectj.bridge.IMessage$Kind)", "public boolean isIgnoring(org.aspectj.bridge.IMessage$Kind)"], ["void", "org.springframework.aop.aspectj.AspectJWeaverMessageHandler.dontIgnore(org.aspectj.bridge.IMessage$Kind)", "public void dontIgnore(org.aspectj.bridge.IMessage$Kind)"], ["void", "org.springframework.aop.aspectj.AspectJWeaverMessageHandler.ignore(org.aspectj.bridge.IMessage$Kind)", "public void ignore(org.aspectj.bridge.IMessage$Kind)"], ["org.springframework.aop.aspectj.AspectJMethodBeforeAdvice", "org.springframework.aop.aspectj.AspectJMethodBeforeAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)", "public org.springframework.aop.aspectj.AspectJMethodBeforeAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory)"], ["void", "org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.before(java.lang.reflect.Method, java.lang.Object[], java.lang.Object)", "public void before(java.lang.reflect.Method, java.lang.Object[], java.lang.Object) throws java.lang.Throwable"], ["boolean", "org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.isBeforeAdvice()", "public boolean isBeforeAdvice()"], ["boolean", "org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.isAfterAdvice()", "public boolean isAfterAdvice()"], ["org.springframework.aop.aspectj.SingletonAspectInstanceFactory", "org.springframework.aop.aspectj.SingletonAspectInstanceFactory(java.lang.Object)", "public org.springframework.aop.aspectj.SingletonAspectInstanceFactory(java.lang.Object)"], ["java.lang.Object", "org.springframework.aop.aspectj.SingletonAspectInstanceFactory.getAspectInstance()", "public final java.lang.Object getAspectInstance()"], ["java.lang.ClassLoader", "org.springframework.aop.aspectj.SingletonAspectInstanceFactory.getAspectClassLoader()", "public java.lang.ClassLoader getAspectClassLoader()"], ["int", "org.springframework.aop.aspectj.SingletonAspectInstanceFactory.getOrder()", "public int getOrder()"], ["org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer$AmbiguousBindingException", "org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer$AmbiguousBindingException(java.lang.String)", "public org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer$AmbiguousBindingException(java.lang.String)"]]}