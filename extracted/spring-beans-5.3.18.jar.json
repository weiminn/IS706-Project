{
    "spring-beans-5.3.18.jar": [
        [
            "org.springframework.beans.BeanWrapper",
            "org.springframework.beans.PropertyAccessorFactory.forBeanPropertyAccess(java.lang.Object)",
            "public static org.springframework.beans.BeanWrapper forBeanPropertyAccess(java.lang.Object)"
        ],
        [
            "org.springframework.beans.ConfigurablePropertyAccessor",
            "org.springframework.beans.PropertyAccessorFactory.forDirectFieldAccess(java.lang.Object)",
            "public static org.springframework.beans.ConfigurablePropertyAccessor forDirectFieldAccess(java.lang.Object)"
        ],
        [
            "org.springframework.beans.PropertyEditorRegistrySupport",
            "org.springframework.beans.PropertyEditorRegistrySupport()",
            "public org.springframework.beans.PropertyEditorRegistrySupport()"
        ],
        [
            "void",
            "org.springframework.beans.PropertyEditorRegistrySupport.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.beans.PropertyEditorRegistrySupport.getConversionService()",
            "public org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.beans.PropertyEditorRegistrySupport.useConfigValueEditors()",
            "public void useConfigValueEditors()"
        ],
        [
            "void",
            "org.springframework.beans.PropertyEditorRegistrySupport.overrideDefaultEditor(java.lang.Class<?>, java.beans.PropertyEditor)",
            "public void overrideDefaultEditor(java.lang.Class<?>, java.beans.PropertyEditor)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.beans.PropertyEditorRegistrySupport.getDefaultEditor(java.lang.Class<?>)",
            "public java.beans.PropertyEditor getDefaultEditor(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.PropertyEditorRegistrySupport.registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor)",
            "public void registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor)"
        ],
        [
            "void",
            "org.springframework.beans.PropertyEditorRegistrySupport.registerCustomEditor(java.lang.Class<?>, java.lang.String, java.beans.PropertyEditor)",
            "public void registerCustomEditor(java.lang.Class<?>, java.lang.String, java.beans.PropertyEditor)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.beans.PropertyEditorRegistrySupport.findCustomEditor(java.lang.Class<?>, java.lang.String)",
            "public java.beans.PropertyEditor findCustomEditor(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyEditorRegistrySupport.hasCustomEditorForElement(java.lang.Class<?>, java.lang.String)",
            "public boolean hasCustomEditorForElement(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.PropertyDescriptorUtils.copyNonMethodProperties(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)",
            "public static void copyNonMethodProperties(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.PropertyDescriptorUtils.findPropertyType(java.lang.reflect.Method, java.lang.reflect.Method)",
            "public static java.lang.Class<?> findPropertyType(java.lang.reflect.Method, java.lang.reflect.Method) throws java.beans.IntrospectionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.PropertyDescriptorUtils.findIndexedPropertyType(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method, java.lang.reflect.Method)",
            "public static java.lang.Class<?> findIndexedPropertyType(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method, java.lang.reflect.Method) throws java.beans.IntrospectionException"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyDescriptorUtils.equals(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)",
            "public static boolean equals(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)"
        ],
        [
            "org.springframework.beans.TypeConverterDelegate",
            "org.springframework.beans.TypeConverterDelegate(org.springframework.beans.PropertyEditorRegistrySupport)",
            "public org.springframework.beans.TypeConverterDelegate(org.springframework.beans.PropertyEditorRegistrySupport)"
        ],
        [
            "org.springframework.beans.TypeConverterDelegate",
            "org.springframework.beans.TypeConverterDelegate(org.springframework.beans.PropertyEditorRegistrySupport, java.lang.Object)",
            "public org.springframework.beans.TypeConverterDelegate(org.springframework.beans.PropertyEditorRegistrySupport, java.lang.Object)"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverterDelegate.convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class<T>) throws java.lang.IllegalArgumentException"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverterDelegate.convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor)",
            "public <T> T convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.beans.NotWritablePropertyException",
            "org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.NotWritablePropertyException",
            "org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String)",
            "public org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.NotWritablePropertyException",
            "org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.NotWritablePropertyException",
            "org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.String[])",
            "public org.springframework.beans.NotWritablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.String[])"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.NotWritablePropertyException.getPossibleMatches()",
            "public java.lang.String[] getPossibleMatches()"
        ],
        [
            "org.springframework.beans.ExtendedBeanInfoFactory",
            "org.springframework.beans.ExtendedBeanInfoFactory()",
            "public org.springframework.beans.ExtendedBeanInfoFactory()"
        ],
        [
            "java.beans.BeanInfo",
            "org.springframework.beans.ExtendedBeanInfoFactory.getBeanInfo(java.lang.Class<?>)",
            "public java.beans.BeanInfo getBeanInfo(java.lang.Class<?>) throws java.beans.IntrospectionException"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfoFactory.getOrder()",
            "public int getOrder()"
        ],
        [
            "org.springframework.beans.factory.NoSuchBeanDefinitionException",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.String)",
            "public org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.NoSuchBeanDefinitionException",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.NoSuchBeanDefinitionException",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.Class<?>)",
            "public org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.NoSuchBeanDefinitionException",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.factory.NoSuchBeanDefinitionException(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.NoSuchBeanDefinitionException",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException(org.springframework.core.ResolvableType)",
            "public org.springframework.beans.factory.NoSuchBeanDefinitionException(org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.beans.factory.NoSuchBeanDefinitionException",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException(org.springframework.core.ResolvableType, java.lang.String)",
            "public org.springframework.beans.factory.NoSuchBeanDefinitionException(org.springframework.core.ResolvableType, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException.getBeanType()",
            "public java.lang.Class<?> getBeanType()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "int",
            "org.springframework.beans.factory.NoSuchBeanDefinitionException.getNumberOfBeansFound()",
            "public int getNumberOfBeansFound()"
        ],
        [
            "org.springframework.beans.factory.InjectionPoint",
            "org.springframework.beans.factory.InjectionPoint(org.springframework.core.MethodParameter)",
            "public org.springframework.beans.factory.InjectionPoint(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.beans.factory.InjectionPoint",
            "org.springframework.beans.factory.InjectionPoint(java.lang.reflect.Field)",
            "public org.springframework.beans.factory.InjectionPoint(java.lang.reflect.Field)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.beans.factory.InjectionPoint.getMethodParameter()",
            "public org.springframework.core.MethodParameter getMethodParameter()"
        ],
        [
            "java.lang.reflect.Field",
            "org.springframework.beans.factory.InjectionPoint.getField()",
            "public java.lang.reflect.Field getField()"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.beans.factory.InjectionPoint.getAnnotations()",
            "public java.lang.annotation.Annotation[] getAnnotations()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.beans.factory.InjectionPoint.getAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.InjectionPoint.getDeclaredType()",
            "public java.lang.Class<?> getDeclaredType()"
        ],
        [
            "java.lang.reflect.Member",
            "org.springframework.beans.factory.InjectionPoint.getMember()",
            "public java.lang.reflect.Member getMember()"
        ],
        [
            "java.lang.reflect.AnnotatedElement",
            "org.springframework.beans.factory.InjectionPoint.getAnnotatedElement()",
            "public java.lang.reflect.AnnotatedElement getAnnotatedElement()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.InjectionPoint.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.InjectionPoint.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.InjectionPoint.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.xml.ParserContext",
            "org.springframework.beans.factory.xml.ParserContext(org.springframework.beans.factory.xml.XmlReaderContext, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "public org.springframework.beans.factory.xml.ParserContext(org.springframework.beans.factory.xml.XmlReaderContext, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ],
        [
            "org.springframework.beans.factory.xml.ParserContext",
            "org.springframework.beans.factory.xml.ParserContext(org.springframework.beans.factory.xml.XmlReaderContext, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.xml.ParserContext(org.springframework.beans.factory.xml.XmlReaderContext, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.xml.XmlReaderContext",
            "org.springframework.beans.factory.xml.ParserContext.getReaderContext()",
            "public org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.beans.factory.xml.ParserContext.getRegistry()",
            "public org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()"
        ],
        [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate",
            "org.springframework.beans.factory.xml.ParserContext.getDelegate()",
            "public org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.ParserContext.getContainingBeanDefinition()",
            "public org.springframework.beans.factory.config.BeanDefinition getContainingBeanDefinition()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.ParserContext.isNested()",
            "public boolean isNested()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.ParserContext.isDefaultLazyInit()",
            "public boolean isDefaultLazyInit()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.ParserContext.extractSource(java.lang.Object)",
            "public java.lang.Object extractSource(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition",
            "org.springframework.beans.factory.xml.ParserContext.getContainingComponent()",
            "public org.springframework.beans.factory.parsing.CompositeComponentDefinition getContainingComponent()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.ParserContext.pushContainingComponent(org.springframework.beans.factory.parsing.CompositeComponentDefinition)",
            "public void pushContainingComponent(org.springframework.beans.factory.parsing.CompositeComponentDefinition)"
        ],
        [
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition",
            "org.springframework.beans.factory.xml.ParserContext.popContainingComponent()",
            "public org.springframework.beans.factory.parsing.CompositeComponentDefinition popContainingComponent()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.ParserContext.popAndRegisterContainingComponent()",
            "public void popAndRegisterContainingComponent()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.ParserContext.registerComponent(org.springframework.beans.factory.parsing.ComponentDefinition)",
            "public void registerComponent(org.springframework.beans.factory.parsing.ComponentDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.ParserContext.registerBeanComponent(org.springframework.beans.factory.parsing.BeanComponentDefinition)",
            "public void registerBeanComponent(org.springframework.beans.factory.parsing.BeanComponentDefinition)"
        ],
        [
            "org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler",
            "org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler()",
            "public org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler.decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver",
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver()",
            "public org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver()"
        ],
        [
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver",
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver(java.lang.ClassLoader)",
            "public org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver",
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver(java.lang.ClassLoader, java.lang.String)",
            "public org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver(java.lang.ClassLoader, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.xml.NamespaceHandler",
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.resolve(java.lang.String)",
            "public org.springframework.beans.factory.xml.NamespaceHandler resolve(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.beans.factory.xml.XmlBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setValidating(boolean)",
            "public void setValidating(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setValidationModeName(java.lang.String)",
            "public void setValidationModeName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setValidationMode(int)",
            "public void setValidationMode(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.getValidationMode()",
            "public int getValidationMode()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setNamespaceAware(boolean)",
            "public void setNamespaceAware(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.isNamespaceAware()",
            "public boolean isNamespaceAware()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setProblemReporter(org.springframework.beans.factory.parsing.ProblemReporter)",
            "public void setProblemReporter(org.springframework.beans.factory.parsing.ProblemReporter)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setEventListener(org.springframework.beans.factory.parsing.ReaderEventListener)",
            "public void setEventListener(org.springframework.beans.factory.parsing.ReaderEventListener)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setSourceExtractor(org.springframework.beans.factory.parsing.SourceExtractor)",
            "public void setSourceExtractor(org.springframework.beans.factory.parsing.SourceExtractor)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setNamespaceHandlerResolver(org.springframework.beans.factory.xml.NamespaceHandlerResolver)",
            "public void setNamespaceHandlerResolver(org.springframework.beans.factory.xml.NamespaceHandlerResolver)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setDocumentLoader(org.springframework.beans.factory.xml.DocumentLoader)",
            "public void setDocumentLoader(org.springframework.beans.factory.xml.DocumentLoader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setEntityResolver(org.xml.sax.EntityResolver)",
            "public void setEntityResolver(org.xml.sax.EntityResolver)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setErrorHandler(org.xml.sax.ErrorHandler)",
            "public void setErrorHandler(org.xml.sax.ErrorHandler)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setDocumentReaderClass(java.lang.Class<? extends org.springframework.beans.factory.xml.BeanDefinitionDocumentReader>)",
            "public void setDocumentReaderClass(java.lang.Class<? extends org.springframework.beans.factory.xml.BeanDefinitionDocumentReader>)"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.Resource)",
            "public int loadBeanDefinitions(org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)",
            "public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(org.xml.sax.InputSource)",
            "public int loadBeanDefinitions(org.xml.sax.InputSource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(org.xml.sax.InputSource, java.lang.String)",
            "public int loadBeanDefinitions(org.xml.sax.InputSource, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(org.w3c.dom.Document, org.springframework.core.io.Resource)",
            "public int registerBeanDefinitions(org.w3c.dom.Document, org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "org.springframework.beans.factory.xml.XmlReaderContext",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createReaderContext(org.springframework.core.io.Resource)",
            "public org.springframework.beans.factory.xml.XmlReaderContext createReaderContext(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.beans.factory.xml.NamespaceHandlerResolver",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader.getNamespaceHandlerResolver()",
            "public org.springframework.beans.factory.xml.NamespaceHandlerResolver getNamespaceHandlerResolver()"
        ],
        [
            "org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser",
            "org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser()",
            "public org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser()"
        ],
        [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader",
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader()",
            "public org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(org.w3c.dom.Document, org.springframework.beans.factory.xml.XmlReaderContext)",
            "public void registerBeanDefinitions(org.w3c.dom.Document, org.springframework.beans.factory.xml.XmlReaderContext)"
        ],
        [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate(org.springframework.beans.factory.xml.XmlReaderContext)",
            "public org.springframework.beans.factory.xml.BeanDefinitionParserDelegate(org.springframework.beans.factory.xml.XmlReaderContext)"
        ],
        [
            "org.springframework.beans.factory.xml.XmlReaderContext",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getReaderContext()",
            "public final org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(org.w3c.dom.Element)",
            "public void initDefaults(org.w3c.dom.Element)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.initDefaults(org.w3c.dom.Element, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "public void initDefaults(org.w3c.dom.Element, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ],
        [
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getDefaults()",
            "public org.springframework.beans.factory.xml.DocumentDefaultsDefinition getDefaults()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionDefaults",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getBeanDefinitionDefaults()",
            "public org.springframework.beans.factory.support.BeanDefinitionDefaults getBeanDefinitionDefaults()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getAutowireCandidatePatterns()",
            "public java.lang.String[] getAutowireCandidatePatterns()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(org.w3c.dom.Element)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionAttributes(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.AbstractBeanDefinition)",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionAttributes(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.AbstractBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseMetaElements(org.w3c.dom.Element, org.springframework.beans.BeanMetadataAttributeAccessor)",
            "public void parseMetaElements(org.w3c.dom.Element, org.springframework.beans.BeanMetadataAttributeAccessor)"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getAutowireMode(java.lang.String)",
            "public int getAutowireMode(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseConstructorArgElements(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public void parseConstructorArgElements(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertyElements(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public void parsePropertyElements(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseQualifierElements(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition)",
            "public void parseQualifierElements(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseLookupOverrideSubElements(org.w3c.dom.Element, org.springframework.beans.factory.support.MethodOverrides)",
            "public void parseLookupOverrideSubElements(org.w3c.dom.Element, org.springframework.beans.factory.support.MethodOverrides)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseReplacedMethodSubElements(org.w3c.dom.Element, org.springframework.beans.factory.support.MethodOverrides)",
            "public void parseReplacedMethodSubElements(org.w3c.dom.Element, org.springframework.beans.factory.support.MethodOverrides)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseConstructorArgElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public void parseConstructorArgElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertyElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public void parsePropertyElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseQualifierElement(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition)",
            "public void parseQualifierElement(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertyValue(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition, java.lang.String)",
            "public java.lang.Object parsePropertyValue(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertySubElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public java.lang.Object parsePropertySubElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertySubElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition, java.lang.String)",
            "public java.lang.Object parsePropertySubElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseIdRefElement(org.w3c.dom.Element)",
            "public java.lang.Object parseIdRefElement(org.w3c.dom.Element)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseValueElement(org.w3c.dom.Element, java.lang.String)",
            "public java.lang.Object parseValueElement(org.w3c.dom.Element, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseArrayElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public java.lang.Object parseArrayElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.util.List<java.lang.Object>",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseListElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public java.util.List<java.lang.Object> parseListElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.util.Set<java.lang.Object>",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseSetElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public java.util.Set<java.lang.Object> parseSetElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.util.Map<java.lang.Object, java.lang.Object>",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseMapElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public java.util.Map<java.lang.Object, java.lang.Object> parseMapElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.util.Properties",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropsElement(org.w3c.dom.Element)",
            "public java.util.Properties parsePropsElement(org.w3c.dom.Element)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseMergeAttribute(org.w3c.dom.Element)",
            "public boolean parseMergeAttribute(org.w3c.dom.Element)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(org.w3c.dom.Element)",
            "public org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinitionHolder)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder decorateBeanDefinitionIfRequired(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinitionHolder)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateBeanDefinitionIfRequired(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder decorateBeanDefinitionIfRequired(org.w3c.dom.Element, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.decorateIfRequired(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder decorateIfRequired(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getNamespaceURI(org.w3c.dom.Node)",
            "public java.lang.String getNamespaceURI(org.w3c.dom.Node)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.getLocalName(org.w3c.dom.Node)",
            "public java.lang.String getLocalName(org.w3c.dom.Node)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.nodeNameEquals(org.w3c.dom.Node, java.lang.String)",
            "public boolean nodeNameEquals(org.w3c.dom.Node, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(java.lang.String)",
            "public boolean isDefaultNamespace(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.isDefaultNamespace(org.w3c.dom.Node)",
            "public boolean isDefaultNamespace(org.w3c.dom.Node)"
        ],
        [
            "org.springframework.beans.factory.xml.DelegatingEntityResolver",
            "org.springframework.beans.factory.xml.DelegatingEntityResolver(java.lang.ClassLoader)",
            "public org.springframework.beans.factory.xml.DelegatingEntityResolver(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.beans.factory.xml.DelegatingEntityResolver",
            "org.springframework.beans.factory.xml.DelegatingEntityResolver(org.xml.sax.EntityResolver, org.xml.sax.EntityResolver)",
            "public org.springframework.beans.factory.xml.DelegatingEntityResolver(org.xml.sax.EntityResolver, org.xml.sax.EntityResolver)"
        ],
        [
            "org.xml.sax.InputSource",
            "org.springframework.beans.factory.xml.DelegatingEntityResolver.resolveEntity(java.lang.String, java.lang.String)",
            "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DelegatingEntityResolver.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.xml.ResourceEntityResolver",
            "org.springframework.beans.factory.xml.ResourceEntityResolver(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.beans.factory.xml.ResourceEntityResolver(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.xml.sax.InputSource",
            "org.springframework.beans.factory.xml.ResourceEntityResolver.resolveEntity(java.lang.String, java.lang.String)",
            "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"
        ],
        [
            "org.springframework.beans.factory.xml.XmlReaderContext",
            "org.springframework.beans.factory.xml.XmlReaderContext(org.springframework.core.io.Resource, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.beans.factory.parsing.ReaderEventListener, org.springframework.beans.factory.parsing.SourceExtractor, org.springframework.beans.factory.xml.XmlBeanDefinitionReader, org.springframework.beans.factory.xml.NamespaceHandlerResolver)",
            "public org.springframework.beans.factory.xml.XmlReaderContext(org.springframework.core.io.Resource, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.beans.factory.parsing.ReaderEventListener, org.springframework.beans.factory.parsing.SourceExtractor, org.springframework.beans.factory.xml.XmlBeanDefinitionReader, org.springframework.beans.factory.xml.NamespaceHandlerResolver)"
        ],
        [
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader",
            "org.springframework.beans.factory.xml.XmlReaderContext.getReader()",
            "public final org.springframework.beans.factory.xml.XmlBeanDefinitionReader getReader()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.beans.factory.xml.XmlReaderContext.getRegistry()",
            "public final org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()"
        ],
        [
            "org.springframework.core.io.ResourceLoader",
            "org.springframework.beans.factory.xml.XmlReaderContext.getResourceLoader()",
            "public final org.springframework.core.io.ResourceLoader getResourceLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.beans.factory.xml.XmlReaderContext.getBeanClassLoader()",
            "public final java.lang.ClassLoader getBeanClassLoader()"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.beans.factory.xml.XmlReaderContext.getEnvironment()",
            "public final org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "org.springframework.beans.factory.xml.NamespaceHandlerResolver",
            "org.springframework.beans.factory.xml.XmlReaderContext.getNamespaceHandlerResolver()",
            "public final org.springframework.beans.factory.xml.NamespaceHandlerResolver getNamespaceHandlerResolver()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.XmlReaderContext.generateBeanName(org.springframework.beans.factory.config.BeanDefinition)",
            "public java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.XmlReaderContext.registerWithGeneratedName(org.springframework.beans.factory.config.BeanDefinition)",
            "public java.lang.String registerWithGeneratedName(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.w3c.dom.Document",
            "org.springframework.beans.factory.xml.XmlReaderContext.readDocumentFromString(java.lang.String)",
            "public org.w3c.dom.Document readDocumentFromString(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler",
            "org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler()",
            "public org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler.decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition()",
            "public org.springframework.beans.factory.xml.DocumentDefaultsDefinition()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setLazyInit(java.lang.String)",
            "public void setLazyInit(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getLazyInit()",
            "public java.lang.String getLazyInit()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setMerge(java.lang.String)",
            "public void setMerge(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getMerge()",
            "public java.lang.String getMerge()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setAutowire(java.lang.String)",
            "public void setAutowire(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getAutowire()",
            "public java.lang.String getAutowire()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setAutowireCandidates(java.lang.String)",
            "public void setAutowireCandidates(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getAutowireCandidates()",
            "public java.lang.String getAutowireCandidates()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setInitMethod(java.lang.String)",
            "public void setInitMethod(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getInitMethod()",
            "public java.lang.String getInitMethod()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setDestroyMethod(java.lang.String)",
            "public void setDestroyMethod(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getDestroyMethod()",
            "public java.lang.String getDestroyMethod()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.xml.DocumentDefaultsDefinition.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.beans.factory.xml.UtilNamespaceHandler",
            "org.springframework.beans.factory.xml.UtilNamespaceHandler()",
            "public org.springframework.beans.factory.xml.UtilNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.beans.factory.xml.UtilNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.beans.factory.xml.PluggableSchemaResolver",
            "org.springframework.beans.factory.xml.PluggableSchemaResolver(java.lang.ClassLoader)",
            "public org.springframework.beans.factory.xml.PluggableSchemaResolver(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.beans.factory.xml.PluggableSchemaResolver",
            "org.springframework.beans.factory.xml.PluggableSchemaResolver(java.lang.ClassLoader, java.lang.String)",
            "public org.springframework.beans.factory.xml.PluggableSchemaResolver(java.lang.ClassLoader, java.lang.String)"
        ],
        [
            "org.xml.sax.InputSource",
            "org.springframework.beans.factory.xml.PluggableSchemaResolver.resolveEntity(java.lang.String, java.lang.String)",
            "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.PluggableSchemaResolver.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.xml.AbstractBeanDefinitionParser",
            "org.springframework.beans.factory.xml.AbstractBeanDefinitionParser()",
            "public org.springframework.beans.factory.xml.AbstractBeanDefinitionParser()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public final org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.xml.BeansDtdResolver",
            "org.springframework.beans.factory.xml.BeansDtdResolver()",
            "public org.springframework.beans.factory.xml.BeansDtdResolver()"
        ],
        [
            "org.xml.sax.InputSource",
            "org.springframework.beans.factory.xml.BeansDtdResolver.resolveEntity(java.lang.String, java.lang.String)",
            "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.xml.BeansDtdResolver.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser",
            "org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser()",
            "public org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser()"
        ],
        [
            "org.springframework.beans.factory.xml.DefaultDocumentLoader",
            "org.springframework.beans.factory.xml.DefaultDocumentLoader()",
            "public org.springframework.beans.factory.xml.DefaultDocumentLoader()"
        ],
        [
            "org.w3c.dom.Document",
            "org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(org.xml.sax.InputSource, org.xml.sax.EntityResolver, org.xml.sax.ErrorHandler, int, boolean)",
            "public org.w3c.dom.Document loadDocument(org.xml.sax.InputSource, org.xml.sax.EntityResolver, org.xml.sax.ErrorHandler, int, boolean) throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.factory.xml.NamespaceHandlerSupport",
            "org.springframework.beans.factory.xml.NamespaceHandlerSupport()",
            "public org.springframework.beans.factory.xml.NamespaceHandlerSupport()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.xml.NamespaceHandlerSupport.decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.beans.factory.xml.XmlBeanFactory",
            "org.springframework.beans.factory.xml.XmlBeanFactory(org.springframework.core.io.Resource)",
            "public org.springframework.beans.factory.xml.XmlBeanFactory(org.springframework.core.io.Resource) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.xml.XmlBeanFactory",
            "org.springframework.beans.factory.xml.XmlBeanFactory(org.springframework.core.io.Resource, org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.beans.factory.xml.XmlBeanFactory(org.springframework.core.io.Resource, org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException(java.lang.String, java.lang.String, org.xml.sax.SAXException)",
            "public org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException(java.lang.String, java.lang.String, org.xml.sax.SAXException)"
        ],
        [
            "int",
            "org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException.getLineNumber()",
            "public int getLineNumber()"
        ],
        [
            "org.springframework.beans.factory.BeanNotOfRequiredTypeException",
            "org.springframework.beans.factory.BeanNotOfRequiredTypeException(java.lang.String, java.lang.Class<?>, java.lang.Class<?>)",
            "public org.springframework.beans.factory.BeanNotOfRequiredTypeException(java.lang.String, java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanNotOfRequiredTypeException.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.BeanNotOfRequiredTypeException.getRequiredType()",
            "public java.lang.Class<?> getRequiredType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.BeanNotOfRequiredTypeException.getActualType()",
            "public java.lang.Class<?> getActualType()"
        ],
        [
            "org.springframework.beans.factory.BeanIsNotAFactoryException",
            "org.springframework.beans.factory.BeanIsNotAFactoryException(java.lang.String, java.lang.Class<?>)",
            "public org.springframework.beans.factory.BeanIsNotAFactoryException(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.BeanExpressionException",
            "org.springframework.beans.factory.BeanExpressionException(java.lang.String)",
            "public org.springframework.beans.factory.BeanExpressionException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanExpressionException",
            "org.springframework.beans.factory.BeanExpressionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanExpressionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.BeanCreationException",
            "org.springframework.beans.factory.BeanCreationException(java.lang.String)",
            "public org.springframework.beans.factory.BeanCreationException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanCreationException",
            "org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.BeanCreationException",
            "org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanCreationException",
            "org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.BeanCreationException",
            "org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanCreationException",
            "org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanCreationException(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanCreationException.getResourceDescription()",
            "public java.lang.String getResourceDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanCreationException.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.BeanCreationException.addRelatedCause(java.lang.Throwable)",
            "public void addRelatedCause(java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable[]",
            "org.springframework.beans.factory.BeanCreationException.getRelatedCauses()",
            "public java.lang.Throwable[] getRelatedCauses()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanCreationException.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.beans.factory.BeanCreationException.printStackTrace(java.io.PrintStream)",
            "public void printStackTrace(java.io.PrintStream)"
        ],
        [
            "void",
            "org.springframework.beans.factory.BeanCreationException.printStackTrace(java.io.PrintWriter)",
            "public void printStackTrace(java.io.PrintWriter)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.BeanCreationException.contains(java.lang.Class<?>)",
            "public boolean contains(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.CannotLoadBeanClassException",
            "org.springframework.beans.factory.CannotLoadBeanClassException(java.lang.String, java.lang.String, java.lang.String, java.lang.ClassNotFoundException)",
            "public org.springframework.beans.factory.CannotLoadBeanClassException(java.lang.String, java.lang.String, java.lang.String, java.lang.ClassNotFoundException)"
        ],
        [
            "org.springframework.beans.factory.CannotLoadBeanClassException",
            "org.springframework.beans.factory.CannotLoadBeanClassException(java.lang.String, java.lang.String, java.lang.String, java.lang.LinkageError)",
            "public org.springframework.beans.factory.CannotLoadBeanClassException(java.lang.String, java.lang.String, java.lang.String, java.lang.LinkageError)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.CannotLoadBeanClassException.getResourceDescription()",
            "public java.lang.String getResourceDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.CannotLoadBeanClassException.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.CannotLoadBeanClassException.getBeanClassName()",
            "public java.lang.String getBeanClassName()"
        ],
        [
            "org.springframework.beans.factory.BeanInitializationException",
            "org.springframework.beans.factory.BeanInitializationException(java.lang.String)",
            "public org.springframework.beans.factory.BeanInitializationException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanInitializationException",
            "org.springframework.beans.factory.BeanInitializationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanInitializationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.FactoryBeanNotInitializedException",
            "org.springframework.beans.factory.FactoryBeanNotInitializedException()",
            "public org.springframework.beans.factory.FactoryBeanNotInitializedException()"
        ],
        [
            "org.springframework.beans.factory.FactoryBeanNotInitializedException",
            "org.springframework.beans.factory.FactoryBeanNotInitializedException(java.lang.String)",
            "public org.springframework.beans.factory.FactoryBeanNotInitializedException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean",
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean()",
            "public org.springframework.beans.factory.config.MethodInvokingFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean.setSingleton(boolean)",
            "public void setSingleton(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.MethodInvokingFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.config.BeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinition, java.lang.String)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinition, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.config.BeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinition, java.lang.String, java.lang.String[])",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinition, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.config.BeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinitionHolder)",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinitionHolder)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanDefinition()",
            "public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.getAliases()",
            "public java.lang.String[] getAliases()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.matchesName(java.lang.String)",
            "public boolean matchesName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.getShortDescription()",
            "public java.lang.String getShortDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.getLongDescription()",
            "public java.lang.String getLongDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.BeanDefinitionHolder.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.config.PropertyOverrideConfigurer",
            "org.springframework.beans.factory.config.PropertyOverrideConfigurer()",
            "public org.springframework.beans.factory.config.PropertyOverrideConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyOverrideConfigurer.setBeanNameSeparator(java.lang.String)",
            "public void setBeanNameSeparator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyOverrideConfigurer.setIgnoreInvalidKeys(boolean)",
            "public void setIgnoreInvalidKeys(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.PropertyOverrideConfigurer.hasPropertyOverridesFor(java.lang.String)",
            "public boolean hasPropertyOverridesFor(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor.java.lang.Object postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)",
            "public default java.lang.Object postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor.boolean postProcessAfterInstantiation(java.lang.Object, java.lang.String)",
            "public default boolean postProcessAfterInstantiation(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor.org.springframework.beans.PropertyValues.postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)",
            "public default org.springframework.beans.PropertyValues postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor.org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)",
            "public default org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.PropertyPathFactoryBean",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean()",
            "public org.springframework.beans.factory.config.PropertyPathFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.setTargetObject(java.lang.Object)",
            "public void setTargetObject(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.setTargetBeanName(java.lang.String)",
            "public void setTargetBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.setPropertyPath(java.lang.String)",
            "public void setPropertyPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.setResultType(java.lang.Class<?>)",
            "public void setResultType(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.PropertyPathFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder(java.lang.Object)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder(java.lang.Object, java.lang.String)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder(java.lang.Object, java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder(java.lang.Object, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.setType(java.lang.String)",
            "public void setType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.getType()",
            "public java.lang.String getType()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.getName()",
            "public java.lang.String getName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "synchronized",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.boolean isConverted()",
            "public synchronized boolean isConverted()"
        ],
        [
            "synchronized",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.void setConvertedValue(java.lang.Object)",
            "public synchronized void setConvertedValue(java.lang.Object)"
        ],
        [
            "synchronized",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.java.lang.Object getConvertedValue()",
            "public synchronized java.lang.Object getConvertedValue()"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder.copy()",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder copy()"
        ],
        [
            "org.springframework.beans.factory.config.CustomScopeConfigurer",
            "org.springframework.beans.factory.config.CustomScopeConfigurer()",
            "public org.springframework.beans.factory.config.CustomScopeConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomScopeConfigurer.setScopes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setScopes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomScopeConfigurer.addScope(java.lang.String, org.springframework.beans.factory.config.Scope)",
            "public void addScope(java.lang.String, org.springframework.beans.factory.config.Scope)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomScopeConfigurer.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.CustomScopeConfigurer.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomScopeConfigurer.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomScopeConfigurer.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer",
            "org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer()",
            "public org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer.setSystemTreePath(java.lang.String)",
            "public void setSystemTreePath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer.setUserTreePath(java.lang.String)",
            "public void setUserTreePath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.AutowiredPropertyMarker.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.AutowiredPropertyMarker.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.AutowiredPropertyMarker.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.config.YamlMapFactoryBean",
            "org.springframework.beans.factory.config.YamlMapFactoryBean()",
            "public org.springframework.beans.factory.config.YamlMapFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlMapFactoryBean.setSingleton(boolean)",
            "public void setSingleton(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.YamlMapFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlMapFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.beans.factory.config.YamlMapFactoryBean.getObject()",
            "public java.util.Map<java.lang.String, java.lang.Object> getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.YamlMapFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.YamlMapFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean$TargetBeanObjectFactory",
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean$TargetBeanObjectFactory(org.springframework.beans.factory.BeanFactory, java.lang.String)",
            "public org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean$TargetBeanObjectFactory(org.springframework.beans.factory.BeanFactory, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean$TargetBeanObjectFactory.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.PropertyResourceConfigurer",
            "org.springframework.beans.factory.config.PropertyResourceConfigurer()",
            "public org.springframework.beans.factory.config.PropertyResourceConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyResourceConfigurer.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.PropertyResourceConfigurer.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean",
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean()",
            "public org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean.setTargetBeanName(java.lang.String)",
            "public void setTargetBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean",
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean()",
            "public org.springframework.beans.factory.config.ProviderCreatingFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean.setTargetBeanName(java.lang.String)",
            "public void setTargetBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.DependencyDescriptor$KotlinDelegate.isNullable(java.lang.reflect.Field)",
            "public static boolean isNullable(java.lang.reflect.Field)"
        ],
        [
            "org.springframework.beans.factory.config.TypedStringValue",
            "org.springframework.beans.factory.config.TypedStringValue(java.lang.String)",
            "public org.springframework.beans.factory.config.TypedStringValue(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.TypedStringValue",
            "org.springframework.beans.factory.config.TypedStringValue(java.lang.String, java.lang.Class<?>)",
            "public org.springframework.beans.factory.config.TypedStringValue(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.config.TypedStringValue",
            "org.springframework.beans.factory.config.TypedStringValue(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.config.TypedStringValue(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.TypedStringValue.setValue(java.lang.String)",
            "public void setValue(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.TypedStringValue.getValue()",
            "public java.lang.String getValue()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.TypedStringValue.setTargetType(java.lang.Class<?>)",
            "public void setTargetType(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.TypedStringValue.getTargetType()",
            "public java.lang.Class<?> getTargetType()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.TypedStringValue.setTargetTypeName(java.lang.String)",
            "public void setTargetTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.TypedStringValue.getTargetTypeName()",
            "public java.lang.String getTargetTypeName()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.TypedStringValue.hasTargetType()",
            "public boolean hasTargetType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.TypedStringValue.resolveTargetType(java.lang.ClassLoader)",
            "public java.lang.Class<?> resolveTargetType(java.lang.ClassLoader) throws java.lang.ClassNotFoundException"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.TypedStringValue.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.TypedStringValue.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.TypedStringValue.setSpecifiedTypeName(java.lang.String)",
            "public void setSpecifiedTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.TypedStringValue.getSpecifiedTypeName()",
            "public java.lang.String getSpecifiedTypeName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.TypedStringValue.setDynamic()",
            "public void setDynamic()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.TypedStringValue.isDynamic()",
            "public boolean isDynamic()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.TypedStringValue.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.TypedStringValue.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.TypedStringValue.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider",
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider(org.springframework.beans.factory.BeanFactory, java.lang.String)",
            "public org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider(org.springframework.beans.factory.BeanFactory, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider.get()",
            "public java.lang.Object get() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.MethodInvokingBean",
            "org.springframework.beans.factory.config.MethodInvokingBean()",
            "public org.springframework.beans.factory.config.MethodInvokingBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MethodInvokingBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MethodInvokingBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MethodInvokingBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport()",
            "public org.springframework.beans.factory.config.PlaceholderConfigurerSupport()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setPlaceholderPrefix(java.lang.String)",
            "public void setPlaceholderPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setPlaceholderSuffix(java.lang.String)",
            "public void setPlaceholderSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setValueSeparator(java.lang.String)",
            "public void setValueSeparator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setTrimValues(boolean)",
            "public void setTrimValues(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setNullValue(java.lang.String)",
            "public void setNullValue(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setIgnoreUnresolvablePlaceholders(boolean)",
            "public void setIgnoreUnresolvablePlaceholders(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PlaceholderConfigurerSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.beans.factory.config.CustomEditorConfigurer",
            "org.springframework.beans.factory.config.CustomEditorConfigurer()",
            "public org.springframework.beans.factory.config.CustomEditorConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomEditorConfigurer.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.CustomEditorConfigurer.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomEditorConfigurer.setPropertyEditorRegistrars(org.springframework.beans.PropertyEditorRegistrar[])",
            "public void setPropertyEditorRegistrars(org.springframework.beans.PropertyEditorRegistrar[])"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomEditorConfigurer.setCustomEditors(java.util.Map<java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>>)",
            "public void setCustomEditors(java.util.Map<java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.CustomEditorConfigurer.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.AbstractFactoryBean$EarlySingletonInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.beans.factory.config.SetFactoryBean",
            "org.springframework.beans.factory.config.SetFactoryBean()",
            "public org.springframework.beans.factory.config.SetFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.SetFactoryBean.setSourceSet(java.util.Set<?>)",
            "public void setSourceSet(java.util.Set<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.SetFactoryBean.setTargetSetClass(java.lang.Class<? extends java.util.Set>)",
            "public void setTargetSetClass(java.lang.Class<? extends java.util.Set>)"
        ],
        [
            "java.lang.Class<java.util.Set>",
            "org.springframework.beans.factory.config.SetFactoryBean.getObjectType()",
            "public java.lang.Class<java.util.Set> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.config.BeanExpressionContext",
            "org.springframework.beans.factory.config.BeanExpressionContext(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.beans.factory.config.Scope)",
            "public org.springframework.beans.factory.config.BeanExpressionContext(org.springframework.beans.factory.config.ConfigurableBeanFactory, org.springframework.beans.factory.config.Scope)"
        ],
        [
            "org.springframework.beans.factory.config.ConfigurableBeanFactory",
            "org.springframework.beans.factory.config.BeanExpressionContext.getBeanFactory()",
            "public final org.springframework.beans.factory.config.ConfigurableBeanFactory getBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.config.Scope",
            "org.springframework.beans.factory.config.BeanExpressionContext.getScope()",
            "public final org.springframework.beans.factory.config.Scope getScope()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.BeanExpressionContext.containsObject(java.lang.String)",
            "public boolean containsObject(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.BeanExpressionContext.getObject(java.lang.String)",
            "public java.lang.Object getObject(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.BeanExpressionContext.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.BeanExpressionContext.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean$ServiceLocatorInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionVisitor",
            "org.springframework.beans.factory.config.BeanDefinitionVisitor(org.springframework.util.StringValueResolver)",
            "public org.springframework.beans.factory.config.BeanDefinitionVisitor(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)",
            "public void visitBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.BeanDefinition.boolean hasConstructorArgumentValues()",
            "public default boolean hasConstructorArgumentValues()"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.BeanDefinition.boolean hasPropertyValues()",
            "public default boolean hasPropertyValues()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PropertyPlaceholderConfigurerResolver.resolvePlaceholder(java.lang.String)",
            "public java.lang.String resolvePlaceholder(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingStringValueResolver",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingStringValueResolver(org.springframework.beans.factory.config.PropertyPlaceholderConfigurer, java.util.Properties)",
            "public org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingStringValueResolver(org.springframework.beans.factory.config.PropertyPlaceholderConfigurer, java.util.Properties)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingStringValueResolver.resolveStringValue(java.lang.String)",
            "public java.lang.String resolveStringValue(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.EmbeddedValueResolver",
            "org.springframework.beans.factory.config.EmbeddedValueResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.beans.factory.config.EmbeddedValueResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.EmbeddedValueResolver.resolveStringValue(java.lang.String)",
            "public java.lang.String resolveStringValue(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor(org.springframework.core.MethodParameter, boolean)",
            "public org.springframework.beans.factory.config.DependencyDescriptor(org.springframework.core.MethodParameter, boolean)"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor(org.springframework.core.MethodParameter, boolean, boolean)",
            "public org.springframework.beans.factory.config.DependencyDescriptor(org.springframework.core.MethodParameter, boolean, boolean)"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor(java.lang.reflect.Field, boolean)",
            "public org.springframework.beans.factory.config.DependencyDescriptor(java.lang.reflect.Field, boolean)"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor(java.lang.reflect.Field, boolean, boolean)",
            "public org.springframework.beans.factory.config.DependencyDescriptor(java.lang.reflect.Field, boolean, boolean)"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public org.springframework.beans.factory.config.DependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.DependencyDescriptor.isRequired()",
            "public boolean isRequired()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.DependencyDescriptor.isEager()",
            "public boolean isEager()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(org.springframework.core.ResolvableType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object resolveNotUnique(org.springframework.core.ResolvableType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(java.lang.Class<?>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object resolveNotUnique(java.lang.Class<?>, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.DependencyDescriptor.resolveShortcut(org.springframework.beans.factory.BeanFactory)",
            "public java.lang.Object resolveShortcut(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.BeanFactory)",
            "public java.lang.Object resolveCandidate(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.DependencyDescriptor.increaseNestingLevel()",
            "public void increaseNestingLevel()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.DependencyDescriptor.setContainingClass(java.lang.Class<?>)",
            "public void setContainingClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.beans.factory.config.DependencyDescriptor.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor.getTypeDescriptor()",
            "public org.springframework.core.convert.TypeDescriptor getTypeDescriptor()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.DependencyDescriptor.fallbackMatchAllowed()",
            "public boolean fallbackMatchAllowed()"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.beans.factory.config.DependencyDescriptor.forFallbackMatch()",
            "public org.springframework.beans.factory.config.DependencyDescriptor forFallbackMatch()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.DependencyDescriptor.initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)",
            "public void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.DependencyDescriptor.getDependencyName()",
            "public java.lang.String getDependencyName()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.DependencyDescriptor.getDependencyType()",
            "public java.lang.Class<?> getDependencyType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.DependencyDescriptor.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.DependencyDescriptor.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter",
            "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter()",
            "public org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter()"
        ],
        [
            "org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod[]",
            "org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod.values()",
            "public static org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod[] values()"
        ],
        [
            "org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod",
            "org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod.valueOf(java.lang.String)",
            "public static org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod valueOf(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor.predictBeanType(java.lang.Class<?>, java.lang.String)",
            "public default java.lang.Class<?> predictBeanType(java.lang.Class<?>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.reflect.Constructor<?>[]",
            "org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors(java.lang.Class<?>, java.lang.String)",
            "public default java.lang.reflect.Constructor<?>[] determineCandidateConstructors(java.lang.Class<?>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor.java.lang.Object getEarlyBeanReference(java.lang.Object, java.lang.String)",
            "public default java.lang.Object getEarlyBeanReference(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.MapFactoryBean",
            "org.springframework.beans.factory.config.MapFactoryBean()",
            "public org.springframework.beans.factory.config.MapFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MapFactoryBean.setSourceMap(java.util.Map<?, ?>)",
            "public void setSourceMap(java.util.Map<?, ?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.MapFactoryBean.setTargetMapClass(java.lang.Class<? extends java.util.Map>)",
            "public void setTargetMapClass(java.lang.Class<? extends java.util.Map>)"
        ],
        [
            "java.lang.Class<java.util.Map>",
            "org.springframework.beans.factory.config.MapFactoryBean.getObjectType()",
            "public java.lang.Class<java.util.Map> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.config.PropertiesFactoryBean",
            "org.springframework.beans.factory.config.PropertiesFactoryBean()",
            "public org.springframework.beans.factory.config.PropertiesFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertiesFactoryBean.setSingleton(boolean)",
            "public final void setSingleton(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.PropertiesFactoryBean.isSingleton()",
            "public final boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertiesFactoryBean.afterPropertiesSet()",
            "public final void afterPropertiesSet() throws java.io.IOException"
        ],
        [
            "java.util.Properties",
            "org.springframework.beans.factory.config.PropertiesFactoryBean.getObject()",
            "public final java.util.Properties getObject() throws java.io.IOException"
        ],
        [
            "java.lang.Class<java.util.Properties>",
            "org.springframework.beans.factory.config.PropertiesFactoryBean.getObjectType()",
            "public java.lang.Class<java.util.Properties> getObjectType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.PropertiesFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanNameReference",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference(java.lang.String)",
            "public org.springframework.beans.factory.config.RuntimeBeanNameReference(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.RuntimeBeanNameReference.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.BeanPostProcessor.java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public default java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.BeanPostProcessor.java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public default java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.String)",
            "public org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.String, boolean)",
            "public org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.String, boolean)"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.Class<?>)",
            "public org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.config.RuntimeBeanReference",
            "org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.Class<?>, boolean)",
            "public org.springframework.beans.factory.config.RuntimeBeanReference(java.lang.Class<?>, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.RuntimeBeanReference.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.RuntimeBeanReference.getBeanType()",
            "public java.lang.Class<?> getBeanType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.RuntimeBeanReference.isToParent()",
            "public boolean isToParent()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.RuntimeBeanReference.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.RuntimeBeanReference.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.RuntimeBeanReference.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.RuntimeBeanReference.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.RuntimeBeanReference.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean()",
            "public org.springframework.beans.factory.config.YamlPropertiesFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean.setSingleton(boolean)",
            "public void setSingleton(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.Properties",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean.getObject()",
            "public java.util.Properties getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.YamlPropertiesFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.factory.config.YamlProcessor",
            "org.springframework.beans.factory.config.YamlProcessor()",
            "public org.springframework.beans.factory.config.YamlProcessor()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlProcessor.setDocumentMatchers(org.springframework.beans.factory.config.YamlProcessor$DocumentMatcher...)",
            "public void setDocumentMatchers(org.springframework.beans.factory.config.YamlProcessor$DocumentMatcher...)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlProcessor.setMatchDefault(boolean)",
            "public void setMatchDefault(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlProcessor.setResolutionMethod(org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod)",
            "public void setResolutionMethod(org.springframework.beans.factory.config.YamlProcessor$ResolutionMethod)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlProcessor.setResources(org.springframework.core.io.Resource...)",
            "public void setResources(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.YamlProcessor.setSupportedTypes(java.lang.Class<?>...)",
            "public void setSupportedTypes(java.lang.Class<?>...)"
        ],
        [
            "default",
            "org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor.boolean requiresDestruction(java.lang.Object)",
            "public default boolean requiresDestruction(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues",
            "org.springframework.beans.factory.config.ConstructorArgumentValues()",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues()"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues",
            "org.springframework.beans.factory.config.ConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)",
            "public void addArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addIndexedArgumentValue(int, java.lang.Object)",
            "public void addIndexedArgumentValue(int, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addIndexedArgumentValue(int, java.lang.Object, java.lang.String)",
            "public void addIndexedArgumentValue(int, java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addIndexedArgumentValue(int, org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)",
            "public void addIndexedArgumentValue(int, org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.hasIndexedArgumentValue(int)",
            "public boolean hasIndexedArgumentValue(int)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getIndexedArgumentValue(int, java.lang.Class<?>)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getIndexedArgumentValue(int, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getIndexedArgumentValue(int, java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getIndexedArgumentValue(int, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.Integer, org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder>",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getIndexedArgumentValues()",
            "public java.util.Map<java.lang.Integer, org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder> getIndexedArgumentValues()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addGenericArgumentValue(java.lang.Object)",
            "public void addGenericArgumentValue(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addGenericArgumentValue(java.lang.Object, java.lang.String)",
            "public void addGenericArgumentValue(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.addGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)",
            "public void addGenericArgumentValue(org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getGenericArgumentValue(java.lang.Class<?>)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getGenericArgumentValue(java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getGenericArgumentValue(java.lang.Class<?>, java.lang.String, java.util.Set<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder>)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getGenericArgumentValue(java.lang.Class<?>, java.lang.String, java.util.Set<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder>)"
        ],
        [
            "java.util.List<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder>",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getGenericArgumentValues()",
            "public java.util.List<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder> getGenericArgumentValues()"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getArgumentValue(int, java.lang.Class<?>)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getArgumentValue(int, java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getArgumentValue(int, java.lang.Class<?>, java.lang.String, java.util.Set<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder>)",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder getArgumentValue(int, java.lang.Class<?>, java.lang.String, java.util.Set<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder>)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.getArgumentCount()",
            "public int getArgumentCount()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.config.ConstructorArgumentValues.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean()",
            "public org.springframework.beans.factory.config.ServiceLocatorFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.setServiceLocatorInterface(java.lang.Class<?>)",
            "public void setServiceLocatorInterface(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.setServiceLocatorExceptionClass(java.lang.Class<? extends java.lang.Exception>)",
            "public void setServiceLocatorExceptionClass(java.lang.Class<? extends java.lang.Exception>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.setServiceMappings(java.util.Properties)",
            "public void setServiceMappings(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.ServiceLocatorFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.beans.factory.config.AbstractFactoryBean",
            "org.springframework.beans.factory.config.AbstractFactoryBean()",
            "public org.springframework.beans.factory.config.AbstractFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.AbstractFactoryBean.setSingleton(boolean)",
            "public void setSingleton(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.AbstractFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.AbstractFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.AbstractFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "T",
            "org.springframework.beans.factory.config.AbstractFactoryBean.getObject()",
            "public final T getObject() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.AbstractFactoryBean.destroy()",
            "public void destroy() throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.factory.config.ListFactoryBean",
            "org.springframework.beans.factory.config.ListFactoryBean()",
            "public org.springframework.beans.factory.config.ListFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ListFactoryBean.setSourceList(java.util.List<?>)",
            "public void setSourceList(java.util.List<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.ListFactoryBean.setTargetListClass(java.lang.Class<? extends java.util.List>)",
            "public void setTargetListClass(java.lang.Class<? extends java.util.List>)"
        ],
        [
            "java.lang.Class<java.util.List>",
            "org.springframework.beans.factory.config.ListFactoryBean.getObjectType()",
            "public java.lang.Class<java.util.List> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.config.DeprecatedBeanWarner",
            "org.springframework.beans.factory.config.DeprecatedBeanWarner()",
            "public org.springframework.beans.factory.config.DeprecatedBeanWarner()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.DeprecatedBeanWarner.setLoggerName(java.lang.String)",
            "public void setLoggerName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.DeprecatedBeanWarner.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.config.NamedBeanHolder",
            "org.springframework.beans.factory.config.NamedBeanHolder(java.lang.String, T)",
            "public org.springframework.beans.factory.config.NamedBeanHolder(java.lang.String, T)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.NamedBeanHolder.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "T",
            "org.springframework.beans.factory.config.NamedBeanHolder.getBeanInstance()",
            "public T getBeanInstance()"
        ],
        [
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean()",
            "public org.springframework.beans.factory.config.FieldRetrievingFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.setTargetClass(java.lang.Class<?>)",
            "public void setTargetClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.setTargetObject(java.lang.Object)",
            "public void setTargetObject(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.getTargetObject()",
            "public java.lang.Object getTargetObject()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.setTargetField(java.lang.String)",
            "public void setTargetField(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.getTargetField()",
            "public java.lang.String getTargetField()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.setStaticField(java.lang.String)",
            "public void setStaticField(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.ClassNotFoundException, java.lang.NoSuchFieldException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.IllegalAccessException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.FieldRetrievingFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer()",
            "public org.springframework.beans.factory.config.PropertyPlaceholderConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.setSystemPropertiesModeName(java.lang.String)",
            "public void setSystemPropertiesModeName(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.setSystemPropertiesMode(int)",
            "public void setSystemPropertiesMode(int)"
        ],
        [
            "void",
            "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.setSearchSystemEnvironment(boolean)",
            "public void setSearchSystemEnvironment(boolean)"
        ],
        [
            "org.springframework.beans.factory.config.YamlProcessor$MatchStatus[]",
            "org.springframework.beans.factory.config.YamlProcessor$MatchStatus.values()",
            "public static org.springframework.beans.factory.config.YamlProcessor$MatchStatus[] values()"
        ],
        [
            "org.springframework.beans.factory.config.YamlProcessor$MatchStatus",
            "org.springframework.beans.factory.config.YamlProcessor$MatchStatus.valueOf(java.lang.String)",
            "public static org.springframework.beans.factory.config.YamlProcessor$MatchStatus valueOf(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.config.YamlProcessor$MatchStatus",
            "org.springframework.beans.factory.config.YamlProcessor$MatchStatus.getMostSpecific(org.springframework.beans.factory.config.YamlProcessor$MatchStatus, org.springframework.beans.factory.config.YamlProcessor$MatchStatus)",
            "public static org.springframework.beans.factory.config.YamlProcessor$MatchStatus getMostSpecific(org.springframework.beans.factory.config.YamlProcessor$MatchStatus, org.springframework.beans.factory.config.YamlProcessor$MatchStatus)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.config.DependencyDescriptor$1.fallbackMatchAllowed()",
            "public boolean fallbackMatchAllowed()"
        ],
        [
            "default",
            "org.springframework.beans.factory.ObjectProvider.T getIfAvailable(java.util.function.Supplier<T>)",
            "public default T getIfAvailable(java.util.function.Supplier<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.ObjectProvider.void ifAvailable(java.util.function.Consumer<T>)",
            "public default void ifAvailable(java.util.function.Consumer<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.ObjectProvider.T getIfUnique(java.util.function.Supplier<T>)",
            "public default T getIfUnique(java.util.function.Supplier<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.ObjectProvider.void ifUnique(java.util.function.Consumer<T>)",
            "public default void ifUnique(java.util.function.Consumer<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.util.Iterator<T>",
            "org.springframework.beans.factory.ObjectProvider.iterator()",
            "public default java.util.Iterator<T> iterator()"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.beans.factory.ObjectProvider.stream()",
            "public default java.util.stream.Stream<T> stream()"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.beans.factory.ObjectProvider.orderedStream()",
            "public default java.util.stream.Stream<T> orderedStream()"
        ],
        [
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException(java.lang.Class<?>, int, java.lang.String)",
            "public org.springframework.beans.factory.NoUniqueBeanDefinitionException(java.lang.Class<?>, int, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException(java.lang.Class<?>, java.util.Collection<java.lang.String>)",
            "public org.springframework.beans.factory.NoUniqueBeanDefinitionException(java.lang.Class<?>, java.util.Collection<java.lang.String>)"
        ],
        [
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException(java.lang.Class<?>, java.lang.String...)",
            "public org.springframework.beans.factory.NoUniqueBeanDefinitionException(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException(org.springframework.core.ResolvableType, java.util.Collection<java.lang.String>)",
            "public org.springframework.beans.factory.NoUniqueBeanDefinitionException(org.springframework.core.ResolvableType, java.util.Collection<java.lang.String>)"
        ],
        [
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException(org.springframework.core.ResolvableType, java.lang.String...)",
            "public org.springframework.beans.factory.NoUniqueBeanDefinitionException(org.springframework.core.ResolvableType, java.lang.String...)"
        ],
        [
            "int",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException.getNumberOfBeansFound()",
            "public int getNumberOfBeansFound()"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.beans.factory.NoUniqueBeanDefinitionException.getBeanNamesFound()",
            "public java.util.Collection<java.lang.String> getBeanNamesFound()"
        ],
        [
            "org.springframework.beans.factory.support.LookupOverride",
            "org.springframework.beans.factory.support.LookupOverride(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.support.LookupOverride(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.LookupOverride",
            "org.springframework.beans.factory.support.LookupOverride(java.lang.reflect.Method, java.lang.String)",
            "public org.springframework.beans.factory.support.LookupOverride(java.lang.reflect.Method, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.LookupOverride.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.LookupOverride.matches(java.lang.reflect.Method)",
            "public boolean matches(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.LookupOverride.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.LookupOverride.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.LookupOverride.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$LookupOverrideMethodInterceptor",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$LookupOverrideMethodInterceptor(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$LookupOverrideMethodInterceptor(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$LookupOverrideMethodInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)",
            "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"
        ],
        [
            "org.springframework.beans.factory.support.ManagedMap",
            "org.springframework.beans.factory.support.ManagedMap()",
            "public org.springframework.beans.factory.support.ManagedMap()"
        ],
        [
            "org.springframework.beans.factory.support.ManagedMap",
            "org.springframework.beans.factory.support.ManagedMap(int)",
            "public org.springframework.beans.factory.support.ManagedMap(int)"
        ],
        [
            "<K, V> org.springframework.beans.factory.support.ManagedMap<K, V>",
            "org.springframework.beans.factory.support.ManagedMap.ofEntries(java.util.Map$Entry<? extends K, ? extends V>...)",
            "public static <K, V> org.springframework.beans.factory.support.ManagedMap<K, V> ofEntries(java.util.Map$Entry<? extends K, ? extends V>...)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedMap.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedMap.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedMap.setKeyTypeName(java.lang.String)",
            "public void setKeyTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ManagedMap.getKeyTypeName()",
            "public java.lang.String getKeyTypeName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedMap.setValueTypeName(java.lang.String)",
            "public void setValueTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ManagedMap.getValueTypeName()",
            "public java.lang.String getValueTypeName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedMap.setMergeEnabled(boolean)",
            "public void setMergeEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ManagedMap.isMergeEnabled()",
            "public boolean isMergeEnabled()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedMap.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils()",
            "public org.springframework.beans.factory.support.BeanDefinitionReaderUtils()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(java.lang.String, java.lang.String, java.lang.ClassLoader)",
            "public static org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils.generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils.generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)",
            "public static java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils.uniqueBeanName(java.lang.String, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static java.lang.String uniqueBeanName(java.lang.String, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils.registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionReaderUtils.registerWithGeneratedName(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static java.lang.String registerWithGeneratedName(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "org.springframework.beans.factory.support.ManagedList",
            "org.springframework.beans.factory.support.ManagedList()",
            "public org.springframework.beans.factory.support.ManagedList()"
        ],
        [
            "org.springframework.beans.factory.support.ManagedList",
            "org.springframework.beans.factory.support.ManagedList(int)",
            "public org.springframework.beans.factory.support.ManagedList(int)"
        ],
        [
            "<E> org.springframework.beans.factory.support.ManagedList<E>",
            "org.springframework.beans.factory.support.ManagedList.of(E...)",
            "public static <E> org.springframework.beans.factory.support.ManagedList<E> of(E...)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedList.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedList.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedList.setElementTypeName(java.lang.String)",
            "public void setElementTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ManagedList.getElementTypeName()",
            "public java.lang.String getElementTypeName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedList.setMergeEnabled(boolean)",
            "public void setMergeEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ManagedList.isMergeEnabled()",
            "public boolean isMergeEnabled()"
        ],
        [
            "java.util.List<E>",
            "org.springframework.beans.factory.support.ManagedList.merge(java.lang.Object)",
            "public java.util.List<E> merge(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedList.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.ReplaceOverride",
            "org.springframework.beans.factory.support.ReplaceOverride(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.support.ReplaceOverride(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ReplaceOverride.getMethodReplacerBeanName()",
            "public java.lang.String getMethodReplacerBeanName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ReplaceOverride.addTypeIdentifier(java.lang.String)",
            "public void addTypeIdentifier(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ReplaceOverride.matches(java.lang.reflect.Method)",
            "public boolean matches(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ReplaceOverride.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.ReplaceOverride.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ReplaceOverride.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanFactory",
            "org.springframework.beans.factory.support.AbstractBeanFactory()",
            "public org.springframework.beans.factory.support.AbstractBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanFactory",
            "org.springframework.beans.factory.support.AbstractBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.beans.factory.support.AbstractBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String)",
            "public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Class<T>)",
            "public <T> T getBean(java.lang.String, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Object...)",
            "public java.lang.Object getBean(java.lang.String, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getBean(java.lang.String, java.lang.Class<T>, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.containsBean(java.lang.String)",
            "public boolean containsBean(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(java.lang.String)",
            "public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isPrototype(java.lang.String)",
            "public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(java.lang.String, org.springframework.core.ResolvableType)",
            "public boolean isTypeMatch(java.lang.String, org.springframework.core.ResolvableType) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(java.lang.String, java.lang.Class<?>)",
            "public boolean isTypeMatch(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getType(java.lang.String)",
            "public java.lang.Class<?> getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getType(java.lang.String, boolean)",
            "public java.lang.Class<?> getType(java.lang.String, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getAliases(java.lang.String)",
            "public java.lang.String[] getAliases(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanFactory",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getParentBeanFactory()",
            "public org.springframework.beans.factory.BeanFactory getParentBeanFactory()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.containsLocalBean(java.lang.String)",
            "public boolean containsLocalBean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setParentBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setParentBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBeanClassLoader()",
            "public java.lang.ClassLoader getBeanClassLoader()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setTempClassLoader(java.lang.ClassLoader)",
            "public void setTempClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getTempClassLoader()",
            "public java.lang.ClassLoader getTempClassLoader()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setCacheBeanMetadata(boolean)",
            "public void setCacheBeanMetadata(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isCacheBeanMetadata()",
            "public boolean isCacheBeanMetadata()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)",
            "public void setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)"
        ],
        [
            "org.springframework.beans.factory.config.BeanExpressionResolver",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBeanExpressionResolver()",
            "public org.springframework.beans.factory.config.BeanExpressionResolver getBeanExpressionResolver()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getConversionService()",
            "public org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)",
            "public void addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"
        ],
        [
            "java.util.Set<org.springframework.beans.PropertyEditorRegistrar>",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getPropertyEditorRegistrars()",
            "public java.util.Set<org.springframework.beans.PropertyEditorRegistrar> getPropertyEditorRegistrars()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.registerCustomEditor(java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>)",
            "public void registerCustomEditor(java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)",
            "public void copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)"
        ],
        [
            "java.util.Map<java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>>",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getCustomEditors()",
            "public java.util.Map<java.lang.Class<?>, java.lang.Class<? extends java.beans.PropertyEditor>> getCustomEditors()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setTypeConverter(org.springframework.beans.TypeConverter)",
            "public void setTypeConverter(org.springframework.beans.TypeConverter)"
        ],
        [
            "org.springframework.beans.TypeConverter",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getTypeConverter()",
            "public org.springframework.beans.TypeConverter getTypeConverter()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.addEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void addEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.hasEmbeddedValueResolver()",
            "public boolean hasEmbeddedValueResolver()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(java.lang.String)",
            "public java.lang.String resolveEmbeddedValue(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)",
            "public void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.addBeanPostProcessors(java.util.Collection<? extends org.springframework.beans.factory.config.BeanPostProcessor>)",
            "public void addBeanPostProcessors(java.util.Collection<? extends org.springframework.beans.factory.config.BeanPostProcessor>)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBeanPostProcessorCount()",
            "public int getBeanPostProcessorCount()"
        ],
        [
            "java.util.List<org.springframework.beans.factory.config.BeanPostProcessor>",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getBeanPostProcessors()",
            "public java.util.List<org.springframework.beans.factory.config.BeanPostProcessor> getBeanPostProcessors()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)",
            "public void registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getRegisteredScopeNames()",
            "public java.lang.String[] getRegisteredScopeNames()"
        ],
        [
            "org.springframework.beans.factory.config.Scope",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getRegisteredScope(java.lang.String)",
            "public org.springframework.beans.factory.config.Scope getRegisteredScope(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)",
            "public void setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)",
            "public void setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)"
        ],
        [
            "org.springframework.core.metrics.ApplicationStartup",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getApplicationStartup()",
            "public org.springframework.core.metrics.ApplicationStartup getApplicationStartup()"
        ],
        [
            "java.security.AccessControlContext",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getAccessControlContext()",
            "public java.security.AccessControlContext getAccessControlContext()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(java.lang.String)",
            "public org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(java.lang.String)",
            "public boolean isFactoryBean(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isActuallyInCreation(java.lang.String)",
            "public boolean isActuallyInCreation(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(java.lang.String, java.lang.Object)",
            "public void destroyBean(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.destroyScopedBean(java.lang.String)",
            "public void destroyScopedBean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory.clearMetadataCache()",
            "public void clearMetadataCache()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory.isBeanNameInUse(java.lang.String)",
            "public boolean isBeanNameInUse(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor.void resetBeanDefinition(java.lang.String)",
            "public default void resetBeanDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.ConstructorResolver",
            "org.springframework.beans.factory.support.ConstructorResolver(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory)",
            "public org.springframework.beans.factory.support.ConstructorResolver(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory)"
        ],
        [
            "org.springframework.beans.BeanWrapper",
            "org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.reflect.Constructor<?>[], java.lang.Object[])",
            "public org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.reflect.Constructor<?>[], java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ConstructorResolver.resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "org.springframework.beans.BeanWrapper",
            "org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])",
            "public org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])"
        ],
        [
            "org.springframework.beans.factory.support.ManagedSet",
            "org.springframework.beans.factory.support.ManagedSet()",
            "public org.springframework.beans.factory.support.ManagedSet()"
        ],
        [
            "org.springframework.beans.factory.support.ManagedSet",
            "org.springframework.beans.factory.support.ManagedSet(int)",
            "public org.springframework.beans.factory.support.ManagedSet(int)"
        ],
        [
            "<E> org.springframework.beans.factory.support.ManagedSet<E>",
            "org.springframework.beans.factory.support.ManagedSet.of(E...)",
            "public static <E> org.springframework.beans.factory.support.ManagedSet<E> of(E...)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedSet.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedSet.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedSet.setElementTypeName(java.lang.String)",
            "public void setElementTypeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ManagedSet.getElementTypeName()",
            "public java.lang.String getElementTypeName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedSet.setMergeEnabled(boolean)",
            "public void setMergeEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ManagedSet.isMergeEnabled()",
            "public boolean isMergeEnabled()"
        ],
        [
            "java.util.Set<E>",
            "org.springframework.beans.factory.support.ManagedSet.merge(java.lang.Object)",
            "public java.util.Set<E> merge(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedSet.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$NestedDependencyDescriptor",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$NestedDependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$NestedDependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionDefaults",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults()",
            "public org.springframework.beans.factory.support.BeanDefinitionDefaults()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.setLazyInit(boolean)",
            "public void setLazyInit(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.isLazyInit()",
            "public boolean isLazyInit()"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.getLazyInit()",
            "public java.lang.Boolean getLazyInit()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.setAutowireMode(int)",
            "public void setAutowireMode(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.getAutowireMode()",
            "public int getAutowireMode()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.setDependencyCheck(int)",
            "public void setDependencyCheck(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.getDependencyCheck()",
            "public int getDependencyCheck()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.setInitMethodName(java.lang.String)",
            "public void setInitMethodName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.getInitMethodName()",
            "public java.lang.String getInitMethodName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.setDestroyMethodName(java.lang.String)",
            "public void setDestroyMethodName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionDefaults.getDestroyMethodName()",
            "public java.lang.String getDestroyMethodName()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionOverrideException",
            "org.springframework.beans.factory.support.BeanDefinitionOverrideException(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.support.BeanDefinitionOverrideException(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionOverrideException.getResourceDescription()",
            "public java.lang.String getResourceDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionOverrideException.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.BeanDefinitionOverrideException.getBeanDefinition()",
            "public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.BeanDefinitionOverrideException.getExistingDefinition()",
            "public org.springframework.beans.factory.config.BeanDefinition getExistingDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$ReplaceOverrideMethodInterceptor",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$ReplaceOverrideMethodInterceptor(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$ReplaceOverrideMethodInterceptor(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$ReplaceOverrideMethodInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)",
            "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory.createDependencyProvider(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public java.lang.Object createDependencyProvider(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.getBeanFactory()",
            "public final org.springframework.beans.factory.support.BeanDefinitionRegistry getBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.getRegistry()",
            "public final org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.core.io.ResourceLoader",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.getResourceLoader()",
            "public org.springframework.core.io.ResourceLoader getResourceLoader()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.getBeanClassLoader()",
            "public java.lang.ClassLoader getBeanClassLoader()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.getEnvironment()",
            "public org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)",
            "public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "org.springframework.beans.factory.support.BeanNameGenerator",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.getBeanNameGenerator()",
            "public org.springframework.beans.factory.support.BeanNameGenerator getBeanNameGenerator()"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.Resource...)",
            "public int loadBeanDefinitions(org.springframework.core.io.Resource...) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(java.lang.String)",
            "public int loadBeanDefinitions(java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(java.lang.String, java.util.Set<org.springframework.core.io.Resource>)",
            "public int loadBeanDefinitions(java.lang.String, java.util.Set<org.springframework.core.io.Resource>) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(java.lang.String...)",
            "public int loadBeanDefinitions(java.lang.String...) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$MultiElementDescriptor",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$MultiElementDescriptor(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$MultiElementDescriptor(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.MethodOverride.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.MethodOverride.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.MethodOverride.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.MethodOverride.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.MethodOverride.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName(java.lang.Object, java.lang.Object)",
            "public org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver$KeyedArgName.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$FactoryAwareOrderSourceProvider",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$FactoryAwareOrderSourceProvider(java.util.Map<java.lang.Object, java.lang.String>)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$FactoryAwareOrderSourceProvider(java.util.Map<java.lang.Object, java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$FactoryAwareOrderSourceProvider.getOrderSource(java.lang.Object)",
            "public java.lang.Object getOrderSource(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry()",
            "public org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)",
            "public void registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.removeBeanDefinition(java.lang.String)",
            "public void removeBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.getBeanDefinition(java.lang.String)",
            "public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.containsBeanDefinition(java.lang.String)",
            "public boolean containsBeanDefinition(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.getBeanDefinitionNames()",
            "public java.lang.String[] getBeanDefinitionNames()"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.getBeanDefinitionCount()",
            "public int getBeanDefinitionCount()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry.isBeanNameInUse(java.lang.String)",
            "public boolean isBeanNameInUse(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.DisposableBeanAdapter",
            "org.springframework.beans.factory.support.DisposableBeanAdapter(java.lang.Object, java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.util.List<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor>, java.security.AccessControlContext)",
            "public org.springframework.beans.factory.support.DisposableBeanAdapter(java.lang.Object, java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.util.List<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor>, java.security.AccessControlContext)"
        ],
        [
            "org.springframework.beans.factory.support.DisposableBeanAdapter",
            "org.springframework.beans.factory.support.DisposableBeanAdapter(java.lang.Object, java.util.List<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor>, java.security.AccessControlContext)",
            "public org.springframework.beans.factory.support.DisposableBeanAdapter(java.lang.Object, java.util.List<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor>, java.security.AccessControlContext)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DisposableBeanAdapter.run()",
            "public void run()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DisposableBeanAdapter.destroy()",
            "public void destroy()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DisposableBeanAdapter.hasDestroyMethod(java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)",
            "public static boolean hasDestroyMethod(java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DisposableBeanAdapter.hasApplicableProcessors(java.lang.Object, java.util.List<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor>)",
            "public static boolean hasApplicableProcessors(java.lang.Object, java.util.List<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor>)"
        ],
        [
            "org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver",
            "org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver()",
            "public org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver.isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateResolver",
            "org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver.cloneIfNecessary()",
            "public org.springframework.beans.factory.support.AutowireCandidateResolver cloneIfNecessary()"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateQualifier",
            "org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.Class<?>)",
            "public org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateQualifier",
            "org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.String)",
            "public org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateQualifier",
            "org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.Class<?>, java.lang.Object)",
            "public org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateQualifier",
            "org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.support.AutowireCandidateQualifier(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AutowireCandidateQualifier.getTypeName()",
            "public java.lang.String getTypeName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$1.resolveCandidate(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.BeanFactory)",
            "public java.lang.Object resolveCandidate(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.getObject()",
            "public T getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.getObject(java.lang.Object...)",
            "public T getObject(java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.getIfAvailable()",
            "public T getIfAvailable() throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.ifAvailable(java.util.function.Consumer<T>)",
            "public void ifAvailable(java.util.function.Consumer<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.getIfUnique()",
            "public T getIfUnique() throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.ifUnique(java.util.function.Consumer<T>)",
            "public void ifUnique(java.util.function.Consumer<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.stream()",
            "public java.util.stream.Stream<T> stream()"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$1.orderedStream()",
            "public java.util.stream.Stream<T> orderedStream()"
        ],
        [
            "org.springframework.beans.factory.support.ScopeNotActiveException",
            "org.springframework.beans.factory.support.ScopeNotActiveException(java.lang.String, java.lang.String, java.lang.IllegalStateException)",
            "public org.springframework.beans.factory.support.ScopeNotActiveException(java.lang.String, java.lang.String, java.lang.IllegalStateException)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionValidationException",
            "org.springframework.beans.factory.support.BeanDefinitionValidationException(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionValidationException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionValidationException",
            "org.springframework.beans.factory.support.BeanDefinitionValidationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.support.BeanDefinitionValidationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.support.ImplicitlyAppearedSingletonException",
            "org.springframework.beans.factory.support.ImplicitlyAppearedSingletonException()",
            "public org.springframework.beans.factory.support.ImplicitlyAppearedSingletonException()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory()",
            "public org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.setInstantiationStrategy(org.springframework.beans.factory.support.InstantiationStrategy)",
            "public void setInstantiationStrategy(org.springframework.beans.factory.support.InstantiationStrategy)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.setAllowCircularReferences(boolean)",
            "public void setAllowCircularReferences(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.isAllowCircularReferences()",
            "public boolean isAllowCircularReferences()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.setAllowRawInjectionDespiteWrapping(boolean)",
            "public void setAllowRawInjectionDespiteWrapping(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.isAllowRawInjectionDespiteWrapping()",
            "public boolean isAllowRawInjectionDespiteWrapping()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.ignoreDependencyType(java.lang.Class<?>)",
            "public void ignoreDependencyType(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.ignoreDependencyInterface(java.lang.Class<?>)",
            "public void ignoreDependencyInterface(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(java.lang.Class<T>)",
            "public <T> T createBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBean(java.lang.Object)",
            "public void autowireBean(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.configureBean(java.lang.Object, java.lang.String)",
            "public java.lang.Object configureBean(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(java.lang.Class<?>, int, boolean)",
            "public java.lang.Object createBean(java.lang.Class<?>, int, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowire(java.lang.Class<?>, int, boolean)",
            "public java.lang.Object autowire(java.lang.Class<?>, int, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(java.lang.Object, int, boolean)",
            "public void autowireBeanProperties(java.lang.Object, int, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPropertyValues(java.lang.Object, java.lang.String)",
            "public void applyBeanPropertyValues(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(java.lang.Object, java.lang.String)",
            "public java.lang.Object initializeBean(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object applyBeanPostProcessorsBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object applyBeanPostProcessorsAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.destroyBean(java.lang.Object)",
            "public void destroyBean(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeanByName(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public java.lang.Object resolveBeanByName(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory$Jsr330Provider",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory$Jsr330Provider(org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory, org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory$Jsr330Provider(org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory, org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$Jsr330Factory$Jsr330Provider.get()",
            "public java.lang.Object get() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.genericBeanDefinition()",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.genericBeanDefinition(java.lang.String)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.genericBeanDefinition(java.lang.Class<?>)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition(java.lang.Class<?>)"
        ],
        [
            "<T> org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.genericBeanDefinition(java.lang.Class<T>, java.util.function.Supplier<T>)",
            "public static <T> org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition(java.lang.Class<T>, java.util.function.Supplier<T>)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition(java.lang.String)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition(java.lang.String, java.lang.String)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition(java.lang.Class<?>)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition(java.lang.Class<?>, java.lang.String)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "<T> org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition(org.springframework.core.ResolvableType, java.util.function.Supplier<T>)",
            "public static <T> org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(org.springframework.core.ResolvableType, java.util.function.Supplier<T>)"
        ],
        [
            "<T> org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition(java.lang.Class<T>, java.util.function.Supplier<T>)",
            "public static <T> org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class<T>, java.util.function.Supplier<T>)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.childBeanDefinition(java.lang.String)",
            "public static org.springframework.beans.factory.support.BeanDefinitionBuilder childBeanDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.getRawBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.getBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setParentName(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setParentName(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setFactoryMethod(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setFactoryMethod(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setFactoryMethodOnBean(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setFactoryMethodOnBean(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.addConstructorArgValue(java.lang.Object)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArgValue(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.addConstructorArgReference(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArgReference(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.addPropertyValue(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.addPropertyReference(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.addAutowiredProperty(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder addAutowiredProperty(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setInitMethodName(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setInitMethodName(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setDestroyMethodName(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setDestroyMethodName(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setScope(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setScope(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setAbstract(boolean)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setAbstract(boolean)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setLazyInit(boolean)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setLazyInit(boolean)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setAutowireMode(int)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setAutowireMode(int)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setDependencyCheck(int)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setDependencyCheck(int)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.addDependsOn(java.lang.String)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder addDependsOn(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setPrimary(boolean)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setPrimary(boolean)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setRole(int)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setRole(int)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.setSynthetic(boolean)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder setSynthetic(boolean)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionBuilder",
            "org.springframework.beans.factory.support.BeanDefinitionBuilder.applyCustomizers(org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public org.springframework.beans.factory.support.BeanDefinitionBuilder applyCustomizers(org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.NullBean.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.NullBean.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.NullBean.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator.instantiate(java.lang.reflect.Constructor<?>, java.lang.Object...)",
            "public java.lang.Object instantiate(java.lang.reflect.Constructor<?>, java.lang.Object...)"
        ],
        [
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$MethodOverrideCallbackFilter",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$MethodOverrideCallbackFilter(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$MethodOverrideCallbackFilter(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$MethodOverrideCallbackFilter.accept(java.lang.reflect.Method)",
            "public int accept(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider(org.springframework.beans.factory.support.DefaultListableBeanFactory, org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider(org.springframework.beans.factory.support.DefaultListableBeanFactory, org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getObject(java.lang.Object...)",
            "public java.lang.Object getObject(java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getIfAvailable()",
            "public java.lang.Object getIfAvailable() throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.ifAvailable(java.util.function.Consumer<java.lang.Object>)",
            "public void ifAvailable(java.util.function.Consumer<java.lang.Object>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getIfUnique()",
            "public java.lang.Object getIfUnique() throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.ifUnique(java.util.function.Consumer<java.lang.Object>)",
            "public void ifUnique(java.util.function.Consumer<java.lang.Object>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.util.stream.Stream<java.lang.Object>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.stream()",
            "public java.util.stream.Stream<java.lang.Object> stream()"
        ],
        [
            "java.util.stream.Stream<java.lang.Object>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.orderedStream()",
            "public java.util.stream.Stream<java.lang.Object> orderedStream()"
        ],
        [
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport.getBeanDefinition()",
            "public org.springframework.beans.factory.support.RootBeanDefinition getBeanDefinition()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibIdentitySupport.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.support.ManagedArray",
            "org.springframework.beans.factory.support.ManagedArray(java.lang.String, int)",
            "public org.springframework.beans.factory.support.ManagedArray(java.lang.String, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.beans.factory.support.MethodOverrides",
            "org.springframework.beans.factory.support.MethodOverrides()",
            "public org.springframework.beans.factory.support.MethodOverrides()"
        ],
        [
            "org.springframework.beans.factory.support.MethodOverrides",
            "org.springframework.beans.factory.support.MethodOverrides(org.springframework.beans.factory.support.MethodOverrides)",
            "public org.springframework.beans.factory.support.MethodOverrides(org.springframework.beans.factory.support.MethodOverrides)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.MethodOverrides.addOverrides(org.springframework.beans.factory.support.MethodOverrides)",
            "public void addOverrides(org.springframework.beans.factory.support.MethodOverrides)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.MethodOverrides.addOverride(org.springframework.beans.factory.support.MethodOverride)",
            "public void addOverride(org.springframework.beans.factory.support.MethodOverride)"
        ],
        [
            "java.util.Set<org.springframework.beans.factory.support.MethodOverride>",
            "org.springframework.beans.factory.support.MethodOverrides.getOverrides()",
            "public java.util.Set<org.springframework.beans.factory.support.MethodOverride> getOverrides()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.MethodOverrides.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "org.springframework.beans.factory.support.MethodOverride",
            "org.springframework.beans.factory.support.MethodOverrides.getOverride(java.lang.reflect.Method)",
            "public org.springframework.beans.factory.support.MethodOverride getOverride(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.MethodOverrides.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.MethodOverrides.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.config.BeanPostProcessor",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.set(int, org.springframework.beans.factory.config.BeanPostProcessor)",
            "public org.springframework.beans.factory.config.BeanPostProcessor set(int, org.springframework.beans.factory.config.BeanPostProcessor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.add(org.springframework.beans.factory.config.BeanPostProcessor)",
            "public boolean add(org.springframework.beans.factory.config.BeanPostProcessor)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.add(int, org.springframework.beans.factory.config.BeanPostProcessor)",
            "public void add(int, org.springframework.beans.factory.config.BeanPostProcessor)"
        ],
        [
            "org.springframework.beans.factory.config.BeanPostProcessor",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.remove(int)",
            "public org.springframework.beans.factory.config.BeanPostProcessor remove(int)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.remove(java.lang.Object)",
            "public boolean remove(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.removeAll(java.util.Collection<?>)",
            "public boolean removeAll(java.util.Collection<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.retainAll(java.util.Collection<?>)",
            "public boolean retainAll(java.util.Collection<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.addAll(java.util.Collection<? extends org.springframework.beans.factory.config.BeanPostProcessor>)",
            "public boolean addAll(java.util.Collection<? extends org.springframework.beans.factory.config.BeanPostProcessor>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.addAll(int, java.util.Collection<? extends org.springframework.beans.factory.config.BeanPostProcessor>)",
            "public boolean addAll(int, java.util.Collection<? extends org.springframework.beans.factory.config.BeanPostProcessor>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.removeIf(java.util.function.Predicate<? super org.springframework.beans.factory.config.BeanPostProcessor>)",
            "public boolean removeIf(java.util.function.Predicate<? super org.springframework.beans.factory.config.BeanPostProcessor>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.replaceAll(java.util.function.UnaryOperator<org.springframework.beans.factory.config.BeanPostProcessor>)",
            "public void replaceAll(java.util.function.UnaryOperator<org.springframework.beans.factory.config.BeanPostProcessor>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.remove(int)",
            "public java.lang.Object remove(int)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.add(int, java.lang.Object)",
            "public void add(int, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.add(java.lang.Object)",
            "public boolean add(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractBeanFactory$BeanPostProcessorCacheAwareList.set(int, java.lang.Object)",
            "public java.lang.Object set(int, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.support.ChildBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String)",
            "public org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.ChildBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, org.springframework.beans.MutablePropertyValues)",
            "public org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.factory.support.ChildBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)",
            "public org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.factory.support.ChildBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)",
            "public org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.factory.support.ChildBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, java.lang.String, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)",
            "public org.springframework.beans.factory.support.ChildBeanDefinition(java.lang.String, java.lang.String, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.factory.support.ChildBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition(org.springframework.beans.factory.support.ChildBeanDefinition)",
            "public org.springframework.beans.factory.support.ChildBeanDefinition(org.springframework.beans.factory.support.ChildBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ChildBeanDefinition.setParentName(java.lang.String)",
            "public void setParentName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ChildBeanDefinition.getParentName()",
            "public java.lang.String getParentName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ChildBeanDefinition.validate()",
            "public void validate() throws org.springframework.beans.factory.support.BeanDefinitionValidationException"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.support.ChildBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ChildBeanDefinition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.ChildBeanDefinition.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.ChildBeanDefinition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory()",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.setSerializationId(java.lang.String)",
            "public void setSerializationId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getSerializationId()",
            "public java.lang.String getSerializationId()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.setAllowBeanDefinitionOverriding(boolean)",
            "public void setAllowBeanDefinitionOverriding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.isAllowBeanDefinitionOverriding()",
            "public boolean isAllowBeanDefinitionOverriding()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.setAllowEagerClassLoading(boolean)",
            "public void setAllowEagerClassLoading(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.isAllowEagerClassLoading()",
            "public boolean isAllowEagerClassLoading()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.setDependencyComparator(java.util.Comparator<java.lang.Object>)",
            "public void setDependencyComparator(java.util.Comparator<java.lang.Object>)"
        ],
        [
            "java.util.Comparator<java.lang.Object>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getDependencyComparator()",
            "public java.util.Comparator<java.lang.Object> getDependencyComparator()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)",
            "public void setAutowireCandidateResolver(org.springframework.beans.factory.support.AutowireCandidateResolver)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateResolver",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getAutowireCandidateResolver()",
            "public org.springframework.beans.factory.support.AutowireCandidateResolver getAutowireCandidateResolver()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(java.lang.Class<T>)",
            "public <T> T getBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getBean(java.lang.Class<T>, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanProvider(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanProvider(org.springframework.core.ResolvableType)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.containsBeanDefinition(java.lang.String)",
            "public boolean containsBeanDefinition(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinitionCount()",
            "public int getBeanDefinitionCount()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinitionNames()",
            "public java.lang.String[] getBeanDefinitionNames()"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanProvider(java.lang.Class<T>, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>, boolean)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanProvider(org.springframework.core.ResolvableType, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(org.springframework.core.ResolvableType)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(java.lang.Class<?>)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(java.lang.Class<?>, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>, boolean, boolean)"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(java.lang.Class<T>)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(java.lang.Class<T>, boolean, boolean)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.lang.String[] getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.util.Map<java.lang.String, java.lang.Object> getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.findAnnotationOnBean(java.lang.String, java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.registerResolvableDependency(java.lang.Class<?>, java.lang.Object)",
            "public void registerResolvableDependency(java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(java.lang.String)",
            "public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesIterator()",
            "public java.util.Iterator<java.lang.String> getBeanNamesIterator()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.clearMetadataCache()",
            "public void clearMetadataCache()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.freezeConfiguration()",
            "public void freezeConfiguration()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.isConfigurationFrozen()",
            "public boolean isConfigurationFrozen()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons()",
            "public void preInstantiateSingletons() throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)",
            "public void registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.removeBeanDefinition(java.lang.String)",
            "public void removeBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.registerSingleton(java.lang.String, java.lang.Object)",
            "public void registerSingleton(java.lang.String, java.lang.Object) throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons()",
            "public void destroySingletons()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(java.lang.String)",
            "public void destroySingleton(java.lang.String)"
        ],
        [
            "<T> org.springframework.beans.factory.config.NamedBeanHolder<T>",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.config.NamedBeanHolder<T> resolveNamedBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set<java.lang.String>, org.springframework.beans.TypeConverter)",
            "public java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set<java.lang.String>, org.springframework.beans.TypeConverter) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set<java.lang.String>, org.springframework.beans.TypeConverter)",
            "public java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set<java.lang.String>, org.springframework.beans.TypeConverter) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$2.isRequired()",
            "public boolean isRequired()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$2.resolveCandidate(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.BeanFactory)",
            "public java.lang.Object resolveCandidate(java.lang.String, java.lang.Class<?>, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder",
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder(int)",
            "public org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder(int)"
        ],
        [
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder",
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder(java.lang.Object[])",
            "public org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder(java.lang.Object[])"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder.getTypeDifferenceWeight(java.lang.Class<?>[])",
            "public int getTypeDifferenceWeight(java.lang.Class<?>[])"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder.getAssignabilityWeight(java.lang.Class<?>[])",
            "public int getAssignabilityWeight(java.lang.Class<?>[])"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder.storeCache(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.reflect.Executable)",
            "public void storeCache(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.reflect.Executable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.overrideFrom(org.springframework.beans.factory.config.BeanDefinition)",
            "public void overrideFrom(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.applyDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)",
            "public void applyDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClassName(java.lang.String)",
            "public void setBeanClassName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName()",
            "public java.lang.String getBeanClassName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setBeanClass(java.lang.Class<?>)",
            "public void setBeanClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClass()",
            "public java.lang.Class<?> getBeanClass() throws java.lang.IllegalStateException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.hasBeanClass()",
            "public boolean hasBeanClass()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(java.lang.ClassLoader)",
            "public java.lang.Class<?> resolveBeanClass(java.lang.ClassLoader) throws java.lang.ClassNotFoundException"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setScope(java.lang.String)",
            "public void setScope(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getScope()",
            "public java.lang.String getScope()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isPrototype()",
            "public boolean isPrototype()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setAbstract(boolean)",
            "public void setAbstract(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isAbstract()",
            "public boolean isAbstract()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setLazyInit(boolean)",
            "public void setLazyInit(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isLazyInit()",
            "public boolean isLazyInit()"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getLazyInit()",
            "public java.lang.Boolean getLazyInit()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setAutowireMode(int)",
            "public void setAutowireMode(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getAutowireMode()",
            "public int getAutowireMode()"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getResolvedAutowireMode()",
            "public int getResolvedAutowireMode()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setDependencyCheck(int)",
            "public void setDependencyCheck(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getDependencyCheck()",
            "public int getDependencyCheck()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setDependsOn(java.lang.String...)",
            "public void setDependsOn(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getDependsOn()",
            "public java.lang.String[] getDependsOn()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setAutowireCandidate(boolean)",
            "public void setAutowireCandidate(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isAutowireCandidate()",
            "public boolean isAutowireCandidate()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setPrimary(boolean)",
            "public void setPrimary(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isPrimary()",
            "public boolean isPrimary()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.addQualifier(org.springframework.beans.factory.support.AutowireCandidateQualifier)",
            "public void addQualifier(org.springframework.beans.factory.support.AutowireCandidateQualifier)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.hasQualifier(java.lang.String)",
            "public boolean hasQualifier(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateQualifier",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getQualifier(java.lang.String)",
            "public org.springframework.beans.factory.support.AutowireCandidateQualifier getQualifier(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.beans.factory.support.AutowireCandidateQualifier>",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getQualifiers()",
            "public java.util.Set<org.springframework.beans.factory.support.AutowireCandidateQualifier> getQualifiers()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.copyQualifiersFrom(org.springframework.beans.factory.support.AbstractBeanDefinition)",
            "public void copyQualifiersFrom(org.springframework.beans.factory.support.AbstractBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setInstanceSupplier(java.util.function.Supplier<?>)",
            "public void setInstanceSupplier(java.util.function.Supplier<?>)"
        ],
        [
            "java.util.function.Supplier<?>",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getInstanceSupplier()",
            "public java.util.function.Supplier<?> getInstanceSupplier()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setNonPublicAccessAllowed(boolean)",
            "public void setNonPublicAccessAllowed(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isNonPublicAccessAllowed()",
            "public boolean isNonPublicAccessAllowed()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setLenientConstructorResolution(boolean)",
            "public void setLenientConstructorResolution(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isLenientConstructorResolution()",
            "public boolean isLenientConstructorResolution()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setFactoryBeanName(java.lang.String)",
            "public void setFactoryBeanName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getFactoryBeanName()",
            "public java.lang.String getFactoryBeanName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setFactoryMethodName(java.lang.String)",
            "public void setFactoryMethodName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getFactoryMethodName()",
            "public java.lang.String getFactoryMethodName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)",
            "public void setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)"
        ],
        [
            "org.springframework.beans.factory.config.ConstructorArgumentValues",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getConstructorArgumentValues()",
            "public org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.hasConstructorArgumentValues()",
            "public boolean hasConstructorArgumentValues()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setPropertyValues(org.springframework.beans.MutablePropertyValues)",
            "public void setPropertyValues(org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getPropertyValues()",
            "public org.springframework.beans.MutablePropertyValues getPropertyValues()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.hasPropertyValues()",
            "public boolean hasPropertyValues()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setMethodOverrides(org.springframework.beans.factory.support.MethodOverrides)",
            "public void setMethodOverrides(org.springframework.beans.factory.support.MethodOverrides)"
        ],
        [
            "org.springframework.beans.factory.support.MethodOverrides",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getMethodOverrides()",
            "public org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.hasMethodOverrides()",
            "public boolean hasMethodOverrides()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setInitMethodName(java.lang.String)",
            "public void setInitMethodName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getInitMethodName()",
            "public java.lang.String getInitMethodName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setEnforceInitMethod(boolean)",
            "public void setEnforceInitMethod(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isEnforceInitMethod()",
            "public boolean isEnforceInitMethod()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setDestroyMethodName(java.lang.String)",
            "public void setDestroyMethodName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getDestroyMethodName()",
            "public java.lang.String getDestroyMethodName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setEnforceDestroyMethod(boolean)",
            "public void setEnforceDestroyMethod(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isEnforceDestroyMethod()",
            "public boolean isEnforceDestroyMethod()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setSynthetic(boolean)",
            "public void setSynthetic(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.isSynthetic()",
            "public boolean isSynthetic()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setRole(int)",
            "public void setRole(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getRole()",
            "public int getRole()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setDescription(java.lang.String)",
            "public void setDescription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setResource(org.springframework.core.io.Resource)",
            "public void setResource(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getResource()",
            "public org.springframework.core.io.Resource getResource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setResourceDescription(java.lang.String)",
            "public void setResourceDescription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getResourceDescription()",
            "public java.lang.String getResourceDescription()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.setOriginatingBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)",
            "public void setOriginatingBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.getOriginatingBeanDefinition()",
            "public org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.validate()",
            "public void validate() throws org.springframework.beans.factory.support.BeanDefinitionValidationException"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.prepareMethodOverrides()",
            "public void prepareMethodOverrides() throws org.springframework.beans.factory.support.BeanDefinitionValidationException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.clone()",
            "public java.lang.Object clone()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractBeanDefinition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy()",
            "public org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$3.isRequired()",
            "public boolean isRequired()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$3.resolveNotUnique(org.springframework.core.ResolvableType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object resolveNotUnique(org.springframework.core.ResolvableType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.beans.factory.support.FactoryBeanRegistrySupport",
            "org.springframework.beans.factory.support.FactoryBeanRegistrySupport()",
            "public org.springframework.beans.factory.support.FactoryBeanRegistrySupport()"
        ],
        [
            "org.springframework.beans.factory.support.SimpleInstantiationStrategy",
            "org.springframework.beans.factory.support.SimpleInstantiationStrategy()",
            "public org.springframework.beans.factory.support.SimpleInstantiationStrategy()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.factory.support.SimpleInstantiationStrategy.getCurrentlyInvokedFactoryMethod()",
            "public static java.lang.reflect.Method getCurrentlyInvokedFactoryMethod()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)",
            "public java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor<?>, java.lang.Object...)",
            "public java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor<?>, java.lang.Object...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.Object, java.lang.reflect.Method, java.lang.Object...)",
            "public java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.Object, java.lang.reflect.Method, java.lang.Object...)"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$StreamDependencyDescriptor",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$StreamDependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor, boolean)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$StreamDependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor, boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$StreamDependencyDescriptor.isOrdered()",
            "public boolean isOrdered()"
        ],
        [
            "org.springframework.beans.factory.support.GenericBeanDefinition",
            "org.springframework.beans.factory.support.GenericBeanDefinition()",
            "public org.springframework.beans.factory.support.GenericBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.GenericBeanDefinition",
            "org.springframework.beans.factory.support.GenericBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.support.GenericBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.GenericBeanDefinition.setParentName(java.lang.String)",
            "public void setParentName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.GenericBeanDefinition.getParentName()",
            "public java.lang.String getParentName()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.support.GenericBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.GenericBeanDefinition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.GenericBeanDefinition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.SimpleSecurityContextProvider",
            "org.springframework.beans.factory.support.SimpleSecurityContextProvider()",
            "public org.springframework.beans.factory.support.SimpleSecurityContextProvider()"
        ],
        [
            "org.springframework.beans.factory.support.SimpleSecurityContextProvider",
            "org.springframework.beans.factory.support.SimpleSecurityContextProvider(java.security.AccessControlContext)",
            "public org.springframework.beans.factory.support.SimpleSecurityContextProvider(java.security.AccessControlContext)"
        ],
        [
            "java.security.AccessControlContext",
            "org.springframework.beans.factory.support.SimpleSecurityContextProvider.getAccessControlContext()",
            "public java.security.AccessControlContext getAccessControlContext()"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory, java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.TypeConverter)",
            "public org.springframework.beans.factory.support.BeanDefinitionValueResolver(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory, java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.TypeConverter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(java.lang.Object, java.lang.Object)",
            "public java.lang.Object resolveValueIfNecessary(java.lang.Object, java.lang.Object)"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory$1.getObject()",
            "public T getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory$1.getObject(java.lang.Object...)",
            "public T getObject(java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory$1.getIfAvailable()",
            "public T getIfAvailable() throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory$1.getIfUnique()",
            "public T getIfUnique() throws org.springframework.beans.BeansException"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory$1.stream()",
            "public java.util.stream.Stream<T> stream()"
        ],
        [
            "java.util.stream.Stream<T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory$1.orderedStream()",
            "public java.util.stream.Stream<T> orderedStream()"
        ],
        [
            "org.springframework.beans.factory.support.StaticListableBeanFactory",
            "org.springframework.beans.factory.support.StaticListableBeanFactory()",
            "public org.springframework.beans.factory.support.StaticListableBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.support.StaticListableBeanFactory",
            "org.springframework.beans.factory.support.StaticListableBeanFactory(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.beans.factory.support.StaticListableBeanFactory(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.addBean(java.lang.String, java.lang.Object)",
            "public void addBean(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBean(java.lang.String)",
            "public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBean(java.lang.String, java.lang.Class<T>)",
            "public <T> T getBean(java.lang.String, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBean(java.lang.String, java.lang.Object...)",
            "public java.lang.Object getBean(java.lang.String, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBean(java.lang.Class<T>)",
            "public <T> T getBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBean(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getBean(java.lang.Class<T>, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanProvider(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanProvider(org.springframework.core.ResolvableType)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.containsBean(java.lang.String)",
            "public boolean containsBean(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.isSingleton(java.lang.String)",
            "public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.isPrototype(java.lang.String)",
            "public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.isTypeMatch(java.lang.String, org.springframework.core.ResolvableType)",
            "public boolean isTypeMatch(java.lang.String, org.springframework.core.ResolvableType) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.isTypeMatch(java.lang.String, java.lang.Class<?>)",
            "public boolean isTypeMatch(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getType(java.lang.String)",
            "public java.lang.Class<?> getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getType(java.lang.String, boolean)",
            "public java.lang.Class<?> getType(java.lang.String, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getAliases(java.lang.String)",
            "public java.lang.String[] getAliases(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.containsBeanDefinition(java.lang.String)",
            "public boolean containsBeanDefinition(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanDefinitionCount()",
            "public int getBeanDefinitionCount()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanDefinitionNames()",
            "public java.lang.String[] getBeanDefinitionNames()"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanProvider(java.lang.Class<T>, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>, boolean)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanProvider(org.springframework.core.ResolvableType, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanNamesForType(org.springframework.core.ResolvableType)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanNamesForType(java.lang.Class<?>)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanNamesForType(java.lang.Class<?>, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>, boolean, boolean)"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeansOfType(java.lang.Class<T>)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeansOfType(java.lang.Class<T>, boolean, boolean)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.lang.String[] getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.util.Map<java.lang.String, java.lang.Object> getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>) throws org.springframework.beans.BeansException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.findAnnotationOnBean(java.lang.String, java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.beans.factory.support.StaticListableBeanFactory.findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionResource",
            "org.springframework.beans.factory.support.BeanDefinitionResource(org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.beans.factory.support.BeanDefinitionResource(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.beans.factory.support.BeanDefinitionResource.getBeanDefinition()",
            "public final org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.BeanDefinitionResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.BeanDefinitionResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.beans.factory.support.BeanDefinitionResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.BeanDefinitionResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.BeanDefinitionResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.BeanDefinitionResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$SerializedBeanFactoryReference",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$SerializedBeanFactoryReference(java.lang.String)",
            "public org.springframework.beans.factory.support.DefaultListableBeanFactory$SerializedBeanFactoryReference(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry()",
            "public org.springframework.beans.factory.support.DefaultSingletonBeanRegistry()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.registerSingleton(java.lang.String, java.lang.Object)",
            "public void registerSingleton(java.lang.String, java.lang.Object) throws java.lang.IllegalStateException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(java.lang.String)",
            "public java.lang.Object getSingleton(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)",
            "public java.lang.Object getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.containsSingleton(java.lang.String)",
            "public boolean containsSingleton(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingletonNames()",
            "public java.lang.String[] getSingletonNames()"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingletonCount()",
            "public int getSingletonCount()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.setCurrentlyInCreation(java.lang.String, boolean)",
            "public void setCurrentlyInCreation(java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.isCurrentlyInCreation(java.lang.String)",
            "public boolean isCurrentlyInCreation(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.isSingletonCurrentlyInCreation(java.lang.String)",
            "public boolean isSingletonCurrentlyInCreation(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.registerDisposableBean(java.lang.String, org.springframework.beans.factory.DisposableBean)",
            "public void registerDisposableBean(java.lang.String, org.springframework.beans.factory.DisposableBean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.registerContainedBean(java.lang.String, java.lang.String)",
            "public void registerContainedBean(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.registerDependentBean(java.lang.String, java.lang.String)",
            "public void registerDependentBean(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getDependentBeans(java.lang.String)",
            "public java.lang.String[] getDependentBeans(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getDependenciesForBean(java.lang.String)",
            "public java.lang.String[] getDependenciesForBean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons()",
            "public void destroySingletons()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(java.lang.String)",
            "public void destroySingleton(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingletonMutex()",
            "public final java.lang.Object getSingletonMutex()"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition()",
            "public org.springframework.beans.factory.support.RootBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<?>)",
            "public org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<?>)"
        ],
        [
            "<T>",
            "org.springframework.beans.factory.support.RootBeanDefinition.org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<T>, java.util.function.Supplier<T>)",
            "public <T> org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<T>, java.util.function.Supplier<T>)"
        ],
        [
            "<T>",
            "org.springframework.beans.factory.support.RootBeanDefinition.org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<T>, java.lang.String, java.util.function.Supplier<T>)",
            "public <T> org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<T>, java.lang.String, java.util.function.Supplier<T>)"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<?>, int, boolean)",
            "public org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<?>, int, boolean)"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<?>, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)",
            "public org.springframework.beans.factory.support.RootBeanDefinition(java.lang.Class<?>, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition(java.lang.String)",
            "public org.springframework.beans.factory.support.RootBeanDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition(java.lang.String, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)",
            "public org.springframework.beans.factory.support.RootBeanDefinition(java.lang.String, org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public org.springframework.beans.factory.support.RootBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.RootBeanDefinition.getParentName()",
            "public java.lang.String getParentName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setParentName(java.lang.String)",
            "public void setParentName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setDecoratedDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder)",
            "public void setDecoratedDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.support.RootBeanDefinition.getDecoratedDefinition()",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder getDecoratedDefinition()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setQualifiedElement(java.lang.reflect.AnnotatedElement)",
            "public void setQualifiedElement(java.lang.reflect.AnnotatedElement)"
        ],
        [
            "java.lang.reflect.AnnotatedElement",
            "org.springframework.beans.factory.support.RootBeanDefinition.getQualifiedElement()",
            "public java.lang.reflect.AnnotatedElement getQualifiedElement()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setTargetType(org.springframework.core.ResolvableType)",
            "public void setTargetType(org.springframework.core.ResolvableType)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setTargetType(java.lang.Class<?>)",
            "public void setTargetType(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.RootBeanDefinition.getTargetType()",
            "public java.lang.Class<?> getTargetType()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.beans.factory.support.RootBeanDefinition.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "java.lang.reflect.Constructor<?>[]",
            "org.springframework.beans.factory.support.RootBeanDefinition.getPreferredConstructors()",
            "public java.lang.reflect.Constructor<?>[] getPreferredConstructors()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setUniqueFactoryMethodName(java.lang.String)",
            "public void setUniqueFactoryMethodName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setNonUniqueFactoryMethodName(java.lang.String)",
            "public void setNonUniqueFactoryMethodName(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.RootBeanDefinition.isFactoryMethod(java.lang.reflect.Method)",
            "public boolean isFactoryMethod(java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.setResolvedFactoryMethod(java.lang.reflect.Method)",
            "public void setResolvedFactoryMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.factory.support.RootBeanDefinition.getResolvedFactoryMethod()",
            "public java.lang.reflect.Method getResolvedFactoryMethod()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.registerExternallyManagedConfigMember(java.lang.reflect.Member)",
            "public void registerExternallyManagedConfigMember(java.lang.reflect.Member)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.RootBeanDefinition.isExternallyManagedConfigMember(java.lang.reflect.Member)",
            "public boolean isExternallyManagedConfigMember(java.lang.reflect.Member)"
        ],
        [
            "java.util.Set<java.lang.reflect.Member>",
            "org.springframework.beans.factory.support.RootBeanDefinition.getExternallyManagedConfigMembers()",
            "public java.util.Set<java.lang.reflect.Member> getExternallyManagedConfigMembers()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.registerExternallyManagedInitMethod(java.lang.String)",
            "public void registerExternallyManagedInitMethod(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.RootBeanDefinition.isExternallyManagedInitMethod(java.lang.String)",
            "public boolean isExternallyManagedInitMethod(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.beans.factory.support.RootBeanDefinition.getExternallyManagedInitMethods()",
            "public java.util.Set<java.lang.String> getExternallyManagedInitMethods()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.RootBeanDefinition.registerExternallyManagedDestroyMethod(java.lang.String)",
            "public void registerExternallyManagedDestroyMethod(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.RootBeanDefinition.isExternallyManagedDestroyMethod(java.lang.String)",
            "public boolean isExternallyManagedDestroyMethod(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.beans.factory.support.RootBeanDefinition.getExternallyManagedDestroyMethods()",
            "public java.util.Set<java.lang.String> getExternallyManagedDestroyMethods()"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.RootBeanDefinition cloneBeanDefinition()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.RootBeanDefinition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.RootBeanDefinition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.support.RootBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor(org.springframework.core.MethodParameter, boolean)",
            "public org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor(org.springframework.core.MethodParameter, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor.getDependencyName()",
            "public java.lang.String getDependencyName()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider$2.isRequired()",
            "public boolean isRequired()"
        ],
        [
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver()",
            "public org.springframework.beans.factory.support.SimpleAutowireCandidateResolver()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.isRequired(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.support.AutowireCandidateResolver",
            "org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.cloneIfNecessary()",
            "public org.springframework.beans.factory.support.AutowireCandidateResolver cloneIfNecessary()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.support.ConstructorResolver$ConstructorPropertiesChecker.evaluate(java.lang.reflect.Constructor<?>, int)",
            "public static java.lang.String[] evaluate(java.lang.reflect.Constructor<?>, int)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.AutowireCandidateResolver.boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public default boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.AutowireCandidateResolver.boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public default boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.AutowireCandidateResolver.boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public default boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.AutowireCandidateResolver.java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public default java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.AutowireCandidateResolver.java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public default java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "default",
            "org.springframework.beans.factory.support.AutowireCandidateResolver.org.springframework.beans.factory.support.AutowireCandidateResolver cloneIfNecessary()",
            "public default org.springframework.beans.factory.support.AutowireCandidateResolver cloneIfNecessary()"
        ],
        [
            "org.springframework.beans.factory.support.DefaultBeanNameGenerator",
            "org.springframework.beans.factory.support.DefaultBeanNameGenerator()",
            "public org.springframework.beans.factory.support.DefaultBeanNameGenerator()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.DefaultBeanNameGenerator.generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$FactoryBeanMethodTypeFinder.doWith(java.lang.reflect.Method)",
            "public void doWith(java.lang.reflect.Method) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException"
        ],
        [
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.beans.factory.support.PropertiesBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.setDefaultParentBean(java.lang.String)",
            "public void setDefaultParentBean(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.getDefaultParentBean()",
            "public java.lang.String getDefaultParentBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.setPropertiesPersister(org.springframework.util.PropertiesPersister)",
            "public void setPropertiesPersister(org.springframework.util.PropertiesPersister)"
        ],
        [
            "org.springframework.util.PropertiesPersister",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.getPropertiesPersister()",
            "public org.springframework.util.PropertiesPersister getPropertiesPersister()"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.Resource)",
            "public int loadBeanDefinitions(org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.Resource, java.lang.String)",
            "public int loadBeanDefinitions(org.springframework.core.io.Resource, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)",
            "public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.support.EncodedResource, java.lang.String)",
            "public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.registerBeanDefinitions(java.util.ResourceBundle)",
            "public int registerBeanDefinitions(java.util.ResourceBundle) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.registerBeanDefinitions(java.util.ResourceBundle, java.lang.String)",
            "public int registerBeanDefinitions(java.util.ResourceBundle, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.registerBeanDefinitions(java.util.Map<?, ?>)",
            "public int registerBeanDefinitions(java.util.Map<?, ?>) throws org.springframework.beans.BeansException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.registerBeanDefinitions(java.util.Map<?, ?>, java.lang.String)",
            "public int registerBeanDefinitions(java.util.Map<?, ?>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "int",
            "org.springframework.beans.factory.support.PropertiesBeanDefinitionReader.registerBeanDefinitions(java.util.Map<?, ?>, java.lang.String, java.lang.String)",
            "public int registerBeanDefinitions(java.util.Map<?, ?>, java.lang.String, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.support.ManagedProperties",
            "org.springframework.beans.factory.support.ManagedProperties()",
            "public org.springframework.beans.factory.support.ManagedProperties()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedProperties.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedProperties.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.ManagedProperties.setMergeEnabled(boolean)",
            "public void setMergeEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.ManagedProperties.isMergeEnabled()",
            "public boolean isMergeEnabled()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.ManagedProperties.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AutowireUtils.sortConstructors(java.lang.reflect.Constructor<?>[])",
            "public static void sortConstructors(java.lang.reflect.Constructor<?>[])"
        ],
        [
            "void",
            "org.springframework.beans.factory.support.AutowireUtils.sortFactoryMethods(java.lang.reflect.Method[])",
            "public static void sortFactoryMethods(java.lang.reflect.Method[])"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AutowireUtils.isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)",
            "public static boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.support.AutowireUtils.isSetterDefinedInInterface(java.beans.PropertyDescriptor, java.util.Set<java.lang.Class<?>>)",
            "public static boolean isSetterDefinedInInterface(java.beans.PropertyDescriptor, java.util.Set<java.lang.Class<?>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.support.AutowireUtils.resolveAutowiringValue(java.lang.Object, java.lang.Class<?>)",
            "public static java.lang.Object resolveAutowiringValue(java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.support.AutowireUtils.resolveReturnTypeForFactoryMethod(java.lang.reflect.Method, java.lang.Object[], java.lang.ClassLoader)",
            "public static java.lang.Class<?> resolveReturnTypeForFactoryMethod(java.lang.reflect.Method, java.lang.Object[], java.lang.ClassLoader)"
        ],
        [
            "org.springframework.beans.factory.serviceloader.ServiceFactoryBean",
            "org.springframework.beans.factory.serviceloader.ServiceFactoryBean()",
            "public org.springframework.beans.factory.serviceloader.ServiceFactoryBean()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.serviceloader.ServiceFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean",
            "org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean()",
            "public org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean()"
        ],
        [
            "void",
            "org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean.setServiceType(java.lang.Class<?>)",
            "public void setServiceType(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean.getServiceType()",
            "public java.lang.Class<?> getServiceType()"
        ],
        [
            "void",
            "org.springframework.beans.factory.serviceloader.AbstractServiceLoaderBasedFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.beans.factory.serviceloader.ServiceListFactoryBean",
            "org.springframework.beans.factory.serviceloader.ServiceListFactoryBean()",
            "public org.springframework.beans.factory.serviceloader.ServiceListFactoryBean()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.serviceloader.ServiceListFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.serviceloader.ServiceLoaderFactoryBean",
            "org.springframework.beans.factory.serviceloader.ServiceLoaderFactoryBean()",
            "public org.springframework.beans.factory.serviceloader.ServiceLoaderFactoryBean()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.factory.serviceloader.ServiceLoaderFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty(org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper, java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty(org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$DeferredProperty.apply()",
            "public void apply()"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference(org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader, java.lang.String, org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper, boolean)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference(org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader, java.lang.String, org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper, boolean)"
        ],
        [
            "groovy.lang.MetaClass",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference.getMetaClass()",
            "public groovy.lang.MetaClass getMetaClass()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference.invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference.setMetaClass(groovy.lang.MetaClass)",
            "public void setMetaClass(groovy.lang.MetaClass)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$1.call(java.lang.Object...)",
            "public java.lang.Object call(java.lang.Object...)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper(java.lang.String)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper(java.lang.String, java.lang.Class<?>)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper(java.lang.String, java.lang.Class<?>, java.util.Collection<?>)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper(java.lang.String, java.lang.Class<?>, java.util.Collection<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.setBeanDefinition(org.springframework.beans.factory.support.AbstractBeanDefinition)",
            "public void setBeanDefinition(org.springframework.beans.factory.support.AbstractBeanDefinition)"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.getBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.setBeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinitionHolder)",
            "public void setBeanDefinitionHolder(org.springframework.beans.factory.config.BeanDefinitionHolder)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.getBeanDefinitionHolder()",
            "public org.springframework.beans.factory.config.BeanDefinitionHolder getBeanDefinitionHolder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.setParent(java.lang.Object)",
            "public void setParent(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.addProperty(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper addProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue(org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference, java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue(org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue.leftShift(java.lang.Object)",
            "public void leftShift(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue.add(java.lang.Object)",
            "public boolean add(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue.addAll(java.util.Collection<?>)",
            "public boolean addAll(java.util.Collection<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue.invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$GroovyRuntimeBeanReference$GroovyPropertyValue.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.setMetaClass(groovy.lang.MetaClass)",
            "public void setMetaClass(groovy.lang.MetaClass)"
        ],
        [
            "groovy.lang.MetaClass",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.getMetaClass()",
            "public groovy.lang.MetaClass getMetaClass()"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.setBinding(groovy.lang.Binding)",
            "public void setBinding(groovy.lang.Binding)"
        ],
        [
            "groovy.lang.Binding",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.getBinding()",
            "public groovy.lang.Binding getBinding()"
        ],
        [
            "int",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.Resource)",
            "public int loadBeanDefinitions(org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "int",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)",
            "public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.beans(groovy.lang.Closure<?>)",
            "public org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader beans(groovy.lang.Closure<?>)"
        ],
        [
            "org.springframework.beans.factory.support.GenericBeanDefinition",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.bean(java.lang.Class<?>)",
            "public org.springframework.beans.factory.support.GenericBeanDefinition bean(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.bean(java.lang.Class<?>, java.lang.Object...)",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition bean(java.lang.Class<?>, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.xmlns(java.util.Map<java.lang.String, java.lang.String>)",
            "public void xmlns(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.importBeans(java.lang.String)",
            "public void importBeans(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader$2.setVariable(java.lang.String, java.lang.Object)",
            "public void setVariable(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate, org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper, boolean)",
            "public org.springframework.beans.factory.groovy.GroovyDynamicElementReader(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate, org.springframework.beans.factory.groovy.GroovyBeanDefinitionWrapper, boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader.invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader.super$1$invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object super$1$invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1(java.lang.Object, java.lang.Object, groovy.lang.Reference, groovy.lang.Reference, groovy.lang.Reference, groovy.lang.Reference, groovy.lang.Reference)",
            "public org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1(java.lang.Object, java.lang.Object, groovy.lang.Reference, groovy.lang.Reference, groovy.lang.Reference, groovy.lang.Reference, groovy.lang.Reference)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.doCall(java.lang.Object)",
            "public java.lang.Object doCall(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.getMyNamespaces()",
            "public java.lang.Object getMyNamespaces()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.getArgs()",
            "public java.lang.Object getArgs()"
        ],
        [
            "groovy.xml.StreamingMarkupBuilder",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.getBuilder()",
            "public groovy.xml.StreamingMarkupBuilder getBuilder()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.getMyNamespace()",
            "public java.lang.Object getMyNamespace()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.groovy.GroovyDynamicElementReader$_invokeMethod_closure1.doCall()",
            "public java.lang.Object doCall()"
        ],
        [
            "org.springframework.beans.factory.BeanFactoryUtils",
            "org.springframework.beans.factory.BeanFactoryUtils()",
            "public org.springframework.beans.factory.BeanFactoryUtils()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.BeanFactoryUtils.isFactoryDereference(java.lang.String)",
            "public static boolean isFactoryDereference(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanFactoryUtils.transformedBeanName(java.lang.String)",
            "public static java.lang.String transformedBeanName(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.BeanFactoryUtils.isGeneratedBeanName(java.lang.String)",
            "public static boolean isGeneratedBeanName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanFactoryUtils.originalBeanName(java.lang.String)",
            "public static java.lang.String originalBeanName(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.factory.BeanFactoryUtils.countBeansIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)",
            "public static int countBeansIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.BeanFactoryUtils.beanNamesIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)",
            "public static java.lang.String[] beanNamesIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, org.springframework.core.ResolvableType)",
            "public static java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, org.springframework.core.ResolvableType)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, org.springframework.core.ResolvableType, boolean, boolean)",
            "public static java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, org.springframework.core.ResolvableType, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<?>)",
            "public static java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<?>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<?>, boolean, boolean)",
            "public static java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<?>, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static java.lang.String[] beanNamesForAnnotationIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>)",
            "public static <T> java.util.Map<java.lang.String, T> beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, boolean, boolean)",
            "public static <T> java.util.Map<java.lang.String, T> beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryUtils.beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>)",
            "public static <T> T beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryUtils.beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, boolean, boolean)",
            "public static <T> T beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryUtils.beanOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>)",
            "public static <T> T beanOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryUtils.beanOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, boolean, boolean)",
            "public static <T> T beanOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "default",
            "org.springframework.beans.factory.SmartFactoryBean.boolean isPrototype()",
            "public default boolean isPrototype()"
        ],
        [
            "default",
            "org.springframework.beans.factory.SmartFactoryBean.boolean isEagerInit()",
            "public default boolean isEagerInit()"
        ],
        [
            "org.springframework.beans.factory.BeanCreationNotAllowedException",
            "org.springframework.beans.factory.BeanCreationNotAllowedException(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.BeanCreationNotAllowedException(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.reflect.Member",
            "org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.getMember()",
            "public final java.lang.reflect.Member getMember()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils",
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils()",
            "public org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils()"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.qualifiedBeansOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, java.lang.String)",
            "public static <T> java.util.Map<java.lang.String, T> qualifiedBeansOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class<T>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.qualifiedBeanOfType(org.springframework.beans.factory.BeanFactory, java.lang.Class<T>, java.lang.String)",
            "public static <T> T qualifiedBeanOfType(org.springframework.beans.factory.BeanFactory, java.lang.Class<T>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.isQualifierMatch(java.util.function.Predicate<java.lang.String>, java.lang.String, org.springframework.beans.factory.BeanFactory)",
            "public static boolean isQualifierMatch(java.util.function.Predicate<java.lang.String>, java.lang.String, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata(java.lang.Class<?>, java.util.Collection<org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement>, java.util.Collection<org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement>)",
            "public org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata(java.lang.Class<?>, java.util.Collection<org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement>, java.util.Collection<org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public void checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(java.lang.Object, java.lang.String)",
            "public void invokeInitMethods(java.lang.Object, java.lang.String) throws java.lang.Throwable"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(java.lang.Object, java.lang.String)",
            "public void invokeDestroyMethods(java.lang.Object, java.lang.String) throws java.lang.Throwable"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.hasDestroyMethods()",
            "public boolean hasDestroyMethods()"
        ],
        [
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor()",
            "public org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.setRequiredAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setRequiredAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor()",
            "public org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.setInitAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setInitAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.setDestroyAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setDestroyAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(java.lang.Object, java.lang.String)",
            "public void postProcessBeforeDestruction(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.requiresDestruction(java.lang.Object)",
            "public boolean requiresDestruction(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer",
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer()",
            "public org.springframework.beans.factory.annotation.CustomAutowireConfigurer()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer.setCustomQualifierTypes(java.util.Set<?>)",
            "public void setCustomQualifierTypes(java.util.Set<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.CustomAutowireConfigurer.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.ParameterResolutionDelegate.isAutowirable(java.lang.reflect.Parameter, int)",
            "public static boolean isAutowirable(java.lang.reflect.Parameter, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.annotation.ParameterResolutionDelegate.resolveDependency(java.lang.reflect.Parameter, int, java.lang.Class<?>, org.springframework.beans.factory.config.AutowireCapableBeanFactory)",
            "public static java.lang.Object resolveDependency(java.lang.reflect.Parameter, int, java.lang.Class<?>, org.springframework.beans.factory.config.AutowireCapableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement(java.lang.reflect.Method)",
            "public org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.getIdentifier()",
            "public java.lang.String getIdentifier()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(java.lang.Object)",
            "public void invoke(java.lang.Object) throws java.lang.Throwable"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.factory.annotation.InjectionMetadata",
            "org.springframework.beans.factory.annotation.InjectionMetadata(java.lang.Class<?>, java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement>)",
            "public org.springframework.beans.factory.annotation.InjectionMetadata(java.lang.Class<?>, java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InjectionMetadata.checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public void checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InjectionMetadata.inject(java.lang.Object, java.lang.String, org.springframework.beans.PropertyValues)",
            "public void inject(java.lang.Object, java.lang.String, org.springframework.beans.PropertyValues) throws java.lang.Throwable"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InjectionMetadata.clear(org.springframework.beans.PropertyValues)",
            "public void clear(org.springframework.beans.PropertyValues)"
        ],
        [
            "org.springframework.beans.factory.annotation.InjectionMetadata",
            "org.springframework.beans.factory.annotation.InjectionMetadata.forElements(java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement>, java.lang.Class<?>)",
            "public static org.springframework.beans.factory.annotation.InjectionMetadata forElements(java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.InjectionMetadata.needsRefresh(org.springframework.beans.factory.annotation.InjectionMetadata, java.lang.Class<?>)",
            "public static boolean needsRefresh(org.springframework.beans.factory.annotation.InjectionMetadata, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$1.checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public void checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$1.invokeInitMethods(java.lang.Object, java.lang.String)",
            "public void invokeInitMethods(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$1.invokeDestroyMethods(java.lang.Object, java.lang.String)",
            "public void invokeDestroyMethods(java.lang.Object, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$1.hasDestroyMethods()",
            "public boolean hasDestroyMethods()"
        ],
        [
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver()",
            "public org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver()"
        ],
        [
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver(java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)",
            "public org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver(java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.addQualifierType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void addQualifierType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.setValueAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setValueAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.isRequired(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean isRequired(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public boolean hasQualifier(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)",
            "public java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor)"
        ],
        [
            "org.springframework.beans.factory.annotation.Autowire[]",
            "org.springframework.beans.factory.annotation.Autowire.values()",
            "public static org.springframework.beans.factory.annotation.Autowire[] values()"
        ],
        [
            "org.springframework.beans.factory.annotation.Autowire",
            "org.springframework.beans.factory.annotation.Autowire.valueOf(java.lang.String)",
            "public static org.springframework.beans.factory.annotation.Autowire valueOf(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.Autowire.value()",
            "public int value()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.annotation.Autowire.isAutowire()",
            "public boolean isAutowire()"
        ],
        [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor()",
            "public org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setAutowiredAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setAutowiredAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setAutowiredAnnotationTypes(java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)",
            "public void setAutowiredAnnotationTypes(java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setRequiredParameterName(java.lang.String)",
            "public void setRequiredParameterName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setRequiredParameterValue(boolean)",
            "public void setRequiredParameterValue(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resetBeanDefinition(java.lang.String)",
            "public void resetBeanDefinition(java.lang.String)"
        ],
        [
            "java.lang.reflect.Constructor<?>[]",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(java.lang.Class<?>, java.lang.String)",
            "public java.lang.reflect.Constructor<?>[] determineCandidateConstructors(java.lang.Class<?>, java.lang.String) throws org.springframework.beans.factory.BeanCreationException"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.processInjection(java.lang.Object)",
            "public void processInjection(java.lang.Object) throws org.springframework.beans.factory.BeanCreationException"
        ],
        [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$ShortcutDependencyDescriptor",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$ShortcutDependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.lang.Class<?>)",
            "public org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$ShortcutDependencyDescriptor(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.lang.Class<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$ShortcutDependencyDescriptor.resolveShortcut(org.springframework.beans.factory.BeanFactory)",
            "public java.lang.Object resolveShortcut(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition",
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition(java.lang.Class<?>)",
            "public org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition",
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition(org.springframework.core.type.AnnotationMetadata)",
            "public org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition",
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition(org.springframework.core.type.AnnotationMetadata, org.springframework.core.type.MethodMetadata)",
            "public org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition(org.springframework.core.type.AnnotationMetadata, org.springframework.core.type.MethodMetadata)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition.getMetadata()",
            "public final org.springframework.core.type.AnnotationMetadata getMetadata()"
        ],
        [
            "org.springframework.core.type.MethodMetadata",
            "org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition.getFactoryMethodMetadata()",
            "public final org.springframework.core.type.MethodMetadata getFactoryMethodMetadata()"
        ],
        [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor, java.lang.reflect.Method, boolean, java.beans.PropertyDescriptor)",
            "public org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor, java.lang.reflect.Method, boolean, java.beans.PropertyDescriptor)"
        ],
        [
            "org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver",
            "org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver()",
            "public org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver()"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanWiringInfo",
            "org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver.resolveWiringInfo(java.lang.Object)",
            "public org.springframework.beans.factory.wiring.BeanWiringInfo resolveWiringInfo(java.lang.Object)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.beans.factory.annotation.ParameterResolutionDelegate$1.getAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> T getAnnotation(java.lang.Class<T>)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.beans.factory.annotation.ParameterResolutionDelegate$1.getAnnotations()",
            "public java.lang.annotation.Annotation[] getAnnotations()"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.beans.factory.annotation.ParameterResolutionDelegate$1.getDeclaredAnnotations()",
            "public java.lang.annotation.Annotation[] getDeclaredAnnotations()"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InjectionMetadata$1.checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)",
            "public void checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InjectionMetadata$1.inject(java.lang.Object, java.lang.String, org.springframework.beans.PropertyValues)",
            "public void inject(java.lang.Object, java.lang.String, org.springframework.beans.PropertyValues)"
        ],
        [
            "void",
            "org.springframework.beans.factory.annotation.InjectionMetadata$1.clear(org.springframework.beans.PropertyValues)",
            "public void clear(org.springframework.beans.PropertyValues)"
        ],
        [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor, java.lang.reflect.Field, boolean)",
            "public org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor, java.lang.reflect.Field, boolean)"
        ],
        [
            "org.springframework.beans.factory.parsing.ParseState",
            "org.springframework.beans.factory.parsing.ParseState()",
            "public org.springframework.beans.factory.parsing.ParseState()"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ParseState.push(org.springframework.beans.factory.parsing.ParseState$Entry)",
            "public void push(org.springframework.beans.factory.parsing.ParseState$Entry)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ParseState.pop()",
            "public void pop()"
        ],
        [
            "org.springframework.beans.factory.parsing.ParseState$Entry",
            "org.springframework.beans.factory.parsing.ParseState.peek()",
            "public org.springframework.beans.factory.parsing.ParseState$Entry peek()"
        ],
        [
            "org.springframework.beans.factory.parsing.ParseState",
            "org.springframework.beans.factory.parsing.ParseState.snapshot()",
            "public org.springframework.beans.factory.parsing.ParseState snapshot()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.ParseState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.EmptyReaderEventListener",
            "org.springframework.beans.factory.parsing.EmptyReaderEventListener()",
            "public org.springframework.beans.factory.parsing.EmptyReaderEventListener()"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.EmptyReaderEventListener.defaultsRegistered(org.springframework.beans.factory.parsing.DefaultsDefinition)",
            "public void defaultsRegistered(org.springframework.beans.factory.parsing.DefaultsDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.EmptyReaderEventListener.componentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)",
            "public void componentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.EmptyReaderEventListener.aliasRegistered(org.springframework.beans.factory.parsing.AliasDefinition)",
            "public void aliasRegistered(org.springframework.beans.factory.parsing.AliasDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.EmptyReaderEventListener.importProcessed(org.springframework.beans.factory.parsing.ImportDefinition)",
            "public void importProcessed(org.springframework.beans.factory.parsing.ImportDefinition)"
        ],
        [
            "org.springframework.beans.factory.parsing.ConstructorArgumentEntry",
            "org.springframework.beans.factory.parsing.ConstructorArgumentEntry()",
            "public org.springframework.beans.factory.parsing.ConstructorArgumentEntry()"
        ],
        [
            "org.springframework.beans.factory.parsing.ConstructorArgumentEntry",
            "org.springframework.beans.factory.parsing.ConstructorArgumentEntry(int)",
            "public org.springframework.beans.factory.parsing.ConstructorArgumentEntry(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.ConstructorArgumentEntry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.PassThroughSourceExtractor",
            "org.springframework.beans.factory.parsing.PassThroughSourceExtractor()",
            "public org.springframework.beans.factory.parsing.PassThroughSourceExtractor()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.PassThroughSourceExtractor.extractSource(java.lang.Object, org.springframework.core.io.Resource)",
            "public java.lang.Object extractSource(java.lang.Object, org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.beans.factory.parsing.ImportDefinition",
            "org.springframework.beans.factory.parsing.ImportDefinition(java.lang.String)",
            "public org.springframework.beans.factory.parsing.ImportDefinition(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.parsing.ImportDefinition",
            "org.springframework.beans.factory.parsing.ImportDefinition(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.parsing.ImportDefinition(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.parsing.ImportDefinition",
            "org.springframework.beans.factory.parsing.ImportDefinition(java.lang.String, org.springframework.core.io.Resource[], java.lang.Object)",
            "public org.springframework.beans.factory.parsing.ImportDefinition(java.lang.String, org.springframework.core.io.Resource[], java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.ImportDefinition.getImportedResource()",
            "public final java.lang.String getImportedResource()"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.beans.factory.parsing.ImportDefinition.getActualResources()",
            "public final org.springframework.core.io.Resource[] getActualResources()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.ImportDefinition.getSource()",
            "public final java.lang.Object getSource()"
        ],
        [
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition",
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.parsing.CompositeComponentDefinition(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition.addNestedComponent(org.springframework.beans.factory.parsing.ComponentDefinition)",
            "public void addNestedComponent(org.springframework.beans.factory.parsing.ComponentDefinition)"
        ],
        [
            "org.springframework.beans.factory.parsing.ComponentDefinition[]",
            "org.springframework.beans.factory.parsing.CompositeComponentDefinition.getNestedComponents()",
            "public org.springframework.beans.factory.parsing.ComponentDefinition[] getNestedComponents()"
        ],
        [
            "org.springframework.beans.factory.parsing.PropertyEntry",
            "org.springframework.beans.factory.parsing.PropertyEntry(java.lang.String)",
            "public org.springframework.beans.factory.parsing.PropertyEntry(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.PropertyEntry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.BeanEntry",
            "org.springframework.beans.factory.parsing.BeanEntry(java.lang.String)",
            "public org.springframework.beans.factory.parsing.BeanEntry(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.BeanEntry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.BeanComponentDefinition",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition(org.springframework.beans.factory.config.BeanDefinition, java.lang.String)",
            "public org.springframework.beans.factory.parsing.BeanComponentDefinition(org.springframework.beans.factory.config.BeanDefinition, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.parsing.BeanComponentDefinition",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition(org.springframework.beans.factory.config.BeanDefinition, java.lang.String, java.lang.String[])",
            "public org.springframework.beans.factory.parsing.BeanComponentDefinition(org.springframework.beans.factory.config.BeanDefinition, java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.beans.factory.parsing.BeanComponentDefinition",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder)",
            "public org.springframework.beans.factory.parsing.BeanComponentDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition[]",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.getBeanDefinitions()",
            "public org.springframework.beans.factory.config.BeanDefinition[] getBeanDefinitions()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition[]",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.getInnerBeanDefinitions()",
            "public org.springframework.beans.factory.config.BeanDefinition[] getInnerBeanDefinitions()"
        ],
        [
            "org.springframework.beans.factory.config.BeanReference[]",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.getBeanReferences()",
            "public org.springframework.beans.factory.config.BeanReference[] getBeanReferences()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.parsing.BeanComponentDefinition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition",
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition()",
            "public org.springframework.beans.factory.parsing.AbstractComponentDefinition()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition[]",
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition.getBeanDefinitions()",
            "public org.springframework.beans.factory.config.BeanDefinition[] getBeanDefinitions()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition[]",
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition.getInnerBeanDefinitions()",
            "public org.springframework.beans.factory.config.BeanDefinition[] getInnerBeanDefinitions()"
        ],
        [
            "org.springframework.beans.factory.config.BeanReference[]",
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition.getBeanReferences()",
            "public org.springframework.beans.factory.config.BeanReference[] getBeanReferences()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.AbstractComponentDefinition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.AliasDefinition",
            "org.springframework.beans.factory.parsing.AliasDefinition(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.parsing.AliasDefinition(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.parsing.AliasDefinition",
            "org.springframework.beans.factory.parsing.AliasDefinition(java.lang.String, java.lang.String, java.lang.Object)",
            "public org.springframework.beans.factory.parsing.AliasDefinition(java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.AliasDefinition.getBeanName()",
            "public final java.lang.String getBeanName()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.AliasDefinition.getAlias()",
            "public final java.lang.String getAlias()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.AliasDefinition.getSource()",
            "public final java.lang.Object getSource()"
        ],
        [
            "org.springframework.beans.factory.parsing.QualifierEntry",
            "org.springframework.beans.factory.parsing.QualifierEntry(java.lang.String)",
            "public org.springframework.beans.factory.parsing.QualifierEntry(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.QualifierEntry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.ReaderContext",
            "org.springframework.beans.factory.parsing.ReaderContext(org.springframework.core.io.Resource, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.beans.factory.parsing.ReaderEventListener, org.springframework.beans.factory.parsing.SourceExtractor)",
            "public org.springframework.beans.factory.parsing.ReaderContext(org.springframework.core.io.Resource, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.beans.factory.parsing.ReaderEventListener, org.springframework.beans.factory.parsing.SourceExtractor)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.beans.factory.parsing.ReaderContext.getResource()",
            "public final org.springframework.core.io.Resource getResource()"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fatal(java.lang.String, java.lang.Object)",
            "public void fatal(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fatal(java.lang.String, java.lang.Object, java.lang.Throwable)",
            "public void fatal(java.lang.String, java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fatal(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState)",
            "public void fatal(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fatal(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)",
            "public void fatal(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.error(java.lang.String, java.lang.Object)",
            "public void error(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.error(java.lang.String, java.lang.Object, java.lang.Throwable)",
            "public void error(java.lang.String, java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.error(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState)",
            "public void error(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.error(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)",
            "public void error(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.warning(java.lang.String, java.lang.Object)",
            "public void warning(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.warning(java.lang.String, java.lang.Object, java.lang.Throwable)",
            "public void warning(java.lang.String, java.lang.Object, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.warning(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState)",
            "public void warning(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.warning(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)",
            "public void warning(java.lang.String, java.lang.Object, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fireDefaultsRegistered(org.springframework.beans.factory.parsing.DefaultsDefinition)",
            "public void fireDefaultsRegistered(org.springframework.beans.factory.parsing.DefaultsDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fireComponentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)",
            "public void fireComponentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fireAliasRegistered(java.lang.String, java.lang.String, java.lang.Object)",
            "public void fireAliasRegistered(java.lang.String, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fireImportProcessed(java.lang.String, java.lang.Object)",
            "public void fireImportProcessed(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.ReaderContext.fireImportProcessed(java.lang.String, org.springframework.core.io.Resource[], java.lang.Object)",
            "public void fireImportProcessed(java.lang.String, org.springframework.core.io.Resource[], java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.parsing.SourceExtractor",
            "org.springframework.beans.factory.parsing.ReaderContext.getSourceExtractor()",
            "public org.springframework.beans.factory.parsing.SourceExtractor getSourceExtractor()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.ReaderContext.extractSource(java.lang.Object)",
            "public java.lang.Object extractSource(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.parsing.Location",
            "org.springframework.beans.factory.parsing.Location(org.springframework.core.io.Resource)",
            "public org.springframework.beans.factory.parsing.Location(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.beans.factory.parsing.Location",
            "org.springframework.beans.factory.parsing.Location(org.springframework.core.io.Resource, java.lang.Object)",
            "public org.springframework.beans.factory.parsing.Location(org.springframework.core.io.Resource, java.lang.Object)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.beans.factory.parsing.Location.getResource()",
            "public org.springframework.core.io.Resource getResource()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.Location.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.beans.factory.parsing.Problem",
            "org.springframework.beans.factory.parsing.Problem(java.lang.String, org.springframework.beans.factory.parsing.Location)",
            "public org.springframework.beans.factory.parsing.Problem(java.lang.String, org.springframework.beans.factory.parsing.Location)"
        ],
        [
            "org.springframework.beans.factory.parsing.Problem",
            "org.springframework.beans.factory.parsing.Problem(java.lang.String, org.springframework.beans.factory.parsing.Location, org.springframework.beans.factory.parsing.ParseState)",
            "public org.springframework.beans.factory.parsing.Problem(java.lang.String, org.springframework.beans.factory.parsing.Location, org.springframework.beans.factory.parsing.ParseState)"
        ],
        [
            "org.springframework.beans.factory.parsing.Problem",
            "org.springframework.beans.factory.parsing.Problem(java.lang.String, org.springframework.beans.factory.parsing.Location, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)",
            "public org.springframework.beans.factory.parsing.Problem(java.lang.String, org.springframework.beans.factory.parsing.Location, org.springframework.beans.factory.parsing.ParseState, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.Problem.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "org.springframework.beans.factory.parsing.Location",
            "org.springframework.beans.factory.parsing.Problem.getLocation()",
            "public org.springframework.beans.factory.parsing.Location getLocation()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.Problem.getResourceDescription()",
            "public java.lang.String getResourceDescription()"
        ],
        [
            "org.springframework.beans.factory.parsing.ParseState",
            "org.springframework.beans.factory.parsing.Problem.getParseState()",
            "public org.springframework.beans.factory.parsing.ParseState getParseState()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.beans.factory.parsing.Problem.getRootCause()",
            "public java.lang.Throwable getRootCause()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.parsing.Problem.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.factory.parsing.NullSourceExtractor",
            "org.springframework.beans.factory.parsing.NullSourceExtractor()",
            "public org.springframework.beans.factory.parsing.NullSourceExtractor()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.factory.parsing.NullSourceExtractor.extractSource(java.lang.Object, org.springframework.core.io.Resource)",
            "public java.lang.Object extractSource(java.lang.Object, org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.beans.factory.parsing.FailFastProblemReporter",
            "org.springframework.beans.factory.parsing.FailFastProblemReporter()",
            "public org.springframework.beans.factory.parsing.FailFastProblemReporter()"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.FailFastProblemReporter.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.FailFastProblemReporter.fatal(org.springframework.beans.factory.parsing.Problem)",
            "public void fatal(org.springframework.beans.factory.parsing.Problem)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.FailFastProblemReporter.error(org.springframework.beans.factory.parsing.Problem)",
            "public void error(org.springframework.beans.factory.parsing.Problem)"
        ],
        [
            "void",
            "org.springframework.beans.factory.parsing.FailFastProblemReporter.warning(org.springframework.beans.factory.parsing.Problem)",
            "public void warning(org.springframework.beans.factory.parsing.Problem)"
        ],
        [
            "org.springframework.beans.factory.parsing.BeanDefinitionParsingException",
            "org.springframework.beans.factory.parsing.BeanDefinitionParsingException(org.springframework.beans.factory.parsing.Problem)",
            "public org.springframework.beans.factory.parsing.BeanDefinitionParsingException(org.springframework.beans.factory.parsing.Problem)"
        ],
        [
            "org.springframework.beans.factory.BeanCurrentlyInCreationException",
            "org.springframework.beans.factory.BeanCurrentlyInCreationException(java.lang.String)",
            "public org.springframework.beans.factory.BeanCurrentlyInCreationException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanCurrentlyInCreationException",
            "org.springframework.beans.factory.BeanCurrentlyInCreationException(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.BeanCurrentlyInCreationException(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.UnsatisfiedDependencyException",
            "org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.UnsatisfiedDependencyException",
            "org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, java.lang.String, org.springframework.beans.BeansException)",
            "public org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, java.lang.String, org.springframework.beans.BeansException)"
        ],
        [
            "org.springframework.beans.factory.UnsatisfiedDependencyException",
            "org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, org.springframework.beans.factory.InjectionPoint, java.lang.String)",
            "public org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, org.springframework.beans.factory.InjectionPoint, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.UnsatisfiedDependencyException",
            "org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, org.springframework.beans.factory.InjectionPoint, org.springframework.beans.BeansException)",
            "public org.springframework.beans.factory.UnsatisfiedDependencyException(java.lang.String, java.lang.String, org.springframework.beans.factory.InjectionPoint, org.springframework.beans.BeansException)"
        ],
        [
            "org.springframework.beans.factory.InjectionPoint",
            "org.springframework.beans.factory.UnsatisfiedDependencyException.getInjectionPoint()",
            "public org.springframework.beans.factory.InjectionPoint getInjectionPoint()"
        ],
        [
            "org.springframework.beans.factory.BeanIsAbstractException",
            "org.springframework.beans.factory.BeanIsAbstractException(java.lang.String)",
            "public org.springframework.beans.factory.BeanIsAbstractException(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.beans.factory.FactoryBean.boolean isSingleton()",
            "public default boolean isSingleton()"
        ],
        [
            "org.springframework.beans.factory.BeanDefinitionStoreException",
            "org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String)",
            "public org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanDefinitionStoreException",
            "org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.BeanDefinitionStoreException",
            "org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanDefinitionStoreException",
            "org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.factory.BeanDefinitionStoreException",
            "org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.BeanDefinitionStoreException",
            "org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.factory.BeanDefinitionStoreException(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanDefinitionStoreException.getResourceDescription()",
            "public java.lang.String getResourceDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.BeanDefinitionStoreException.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanWiringInfo",
            "org.springframework.beans.factory.wiring.BeanWiringInfo()",
            "public org.springframework.beans.factory.wiring.BeanWiringInfo()"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanWiringInfo",
            "org.springframework.beans.factory.wiring.BeanWiringInfo(java.lang.String)",
            "public org.springframework.beans.factory.wiring.BeanWiringInfo(java.lang.String)"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanWiringInfo",
            "org.springframework.beans.factory.wiring.BeanWiringInfo(java.lang.String, boolean)",
            "public org.springframework.beans.factory.wiring.BeanWiringInfo(java.lang.String, boolean)"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanWiringInfo",
            "org.springframework.beans.factory.wiring.BeanWiringInfo(int, boolean)",
            "public org.springframework.beans.factory.wiring.BeanWiringInfo(int, boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.wiring.BeanWiringInfo.indicatesAutowiring()",
            "public boolean indicatesAutowiring()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.factory.wiring.BeanWiringInfo.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.wiring.BeanWiringInfo.isDefaultBeanName()",
            "public boolean isDefaultBeanName()"
        ],
        [
            "int",
            "org.springframework.beans.factory.wiring.BeanWiringInfo.getAutowireMode()",
            "public int getAutowireMode()"
        ],
        [
            "boolean",
            "org.springframework.beans.factory.wiring.BeanWiringInfo.getDependencyCheck()",
            "public boolean getDependencyCheck()"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport",
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport()",
            "public org.springframework.beans.factory.wiring.BeanConfigurerSupport()"
        ],
        [
            "void",
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport.setBeanWiringInfoResolver(org.springframework.beans.factory.wiring.BeanWiringInfoResolver)",
            "public void setBeanWiringInfoResolver(org.springframework.beans.factory.wiring.BeanWiringInfoResolver)"
        ],
        [
            "void",
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(java.lang.Object)",
            "public void configureBean(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver",
            "org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver()",
            "public org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver()"
        ],
        [
            "org.springframework.beans.factory.wiring.BeanWiringInfo",
            "org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver.resolveWiringInfo(java.lang.Object)",
            "public org.springframework.beans.factory.wiring.BeanWiringInfo resolveWiringInfo(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.CachedIntrospectionResults.acceptClassLoader(java.lang.ClassLoader)",
            "public static void acceptClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.CachedIntrospectionResults.clearClassLoader(java.lang.ClassLoader)",
            "public static void clearClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.util.Iterator<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.PropertyValues.iterator()",
            "public default java.util.Iterator<org.springframework.beans.PropertyValue> iterator()"
        ],
        [
            "java.util.Spliterator<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.PropertyValues.spliterator()",
            "public default java.util.Spliterator<org.springframework.beans.PropertyValue> spliterator()"
        ],
        [
            "java.util.stream.Stream<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.PropertyValues.stream()",
            "public default java.util.stream.Stream<org.springframework.beans.PropertyValue> stream()"
        ],
        [
            "org.springframework.beans.SimpleTypeConverter",
            "org.springframework.beans.SimpleTypeConverter()",
            "public org.springframework.beans.SimpleTypeConverter()"
        ],
        [
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor(java.beans.IndexedPropertyDescriptor)",
            "public org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor(java.beans.IndexedPropertyDescriptor) throws java.beans.IntrospectionException"
        ],
        [
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method)",
            "public org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method) throws java.beans.IntrospectionException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getReadMethod()",
            "public java.lang.reflect.Method getReadMethod()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.setReadMethod(java.lang.reflect.Method)",
            "public void setReadMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getWriteMethod()",
            "public java.lang.reflect.Method getWriteMethod()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.setWriteMethod(java.lang.reflect.Method)",
            "public void setWriteMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getPropertyType()",
            "public java.lang.Class<?> getPropertyType()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getIndexedReadMethod()",
            "public java.lang.reflect.Method getIndexedReadMethod()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.setIndexedReadMethod(java.lang.reflect.Method)",
            "public void setIndexedReadMethod(java.lang.reflect.Method) throws java.beans.IntrospectionException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getIndexedWriteMethod()",
            "public java.lang.reflect.Method getIndexedWriteMethod()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.setIndexedWriteMethod(java.lang.reflect.Method)",
            "public void setIndexedWriteMethod(java.lang.reflect.Method) throws java.beans.IntrospectionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getIndexedPropertyType()",
            "public java.lang.Class<?> getIndexedPropertyType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.getPropertyEditorClass()",
            "public java.lang.Class<?> getPropertyEditorClass()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.setPropertyEditorClass(java.lang.Class<?>)",
            "public void setPropertyEditorClass(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.ExtendedBeanInfo$SimpleIndexedPropertyDescriptor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T> java.lang.reflect.Constructor<T>",
            "org.springframework.beans.BeanUtils$KotlinDelegate.findPrimaryConstructor(java.lang.Class<T>)",
            "public static <T> java.lang.reflect.Constructor<T> findPrimaryConstructor(java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.beans.BeanUtils$KotlinDelegate.instantiateClass(java.lang.reflect.Constructor<T>, java.lang.Object...)",
            "public static <T> T instantiateClass(java.lang.reflect.Constructor<T>, java.lang.Object...) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"
        ],
        [
            "void",
            "org.springframework.beans.AbstractNestablePropertyAccessor.setAutoGrowCollectionLimit(int)",
            "public void setAutoGrowCollectionLimit(int)"
        ],
        [
            "int",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getAutoGrowCollectionLimit()",
            "public int getAutoGrowCollectionLimit()"
        ],
        [
            "void",
            "org.springframework.beans.AbstractNestablePropertyAccessor.setWrappedInstance(java.lang.Object)",
            "public void setWrappedInstance(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.AbstractNestablePropertyAccessor.setWrappedInstance(java.lang.Object, java.lang.String, java.lang.Object)",
            "public void setWrappedInstance(java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getWrappedInstance()",
            "public final java.lang.Object getWrappedInstance()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getWrappedClass()",
            "public final java.lang.Class<?> getWrappedClass()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getNestedPath()",
            "public final java.lang.String getNestedPath()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getRootInstance()",
            "public final java.lang.Object getRootInstance()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getRootClass()",
            "public final java.lang.Class<?> getRootClass()"
        ],
        [
            "void",
            "org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(java.lang.String, java.lang.Object)",
            "public void setPropertyValue(java.lang.String, java.lang.Object) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(org.springframework.beans.PropertyValue)",
            "public void setPropertyValue(org.springframework.beans.PropertyValue) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyType(java.lang.String)",
            "public java.lang.Class<?> getPropertyType(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyTypeDescriptor(java.lang.String)",
            "public org.springframework.core.convert.TypeDescriptor getPropertyTypeDescriptor(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "boolean",
            "org.springframework.beans.AbstractNestablePropertyAccessor.isReadableProperty(java.lang.String)",
            "public boolean isReadableProperty(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.AbstractNestablePropertyAccessor.isWritableProperty(java.lang.String)",
            "public boolean isWritableProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(java.lang.String)",
            "public java.lang.Object getPropertyValue(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.AbstractNestablePropertyAccessor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.NullValueInNestedPathException",
            "org.springframework.beans.NullValueInNestedPathException(java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.NullValueInNestedPathException(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.NullValueInNestedPathException",
            "org.springframework.beans.NullValueInNestedPathException(java.lang.Class<?>, java.lang.String, java.lang.String)",
            "public org.springframework.beans.NullValueInNestedPathException(java.lang.Class<?>, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.NullValueInNestedPathException",
            "org.springframework.beans.NullValueInNestedPathException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.NullValueInNestedPathException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.InvalidPropertyException",
            "org.springframework.beans.InvalidPropertyException(java.lang.Class<?>, java.lang.String, java.lang.String)",
            "public org.springframework.beans.InvalidPropertyException(java.lang.Class<?>, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.InvalidPropertyException",
            "org.springframework.beans.InvalidPropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.InvalidPropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.InvalidPropertyException.getBeanClass()",
            "public java.lang.Class<?> getBeanClass()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.InvalidPropertyException.getPropertyName()",
            "public java.lang.String getPropertyName()"
        ],
        [
            "org.springframework.beans.PropertyAccessorUtils",
            "org.springframework.beans.PropertyAccessorUtils()",
            "public org.springframework.beans.PropertyAccessorUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyAccessorUtils.getPropertyName(java.lang.String)",
            "public static java.lang.String getPropertyName(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyAccessorUtils.isNestedOrIndexedProperty(java.lang.String)",
            "public static boolean isNestedOrIndexedProperty(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(java.lang.String)",
            "public static int getFirstNestedPropertySeparatorIndex(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.PropertyAccessorUtils.getLastNestedPropertySeparatorIndex(java.lang.String)",
            "public static int getLastNestedPropertySeparatorIndex(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyAccessorUtils.matchesProperty(java.lang.String, java.lang.String)",
            "public static boolean matchesProperty(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyAccessorUtils.canonicalPropertyName(java.lang.String)",
            "public static java.lang.String canonicalPropertyName(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.PropertyAccessorUtils.canonicalPropertyNames(java.lang.String[])",
            "public static java.lang.String[] canonicalPropertyNames(java.lang.String[])"
        ],
        [
            "org.springframework.beans.PropertyAccessException",
            "org.springframework.beans.PropertyAccessException(java.beans.PropertyChangeEvent, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.PropertyAccessException(java.beans.PropertyChangeEvent, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.PropertyAccessException",
            "org.springframework.beans.PropertyAccessException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.PropertyAccessException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.beans.PropertyChangeEvent",
            "org.springframework.beans.PropertyAccessException.getPropertyChangeEvent()",
            "public java.beans.PropertyChangeEvent getPropertyChangeEvent()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyAccessException.getPropertyName()",
            "public java.lang.String getPropertyName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.PropertyAccessException.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler(java.lang.Class<?>, boolean, boolean)",
            "public org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler(java.lang.Class<?>, boolean, boolean)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler.getPropertyType()",
            "public java.lang.Class<?> getPropertyType()"
        ],
        [
            "boolean",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler.isWritable()",
            "public boolean isWritable()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler.getMapKeyType(int)",
            "public java.lang.Class<?> getMapKeyType(int)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler.getMapValueType(int)",
            "public java.lang.Class<?> getMapValueType(int)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler.getCollectionType(int)",
            "public java.lang.Class<?> getCollectionType(int)"
        ],
        [
            "org.springframework.beans.DirectFieldAccessor",
            "org.springframework.beans.DirectFieldAccessor(java.lang.Object)",
            "public org.springframework.beans.DirectFieldAccessor(java.lang.Object)"
        ],
        [
            "org.springframework.beans.PropertyBatchUpdateException",
            "org.springframework.beans.PropertyBatchUpdateException(org.springframework.beans.PropertyAccessException[])",
            "public org.springframework.beans.PropertyBatchUpdateException(org.springframework.beans.PropertyAccessException[])"
        ],
        [
            "int",
            "org.springframework.beans.PropertyBatchUpdateException.getExceptionCount()",
            "public final int getExceptionCount()"
        ],
        [
            "org.springframework.beans.PropertyAccessException[]",
            "org.springframework.beans.PropertyBatchUpdateException.getPropertyAccessExceptions()",
            "public final org.springframework.beans.PropertyAccessException[] getPropertyAccessExceptions()"
        ],
        [
            "org.springframework.beans.PropertyAccessException",
            "org.springframework.beans.PropertyBatchUpdateException.getPropertyAccessException(java.lang.String)",
            "public org.springframework.beans.PropertyAccessException getPropertyAccessException(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyBatchUpdateException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyBatchUpdateException.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.beans.PropertyBatchUpdateException.printStackTrace(java.io.PrintStream)",
            "public void printStackTrace(java.io.PrintStream)"
        ],
        [
            "void",
            "org.springframework.beans.PropertyBatchUpdateException.printStackTrace(java.io.PrintWriter)",
            "public void printStackTrace(java.io.PrintWriter)"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyBatchUpdateException.contains(java.lang.Class<?>)",
            "public boolean contains(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.support.ResourceEditorRegistrar",
            "org.springframework.beans.support.ResourceEditorRegistrar(org.springframework.core.io.ResourceLoader, org.springframework.core.env.PropertyResolver)",
            "public org.springframework.beans.support.ResourceEditorRegistrar(org.springframework.core.io.ResourceLoader, org.springframework.core.env.PropertyResolver)"
        ],
        [
            "void",
            "org.springframework.beans.support.ResourceEditorRegistrar.registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)",
            "public void registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)"
        ],
        [
            "org.springframework.beans.support.ArgumentConvertingMethodInvoker",
            "org.springframework.beans.support.ArgumentConvertingMethodInvoker()",
            "public org.springframework.beans.support.ArgumentConvertingMethodInvoker()"
        ],
        [
            "void",
            "org.springframework.beans.support.ArgumentConvertingMethodInvoker.setTypeConverter(org.springframework.beans.TypeConverter)",
            "public void setTypeConverter(org.springframework.beans.TypeConverter)"
        ],
        [
            "org.springframework.beans.TypeConverter",
            "org.springframework.beans.support.ArgumentConvertingMethodInvoker.getTypeConverter()",
            "public org.springframework.beans.TypeConverter getTypeConverter()"
        ],
        [
            "void",
            "org.springframework.beans.support.ArgumentConvertingMethodInvoker.registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor)",
            "public void registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor)"
        ],
        [
            "org.springframework.beans.support.MutableSortDefinition",
            "org.springframework.beans.support.MutableSortDefinition()",
            "public org.springframework.beans.support.MutableSortDefinition()"
        ],
        [
            "org.springframework.beans.support.MutableSortDefinition",
            "org.springframework.beans.support.MutableSortDefinition(org.springframework.beans.support.SortDefinition)",
            "public org.springframework.beans.support.MutableSortDefinition(org.springframework.beans.support.SortDefinition)"
        ],
        [
            "org.springframework.beans.support.MutableSortDefinition",
            "org.springframework.beans.support.MutableSortDefinition(java.lang.String, boolean, boolean)",
            "public org.springframework.beans.support.MutableSortDefinition(java.lang.String, boolean, boolean)"
        ],
        [
            "org.springframework.beans.support.MutableSortDefinition",
            "org.springframework.beans.support.MutableSortDefinition(boolean)",
            "public org.springframework.beans.support.MutableSortDefinition(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.support.MutableSortDefinition.setProperty(java.lang.String)",
            "public void setProperty(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.support.MutableSortDefinition.getProperty()",
            "public java.lang.String getProperty()"
        ],
        [
            "void",
            "org.springframework.beans.support.MutableSortDefinition.setIgnoreCase(boolean)",
            "public void setIgnoreCase(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.support.MutableSortDefinition.isIgnoreCase()",
            "public boolean isIgnoreCase()"
        ],
        [
            "void",
            "org.springframework.beans.support.MutableSortDefinition.setAscending(boolean)",
            "public void setAscending(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.support.MutableSortDefinition.isAscending()",
            "public boolean isAscending()"
        ],
        [
            "void",
            "org.springframework.beans.support.MutableSortDefinition.setToggleAscendingOnProperty(boolean)",
            "public void setToggleAscendingOnProperty(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.support.MutableSortDefinition.isToggleAscendingOnProperty()",
            "public boolean isToggleAscendingOnProperty()"
        ],
        [
            "boolean",
            "org.springframework.beans.support.MutableSortDefinition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.support.MutableSortDefinition.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.support.PropertyComparator",
            "org.springframework.beans.support.PropertyComparator(org.springframework.beans.support.SortDefinition)",
            "public org.springframework.beans.support.PropertyComparator(org.springframework.beans.support.SortDefinition)"
        ],
        [
            "org.springframework.beans.support.PropertyComparator",
            "org.springframework.beans.support.PropertyComparator(java.lang.String, boolean, boolean)",
            "public org.springframework.beans.support.PropertyComparator(java.lang.String, boolean, boolean)"
        ],
        [
            "org.springframework.beans.support.SortDefinition",
            "org.springframework.beans.support.PropertyComparator.getSortDefinition()",
            "public final org.springframework.beans.support.SortDefinition getSortDefinition()"
        ],
        [
            "int",
            "org.springframework.beans.support.PropertyComparator.compare(T, T)",
            "public int compare(T, T)"
        ],
        [
            "void",
            "org.springframework.beans.support.PropertyComparator.sort(java.util.List<?>, org.springframework.beans.support.SortDefinition)",
            "public static void sort(java.util.List<?>, org.springframework.beans.support.SortDefinition) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.support.PropertyComparator.sort(java.lang.Object[], org.springframework.beans.support.SortDefinition)",
            "public static void sort(java.lang.Object[], org.springframework.beans.support.SortDefinition) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.support.PagedListHolder",
            "org.springframework.beans.support.PagedListHolder()",
            "public org.springframework.beans.support.PagedListHolder()"
        ],
        [
            "org.springframework.beans.support.PagedListHolder",
            "org.springframework.beans.support.PagedListHolder(java.util.List<E>)",
            "public org.springframework.beans.support.PagedListHolder(java.util.List<E>)"
        ],
        [
            "org.springframework.beans.support.PagedListHolder",
            "org.springframework.beans.support.PagedListHolder(java.util.List<E>, org.springframework.beans.support.SortDefinition)",
            "public org.springframework.beans.support.PagedListHolder(java.util.List<E>, org.springframework.beans.support.SortDefinition)"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.setSource(java.util.List<E>)",
            "public void setSource(java.util.List<E>)"
        ],
        [
            "java.util.List<E>",
            "org.springframework.beans.support.PagedListHolder.getSource()",
            "public java.util.List<E> getSource()"
        ],
        [
            "java.util.Date",
            "org.springframework.beans.support.PagedListHolder.getRefreshDate()",
            "public java.util.Date getRefreshDate()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.setSort(org.springframework.beans.support.SortDefinition)",
            "public void setSort(org.springframework.beans.support.SortDefinition)"
        ],
        [
            "org.springframework.beans.support.SortDefinition",
            "org.springframework.beans.support.PagedListHolder.getSort()",
            "public org.springframework.beans.support.SortDefinition getSort()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.setPageSize(int)",
            "public void setPageSize(int)"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getPageSize()",
            "public int getPageSize()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.setPage(int)",
            "public void setPage(int)"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getPage()",
            "public int getPage()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.setMaxLinkedPages(int)",
            "public void setMaxLinkedPages(int)"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getMaxLinkedPages()",
            "public int getMaxLinkedPages()"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getPageCount()",
            "public int getPageCount()"
        ],
        [
            "boolean",
            "org.springframework.beans.support.PagedListHolder.isFirstPage()",
            "public boolean isFirstPage()"
        ],
        [
            "boolean",
            "org.springframework.beans.support.PagedListHolder.isLastPage()",
            "public boolean isLastPage()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.previousPage()",
            "public void previousPage()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.nextPage()",
            "public void nextPage()"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getNrOfElements()",
            "public int getNrOfElements()"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getFirstElementOnPage()",
            "public int getFirstElementOnPage()"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getLastElementOnPage()",
            "public int getLastElementOnPage()"
        ],
        [
            "java.util.List<E>",
            "org.springframework.beans.support.PagedListHolder.getPageList()",
            "public java.util.List<E> getPageList()"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getFirstLinkedPage()",
            "public int getFirstLinkedPage()"
        ],
        [
            "int",
            "org.springframework.beans.support.PagedListHolder.getLastLinkedPage()",
            "public int getLastLinkedPage()"
        ],
        [
            "void",
            "org.springframework.beans.support.PagedListHolder.resort()",
            "public void resort()"
        ],
        [
            "org.springframework.beans.ExtendedBeanInfo",
            "org.springframework.beans.ExtendedBeanInfo(java.beans.BeanInfo)",
            "public org.springframework.beans.ExtendedBeanInfo(java.beans.BeanInfo)"
        ],
        [
            "boolean",
            "org.springframework.beans.ExtendedBeanInfo.isCandidateWriteMethod(java.lang.reflect.Method)",
            "public static boolean isCandidateWriteMethod(java.lang.reflect.Method)"
        ],
        [
            "java.beans.PropertyDescriptor[]",
            "org.springframework.beans.ExtendedBeanInfo.getPropertyDescriptors()",
            "public java.beans.PropertyDescriptor[] getPropertyDescriptors()"
        ],
        [
            "java.beans.BeanInfo[]",
            "org.springframework.beans.ExtendedBeanInfo.getAdditionalBeanInfo()",
            "public java.beans.BeanInfo[] getAdditionalBeanInfo()"
        ],
        [
            "java.beans.BeanDescriptor",
            "org.springframework.beans.ExtendedBeanInfo.getBeanDescriptor()",
            "public java.beans.BeanDescriptor getBeanDescriptor()"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfo.getDefaultEventIndex()",
            "public int getDefaultEventIndex()"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfo.getDefaultPropertyIndex()",
            "public int getDefaultPropertyIndex()"
        ],
        [
            "java.beans.EventSetDescriptor[]",
            "org.springframework.beans.ExtendedBeanInfo.getEventSetDescriptors()",
            "public java.beans.EventSetDescriptor[] getEventSetDescriptors()"
        ],
        [
            "java.awt.Image",
            "org.springframework.beans.ExtendedBeanInfo.getIcon(int)",
            "public java.awt.Image getIcon(int)"
        ],
        [
            "java.beans.MethodDescriptor[]",
            "org.springframework.beans.ExtendedBeanInfo.getMethodDescriptors()",
            "public java.beans.MethodDescriptor[] getMethodDescriptors()"
        ],
        [
            "org.springframework.beans.NotReadablePropertyException",
            "org.springframework.beans.NotReadablePropertyException(java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.NotReadablePropertyException(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.NotReadablePropertyException",
            "org.springframework.beans.NotReadablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String)",
            "public org.springframework.beans.NotReadablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.beans.NotReadablePropertyException",
            "org.springframework.beans.NotReadablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.NotReadablePropertyException(java.lang.Class<?>, java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.PropertyValuesEditor",
            "org.springframework.beans.PropertyValuesEditor()",
            "public org.springframework.beans.PropertyValuesEditor()"
        ],
        [
            "void",
            "org.springframework.beans.PropertyValuesEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.beans.annotation.AnnotationBeanUtils",
            "org.springframework.beans.annotation.AnnotationBeanUtils()",
            "public org.springframework.beans.annotation.AnnotationBeanUtils()"
        ],
        [
            "void",
            "org.springframework.beans.annotation.AnnotationBeanUtils.copyPropertiesToBean(java.lang.annotation.Annotation, java.lang.Object, java.lang.String...)",
            "public static void copyPropertiesToBean(java.lang.annotation.Annotation, java.lang.Object, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.beans.annotation.AnnotationBeanUtils.copyPropertiesToBean(java.lang.annotation.Annotation, java.lang.Object, org.springframework.util.StringValueResolver, java.lang.String...)",
            "public static void copyPropertiesToBean(java.lang.annotation.Annotation, java.lang.Object, org.springframework.util.StringValueResolver, java.lang.String...)"
        ],
        [
            "org.springframework.beans.BeanMetadataAttribute",
            "org.springframework.beans.BeanMetadataAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.BeanMetadataAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.BeanMetadataAttribute.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanMetadataAttribute.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "void",
            "org.springframework.beans.BeanMetadataAttribute.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanMetadataAttribute.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "org.springframework.beans.BeanMetadataAttribute.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.BeanMetadataAttribute.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.BeanMetadataAttribute.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyTokenHolder",
            "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyTokenHolder(java.lang.String)",
            "public org.springframework.beans.AbstractNestablePropertyAccessor$PropertyTokenHolder(java.lang.String)"
        ],
        [
            "org.springframework.beans.BeansException",
            "org.springframework.beans.BeansException(java.lang.String)",
            "public org.springframework.beans.BeansException(java.lang.String)"
        ],
        [
            "org.springframework.beans.BeansException",
            "org.springframework.beans.BeansException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.BeansException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor(java.lang.Class<?>, java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.Class<?>)",
            "public org.springframework.beans.GenericTypeAwarePropertyDescriptor(java.lang.Class<?>, java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.Class<?>) throws java.beans.IntrospectionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getBeanClass()",
            "public java.lang.Class<?> getBeanClass()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getReadMethod()",
            "public java.lang.reflect.Method getReadMethod()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getWriteMethod()",
            "public java.lang.reflect.Method getWriteMethod()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getWriteMethodForActualAccess()",
            "public java.lang.reflect.Method getWriteMethodForActualAccess()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getWriteMethodParameter()",
            "public org.springframework.core.MethodParameter getWriteMethodParameter()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType()",
            "public java.lang.Class<?> getPropertyType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyEditorClass()",
            "public java.lang.Class<?> getPropertyEditorClass()"
        ],
        [
            "boolean",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.GenericTypeAwarePropertyDescriptor.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.beans.BeanWrapperImpl",
            "org.springframework.beans.BeanWrapperImpl()",
            "public org.springframework.beans.BeanWrapperImpl()"
        ],
        [
            "org.springframework.beans.BeanWrapperImpl",
            "org.springframework.beans.BeanWrapperImpl(boolean)",
            "public org.springframework.beans.BeanWrapperImpl(boolean)"
        ],
        [
            "org.springframework.beans.BeanWrapperImpl",
            "org.springframework.beans.BeanWrapperImpl(java.lang.Object)",
            "public org.springframework.beans.BeanWrapperImpl(java.lang.Object)"
        ],
        [
            "org.springframework.beans.BeanWrapperImpl",
            "org.springframework.beans.BeanWrapperImpl(java.lang.Class<?>)",
            "public org.springframework.beans.BeanWrapperImpl(java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.BeanWrapperImpl",
            "org.springframework.beans.BeanWrapperImpl(java.lang.Object, java.lang.String, java.lang.Object)",
            "public org.springframework.beans.BeanWrapperImpl(java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.BeanWrapperImpl.setBeanInstance(java.lang.Object)",
            "public void setBeanInstance(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.BeanWrapperImpl.setWrappedInstance(java.lang.Object, java.lang.String, java.lang.Object)",
            "public void setWrappedInstance(java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.BeanWrapperImpl.setSecurityContext(java.security.AccessControlContext)",
            "public void setSecurityContext(java.security.AccessControlContext)"
        ],
        [
            "java.security.AccessControlContext",
            "org.springframework.beans.BeanWrapperImpl.getSecurityContext()",
            "public java.security.AccessControlContext getSecurityContext()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanWrapperImpl.convertForProperty(java.lang.Object, java.lang.String)",
            "public java.lang.Object convertForProperty(java.lang.Object, java.lang.String) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "java.beans.PropertyDescriptor[]",
            "org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors()",
            "public java.beans.PropertyDescriptor[] getPropertyDescriptors()"
        ],
        [
            "java.beans.PropertyDescriptor",
            "org.springframework.beans.BeanWrapperImpl.getPropertyDescriptor(java.lang.String)",
            "public java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String) throws org.springframework.beans.InvalidPropertyException"
        ],
        [
            "org.springframework.beans.AbstractPropertyAccessor",
            "org.springframework.beans.AbstractPropertyAccessor()",
            "public org.springframework.beans.AbstractPropertyAccessor()"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setExtractOldValueForEditor(boolean)",
            "public void setExtractOldValueForEditor(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.AbstractPropertyAccessor.isExtractOldValueForEditor()",
            "public boolean isExtractOldValueForEditor()"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setAutoGrowNestedPaths(boolean)",
            "public void setAutoGrowNestedPaths(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.AbstractPropertyAccessor.isAutoGrowNestedPaths()",
            "public boolean isAutoGrowNestedPaths()"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(org.springframework.beans.PropertyValue)",
            "public void setPropertyValue(org.springframework.beans.PropertyValue) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(java.util.Map<?, ?>)",
            "public void setPropertyValues(java.util.Map<?, ?>) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(org.springframework.beans.PropertyValues)",
            "public void setPropertyValues(org.springframework.beans.PropertyValues) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(org.springframework.beans.PropertyValues, boolean)",
            "public void setPropertyValues(org.springframework.beans.PropertyValues, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean)",
            "public void setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.AbstractPropertyAccessor.getPropertyType(java.lang.String)",
            "public java.lang.Class<?> getPropertyType(java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValue",
            "org.springframework.beans.PropertyValue(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.PropertyValue(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.PropertyValue",
            "org.springframework.beans.PropertyValue(org.springframework.beans.PropertyValue)",
            "public org.springframework.beans.PropertyValue(org.springframework.beans.PropertyValue)"
        ],
        [
            "org.springframework.beans.PropertyValue",
            "org.springframework.beans.PropertyValue(org.springframework.beans.PropertyValue, java.lang.Object)",
            "public org.springframework.beans.PropertyValue(org.springframework.beans.PropertyValue, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyValue.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.PropertyValue.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "org.springframework.beans.PropertyValue",
            "org.springframework.beans.PropertyValue.getOriginalPropertyValue()",
            "public org.springframework.beans.PropertyValue getOriginalPropertyValue()"
        ],
        [
            "void",
            "org.springframework.beans.PropertyValue.setOptional(boolean)",
            "public void setOptional(boolean)"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyValue.isOptional()",
            "public boolean isOptional()"
        ],
        [
            "synchronized",
            "org.springframework.beans.PropertyValue.boolean isConverted()",
            "public synchronized boolean isConverted()"
        ],
        [
            "synchronized",
            "org.springframework.beans.PropertyValue.void setConvertedValue(java.lang.Object)",
            "public synchronized void setConvertedValue(java.lang.Object)"
        ],
        [
            "synchronized",
            "org.springframework.beans.PropertyValue.java.lang.Object getConvertedValue()",
            "public synchronized java.lang.Object getConvertedValue()"
        ],
        [
            "boolean",
            "org.springframework.beans.PropertyValue.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.PropertyValue.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyValue.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.BeanUtils",
            "org.springframework.beans.BeanUtils()",
            "public org.springframework.beans.BeanUtils()"
        ],
        [
            "<T> T",
            "org.springframework.beans.BeanUtils.instantiate(java.lang.Class<T>)",
            "public static <T> T instantiate(java.lang.Class<T>) throws org.springframework.beans.BeanInstantiationException"
        ],
        [
            "<T> T",
            "org.springframework.beans.BeanUtils.instantiateClass(java.lang.Class<T>)",
            "public static <T> T instantiateClass(java.lang.Class<T>) throws org.springframework.beans.BeanInstantiationException"
        ],
        [
            "<T> T",
            "org.springframework.beans.BeanUtils.instantiateClass(java.lang.Class<?>, java.lang.Class<T>)",
            "public static <T> T instantiateClass(java.lang.Class<?>, java.lang.Class<T>) throws org.springframework.beans.BeanInstantiationException"
        ],
        [
            "<T> T",
            "org.springframework.beans.BeanUtils.instantiateClass(java.lang.reflect.Constructor<T>, java.lang.Object...)",
            "public static <T> T instantiateClass(java.lang.reflect.Constructor<T>, java.lang.Object...) throws org.springframework.beans.BeanInstantiationException"
        ],
        [
            "<T> java.lang.reflect.Constructor<T>",
            "org.springframework.beans.BeanUtils.getResolvableConstructor(java.lang.Class<T>)",
            "public static <T> java.lang.reflect.Constructor<T> getResolvableConstructor(java.lang.Class<T>)"
        ],
        [
            "<T> java.lang.reflect.Constructor<T>",
            "org.springframework.beans.BeanUtils.findPrimaryConstructor(java.lang.Class<T>)",
            "public static <T> java.lang.reflect.Constructor<T> findPrimaryConstructor(java.lang.Class<T>)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanUtils.findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.reflect.Method findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanUtils.findDeclaredMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.reflect.Method findDeclaredMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanUtils.findMethodWithMinimalParameters(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.Class<?>, java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanUtils.findDeclaredMethodWithMinimalParameters(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.reflect.Method findDeclaredMethodWithMinimalParameters(java.lang.Class<?>, java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanUtils.findMethodWithMinimalParameters(java.lang.reflect.Method[], java.lang.String)",
            "public static java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.reflect.Method[], java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanUtils.resolveSignature(java.lang.String, java.lang.Class<?>)",
            "public static java.lang.reflect.Method resolveSignature(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "java.beans.PropertyDescriptor[]",
            "org.springframework.beans.BeanUtils.getPropertyDescriptors(java.lang.Class<?>)",
            "public static java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.beans.PropertyDescriptor",
            "org.springframework.beans.BeanUtils.getPropertyDescriptor(java.lang.Class<?>, java.lang.String)",
            "public static java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class<?>, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.beans.PropertyDescriptor",
            "org.springframework.beans.BeanUtils.findPropertyForMethod(java.lang.reflect.Method)",
            "public static java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method) throws org.springframework.beans.BeansException"
        ],
        [
            "java.beans.PropertyDescriptor",
            "org.springframework.beans.BeanUtils.findPropertyForMethod(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method, java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.beans.BeanUtils.findEditorByConvention(java.lang.Class<?>)",
            "public static java.beans.PropertyEditor findEditorByConvention(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.BeanUtils.findPropertyType(java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.Class<?> findPropertyType(java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.beans.BeanUtils.getWriteMethodParameter(java.beans.PropertyDescriptor)",
            "public static org.springframework.core.MethodParameter getWriteMethodParameter(java.beans.PropertyDescriptor)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.BeanUtils.getParameterNames(java.lang.reflect.Constructor<?>)",
            "public static java.lang.String[] getParameterNames(java.lang.reflect.Constructor<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.BeanUtils.isSimpleProperty(java.lang.Class<?>)",
            "public static boolean isSimpleProperty(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.BeanUtils.isSimpleValueType(java.lang.Class<?>)",
            "public static boolean isSimpleValueType(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.beans.BeanUtils.copyProperties(java.lang.Object, java.lang.Object)",
            "public static void copyProperties(java.lang.Object, java.lang.Object) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.BeanUtils.copyProperties(java.lang.Object, java.lang.Object, java.lang.Class<?>)",
            "public static void copyProperties(java.lang.Object, java.lang.Object, java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.beans.BeanUtils.copyProperties(java.lang.Object, java.lang.Object, java.lang.String...)",
            "public static void copyProperties(java.lang.Object, java.lang.Object, java.lang.String...) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler",
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler(org.springframework.beans.DirectFieldAccessor, java.lang.reflect.Field)",
            "public org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler(org.springframework.beans.DirectFieldAccessor, java.lang.reflect.Field)"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler.toTypeDescriptor()",
            "public org.springframework.core.convert.TypeDescriptor toTypeDescriptor()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler.nested(int)",
            "public org.springframework.core.convert.TypeDescriptor nested(int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler.getValue()",
            "public java.lang.Object getValue() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.beans.DirectFieldAccessor$FieldPropertyHandler.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object) throws java.lang.Exception"
        ],
        [
            "org.springframework.beans.ConversionNotSupportedException",
            "org.springframework.beans.ConversionNotSupportedException(java.beans.PropertyChangeEvent, java.lang.Class<?>, java.lang.Throwable)",
            "public org.springframework.beans.ConversionNotSupportedException(java.beans.PropertyChangeEvent, java.lang.Class<?>, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.ConversionNotSupportedException",
            "org.springframework.beans.ConversionNotSupportedException(java.lang.Object, java.lang.Class<?>, java.lang.Throwable)",
            "public org.springframework.beans.ConversionNotSupportedException(java.lang.Object, java.lang.Class<?>, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.TypeMismatchException",
            "org.springframework.beans.TypeMismatchException(java.beans.PropertyChangeEvent, java.lang.Class<?>)",
            "public org.springframework.beans.TypeMismatchException(java.beans.PropertyChangeEvent, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.TypeMismatchException",
            "org.springframework.beans.TypeMismatchException(java.beans.PropertyChangeEvent, java.lang.Class<?>, java.lang.Throwable)",
            "public org.springframework.beans.TypeMismatchException(java.beans.PropertyChangeEvent, java.lang.Class<?>, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.TypeMismatchException",
            "org.springframework.beans.TypeMismatchException(java.lang.Object, java.lang.Class<?>)",
            "public org.springframework.beans.TypeMismatchException(java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.TypeMismatchException",
            "org.springframework.beans.TypeMismatchException(java.lang.Object, java.lang.Class<?>, java.lang.Throwable)",
            "public org.springframework.beans.TypeMismatchException(java.lang.Object, java.lang.Class<?>, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.beans.TypeMismatchException.initPropertyName(java.lang.String)",
            "public void initPropertyName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.TypeMismatchException.getPropertyName()",
            "public java.lang.String getPropertyName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.TypeMismatchException.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.TypeMismatchException.getRequiredType()",
            "public java.lang.Class<?> getRequiredType()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.TypeMismatchException.getErrorCode()",
            "public java.lang.String getErrorCode()"
        ],
        [
            "org.springframework.beans.BeanMetadataAttributeAccessor",
            "org.springframework.beans.BeanMetadataAttributeAccessor()",
            "public org.springframework.beans.BeanMetadataAttributeAccessor()"
        ],
        [
            "void",
            "org.springframework.beans.BeanMetadataAttributeAccessor.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanMetadataAttributeAccessor.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "void",
            "org.springframework.beans.BeanMetadataAttributeAccessor.addMetadataAttribute(org.springframework.beans.BeanMetadataAttribute)",
            "public void addMetadataAttribute(org.springframework.beans.BeanMetadataAttribute)"
        ],
        [
            "org.springframework.beans.BeanMetadataAttribute",
            "org.springframework.beans.BeanMetadataAttributeAccessor.getMetadataAttribute(java.lang.String)",
            "public org.springframework.beans.BeanMetadataAttribute getMetadataAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.BeanMetadataAttributeAccessor.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanMetadataAttributeAccessor.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanMetadataAttributeAccessor.removeAttribute(java.lang.String)",
            "public java.lang.Object removeAttribute(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfo$PropertyDescriptorComparator.compare(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)",
            "public int compare(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfo$PropertyDescriptorComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.beans.MethodInvocationException",
            "org.springframework.beans.MethodInvocationException(java.beans.PropertyChangeEvent, java.lang.Throwable)",
            "public org.springframework.beans.MethodInvocationException(java.beans.PropertyChangeEvent, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.MethodInvocationException.getErrorCode()",
            "public java.lang.String getErrorCode()"
        ],
        [
            "org.springframework.beans.FatalBeanException",
            "org.springframework.beans.FatalBeanException(java.lang.String)",
            "public org.springframework.beans.FatalBeanException(java.lang.String)"
        ],
        [
            "org.springframework.beans.FatalBeanException",
            "org.springframework.beans.FatalBeanException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.FatalBeanException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.propertyeditors.UUIDEditor",
            "org.springframework.beans.propertyeditors.UUIDEditor()",
            "public org.springframework.beans.propertyeditors.UUIDEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.UUIDEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.UUIDEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.URLEditor",
            "org.springframework.beans.propertyeditors.URLEditor()",
            "public org.springframework.beans.propertyeditors.URLEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.URLEditor",
            "org.springframework.beans.propertyeditors.URLEditor(org.springframework.core.io.ResourceEditor)",
            "public org.springframework.beans.propertyeditors.URLEditor(org.springframework.core.io.ResourceEditor)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.URLEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.URLEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomCollectionEditor",
            "org.springframework.beans.propertyeditors.CustomCollectionEditor(java.lang.Class<? extends java.util.Collection>)",
            "public org.springframework.beans.propertyeditors.CustomCollectionEditor(java.lang.Class<? extends java.util.Collection>)"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomCollectionEditor",
            "org.springframework.beans.propertyeditors.CustomCollectionEditor(java.lang.Class<? extends java.util.Collection>, boolean)",
            "public org.springframework.beans.propertyeditors.CustomCollectionEditor(java.lang.Class<? extends java.util.Collection>, boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomCollectionEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomCollectionEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CustomCollectionEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomDateEditor",
            "org.springframework.beans.propertyeditors.CustomDateEditor(java.text.DateFormat, boolean)",
            "public org.springframework.beans.propertyeditors.CustomDateEditor(java.text.DateFormat, boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomDateEditor",
            "org.springframework.beans.propertyeditors.CustomDateEditor(java.text.DateFormat, boolean, int)",
            "public org.springframework.beans.propertyeditors.CustomDateEditor(java.text.DateFormat, boolean, int)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomDateEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CustomDateEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.StringTrimmerEditor",
            "org.springframework.beans.propertyeditors.StringTrimmerEditor(boolean)",
            "public org.springframework.beans.propertyeditors.StringTrimmerEditor(boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.StringTrimmerEditor",
            "org.springframework.beans.propertyeditors.StringTrimmerEditor(java.lang.String, boolean)",
            "public org.springframework.beans.propertyeditors.StringTrimmerEditor(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.StringTrimmerEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.StringTrimmerEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.PropertiesEditor",
            "org.springframework.beans.propertyeditors.PropertiesEditor()",
            "public org.springframework.beans.propertyeditors.PropertiesEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.PropertiesEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.PropertiesEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "org.springframework.beans.propertyeditors.ReaderEditor",
            "org.springframework.beans.propertyeditors.ReaderEditor()",
            "public org.springframework.beans.propertyeditors.ReaderEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.ReaderEditor",
            "org.springframework.beans.propertyeditors.ReaderEditor(org.springframework.core.io.ResourceEditor)",
            "public org.springframework.beans.propertyeditors.ReaderEditor(org.springframework.core.io.ResourceEditor)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.ReaderEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.ReaderEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CurrencyEditor",
            "org.springframework.beans.propertyeditors.CurrencyEditor()",
            "public org.springframework.beans.propertyeditors.CurrencyEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CurrencyEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CurrencyEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CharArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.CharArrayPropertyEditor()",
            "public org.springframework.beans.propertyeditors.CharArrayPropertyEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CharArrayPropertyEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CharArrayPropertyEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CharacterEditor",
            "org.springframework.beans.propertyeditors.CharacterEditor(boolean)",
            "public org.springframework.beans.propertyeditors.CharacterEditor(boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CharacterEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CharacterEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.ZoneIdEditor",
            "org.springframework.beans.propertyeditors.ZoneIdEditor()",
            "public org.springframework.beans.propertyeditors.ZoneIdEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.ZoneIdEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.ZoneIdEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.LocaleEditor",
            "org.springframework.beans.propertyeditors.LocaleEditor()",
            "public org.springframework.beans.propertyeditors.LocaleEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.LocaleEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.LocaleEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomNumberEditor",
            "org.springframework.beans.propertyeditors.CustomNumberEditor(java.lang.Class<? extends java.lang.Number>, boolean)",
            "public org.springframework.beans.propertyeditors.CustomNumberEditor(java.lang.Class<? extends java.lang.Number>, boolean) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomNumberEditor",
            "org.springframework.beans.propertyeditors.CustomNumberEditor(java.lang.Class<? extends java.lang.Number>, java.text.NumberFormat, boolean)",
            "public org.springframework.beans.propertyeditors.CustomNumberEditor(java.lang.Class<? extends java.lang.Number>, java.text.NumberFormat, boolean) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomNumberEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomNumberEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CustomNumberEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomBooleanEditor",
            "org.springframework.beans.propertyeditors.CustomBooleanEditor(boolean)",
            "public org.springframework.beans.propertyeditors.CustomBooleanEditor(boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomBooleanEditor",
            "org.springframework.beans.propertyeditors.CustomBooleanEditor(java.lang.String, java.lang.String, boolean)",
            "public org.springframework.beans.propertyeditors.CustomBooleanEditor(java.lang.String, java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomBooleanEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CustomBooleanEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.InputStreamEditor",
            "org.springframework.beans.propertyeditors.InputStreamEditor()",
            "public org.springframework.beans.propertyeditors.InputStreamEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.InputStreamEditor",
            "org.springframework.beans.propertyeditors.InputStreamEditor(org.springframework.core.io.ResourceEditor)",
            "public org.springframework.beans.propertyeditors.InputStreamEditor(org.springframework.core.io.ResourceEditor)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.InputStreamEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.InputStreamEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomMapEditor",
            "org.springframework.beans.propertyeditors.CustomMapEditor(java.lang.Class<? extends java.util.Map>)",
            "public org.springframework.beans.propertyeditors.CustomMapEditor(java.lang.Class<? extends java.util.Map>)"
        ],
        [
            "org.springframework.beans.propertyeditors.CustomMapEditor",
            "org.springframework.beans.propertyeditors.CustomMapEditor(java.lang.Class<? extends java.util.Map>, boolean)",
            "public org.springframework.beans.propertyeditors.CustomMapEditor(java.lang.Class<? extends java.util.Map>, boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomMapEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CustomMapEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CustomMapEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.InputSourceEditor",
            "org.springframework.beans.propertyeditors.InputSourceEditor()",
            "public org.springframework.beans.propertyeditors.InputSourceEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.InputSourceEditor",
            "org.springframework.beans.propertyeditors.InputSourceEditor(org.springframework.core.io.ResourceEditor)",
            "public org.springframework.beans.propertyeditors.InputSourceEditor(org.springframework.core.io.ResourceEditor)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.InputSourceEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.InputSourceEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.FileEditor",
            "org.springframework.beans.propertyeditors.FileEditor()",
            "public org.springframework.beans.propertyeditors.FileEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.FileEditor",
            "org.springframework.beans.propertyeditors.FileEditor(org.springframework.core.io.ResourceEditor)",
            "public org.springframework.beans.propertyeditors.FileEditor(org.springframework.core.io.ResourceEditor)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.FileEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.FileEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.TimeZoneEditor",
            "org.springframework.beans.propertyeditors.TimeZoneEditor()",
            "public org.springframework.beans.propertyeditors.TimeZoneEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.TimeZoneEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.TimeZoneEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor()",
            "public org.springframework.beans.propertyeditors.StringArrayPropertyEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String)",
            "public org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String)"
        ],
        [
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, boolean)",
            "public org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, boolean, boolean)",
            "public org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, boolean, boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, java.lang.String, boolean)",
            "public org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, java.lang.String, boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, java.lang.String, boolean, boolean)",
            "public org.springframework.beans.propertyeditors.StringArrayPropertyEditor(java.lang.String, java.lang.String, boolean, boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.StringArrayPropertyEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.PathEditor",
            "org.springframework.beans.propertyeditors.PathEditor()",
            "public org.springframework.beans.propertyeditors.PathEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.PathEditor",
            "org.springframework.beans.propertyeditors.PathEditor(org.springframework.core.io.ResourceEditor)",
            "public org.springframework.beans.propertyeditors.PathEditor(org.springframework.core.io.ResourceEditor)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.PathEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.PathEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.ResourceBundleEditor",
            "org.springframework.beans.propertyeditors.ResourceBundleEditor()",
            "public org.springframework.beans.propertyeditors.ResourceBundleEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.ResourceBundleEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.beans.propertyeditors.ClassArrayEditor",
            "org.springframework.beans.propertyeditors.ClassArrayEditor()",
            "public org.springframework.beans.propertyeditors.ClassArrayEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.ClassArrayEditor",
            "org.springframework.beans.propertyeditors.ClassArrayEditor(java.lang.ClassLoader)",
            "public org.springframework.beans.propertyeditors.ClassArrayEditor(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.ClassArrayEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.ClassArrayEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.CharsetEditor",
            "org.springframework.beans.propertyeditors.CharsetEditor()",
            "public org.springframework.beans.propertyeditors.CharsetEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.CharsetEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.CharsetEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.PatternEditor",
            "org.springframework.beans.propertyeditors.PatternEditor()",
            "public org.springframework.beans.propertyeditors.PatternEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.PatternEditor",
            "org.springframework.beans.propertyeditors.PatternEditor(int)",
            "public org.springframework.beans.propertyeditors.PatternEditor(int)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.PatternEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.PatternEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.URIEditor",
            "org.springframework.beans.propertyeditors.URIEditor()",
            "public org.springframework.beans.propertyeditors.URIEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.URIEditor",
            "org.springframework.beans.propertyeditors.URIEditor(boolean)",
            "public org.springframework.beans.propertyeditors.URIEditor(boolean)"
        ],
        [
            "org.springframework.beans.propertyeditors.URIEditor",
            "org.springframework.beans.propertyeditors.URIEditor(java.lang.ClassLoader)",
            "public org.springframework.beans.propertyeditors.URIEditor(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.beans.propertyeditors.URIEditor",
            "org.springframework.beans.propertyeditors.URIEditor(java.lang.ClassLoader, boolean)",
            "public org.springframework.beans.propertyeditors.URIEditor(java.lang.ClassLoader, boolean)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.URIEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.URIEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.ByteArrayPropertyEditor",
            "org.springframework.beans.propertyeditors.ByteArrayPropertyEditor()",
            "public org.springframework.beans.propertyeditors.ByteArrayPropertyEditor()"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.ByteArrayPropertyEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.ByteArrayPropertyEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.beans.propertyeditors.ClassEditor",
            "org.springframework.beans.propertyeditors.ClassEditor()",
            "public org.springframework.beans.propertyeditors.ClassEditor()"
        ],
        [
            "org.springframework.beans.propertyeditors.ClassEditor",
            "org.springframework.beans.propertyeditors.ClassEditor(java.lang.ClassLoader)",
            "public org.springframework.beans.propertyeditors.ClassEditor(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.beans.propertyeditors.ClassEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.propertyeditors.ClassEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverter.convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor)",
            "public default <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "org.springframework.beans.TypeConverterSupport",
            "org.springframework.beans.TypeConverterSupport()",
            "public org.springframework.beans.TypeConverterSupport()"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverterSupport.convertIfNecessary(java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverterSupport.convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.MethodParameter)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.MethodParameter) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverterSupport.convertIfNecessary(java.lang.Object, java.lang.Class<T>, java.lang.reflect.Field)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, java.lang.reflect.Field) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "<T> T",
            "org.springframework.beans.TypeConverterSupport.convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler",
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler(org.springframework.beans.BeanWrapperImpl, java.beans.PropertyDescriptor)",
            "public org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler(org.springframework.beans.BeanWrapperImpl, java.beans.PropertyDescriptor)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler.toTypeDescriptor()",
            "public org.springframework.core.convert.TypeDescriptor toTypeDescriptor()"
        ],
        [
            "org.springframework.core.convert.TypeDescriptor",
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler.nested(int)",
            "public org.springframework.core.convert.TypeDescriptor nested(int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler.getValue()",
            "public java.lang.Object getValue() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.beans.BeanMetadataElement.java.lang.Object getSource()",
            "public default java.lang.Object getSource()"
        ],
        [
            "org.springframework.beans.PropertyMatches$FieldPropertyMatches",
            "org.springframework.beans.PropertyMatches$FieldPropertyMatches(java.lang.String, java.lang.Class<?>, int)",
            "public org.springframework.beans.PropertyMatches$FieldPropertyMatches(java.lang.String, java.lang.Class<?>, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyMatches$FieldPropertyMatches.buildErrorMessage()",
            "public java.lang.String buildErrorMessage()"
        ],
        [
            "org.springframework.beans.PropertyMatches$BeanPropertyMatches",
            "org.springframework.beans.PropertyMatches$BeanPropertyMatches(java.lang.String, java.lang.Class<?>, int)",
            "public org.springframework.beans.PropertyMatches$BeanPropertyMatches(java.lang.String, java.lang.Class<?>, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyMatches$BeanPropertyMatches.buildErrorMessage()",
            "public java.lang.String buildErrorMessage()"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues()",
            "public org.springframework.beans.MutablePropertyValues()"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues(org.springframework.beans.PropertyValues)",
            "public org.springframework.beans.MutablePropertyValues(org.springframework.beans.PropertyValues)"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues(java.util.Map<?, ?>)",
            "public org.springframework.beans.MutablePropertyValues(java.util.Map<?, ?>)"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues(java.util.List<org.springframework.beans.PropertyValue>)",
            "public org.springframework.beans.MutablePropertyValues(java.util.List<org.springframework.beans.PropertyValue>)"
        ],
        [
            "java.util.List<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.MutablePropertyValues.getPropertyValueList()",
            "public java.util.List<org.springframework.beans.PropertyValue> getPropertyValueList()"
        ],
        [
            "int",
            "org.springframework.beans.MutablePropertyValues.size()",
            "public int size()"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues.addPropertyValues(org.springframework.beans.PropertyValues)",
            "public org.springframework.beans.MutablePropertyValues addPropertyValues(org.springframework.beans.PropertyValues)"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues.addPropertyValues(java.util.Map<?, ?>)",
            "public org.springframework.beans.MutablePropertyValues addPropertyValues(java.util.Map<?, ?>)"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues.addPropertyValue(org.springframework.beans.PropertyValue)",
            "public org.springframework.beans.MutablePropertyValues addPropertyValue(org.springframework.beans.PropertyValue)"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.addPropertyValue(java.lang.String, java.lang.Object)",
            "public void addPropertyValue(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.beans.MutablePropertyValues",
            "org.springframework.beans.MutablePropertyValues.add(java.lang.String, java.lang.Object)",
            "public org.springframework.beans.MutablePropertyValues add(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.setPropertyValueAt(org.springframework.beans.PropertyValue, int)",
            "public void setPropertyValueAt(org.springframework.beans.PropertyValue, int)"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.removePropertyValue(org.springframework.beans.PropertyValue)",
            "public void removePropertyValue(org.springframework.beans.PropertyValue)"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.removePropertyValue(java.lang.String)",
            "public void removePropertyValue(java.lang.String)"
        ],
        [
            "java.util.Iterator<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.MutablePropertyValues.iterator()",
            "public java.util.Iterator<org.springframework.beans.PropertyValue> iterator()"
        ],
        [
            "java.util.Spliterator<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.MutablePropertyValues.spliterator()",
            "public java.util.Spliterator<org.springframework.beans.PropertyValue> spliterator()"
        ],
        [
            "java.util.stream.Stream<org.springframework.beans.PropertyValue>",
            "org.springframework.beans.MutablePropertyValues.stream()",
            "public java.util.stream.Stream<org.springframework.beans.PropertyValue> stream()"
        ],
        [
            "org.springframework.beans.PropertyValue[]",
            "org.springframework.beans.MutablePropertyValues.getPropertyValues()",
            "public org.springframework.beans.PropertyValue[] getPropertyValues()"
        ],
        [
            "org.springframework.beans.PropertyValue",
            "org.springframework.beans.MutablePropertyValues.getPropertyValue(java.lang.String)",
            "public org.springframework.beans.PropertyValue getPropertyValue(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.beans.MutablePropertyValues.get(java.lang.String)",
            "public java.lang.Object get(java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.beans.MutablePropertyValues.changesSince(org.springframework.beans.PropertyValues)",
            "public org.springframework.beans.PropertyValues changesSince(org.springframework.beans.PropertyValues)"
        ],
        [
            "boolean",
            "org.springframework.beans.MutablePropertyValues.contains(java.lang.String)",
            "public boolean contains(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.beans.MutablePropertyValues.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.registerProcessedProperty(java.lang.String)",
            "public void registerProcessedProperty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.clearProcessedProperty(java.lang.String)",
            "public void clearProcessedProperty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.beans.MutablePropertyValues.setConverted()",
            "public void setConverted()"
        ],
        [
            "boolean",
            "org.springframework.beans.MutablePropertyValues.isConverted()",
            "public boolean isConverted()"
        ],
        [
            "boolean",
            "org.springframework.beans.MutablePropertyValues.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.MutablePropertyValues.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.MutablePropertyValues.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor(java.beans.PropertyDescriptor)",
            "public org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor(java.beans.PropertyDescriptor) throws java.beans.IntrospectionException"
        ],
        [
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method)",
            "public org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Method) throws java.beans.IntrospectionException"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.getReadMethod()",
            "public java.lang.reflect.Method getReadMethod()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.setReadMethod(java.lang.reflect.Method)",
            "public void setReadMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.getWriteMethod()",
            "public java.lang.reflect.Method getWriteMethod()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.setWriteMethod(java.lang.reflect.Method)",
            "public void setWriteMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.getPropertyType()",
            "public java.lang.Class<?> getPropertyType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.getPropertyEditorClass()",
            "public java.lang.Class<?> getPropertyEditorClass()"
        ],
        [
            "void",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.setPropertyEditorClass(java.lang.Class<?>)",
            "public void setPropertyEditorClass(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.ExtendedBeanInfo$SimplePropertyDescriptor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.beans.PropertyMatches",
            "org.springframework.beans.PropertyMatches.forProperty(java.lang.String, java.lang.Class<?>)",
            "public static org.springframework.beans.PropertyMatches forProperty(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.PropertyMatches",
            "org.springframework.beans.PropertyMatches.forProperty(java.lang.String, java.lang.Class<?>, int)",
            "public static org.springframework.beans.PropertyMatches forProperty(java.lang.String, java.lang.Class<?>, int)"
        ],
        [
            "org.springframework.beans.PropertyMatches",
            "org.springframework.beans.PropertyMatches.forField(java.lang.String, java.lang.Class<?>)",
            "public static org.springframework.beans.PropertyMatches forField(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.PropertyMatches",
            "org.springframework.beans.PropertyMatches.forField(java.lang.String, java.lang.Class<?>, int)",
            "public static org.springframework.beans.PropertyMatches forField(java.lang.String, java.lang.Class<?>, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.beans.PropertyMatches.getPropertyName()",
            "public java.lang.String getPropertyName()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.PropertyMatches.getPossibleMatches()",
            "public java.lang.String[] getPossibleMatches()"
        ],
        [
            "org.springframework.beans.BeanInstantiationException",
            "org.springframework.beans.BeanInstantiationException(java.lang.Class<?>, java.lang.String)",
            "public org.springframework.beans.BeanInstantiationException(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.BeanInstantiationException",
            "org.springframework.beans.BeanInstantiationException(java.lang.Class<?>, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.BeanInstantiationException(java.lang.Class<?>, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.BeanInstantiationException",
            "org.springframework.beans.BeanInstantiationException(java.lang.reflect.Constructor<?>, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.BeanInstantiationException(java.lang.reflect.Constructor<?>, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.beans.BeanInstantiationException",
            "org.springframework.beans.BeanInstantiationException(java.lang.reflect.Method, java.lang.String, java.lang.Throwable)",
            "public org.springframework.beans.BeanInstantiationException(java.lang.reflect.Method, java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.beans.BeanInstantiationException.getBeanClass()",
            "public java.lang.Class<?> getBeanClass()"
        ],
        [
            "java.lang.reflect.Constructor<?>",
            "org.springframework.beans.BeanInstantiationException.getConstructor()",
            "public java.lang.reflect.Constructor<?> getConstructor()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.beans.BeanInstantiationException.getConstructingMethod()",
            "public java.lang.reflect.Method getConstructingMethod()"
        ],
        [
            "<T> java.lang.String[]",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.getBeanNamesForType(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean)",
            "public static final <T> java.lang.String[] getBeanNamesForType(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.getBeanNamesForType$default(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean, int, java.lang.Object)",
            "public static java.lang.String[] getBeanNamesForType$default(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean, int, java.lang.Object)"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.getBeansOfType(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean)",
            "public static final <T> java.util.Map<java.lang.String, T> getBeansOfType(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean)"
        ],
        [
            "java.util.Map",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.getBeansOfType$default(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean, int, java.lang.Object)",
            "public static java.util.Map getBeansOfType$default(org.springframework.beans.factory.ListableBeanFactory, boolean, boolean, int, java.lang.Object)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> java.lang.String[]",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.getBeanNamesForAnnotation(org.springframework.beans.factory.ListableBeanFactory)",
            "public static final <T extends java.lang.annotation.Annotation> java.lang.String[] getBeanNamesForAnnotation(org.springframework.beans.factory.ListableBeanFactory)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.getBeansWithAnnotation(org.springframework.beans.factory.ListableBeanFactory)",
            "public static final <T extends java.lang.annotation.Annotation> java.util.Map<java.lang.String, java.lang.Object> getBeansWithAnnotation(org.springframework.beans.factory.ListableBeanFactory)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.beans.factory.ListableBeanFactoryExtensionsKt.findAnnotationOnBean(org.springframework.beans.factory.ListableBeanFactory, java.lang.String)",
            "public static final <T extends java.lang.annotation.Annotation> T findAnnotationOnBean(org.springframework.beans.factory.ListableBeanFactory, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryExtensionsKt.getBean(org.springframework.beans.factory.BeanFactory)",
            "public static final <T> T getBean(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryExtensionsKt.getBean(org.springframework.beans.factory.BeanFactory, java.lang.String)",
            "public static final <T> T getBean(org.springframework.beans.factory.BeanFactory, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.beans.factory.BeanFactoryExtensionsKt.getBean(org.springframework.beans.factory.BeanFactory, java.lang.Object...)",
            "public static final <T> T getBean(org.springframework.beans.factory.BeanFactory, java.lang.Object...)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.beans.factory.BeanFactoryExtensionsKt.getBeanProvider(org.springframework.beans.factory.BeanFactory)",
            "public static final <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.beans.factory.BeanFactoryExtensionsKt$getBeanProvider$1",
            "org.springframework.beans.factory.BeanFactoryExtensionsKt$getBeanProvider$1()",
            "public org.springframework.beans.factory.BeanFactoryExtensionsKt$getBeanProvider$1()"
        ]
    ]
}