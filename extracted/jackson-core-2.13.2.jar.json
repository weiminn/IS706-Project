{
    "jackson-core-2.13.2.jar": [
        [
            "com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour[]",
            "com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.values()",
            "public static com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour[] values()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour",
            "com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour valueOf(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant(java.lang.String, java.lang.String, boolean, char, int)",
            "public com.fasterxml.jackson.core.Base64Variant(java.lang.String, java.lang.String, boolean, char, int)"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant(com.fasterxml.jackson.core.Base64Variant, java.lang.String, int)",
            "public com.fasterxml.jackson.core.Base64Variant(com.fasterxml.jackson.core.Base64Variant, java.lang.String, int)"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant(com.fasterxml.jackson.core.Base64Variant, java.lang.String, boolean, char, int)",
            "public com.fasterxml.jackson.core.Base64Variant(com.fasterxml.jackson.core.Base64Variant, java.lang.String, boolean, char, int)"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant.withPaddingAllowed()",
            "public com.fasterxml.jackson.core.Base64Variant withPaddingAllowed()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant.withPaddingRequired()",
            "public com.fasterxml.jackson.core.Base64Variant withPaddingRequired()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant.withPaddingForbidden()",
            "public com.fasterxml.jackson.core.Base64Variant withPaddingForbidden()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant.withReadPadding(com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)",
            "public com.fasterxml.jackson.core.Base64Variant withReadPadding(com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variant.withWritePadding(boolean)",
            "public com.fasterxml.jackson.core.Base64Variant withWritePadding(boolean)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Base64Variant.getName()",
            "public java.lang.String getName()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Base64Variant.usesPadding()",
            "public boolean usesPadding()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Base64Variant.requiresPaddingOnRead()",
            "public boolean requiresPaddingOnRead()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Base64Variant.acceptsPaddingOnRead()",
            "public boolean acceptsPaddingOnRead()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(char)",
            "public boolean usesPaddingChar(char)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(int)",
            "public boolean usesPaddingChar(int)"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour",
            "com.fasterxml.jackson.core.Base64Variant.paddingReadBehaviour()",
            "public com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour paddingReadBehaviour()"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.Base64Variant.getPaddingChar()",
            "public char getPaddingChar()"
        ],
        [
            "byte",
            "com.fasterxml.jackson.core.Base64Variant.getPaddingByte()",
            "public byte getPaddingByte()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.getMaxLineLength()",
            "public int getMaxLineLength()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(char)",
            "public int decodeBase64Char(char)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(int)",
            "public int decodeBase64Char(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.decodeBase64Byte(byte)",
            "public int decodeBase64Byte(byte)"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsChar(int)",
            "public char encodeBase64BitsAsChar(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int, char[], int)",
            "public int encodeBase64Chunk(int, char[], int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(java.lang.StringBuilder, int)",
            "public void encodeBase64Chunk(java.lang.StringBuilder, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int, int, char[], int)",
            "public int encodeBase64Partial(int, int, char[], int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(java.lang.StringBuilder, int, int)",
            "public void encodeBase64Partial(java.lang.StringBuilder, int, int)"
        ],
        [
            "byte",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsByte(int)",
            "public byte encodeBase64BitsAsByte(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int, byte[], int)",
            "public int encodeBase64Chunk(int, byte[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int, int, byte[], int)",
            "public int encodeBase64Partial(int, int, byte[], int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Base64Variant.encode(byte[])",
            "public java.lang.String encode(byte[])"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Base64Variant.encode(byte[], boolean)",
            "public java.lang.String encode(byte[], boolean)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Base64Variant.encode(byte[], boolean, java.lang.String)",
            "public java.lang.String encode(byte[], boolean, java.lang.String)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.Base64Variant.decode(java.lang.String)",
            "public byte[] decode(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.Base64Variant.decode(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder)",
            "public void decode(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Base64Variant.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Base64Variant.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Base64Variant.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Base64Variant.missingPaddingMessage()",
            "public java.lang.String missingPaddingMessage()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variants",
            "com.fasterxml.jackson.core.Base64Variants()",
            "public com.fasterxml.jackson.core.Base64Variants()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variants.getDefaultVariant()",
            "public static com.fasterxml.jackson.core.Base64Variant getDefaultVariant()"
        ],
        [
            "com.fasterxml.jackson.core.Base64Variant",
            "com.fasterxml.jackson.core.Base64Variants.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.Base64Variant valueOf(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "com.fasterxml.jackson.core.JsonEncoding[]",
            "com.fasterxml.jackson.core.JsonEncoding.values()",
            "public static com.fasterxml.jackson.core.JsonEncoding[] values()"
        ],
        [
            "com.fasterxml.jackson.core.JsonEncoding",
            "com.fasterxml.jackson.core.JsonEncoding.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonEncoding valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonEncoding.getJavaName()",
            "public java.lang.String getJavaName()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonEncoding.isBigEndian()",
            "public boolean isBigEndian()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonEncoding.bits()",
            "public int bits()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory$Feature[]",
            "com.fasterxml.jackson.core.JsonFactory$Feature.values()",
            "public static com.fasterxml.jackson.core.JsonFactory$Feature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory$Feature",
            "com.fasterxml.jackson.core.JsonFactory$Feature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonFactory$Feature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactory$Feature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory$Feature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory$Feature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactory$Feature.getMask()",
            "public int getMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory()",
            "public com.fasterxml.jackson.core.JsonFactory()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory(com.fasterxml.jackson.core.ObjectCodec)",
            "public com.fasterxml.jackson.core.JsonFactory(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory(com.fasterxml.jackson.core.JsonFactoryBuilder)",
            "public com.fasterxml.jackson.core.JsonFactory(com.fasterxml.jackson.core.JsonFactoryBuilder)"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder<?, ?>",
            "com.fasterxml.jackson.core.JsonFactory.rebuild()",
            "public com.fasterxml.jackson.core.TSFBuilder<?, ?> rebuild()"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder<?, ?>",
            "com.fasterxml.jackson.core.JsonFactory.builder()",
            "public static com.fasterxml.jackson.core.TSFBuilder<?, ?> builder()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.copy()",
            "public com.fasterxml.jackson.core.JsonFactory copy()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering()",
            "public boolean requiresPropertyOrdering()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively()",
            "public boolean canHandleBinaryNatively()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.canUseCharArrays()",
            "public boolean canUseCharArrays()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.canParseAsync()",
            "public boolean canParseAsync()"
        ],
        [
            "java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature>",
            "com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType()",
            "public java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> getFormatReadFeatureType()"
        ],
        [
            "java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature>",
            "com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType()",
            "public java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> getFormatWriteFeatureType()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.canUseSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonFactory.getFormatName()",
            "public java.lang.String getFormatName()"
        ],
        [
            "com.fasterxml.jackson.core.format.MatchStrength",
            "com.fasterxml.jackson.core.JsonFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)",
            "public com.fasterxml.jackson.core.format.MatchStrength hasFormat(com.fasterxml.jackson.core.format.InputAccessor) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec()",
            "public boolean requiresCustomCodec()"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.JsonFactory.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonFactory$Feature, boolean)",
            "public final com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonFactory$Feature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonFactory$Feature)",
            "public com.fasterxml.jackson.core.JsonFactory enable(com.fasterxml.jackson.core.JsonFactory$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonFactory$Feature)",
            "public com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonFactory$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonFactory$Feature)",
            "public final boolean isEnabled(com.fasterxml.jackson.core.JsonFactory$Feature)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactory.getParserFeatures()",
            "public final int getParserFeatures()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures()",
            "public final int getGeneratorFeatures()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures()",
            "public int getFormatParserFeatures()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures()",
            "public int getFormatGeneratorFeatures()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonParser$Feature, boolean)",
            "public final com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonParser$Feature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonFactory enable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public final boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)",
            "public final boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)"
        ],
        [
            "com.fasterxml.jackson.core.io.InputDecorator",
            "com.fasterxml.jackson.core.JsonFactory.getInputDecorator()",
            "public com.fasterxml.jackson.core.io.InputDecorator getInputDecorator()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.setInputDecorator(com.fasterxml.jackson.core.io.InputDecorator)",
            "public com.fasterxml.jackson.core.JsonFactory setInputDecorator(com.fasterxml.jackson.core.io.InputDecorator)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonGenerator$Feature, boolean)",
            "public final com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonGenerator$Feature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonFactory enable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonFactory disable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public final boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)",
            "public final boolean isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)"
        ],
        [
            "com.fasterxml.jackson.core.io.CharacterEscapes",
            "com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes()",
            "public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)",
            "public com.fasterxml.jackson.core.JsonFactory setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)"
        ],
        [
            "com.fasterxml.jackson.core.io.OutputDecorator",
            "com.fasterxml.jackson.core.JsonFactory.getOutputDecorator()",
            "public com.fasterxml.jackson.core.io.OutputDecorator getOutputDecorator()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)",
            "public com.fasterxml.jackson.core.JsonFactory setOutputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(java.lang.String)",
            "public com.fasterxml.jackson.core.JsonFactory setRootValueSeparator(java.lang.String)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator()",
            "public java.lang.String getRootValueSeparator()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactory.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public com.fasterxml.jackson.core.JsonFactory setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.JsonFactory.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.File)",
            "public com.fasterxml.jackson.core.JsonParser createParser(java.io.File) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)",
            "public com.fasterxml.jackson.core.JsonParser createParser(java.net.URL) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.InputStream)",
            "public com.fasterxml.jackson.core.JsonParser createParser(java.io.InputStream) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)",
            "public com.fasterxml.jackson.core.JsonParser createParser(java.io.Reader) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(byte[])",
            "public com.fasterxml.jackson.core.JsonParser createParser(byte[]) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(byte[], int, int)",
            "public com.fasterxml.jackson.core.JsonParser createParser(byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(java.lang.String)",
            "public com.fasterxml.jackson.core.JsonParser createParser(java.lang.String) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(char[])",
            "public com.fasterxml.jackson.core.JsonParser createParser(char[]) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(char[], int, int)",
            "public com.fasterxml.jackson.core.JsonParser createParser(char[], int, int) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.DataInput)",
            "public com.fasterxml.jackson.core.JsonParser createParser(java.io.DataInput) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser()",
            "public com.fasterxml.jackson.core.JsonParser createNonBlockingByteArrayParser() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)",
            "public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.OutputStream)",
            "public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.Writer)",
            "public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding)",
            "public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.DataOutput, com.fasterxml.jackson.core.JsonEncoding)",
            "public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.DataOutput, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.DataOutput)",
            "public com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.DataOutput) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.File)",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(java.io.File) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.net.URL)",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(java.net.URL) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.InputStream)",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(java.io.InputStream) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.Reader)",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(java.io.Reader) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[])",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(byte[]) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[], int, int)",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.lang.String)",
            "public com.fasterxml.jackson.core.JsonParser createJsonParser(java.lang.String) throws java.io.IOException, com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding)",
            "public com.fasterxml.jackson.core.JsonGenerator createJsonGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.Writer)",
            "public com.fasterxml.jackson.core.JsonGenerator createJsonGenerator(java.io.Writer) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.OutputStream)",
            "public com.fasterxml.jackson.core.JsonGenerator createJsonGenerator(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.util.BufferRecycler",
            "com.fasterxml.jackson.core.JsonFactory._getBufferRecycler()",
            "public com.fasterxml.jackson.core.util.BufferRecycler _getBufferRecycler()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder()",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder(com.fasterxml.jackson.core.JsonFactory)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder(com.fasterxml.jackson.core.JsonFactory)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonReadFeature)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder enable(com.fasterxml.jackson.core.json.JsonReadFeature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder enable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonReadFeature)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder disable(com.fasterxml.jackson.core.json.JsonReadFeature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder disable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.configure(com.fasterxml.jackson.core.json.JsonReadFeature, boolean)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder configure(com.fasterxml.jackson.core.json.JsonReadFeature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonWriteFeature)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder enable(com.fasterxml.jackson.core.json.JsonWriteFeature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder enable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonWriteFeature)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder disable(com.fasterxml.jackson.core.json.JsonWriteFeature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder disable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.configure(com.fasterxml.jackson.core.json.JsonWriteFeature, boolean)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder configure(com.fasterxml.jackson.core.json.JsonWriteFeature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.characterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder characterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(java.lang.String)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder rootValueSeparator(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder rootValueSeparator(com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.highestNonEscapedChar(int)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder highestNonEscapedChar(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactoryBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.quoteChar(char)",
            "public com.fasterxml.jackson.core.JsonFactoryBuilder quoteChar(char)"
        ],
        [
            "com.fasterxml.jackson.core.io.CharacterEscapes",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.characterEscapes()",
            "public com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes()"
        ],
        [
            "com.fasterxml.jackson.core.SerializableString",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator()",
            "public com.fasterxml.jackson.core.SerializableString rootValueSeparator()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.highestNonEscapedChar()",
            "public int highestNonEscapedChar()"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.quoteChar()",
            "public char quoteChar()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.build()",
            "public com.fasterxml.jackson.core.JsonFactory build()"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.configure(com.fasterxml.jackson.core.json.JsonWriteFeature, boolean)",
            "public com.fasterxml.jackson.core.TSFBuilder configure(com.fasterxml.jackson.core.json.JsonWriteFeature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature[])",
            "public com.fasterxml.jackson.core.TSFBuilder disable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature[])"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonWriteFeature)",
            "public com.fasterxml.jackson.core.TSFBuilder disable(com.fasterxml.jackson.core.json.JsonWriteFeature)"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature[])",
            "public com.fasterxml.jackson.core.TSFBuilder enable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature[])"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonWriteFeature)",
            "public com.fasterxml.jackson.core.TSFBuilder enable(com.fasterxml.jackson.core.json.JsonWriteFeature)"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.configure(com.fasterxml.jackson.core.json.JsonReadFeature, boolean)",
            "public com.fasterxml.jackson.core.TSFBuilder configure(com.fasterxml.jackson.core.json.JsonReadFeature, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature[])",
            "public com.fasterxml.jackson.core.TSFBuilder disable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature[])"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.disable(com.fasterxml.jackson.core.json.JsonReadFeature)",
            "public com.fasterxml.jackson.core.TSFBuilder disable(com.fasterxml.jackson.core.json.JsonReadFeature)"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature[])",
            "public com.fasterxml.jackson.core.TSFBuilder enable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature[])"
        ],
        [
            "com.fasterxml.jackson.core.TSFBuilder",
            "com.fasterxml.jackson.core.JsonFactoryBuilder.enable(com.fasterxml.jackson.core.json.JsonReadFeature)",
            "public com.fasterxml.jackson.core.TSFBuilder enable(com.fasterxml.jackson.core.json.JsonReadFeature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException(java.lang.Throwable)",
            "public com.fasterxml.jackson.core.JsonGenerationException(java.lang.Throwable)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException(java.lang.String)",
            "public com.fasterxml.jackson.core.JsonGenerationException(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException(java.lang.String, java.lang.Throwable)",
            "public com.fasterxml.jackson.core.JsonGenerationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException(java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.JsonGenerationException(java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException(java.lang.String, com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.JsonGenerationException(java.lang.String, com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException(java.lang.String, java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.JsonGenerationException(java.lang.String, java.lang.Throwable, com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerationException",
            "com.fasterxml.jackson.core.JsonGenerationException.withGenerator(com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.JsonGenerationException withGenerator(com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerationException.getProcessor()",
            "public com.fasterxml.jackson.core.JsonGenerator getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.exc.StreamWriteException",
            "com.fasterxml.jackson.core.JsonGenerationException.withGenerator(com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.exc.StreamWriteException withGenerator(com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonGenerationException.getProcessor()",
            "public java.lang.Object getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator$Feature[]",
            "com.fasterxml.jackson.core.JsonGenerator$Feature.values()",
            "public static com.fasterxml.jackson.core.JsonGenerator$Feature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator$Feature",
            "com.fasterxml.jackson.core.JsonGenerator$Feature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonGenerator$Feature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonGenerator$Feature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator$Feature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator$Feature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonGenerator$Feature.getMask()",
            "public int getMask()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()",
            "public java.lang.Object getOutputTarget()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonGenerator.currentValue()",
            "public java.lang.Object currentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.assignCurrentValue(java.lang.Object)",
            "public void assignCurrentValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator$Feature, boolean)",
            "public final com.fasterxml.jackson.core.JsonGenerator configure(com.fasterxml.jackson.core.JsonGenerator$Feature, boolean)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)",
            "public boolean isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonGenerator overrideStdFeatures(int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()",
            "public int getFormatFeatures()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonGenerator overrideFormatFeatures(int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public void setSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "com.fasterxml.jackson.core.FormatSchema",
            "com.fasterxml.jackson.core.JsonGenerator.getSchema()",
            "public com.fasterxml.jackson.core.FormatSchema getSchema()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)",
            "public com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)"
        ],
        [
            "com.fasterxml.jackson.core.PrettyPrinter",
            "com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()",
            "public com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)",
            "public com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()",
            "public int getHighestEscapedChar()"
        ],
        [
            "com.fasterxml.jackson.core.io.CharacterEscapes",
            "com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()",
            "public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)",
            "public com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()",
            "public int getOutputBuffered()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()",
            "public boolean canWriteObjectId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()",
            "public boolean canWriteTypeId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()",
            "public boolean canWriteBinaryNatively()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.canOmitFields()",
            "public boolean canOmitFields()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()",
            "public boolean canWriteFormattedNumbers()"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability>",
            "com.fasterxml.jackson.core.JsonGenerator.getWriteCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability> getWriteCapabilities()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)",
            "public void writeStartArray(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)",
            "public void writeStartArray(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object, int)",
            "public void writeStartArray(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)",
            "public void writeStartObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object, int)",
            "public void writeStartObject(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)",
            "public void writeFieldId(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeArray(int[], int, int)",
            "public void writeArray(int[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeArray(long[], int, int)",
            "public void writeArray(long[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeArray(double[], int, int)",
            "public void writeArray(double[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[], int, int)",
            "public void writeArray(java.lang.String[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader, int)",
            "public void writeString(java.io.Reader, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRawValue(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[], int, int)",
            "public void writeBinary(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])",
            "public void writeBinary(byte[]) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream, int)",
            "public int writeBinary(java.io.InputStream, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)",
            "public void writeNumber(short) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[], int, int)",
            "public void writeNumber(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)",
            "public void writeEmbeddedObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)",
            "public void writeObjectId(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)",
            "public void writeObjectRef(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)",
            "public void writeTypeId(java.lang.Object) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId",
            "com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)",
            "public com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId",
            "com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)",
            "public com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writePOJO(java.lang.Object)",
            "public void writePOJO(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String, byte[])",
            "public void writeBinaryField(java.lang.String, byte[]) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String, boolean)",
            "public void writeBooleanField(java.lang.String, boolean) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)",
            "public void writeNullField(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String, java.lang.String)",
            "public void writeStringField(java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, short)",
            "public void writeNumberField(java.lang.String, short) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, int)",
            "public void writeNumberField(java.lang.String, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, long)",
            "public void writeNumberField(java.lang.String, long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, java.math.BigInteger)",
            "public void writeNumberField(java.lang.String, java.math.BigInteger) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, float)",
            "public void writeNumberField(java.lang.String, float) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, double)",
            "public void writeNumberField(java.lang.String, double) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String, java.math.BigDecimal)",
            "public void writeNumberField(java.lang.String, java.math.BigDecimal) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)",
            "public void writeArrayFieldStart(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)",
            "public void writeObjectFieldStart(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writePOJOField(java.lang.String, java.lang.Object)",
            "public void writePOJOField(java.lang.String, java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String, java.lang.Object)",
            "public void writeObjectField(java.lang.String, java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)",
            "public void writeOmittedField(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)",
            "public void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)",
            "public void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonLocation(com.fasterxml.jackson.core.io.ContentReference, long, int, int)",
            "public com.fasterxml.jackson.core.JsonLocation(com.fasterxml.jackson.core.io.ContentReference, long, int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonLocation(com.fasterxml.jackson.core.io.ContentReference, long, long, int, int)",
            "public com.fasterxml.jackson.core.JsonLocation(com.fasterxml.jackson.core.io.ContentReference, long, long, int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonLocation(java.lang.Object, long, int, int)",
            "public com.fasterxml.jackson.core.JsonLocation(java.lang.Object, long, int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonLocation(java.lang.Object, long, long, int, int)",
            "public com.fasterxml.jackson.core.JsonLocation(java.lang.Object, long, long, int, int)"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.JsonLocation.contentReference()",
            "public com.fasterxml.jackson.core.io.ContentReference contentReference()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonLocation.getSourceRef()",
            "public java.lang.Object getSourceRef()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonLocation.getLineNr()",
            "public int getLineNr()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonLocation.getColumnNr()",
            "public int getColumnNr()"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.JsonLocation.getCharOffset()",
            "public long getCharOffset()"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.JsonLocation.getByteOffset()",
            "public long getByteOffset()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonLocation.sourceDescription()",
            "public java.lang.String sourceDescription()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonLocation.offsetDescription()",
            "public java.lang.String offsetDescription()"
        ],
        [
            "java.lang.StringBuilder",
            "com.fasterxml.jackson.core.JsonLocation.appendOffsetDescription(java.lang.StringBuilder)",
            "public java.lang.StringBuilder appendOffsetDescription(java.lang.StringBuilder)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonLocation.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonLocation.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonLocation.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException(java.lang.String, com.fasterxml.jackson.core.JsonLocation)",
            "public com.fasterxml.jackson.core.JsonParseException(java.lang.String, com.fasterxml.jackson.core.JsonLocation)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException(java.lang.String, com.fasterxml.jackson.core.JsonLocation, java.lang.Throwable)",
            "public com.fasterxml.jackson.core.JsonParseException(java.lang.String, com.fasterxml.jackson.core.JsonLocation, java.lang.Throwable)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String)",
            "public com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, java.lang.Throwable)",
            "public com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, java.lang.Throwable)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, com.fasterxml.jackson.core.JsonLocation)",
            "public com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, com.fasterxml.jackson.core.JsonLocation)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, com.fasterxml.jackson.core.JsonLocation, java.lang.Throwable)",
            "public com.fasterxml.jackson.core.JsonParseException(com.fasterxml.jackson.core.JsonParser, java.lang.String, com.fasterxml.jackson.core.JsonLocation, java.lang.Throwable)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException.withParser(com.fasterxml.jackson.core.JsonParser)",
            "public com.fasterxml.jackson.core.JsonParseException withParser(com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParseException",
            "com.fasterxml.jackson.core.JsonParseException.withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)",
            "public com.fasterxml.jackson.core.JsonParseException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParseException.getProcessor()",
            "public com.fasterxml.jackson.core.JsonParser getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.util.RequestPayload",
            "com.fasterxml.jackson.core.JsonParseException.getRequestPayload()",
            "public com.fasterxml.jackson.core.util.RequestPayload getRequestPayload()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonParseException.getRequestPayloadAsString()",
            "public java.lang.String getRequestPayloadAsString()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonParseException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "com.fasterxml.jackson.core.exc.StreamReadException",
            "com.fasterxml.jackson.core.JsonParseException.withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)",
            "public com.fasterxml.jackson.core.exc.StreamReadException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)"
        ],
        [
            "com.fasterxml.jackson.core.exc.StreamReadException",
            "com.fasterxml.jackson.core.JsonParseException.withParser(com.fasterxml.jackson.core.JsonParser)",
            "public com.fasterxml.jackson.core.exc.StreamReadException withParser(com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParseException.getProcessor()",
            "public java.lang.Object getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$Feature[]",
            "com.fasterxml.jackson.core.JsonParser$Feature.values()",
            "public static com.fasterxml.jackson.core.JsonParser$Feature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$Feature",
            "com.fasterxml.jackson.core.JsonParser$Feature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonParser$Feature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser$Feature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser$Feature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser$Feature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser$Feature.getMask()",
            "public int getMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$NumberType[]",
            "com.fasterxml.jackson.core.JsonParser$NumberType.values()",
            "public static com.fasterxml.jackson.core.JsonParser$NumberType[] values()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$NumberType",
            "com.fasterxml.jackson.core.JsonParser$NumberType.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonParser$NumberType valueOf(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParser.getInputSource()",
            "public java.lang.Object getInputSource()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)",
            "public void setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[], java.lang.String)",
            "public void setRequestPayloadOnError(byte[], java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)",
            "public void setRequestPayloadOnError(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public void setSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "com.fasterxml.jackson.core.FormatSchema",
            "com.fasterxml.jackson.core.JsonParser.getSchema()",
            "public com.fasterxml.jackson.core.FormatSchema getSchema()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()",
            "public boolean requiresCustomCodec()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.canParseAsync()",
            "public boolean canParseAsync()"
        ],
        [
            "com.fasterxml.jackson.core.async.NonBlockingInputFeeder",
            "com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()",
            "public com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder()"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>",
            "com.fasterxml.jackson.core.JsonParser.getReadCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability> getReadCapabilities()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonParser.currentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation currentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonParser.currentTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation currentTokenLocation()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParser.currentValue()",
            "public java.lang.Object currentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.assignCurrentValue(java.lang.Object)",
            "public void assignCurrentValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParser.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)",
            "public int releaseBuffered(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)",
            "public int releaseBuffered(java.io.Writer) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser$Feature, boolean)",
            "public com.fasterxml.jackson.core.JsonParser configure(com.fasterxml.jackson.core.JsonParser$Feature, boolean)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)",
            "public boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.getFeatureMask()",
            "public int getFeatureMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)",
            "public com.fasterxml.jackson.core.JsonParser setFeatureMask(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.getFormatFeatures()",
            "public int getFormatFeatures()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonParser overrideFormatFeatures(int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonParser.nextFieldName()",
            "public java.lang.String nextFieldName() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonParser.nextTextValue()",
            "public java.lang.String nextTextValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.nextIntValue(int)",
            "public int nextIntValue(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.JsonParser.nextLongValue(long)",
            "public long nextLongValue(long) throws java.io.IOException"
        ],
        [
            "java.lang.Boolean",
            "com.fasterxml.jackson.core.JsonParser.nextBooleanValue()",
            "public java.lang.Boolean nextBooleanValue() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonParser.finishToken()",
            "public void finishToken() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.JsonParser.currentToken()",
            "public com.fasterxml.jackson.core.JsonToken currentToken()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.currentTokenId()",
            "public int currentTokenId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()",
            "public boolean isExpectedStartArrayToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()",
            "public boolean isExpectedStartObjectToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.isExpectedNumberIntToken()",
            "public boolean isExpectedNumberIntToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.isNaN()",
            "public boolean isNaN() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonParser.currentName()",
            "public java.lang.String currentName() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)",
            "public int getText(java.io.Writer) throws java.io.IOException, java.lang.UnsupportedOperationException"
        ],
        [
            "java.lang.Number",
            "com.fasterxml.jackson.core.JsonParser.getNumberValueExact()",
            "public java.lang.Number getNumberValueExact() throws java.io.IOException"
        ],
        [
            "byte",
            "com.fasterxml.jackson.core.JsonParser.getByteValue()",
            "public byte getByteValue() throws java.io.IOException"
        ],
        [
            "short",
            "com.fasterxml.jackson.core.JsonParser.getShortValue()",
            "public short getShortValue() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.getBooleanValue()",
            "public boolean getBooleanValue() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()",
            "public java.lang.Object getEmbeddedObject() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.JsonParser.getBinaryValue()",
            "public byte[] getBinaryValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)",
            "public int readBinaryValue(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.getValueAsInt()",
            "public int getValueAsInt() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)",
            "public int getValueAsInt(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.JsonParser.getValueAsLong()",
            "public long getValueAsLong() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)",
            "public long getValueAsLong(long) throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.JsonParser.getValueAsDouble()",
            "public double getValueAsDouble() throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)",
            "public double getValueAsDouble(double) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()",
            "public boolean getValueAsBoolean() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)",
            "public boolean getValueAsBoolean(boolean) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonParser.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.canReadObjectId()",
            "public boolean canReadObjectId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonParser.canReadTypeId()",
            "public boolean canReadTypeId()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParser.getObjectId()",
            "public java.lang.Object getObjectId() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonParser.getTypeId()",
            "public java.lang.Object getTypeId() throws java.io.IOException"
        ],
        [
            "<T> T",
            "com.fasterxml.jackson.core.JsonParser.readValueAs(java.lang.Class<T>)",
            "public <T> T readValueAs(java.lang.Class<T>) throws java.io.IOException"
        ],
        [
            "<T> T",
            "com.fasterxml.jackson.core.JsonParser.readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)",
            "public <T> T readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>) throws java.io.IOException"
        ],
        [
            "<T> java.util.Iterator<T>",
            "com.fasterxml.jackson.core.JsonParser.readValuesAs(java.lang.Class<T>)",
            "public <T> java.util.Iterator<T> readValuesAs(java.lang.Class<T>) throws java.io.IOException"
        ],
        [
            "<T> java.util.Iterator<T>",
            "com.fasterxml.jackson.core.JsonParser.readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)",
            "public <T> java.util.Iterator<T> readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>) throws java.io.IOException"
        ],
        [
            "<T extends com.fasterxml.jackson.core.TreeNode> T",
            "com.fasterxml.jackson.core.JsonParser.readValueAsTree()",
            "public <T extends com.fasterxml.jackson.core.TreeNode> T readValueAsTree() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.compile(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonPointer compile(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonPointer valueOf(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.empty()",
            "public static com.fasterxml.jackson.core.JsonPointer empty()"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.forPath(com.fasterxml.jackson.core.JsonStreamContext, boolean)",
            "public static com.fasterxml.jackson.core.JsonPointer forPath(com.fasterxml.jackson.core.JsonStreamContext, boolean)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonPointer.matches()",
            "public boolean matches()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonPointer.getMatchingProperty()",
            "public java.lang.String getMatchingProperty()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonPointer.getMatchingIndex()",
            "public int getMatchingIndex()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonPointer.mayMatchProperty()",
            "public boolean mayMatchProperty()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonPointer.mayMatchElement()",
            "public boolean mayMatchElement()"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.last()",
            "public com.fasterxml.jackson.core.JsonPointer last()"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.append(com.fasterxml.jackson.core.JsonPointer)",
            "public com.fasterxml.jackson.core.JsonPointer append(com.fasterxml.jackson.core.JsonPointer)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonPointer.matchesProperty(java.lang.String)",
            "public boolean matchesProperty(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.matchProperty(java.lang.String)",
            "public com.fasterxml.jackson.core.JsonPointer matchProperty(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonPointer.matchesElement(int)",
            "public boolean matchesElement(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.matchElement(int)",
            "public com.fasterxml.jackson.core.JsonPointer matchElement(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.tail()",
            "public com.fasterxml.jackson.core.JsonPointer tail()"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonPointer.head()",
            "public com.fasterxml.jackson.core.JsonPointer head()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonPointer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonPointer.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonPointer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonProcessingException.getLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getLocation()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonProcessingException.clearLocation()",
            "public void clearLocation()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonProcessingException.getOriginalMessage()",
            "public java.lang.String getOriginalMessage()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonProcessingException.getProcessor()",
            "public java.lang.Object getProcessor()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonProcessingException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonProcessingException.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonStreamContext.inArray()",
            "public final boolean inArray()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonStreamContext.inRoot()",
            "public final boolean inRoot()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonStreamContext.inObject()",
            "public final boolean inObject()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonStreamContext.getTypeDesc()",
            "public final java.lang.String getTypeDesc()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonStreamContext.typeDesc()",
            "public java.lang.String typeDesc()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonStreamContext.getEntryCount()",
            "public final int getEntryCount()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonStreamContext.getCurrentIndex()",
            "public final int getCurrentIndex()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonStreamContext.hasCurrentIndex()",
            "public boolean hasCurrentIndex()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonStreamContext.hasPathSegment()",
            "public boolean hasPathSegment()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonStreamContext.hasCurrentName()",
            "public boolean hasCurrentName()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.JsonStreamContext.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.JsonStreamContext.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonStreamContext.pathAsPointer()",
            "public com.fasterxml.jackson.core.JsonPointer pathAsPointer()"
        ],
        [
            "com.fasterxml.jackson.core.JsonPointer",
            "com.fasterxml.jackson.core.JsonStreamContext.pathAsPointer(boolean)",
            "public com.fasterxml.jackson.core.JsonPointer pathAsPointer(boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonStreamContext.startLocation(com.fasterxml.jackson.core.io.ContentReference)",
            "public com.fasterxml.jackson.core.JsonLocation startLocation(com.fasterxml.jackson.core.io.ContentReference)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.JsonStreamContext.getStartLocation(java.lang.Object)",
            "public com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonStreamContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken[]",
            "com.fasterxml.jackson.core.JsonToken.values()",
            "public static com.fasterxml.jackson.core.JsonToken[] values()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.JsonToken.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.JsonToken valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.JsonToken.id()",
            "public final int id()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.JsonToken.asString()",
            "public final java.lang.String asString()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.JsonToken.asCharArray()",
            "public final char[] asCharArray()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.JsonToken.asByteArray()",
            "public final byte[] asByteArray()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonToken.isNumeric()",
            "public final boolean isNumeric()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonToken.isStructStart()",
            "public final boolean isStructStart()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonToken.isStructEnd()",
            "public final boolean isStructEnd()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonToken.isScalarValue()",
            "public final boolean isScalarValue()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.JsonToken.isBoolean()",
            "public final boolean isBoolean()"
        ],
        [
            "com.fasterxml.jackson.core.JsonpCharacterEscapes",
            "com.fasterxml.jackson.core.JsonpCharacterEscapes()",
            "public com.fasterxml.jackson.core.JsonpCharacterEscapes()"
        ],
        [
            "com.fasterxml.jackson.core.JsonpCharacterEscapes",
            "com.fasterxml.jackson.core.JsonpCharacterEscapes.instance()",
            "public static com.fasterxml.jackson.core.JsonpCharacterEscapes instance()"
        ],
        [
            "com.fasterxml.jackson.core.SerializableString",
            "com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeSequence(int)",
            "public com.fasterxml.jackson.core.SerializableString getEscapeSequence(int)"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeCodesForAscii()",
            "public int[] getEscapeCodesForAscii()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.ObjectCodec.getJsonFactory()",
            "public com.fasterxml.jackson.core.JsonFactory getJsonFactory()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.ObjectCodec.getFactory()",
            "public com.fasterxml.jackson.core.JsonFactory getFactory()"
        ],
        [
            "com.fasterxml.jackson.core.StreamReadCapability[]",
            "com.fasterxml.jackson.core.StreamReadCapability.values()",
            "public static com.fasterxml.jackson.core.StreamReadCapability[] values()"
        ],
        [
            "com.fasterxml.jackson.core.StreamReadCapability",
            "com.fasterxml.jackson.core.StreamReadCapability.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.StreamReadCapability valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamReadCapability.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamReadCapability.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.StreamReadCapability.getMask()",
            "public int getMask()"
        ],
        [
            "com.fasterxml.jackson.core.StreamReadFeature[]",
            "com.fasterxml.jackson.core.StreamReadFeature.values()",
            "public static com.fasterxml.jackson.core.StreamReadFeature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.StreamReadFeature",
            "com.fasterxml.jackson.core.StreamReadFeature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.StreamReadFeature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.StreamReadFeature.getMask()",
            "public int getMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$Feature",
            "com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()",
            "public com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()"
        ],
        [
            "com.fasterxml.jackson.core.StreamWriteCapability[]",
            "com.fasterxml.jackson.core.StreamWriteCapability.values()",
            "public static com.fasterxml.jackson.core.StreamWriteCapability[] values()"
        ],
        [
            "com.fasterxml.jackson.core.StreamWriteCapability",
            "com.fasterxml.jackson.core.StreamWriteCapability.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.StreamWriteCapability valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamWriteCapability.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamWriteCapability.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.StreamWriteCapability.getMask()",
            "public int getMask()"
        ],
        [
            "com.fasterxml.jackson.core.StreamWriteFeature[]",
            "com.fasterxml.jackson.core.StreamWriteFeature.values()",
            "public static com.fasterxml.jackson.core.StreamWriteFeature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.StreamWriteFeature",
            "com.fasterxml.jackson.core.StreamWriteFeature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.StreamWriteFeature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.StreamWriteFeature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamWriteFeature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.StreamWriteFeature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.StreamWriteFeature.getMask()",
            "public int getMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator$Feature",
            "com.fasterxml.jackson.core.StreamWriteFeature.mappedFeature()",
            "public com.fasterxml.jackson.core.JsonGenerator$Feature mappedFeature()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.TSFBuilder.factoryFeaturesMask()",
            "public int factoryFeaturesMask()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.TSFBuilder.streamReadFeatures()",
            "public int streamReadFeatures()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.TSFBuilder.streamWriteFeatures()",
            "public int streamWriteFeatures()"
        ],
        [
            "com.fasterxml.jackson.core.io.InputDecorator",
            "com.fasterxml.jackson.core.TSFBuilder.inputDecorator()",
            "public com.fasterxml.jackson.core.io.InputDecorator inputDecorator()"
        ],
        [
            "com.fasterxml.jackson.core.io.OutputDecorator",
            "com.fasterxml.jackson.core.TSFBuilder.outputDecorator()",
            "public com.fasterxml.jackson.core.io.OutputDecorator outputDecorator()"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.JsonFactory$Feature)",
            "public B enable(com.fasterxml.jackson.core.JsonFactory$Feature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.JsonFactory$Feature)",
            "public B disable(com.fasterxml.jackson.core.JsonFactory$Feature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.configure(com.fasterxml.jackson.core.JsonFactory.Feature, boolean)",
            "public B configure(com.fasterxml.jackson.core.JsonFactory$Feature, boolean)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.StreamReadFeature)",
            "public B enable(com.fasterxml.jackson.core.StreamReadFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.StreamReadFeature, com.fasterxml.jackson.core.StreamReadFeature...)",
            "public B enable(com.fasterxml.jackson.core.StreamReadFeature, com.fasterxml.jackson.core.StreamReadFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.StreamReadFeature)",
            "public B disable(com.fasterxml.jackson.core.StreamReadFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.StreamReadFeature, com.fasterxml.jackson.core.StreamReadFeature...)",
            "public B disable(com.fasterxml.jackson.core.StreamReadFeature, com.fasterxml.jackson.core.StreamReadFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.configure(com.fasterxml.jackson.core.StreamReadFeature, boolean)",
            "public B configure(com.fasterxml.jackson.core.StreamReadFeature, boolean)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.StreamWriteFeature)",
            "public B enable(com.fasterxml.jackson.core.StreamWriteFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.StreamWriteFeature, com.fasterxml.jackson.core.StreamWriteFeature...)",
            "public B enable(com.fasterxml.jackson.core.StreamWriteFeature, com.fasterxml.jackson.core.StreamWriteFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.StreamWriteFeature)",
            "public B disable(com.fasterxml.jackson.core.StreamWriteFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.StreamWriteFeature, com.fasterxml.jackson.core.StreamWriteFeature...)",
            "public B disable(com.fasterxml.jackson.core.StreamWriteFeature, com.fasterxml.jackson.core.StreamWriteFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.configure(com.fasterxml.jackson.core.StreamWriteFeature, boolean)",
            "public B configure(com.fasterxml.jackson.core.StreamWriteFeature, boolean)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.json.JsonReadFeature)",
            "public B enable(com.fasterxml.jackson.core.json.JsonReadFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)",
            "public B enable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.json.JsonReadFeature)",
            "public B disable(com.fasterxml.jackson.core.json.JsonReadFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)",
            "public B disable(com.fasterxml.jackson.core.json.JsonReadFeature, com.fasterxml.jackson.core.json.JsonReadFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.configure(com.fasterxml.jackson.core.json.JsonReadFeature, boolean)",
            "public B configure(com.fasterxml.jackson.core.json.JsonReadFeature, boolean)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.json.JsonWriteFeature)",
            "public B enable(com.fasterxml.jackson.core.json.JsonWriteFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.enable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)",
            "public B enable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.json.JsonWriteFeature)",
            "public B disable(com.fasterxml.jackson.core.json.JsonWriteFeature)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.disable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)",
            "public B disable(com.fasterxml.jackson.core.json.JsonWriteFeature, com.fasterxml.jackson.core.json.JsonWriteFeature...)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.configure(com.fasterxml.jackson.core.json.JsonWriteFeature, boolean)",
            "public B configure(com.fasterxml.jackson.core.json.JsonWriteFeature, boolean)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.inputDecorator(com.fasterxml.jackson.core.io.InputDecorator)",
            "public B inputDecorator(com.fasterxml.jackson.core.io.InputDecorator)"
        ],
        [
            "B",
            "com.fasterxml.jackson.core.TSFBuilder.outputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)",
            "public B outputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)"
        ],
        [
            "com.fasterxml.jackson.core.TokenStreamFactory",
            "com.fasterxml.jackson.core.TokenStreamFactory()",
            "public com.fasterxml.jackson.core.TokenStreamFactory()"
        ],
        [
            "com.fasterxml.jackson.core.TreeCodec",
            "com.fasterxml.jackson.core.TreeCodec()",
            "public com.fasterxml.jackson.core.TreeCodec()"
        ],
        [
            "com.fasterxml.jackson.core.TreeNode",
            "com.fasterxml.jackson.core.TreeCodec.missingNode()",
            "public com.fasterxml.jackson.core.TreeNode missingNode()"
        ],
        [
            "com.fasterxml.jackson.core.TreeNode",
            "com.fasterxml.jackson.core.TreeCodec.nullNode()",
            "public com.fasterxml.jackson.core.TreeNode nullNode()"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.Version(int, int, int, java.lang.String)",
            "public com.fasterxml.jackson.core.Version(int, int, int, java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.Version(int, int, int, java.lang.String, java.lang.String, java.lang.String)",
            "public com.fasterxml.jackson.core.Version(int, int, int, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.Version.unknownVersion()",
            "public static com.fasterxml.jackson.core.Version unknownVersion()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Version.isUnknownVersion()",
            "public boolean isUnknownVersion()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Version.isSnapshot()",
            "public boolean isSnapshot()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Version.isUknownVersion()",
            "public boolean isUknownVersion()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Version.getMajorVersion()",
            "public int getMajorVersion()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Version.getMinorVersion()",
            "public int getMinorVersion()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Version.getPatchLevel()",
            "public int getPatchLevel()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Version.getGroupId()",
            "public java.lang.String getGroupId()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Version.getArtifactId()",
            "public java.lang.String getArtifactId()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Version.toFullString()",
            "public java.lang.String toFullString()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.Version.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Version.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.Version.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Version.compareTo(com.fasterxml.jackson.core.Version)",
            "public int compareTo(com.fasterxml.jackson.core.Version)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.Version.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.base.GeneratorBase.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.base.GeneratorBase.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public final boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.GeneratorBase.getFeatureMask()",
            "public int getFeatureMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.base.GeneratorBase.enable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.base.GeneratorBase.disable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int)",
            "public com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonGenerator overrideStdFeatures(int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.base.GeneratorBase.useDefaultPrettyPrinter()",
            "public com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.base.GeneratorBase.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.base.GeneratorBase.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getOutputContext()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(java.lang.Object)",
            "public void writeStartObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeString(com.fasterxml.jackson.core.SerializableString)",
            "public void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String)",
            "public void writeRawValue(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(java.lang.String, int, int)",
            "public void writeRawValue(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[], int, int)",
            "public void writeRawValue(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRawValue(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int)",
            "public int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeObject(java.lang.Object)",
            "public void writeObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.writeTree(com.fasterxml.jackson.core.TreeNode)",
            "public void writeTree(com.fasterxml.jackson.core.TreeNode) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.GeneratorBase.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.GeneratorBase.isClosed()",
            "public boolean isClosed()"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.base.ParserBase.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)",
            "public com.fasterxml.jackson.core.JsonParser setFeatureMask(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.base.ParserBase.getCurrentName()",
            "public java.lang.String getCurrentName() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)",
            "public void overrideCurrentName(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.ParserBase.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserBase.isClosed()",
            "public boolean isClosed()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.base.ParserBase.getParsingContext()",
            "public com.fasterxml.jackson.core.json.JsonReadContext getParsingContext()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()",
            "public boolean hasTextCharacters()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()",
            "public long getTokenCharacterOffset()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()",
            "public int getTokenLineNr()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()",
            "public int getTokenColumnNr()"
        ],
        [
            "com.fasterxml.jackson.core.util.ByteArrayBuilder",
            "com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()",
            "public com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserBase.isNaN()",
            "public boolean isNaN()"
        ],
        [
            "java.lang.Number",
            "com.fasterxml.jackson.core.base.ParserBase.getNumberValue()",
            "public java.lang.Number getNumberValue() throws java.io.IOException"
        ],
        [
            "java.lang.Number",
            "com.fasterxml.jackson.core.base.ParserBase.getNumberValueExact()",
            "public java.lang.Number getNumberValueExact() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$NumberType",
            "com.fasterxml.jackson.core.base.ParserBase.getNumberType()",
            "public com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserBase.getIntValue()",
            "public int getIntValue() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.base.ParserBase.getLongValue()",
            "public long getLongValue() throws java.io.IOException"
        ],
        [
            "java.math.BigInteger",
            "com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()",
            "public java.math.BigInteger getBigIntegerValue() throws java.io.IOException"
        ],
        [
            "float",
            "com.fasterxml.jackson.core.base.ParserBase.getFloatValue()",
            "public float getFloatValue() throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()",
            "public double getDoubleValue() throws java.io.IOException"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()",
            "public java.math.BigDecimal getDecimalValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.base.ParserBase.getParsingContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getParsingContext()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()",
            "public com.fasterxml.jackson.core.JsonToken currentToken()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()",
            "public int currentTokenId()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()",
            "public com.fasterxml.jackson.core.JsonToken getCurrentToken()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()",
            "public int getCurrentTokenId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()",
            "public boolean hasCurrentToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)",
            "public boolean hasTokenId(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)",
            "public boolean hasToken(com.fasterxml.jackson.core.JsonToken)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()",
            "public boolean isExpectedStartArrayToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()",
            "public boolean isExpectedStartObjectToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedNumberIntToken()",
            "public boolean isExpectedNumberIntToken()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()",
            "public com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()",
            "public com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()",
            "public void clearCurrentToken()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()",
            "public com.fasterxml.jackson.core.JsonToken getLastClearedToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)",
            "public boolean getValueAsBoolean(boolean) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()",
            "public int getValueAsInt() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)",
            "public int getValueAsInt(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()",
            "public long getValueAsLong() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)",
            "public long getValueAsLong(long) throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)",
            "public double getValueAsDouble(double) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)",
            "public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.exc.InputCoercionException",
            "com.fasterxml.jackson.core.exc.InputCoercionException(com.fasterxml.jackson.core.JsonParser, java.lang.String, com.fasterxml.jackson.core.JsonToken, java.lang.Class<?>)",
            "public com.fasterxml.jackson.core.exc.InputCoercionException(com.fasterxml.jackson.core.JsonParser, java.lang.String, com.fasterxml.jackson.core.JsonToken, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.core.exc.InputCoercionException",
            "com.fasterxml.jackson.core.exc.InputCoercionException.withParser(com.fasterxml.jackson.core.JsonParser)",
            "public com.fasterxml.jackson.core.exc.InputCoercionException withParser(com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "com.fasterxml.jackson.core.exc.InputCoercionException",
            "com.fasterxml.jackson.core.exc.InputCoercionException.withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)",
            "public com.fasterxml.jackson.core.exc.InputCoercionException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.exc.InputCoercionException.getInputType()",
            "public com.fasterxml.jackson.core.JsonToken getInputType()"
        ],
        [
            "java.lang.Class<?>",
            "com.fasterxml.jackson.core.exc.InputCoercionException.getTargetType()",
            "public java.lang.Class<?> getTargetType()"
        ],
        [
            "com.fasterxml.jackson.core.exc.StreamReadException",
            "com.fasterxml.jackson.core.exc.InputCoercionException.withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)",
            "public com.fasterxml.jackson.core.exc.StreamReadException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)"
        ],
        [
            "com.fasterxml.jackson.core.exc.StreamReadException",
            "com.fasterxml.jackson.core.exc.InputCoercionException.withParser(com.fasterxml.jackson.core.JsonParser)",
            "public com.fasterxml.jackson.core.exc.StreamReadException withParser(com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.exc.StreamReadException.getProcessor()",
            "public com.fasterxml.jackson.core.JsonParser getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.util.RequestPayload",
            "com.fasterxml.jackson.core.exc.StreamReadException.getRequestPayload()",
            "public com.fasterxml.jackson.core.util.RequestPayload getRequestPayload()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.exc.StreamReadException.getRequestPayloadAsString()",
            "public java.lang.String getRequestPayloadAsString()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.exc.StreamReadException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.exc.StreamReadException.getProcessor()",
            "public java.lang.Object getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.exc.StreamWriteException.getProcessor()",
            "public com.fasterxml.jackson.core.JsonGenerator getProcessor()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.exc.StreamWriteException.getProcessor()",
            "public java.lang.Object getProcessor()"
        ],
        [
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.core.filter.TokenFilter, boolean, boolean)",
            "public com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.core.filter.TokenFilter, boolean, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.core.filter.TokenFilter, com.fasterxml.jackson.core.filter.TokenFilter$Inclusion, boolean)",
            "public com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.core.filter.TokenFilter, com.fasterxml.jackson.core.filter.TokenFilter$Inclusion, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter()",
            "public com.fasterxml.jackson.core.filter.TokenFilter getFilter()"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getFilterContext()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount()",
            "public int getMatchCount()"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getOutputContext()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()",
            "public void writeStartArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int)",
            "public void writeStartArray(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(java.lang.Object)",
            "public void writeStartArray(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(java.lang.Object, int)",
            "public void writeStartArray(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray()",
            "public void writeEndArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject()",
            "public void writeStartObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(java.lang.Object)",
            "public void writeStartObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(java.lang.Object, int)",
            "public void writeStartObject(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject()",
            "public void writeEndObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(java.lang.String)",
            "public void writeFieldName(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long)",
            "public void writeFieldId(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.lang.String)",
            "public void writeString(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[], int, int)",
            "public void writeString(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)",
            "public void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(java.io.Reader, int)",
            "public void writeString(java.io.Reader, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[], int, int)",
            "public void writeRawUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[], int, int)",
            "public void writeUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String)",
            "public void writeRaw(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(java.lang.String, int, int)",
            "public void writeRaw(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[], int, int)",
            "public void writeRaw(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char)",
            "public void writeRaw(char) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String)",
            "public void writeRawValue(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(java.lang.String, int, int)",
            "public void writeRawValue(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[], int, int)",
            "public void writeRawValue(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)",
            "public void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int)",
            "public int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short)",
            "public void writeNumber(short) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int)",
            "public void writeNumber(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long)",
            "public void writeNumber(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.math.BigInteger)",
            "public void writeNumber(java.math.BigInteger) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double)",
            "public void writeNumber(double) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float)",
            "public void writeNumber(float) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.math.BigDecimal)",
            "public void writeNumber(java.math.BigDecimal) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(java.lang.String)",
            "public void writeNumber(java.lang.String) throws java.io.IOException, java.lang.UnsupportedOperationException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[], int, int)",
            "public void writeNumber(char[], int, int) throws java.io.IOException, java.lang.UnsupportedOperationException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean)",
            "public void writeBoolean(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull()",
            "public void writeNull() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(java.lang.String)",
            "public void writeOmittedField(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(java.lang.Object)",
            "public void writeObjectId(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(java.lang.Object)",
            "public void writeObjectRef(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(java.lang.Object)",
            "public void writeTypeId(java.lang.Object) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.filter.TokenFilter, boolean, boolean)",
            "public com.fasterxml.jackson.core.filter.FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.filter.TokenFilter, boolean, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.filter.TokenFilter, com.fasterxml.jackson.core.filter.TokenFilter$Inclusion, boolean)",
            "public com.fasterxml.jackson.core.filter.FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.filter.TokenFilter, com.fasterxml.jackson.core.filter.TokenFilter$Inclusion, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter()",
            "public com.fasterxml.jackson.core.filter.TokenFilter getFilter()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount()",
            "public int getMatchCount()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken()",
            "public com.fasterxml.jackson.core.JsonToken getCurrentToken()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken()",
            "public com.fasterxml.jackson.core.JsonToken currentToken()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId()",
            "public final int getCurrentTokenId()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId()",
            "public final int currentTokenId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken()",
            "public boolean hasCurrentToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int)",
            "public boolean hasTokenId(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)",
            "public final boolean hasToken(com.fasterxml.jackson.core.JsonToken)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()",
            "public boolean isExpectedStartArrayToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken()",
            "public boolean isExpectedStartObjectToken()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getParsingContext()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName()",
            "public java.lang.String getCurrentName() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentName()",
            "public java.lang.String currentName() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken()",
            "public void clearCurrentToken()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken()",
            "public com.fasterxml.jackson.core.JsonToken getLastClearedToken()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(java.lang.String)",
            "public void overrideCurrentName(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()",
            "public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue()",
            "public com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren()",
            "public com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText()",
            "public java.lang.String getText() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters()",
            "public boolean hasTextCharacters()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters()",
            "public char[] getTextCharacters() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength()",
            "public int getTextLength() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset()",
            "public int getTextOffset() throws java.io.IOException"
        ],
        [
            "java.math.BigInteger",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue()",
            "public java.math.BigInteger getBigIntegerValue() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue()",
            "public boolean getBooleanValue() throws java.io.IOException"
        ],
        [
            "byte",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue()",
            "public byte getByteValue() throws java.io.IOException"
        ],
        [
            "short",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue()",
            "public short getShortValue() throws java.io.IOException"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue()",
            "public java.math.BigDecimal getDecimalValue() throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue()",
            "public double getDoubleValue() throws java.io.IOException"
        ],
        [
            "float",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue()",
            "public float getFloatValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue()",
            "public int getIntValue() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue()",
            "public long getLongValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$NumberType",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType()",
            "public com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException"
        ],
        [
            "java.lang.Number",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue()",
            "public java.lang.Number getNumberValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt()",
            "public int getValueAsInt() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int)",
            "public int getValueAsInt(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong()",
            "public long getValueAsLong() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long)",
            "public long getValueAsLong(long) throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble()",
            "public double getValueAsDouble() throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double)",
            "public double getValueAsDouble(double) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean()",
            "public boolean getValueAsBoolean() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean)",
            "public boolean getValueAsBoolean(boolean) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(java.lang.String)",
            "public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject()",
            "public java.lang.Object getEmbeddedObject() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter(java.lang.String)",
            "public com.fasterxml.jackson.core.filter.JsonPointerBasedFilter(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter(com.fasterxml.jackson.core.JsonPointer)",
            "public com.fasterxml.jackson.core.filter.JsonPointerBasedFilter(com.fasterxml.jackson.core.JsonPointer)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeElement(int)",
            "public com.fasterxml.jackson.core.filter.TokenFilter includeElement(int)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeProperty(java.lang.String)",
            "public com.fasterxml.jackson.core.filter.TokenFilter includeProperty(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartArray()",
            "public com.fasterxml.jackson.core.filter.TokenFilter filterStartArray()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartObject()",
            "public com.fasterxml.jackson.core.filter.TokenFilter filterStartObject()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[]",
            "com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.values()",
            "public static com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] values()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter$Inclusion",
            "com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.filter.TokenFilter$Inclusion valueOf(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject()",
            "public com.fasterxml.jackson.core.filter.TokenFilter filterStartObject()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray()",
            "public com.fasterxml.jackson.core.filter.TokenFilter filterStartArray()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()",
            "public void filterFinishObject()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()",
            "public void filterFinishArray()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(java.lang.String)",
            "public com.fasterxml.jackson.core.filter.TokenFilter includeProperty(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int)",
            "public com.fasterxml.jackson.core.filter.TokenFilter includeElement(int)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int)",
            "public com.fasterxml.jackson.core.filter.TokenFilter includeRootValue(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeValue(com.fasterxml.jackson.core.JsonParser)",
            "public boolean includeValue(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean)",
            "public boolean includeBoolean(boolean)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNull()",
            "public boolean includeNull()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.lang.String)",
            "public boolean includeString(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader, int)",
            "public boolean includeString(java.io.Reader, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int)",
            "public boolean includeNumber(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long)",
            "public boolean includeNumber(long)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float)",
            "public boolean includeNumber(float)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double)",
            "public boolean includeNumber(double)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigDecimal)",
            "public boolean includeNumber(java.math.BigDecimal)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigInteger)",
            "public boolean includeNumber(java.math.BigInteger)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeBinary()",
            "public boolean includeBinary()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue()",
            "public boolean includeRawValue()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(java.lang.Object)",
            "public boolean includeEmbeddedValue(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.TokenFilter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.createRootContext(com.fasterxml.jackson.core.filter.TokenFilter)",
            "public static com.fasterxml.jackson.core.filter.TokenFilterContext createRootContext(com.fasterxml.jackson.core.filter.TokenFilter)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext(com.fasterxml.jackson.core.filter.TokenFilter, boolean)",
            "public com.fasterxml.jackson.core.filter.TokenFilterContext createChildArrayContext(com.fasterxml.jackson.core.filter.TokenFilter, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext(com.fasterxml.jackson.core.filter.TokenFilter, boolean)",
            "public com.fasterxml.jackson.core.filter.TokenFilterContext createChildObjectContext(com.fasterxml.jackson.core.filter.TokenFilter, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.setFieldName(java.lang.String)",
            "public com.fasterxml.jackson.core.filter.TokenFilter setFieldName(java.lang.String) throws com.fasterxml.jackson.core.JsonProcessingException"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.checkValue(com.fasterxml.jackson.core.filter.TokenFilter)",
            "public com.fasterxml.jackson.core.filter.TokenFilter checkValue(com.fasterxml.jackson.core.filter.TokenFilter)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.ensureFieldNameWritten(com.fasterxml.jackson.core.JsonGenerator)",
            "public void ensureFieldNameWritten(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.writePath(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writePath(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.closeArray(com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.filter.TokenFilterContext closeArray(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.closeObject(com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.filter.TokenFilterContext closeObject(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.skipParentChecks()",
            "public void skipParentChecks()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.getParent()",
            "public final com.fasterxml.jackson.core.filter.TokenFilterContext getParent()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.getCurrentName()",
            "public final java.lang.String getCurrentName()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.hasCurrentName()",
            "public boolean hasCurrentName()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilter",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.getFilter()",
            "public com.fasterxml.jackson.core.filter.TokenFilter getFilter()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.isStartHandled()",
            "public boolean isStartHandled()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.nextTokenToRead()",
            "public com.fasterxml.jackson.core.JsonToken nextTokenToRead()"
        ],
        [
            "com.fasterxml.jackson.core.filter.TokenFilterContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.findChildOf(com.fasterxml.jackson.core.filter.TokenFilterContext)",
            "public com.fasterxml.jackson.core.filter.TokenFilterContext findChildOf(com.fasterxml.jackson.core.filter.TokenFilterContext)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.filter.TokenFilterContext.getParent()",
            "public com.fasterxml.jackson.core.JsonStreamContext getParent()"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatDetector",
            "com.fasterxml.jackson.core.format.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory...)",
            "public com.fasterxml.jackson.core.format.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory...)"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatDetector",
            "com.fasterxml.jackson.core.format.DataFormatDetector(java.util.Collection<com.fasterxml.jackson.core.JsonFactory>)",
            "public com.fasterxml.jackson.core.format.DataFormatDetector(java.util.Collection<com.fasterxml.jackson.core.JsonFactory>)"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatDetector",
            "com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(com.fasterxml.jackson.core.format.MatchStrength)",
            "public com.fasterxml.jackson.core.format.DataFormatDetector withOptimalMatch(com.fasterxml.jackson.core.format.MatchStrength)"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatDetector",
            "com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(com.fasterxml.jackson.core.format.MatchStrength)",
            "public com.fasterxml.jackson.core.format.DataFormatDetector withMinimalMatch(com.fasterxml.jackson.core.format.MatchStrength)"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatDetector",
            "com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int)",
            "public com.fasterxml.jackson.core.format.DataFormatDetector withMaxInputLookahead(int)"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatMatcher",
            "com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)",
            "public com.fasterxml.jackson.core.format.DataFormatMatcher findFormat(java.io.InputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatMatcher",
            "com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[])",
            "public com.fasterxml.jackson.core.format.DataFormatMatcher findFormat(byte[]) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatMatcher",
            "com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[], int, int)",
            "public com.fasterxml.jackson.core.format.DataFormatMatcher findFormat(byte[], int, int) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.format.DataFormatDetector.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()",
            "public boolean hasMatch()"
        ],
        [
            "com.fasterxml.jackson.core.format.MatchStrength",
            "com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()",
            "public com.fasterxml.jackson.core.format.MatchStrength getMatchStrength()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()",
            "public com.fasterxml.jackson.core.JsonFactory getMatch()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()",
            "public java.lang.String getMatchedFormatName()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()",
            "public com.fasterxml.jackson.core.JsonParser createParserWithMatch() throws java.io.IOException"
        ],
        [
            "java.io.InputStream",
            "com.fasterxml.jackson.core.format.DataFormatMatcher.getDataStream()",
            "public java.io.InputStream getDataStream()"
        ],
        [
            "com.fasterxml.jackson.core.format.InputAccessor$Std",
            "com.fasterxml.jackson.core.format.InputAccessor$Std(java.io.InputStream, byte[])",
            "public com.fasterxml.jackson.core.format.InputAccessor$Std(java.io.InputStream, byte[])"
        ],
        [
            "com.fasterxml.jackson.core.format.InputAccessor$Std",
            "com.fasterxml.jackson.core.format.InputAccessor$Std(byte[])",
            "public com.fasterxml.jackson.core.format.InputAccessor$Std(byte[])"
        ],
        [
            "com.fasterxml.jackson.core.format.InputAccessor$Std",
            "com.fasterxml.jackson.core.format.InputAccessor$Std(byte[], int, int)",
            "public com.fasterxml.jackson.core.format.InputAccessor$Std(byte[], int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.format.InputAccessor$Std.hasMoreBytes()",
            "public boolean hasMoreBytes() throws java.io.IOException"
        ],
        [
            "byte",
            "com.fasterxml.jackson.core.format.InputAccessor$Std.nextByte()",
            "public byte nextByte() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.format.InputAccessor$Std.reset()",
            "public void reset()"
        ],
        [
            "com.fasterxml.jackson.core.format.DataFormatMatcher",
            "com.fasterxml.jackson.core.format.InputAccessor$Std.createMatcher(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.core.format.MatchStrength)",
            "public com.fasterxml.jackson.core.format.DataFormatMatcher createMatcher(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.core.format.MatchStrength)"
        ],
        [
            "com.fasterxml.jackson.core.format.MatchStrength[]",
            "com.fasterxml.jackson.core.format.MatchStrength.values()",
            "public static com.fasterxml.jackson.core.format.MatchStrength[] values()"
        ],
        [
            "com.fasterxml.jackson.core.format.MatchStrength",
            "com.fasterxml.jackson.core.format.MatchStrength.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.format.MatchStrength valueOf(java.lang.String)"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.io.BigDecimalParser.parse(java.lang.String)",
            "public static java.math.BigDecimal parse(java.lang.String)"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[], int, int)",
            "public static java.math.BigDecimal parse(char[], int, int)"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[])",
            "public static java.math.BigDecimal parse(char[])"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int)",
            "public int[] escapesFor(int)"
        ],
        [
            "com.fasterxml.jackson.core.io.CharTypes",
            "com.fasterxml.jackson.core.io.CharTypes()",
            "public com.fasterxml.jackson.core.io.CharTypes()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1()",
            "public static int[] getInputCodeLatin1()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8()",
            "public static int[] getInputCodeUtf8()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1JsNames()",
            "public static int[] getInputCodeLatin1JsNames()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames()",
            "public static int[] getInputCodeUtf8JsNames()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment()",
            "public static int[] getInputCodeComment()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.getInputCodeWS()",
            "public static int[] getInputCodeWS()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes()",
            "public static int[] get7BitOutputEscapes()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int)",
            "public static int[] get7BitOutputEscapes(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.CharTypes.charToHex(int)",
            "public static int charToHex(int)"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.io.CharTypes.hexToChar(int)",
            "public static char hexToChar(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.CharTypes.appendQuoted(java.lang.StringBuilder, java.lang.String)",
            "public static void appendQuoted(java.lang.StringBuilder, java.lang.String)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.CharTypes.copyHexChars()",
            "public static char[] copyHexChars()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.CharTypes.copyHexBytes()",
            "public static byte[] copyHexBytes()"
        ],
        [
            "com.fasterxml.jackson.core.io.CharacterEscapes",
            "com.fasterxml.jackson.core.io.CharacterEscapes()",
            "public com.fasterxml.jackson.core.io.CharacterEscapes()"
        ],
        [
            "int[]",
            "com.fasterxml.jackson.core.io.CharacterEscapes.standardAsciiEscapesForJSON()",
            "public static int[] standardAsciiEscapesForJSON()"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.io.ContentReference.unknown()",
            "public static com.fasterxml.jackson.core.io.ContentReference unknown()"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.io.ContentReference.construct(boolean, java.lang.Object)",
            "public static com.fasterxml.jackson.core.io.ContentReference construct(boolean, java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.io.ContentReference.construct(boolean, java.lang.Object, int, int)",
            "public static com.fasterxml.jackson.core.io.ContentReference construct(boolean, java.lang.Object, int, int)"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.io.ContentReference.rawReference(boolean, java.lang.Object)",
            "public static com.fasterxml.jackson.core.io.ContentReference rawReference(boolean, java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.io.ContentReference.rawReference(java.lang.Object)",
            "public static com.fasterxml.jackson.core.io.ContentReference rawReference(java.lang.Object)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.ContentReference.hasTextualContent()",
            "public boolean hasTextualContent()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.io.ContentReference.getRawContent()",
            "public java.lang.Object getRawContent()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.ContentReference.contentOffset()",
            "public int contentOffset()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.ContentReference.contentLength()",
            "public int contentLength()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.ContentReference.buildSourceDescription()",
            "public java.lang.String buildSourceDescription()"
        ],
        [
            "java.lang.StringBuilder",
            "com.fasterxml.jackson.core.io.ContentReference.appendSourceDescription(java.lang.StringBuilder)",
            "public java.lang.StringBuilder appendSourceDescription(java.lang.StringBuilder)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.ContentReference.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.ContentReference.hashCode()",
            "public int hashCode()"
        ],
        [
            "com.fasterxml.jackson.core.io.DataOutputAsStream",
            "com.fasterxml.jackson.core.io.DataOutputAsStream(java.io.DataOutput)",
            "public com.fasterxml.jackson.core.io.DataOutputAsStream(java.io.DataOutput)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.DataOutputAsStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[])",
            "public void write(byte[]) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[], int, int)",
            "public void write(byte[], int, int) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.io.IOContext",
            "com.fasterxml.jackson.core.io.IOContext(com.fasterxml.jackson.core.util.BufferRecycler, com.fasterxml.jackson.core.io.ContentReference, boolean)",
            "public com.fasterxml.jackson.core.io.IOContext(com.fasterxml.jackson.core.util.BufferRecycler, com.fasterxml.jackson.core.io.ContentReference, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.io.IOContext",
            "com.fasterxml.jackson.core.io.IOContext(com.fasterxml.jackson.core.util.BufferRecycler, java.lang.Object, boolean)",
            "public com.fasterxml.jackson.core.io.IOContext(com.fasterxml.jackson.core.util.BufferRecycler, java.lang.Object, boolean)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.setEncoding(com.fasterxml.jackson.core.JsonEncoding)",
            "public void setEncoding(com.fasterxml.jackson.core.JsonEncoding)"
        ],
        [
            "com.fasterxml.jackson.core.io.IOContext",
            "com.fasterxml.jackson.core.io.IOContext.withEncoding(com.fasterxml.jackson.core.JsonEncoding)",
            "public com.fasterxml.jackson.core.io.IOContext withEncoding(com.fasterxml.jackson.core.JsonEncoding)"
        ],
        [
            "com.fasterxml.jackson.core.JsonEncoding",
            "com.fasterxml.jackson.core.io.IOContext.getEncoding()",
            "public com.fasterxml.jackson.core.JsonEncoding getEncoding()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.IOContext.isResourceManaged()",
            "public boolean isResourceManaged()"
        ],
        [
            "com.fasterxml.jackson.core.io.ContentReference",
            "com.fasterxml.jackson.core.io.IOContext.contentReference()",
            "public com.fasterxml.jackson.core.io.ContentReference contentReference()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.io.IOContext.getSourceReference()",
            "public java.lang.Object getSourceReference()"
        ],
        [
            "com.fasterxml.jackson.core.util.TextBuffer",
            "com.fasterxml.jackson.core.io.IOContext.constructTextBuffer()",
            "public com.fasterxml.jackson.core.util.TextBuffer constructTextBuffer()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer()",
            "public byte[] allocReadIOBuffer()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer(int)",
            "public byte[] allocReadIOBuffer(int)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer()",
            "public byte[] allocWriteEncodingBuffer()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer(int)",
            "public byte[] allocWriteEncodingBuffer(int)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer()",
            "public byte[] allocBase64Buffer()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer(int)",
            "public byte[] allocBase64Buffer(int)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer()",
            "public char[] allocTokenBuffer()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer(int)",
            "public char[] allocTokenBuffer(int)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.IOContext.allocConcatBuffer()",
            "public char[] allocConcatBuffer()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.IOContext.allocNameCopyBuffer(int)",
            "public char[] allocNameCopyBuffer(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.releaseReadIOBuffer(byte[])",
            "public void releaseReadIOBuffer(byte[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.releaseWriteEncodingBuffer(byte[])",
            "public void releaseWriteEncodingBuffer(byte[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.releaseBase64Buffer(byte[])",
            "public void releaseBase64Buffer(byte[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.releaseTokenBuffer(char[])",
            "public void releaseTokenBuffer(char[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.releaseConcatBuffer(char[])",
            "public void releaseConcatBuffer(char[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.IOContext.releaseNameCopyBuffer(char[])",
            "public void releaseNameCopyBuffer(char[])"
        ],
        [
            "com.fasterxml.jackson.core.io.InputDecorator",
            "com.fasterxml.jackson.core.io.InputDecorator()",
            "public com.fasterxml.jackson.core.io.InputDecorator()"
        ],
        [
            "java.io.DataInput",
            "com.fasterxml.jackson.core.io.InputDecorator.decorate(com.fasterxml.jackson.core.io.IOContext, java.io.DataInput)",
            "public java.io.DataInput decorate(com.fasterxml.jackson.core.io.IOContext, java.io.DataInput) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.io.JsonEOFException",
            "com.fasterxml.jackson.core.io.JsonEOFException(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.JsonToken, java.lang.String)",
            "public com.fasterxml.jackson.core.io.JsonEOFException(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.JsonToken, java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.io.JsonEOFException.getTokenBeingDecoded()",
            "public com.fasterxml.jackson.core.JsonToken getTokenBeingDecoded()"
        ],
        [
            "com.fasterxml.jackson.core.io.JsonStringEncoder",
            "com.fasterxml.jackson.core.io.JsonStringEncoder()",
            "public com.fasterxml.jackson.core.io.JsonStringEncoder()"
        ],
        [
            "com.fasterxml.jackson.core.io.JsonStringEncoder",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.getInstance()",
            "public static com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(java.lang.String)",
            "public char[] quoteAsString(java.lang.String)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(java.lang.CharSequence)",
            "public char[] quoteAsString(java.lang.CharSequence)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(java.lang.CharSequence, java.lang.StringBuilder)",
            "public void quoteAsString(java.lang.CharSequence, java.lang.StringBuilder)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsUTF8(java.lang.String)",
            "public byte[] quoteAsUTF8(java.lang.String)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(java.lang.String)",
            "public byte[] encodeAsUTF8(java.lang.String)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(java.lang.CharSequence)",
            "public byte[] encodeAsUTF8(java.lang.CharSequence)"
        ],
        [
            "com.fasterxml.jackson.core.io.MergedStream",
            "com.fasterxml.jackson.core.io.MergedStream(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream, byte[], int, int)",
            "public com.fasterxml.jackson.core.io.MergedStream(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream, byte[], int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.MergedStream.available()",
            "public int available() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.MergedStream.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "synchronized",
            "com.fasterxml.jackson.core.io.MergedStream.void mark(int)",
            "public synchronized void mark(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.MergedStream.markSupported()",
            "public boolean markSupported()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.MergedStream.read()",
            "public int read() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.MergedStream.read(byte[])",
            "public int read(byte[]) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.MergedStream.read(byte[], int, int)",
            "public int read(byte[], int, int) throws java.io.IOException"
        ],
        [
            "synchronized",
            "com.fasterxml.jackson.core.io.MergedStream.void reset()",
            "public synchronized void reset() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.io.MergedStream.skip(long)",
            "public long skip(long) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.io.NumberInput",
            "com.fasterxml.jackson.core.io.NumberInput()",
            "public com.fasterxml.jackson.core.io.NumberInput()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberInput.parseInt(char[], int, int)",
            "public static int parseInt(char[], int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberInput.parseInt(java.lang.String)",
            "public static int parseInt(java.lang.String)"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.io.NumberInput.parseLong(char[], int, int)",
            "public static long parseLong(char[], int, int)"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.io.NumberInput.parseLong(java.lang.String)",
            "public static long parseLong(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[], int, int, boolean)",
            "public static boolean inLongRange(char[], int, int, boolean)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.NumberInput.inLongRange(java.lang.String, boolean)",
            "public static boolean inLongRange(java.lang.String, boolean)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberInput.parseAsInt(java.lang.String, int)",
            "public static int parseAsInt(java.lang.String, int)"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.io.NumberInput.parseAsLong(java.lang.String, long)",
            "public static long parseAsLong(java.lang.String, long)"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(java.lang.String, double)",
            "public static double parseAsDouble(java.lang.String, double)"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.io.NumberInput.parseDouble(java.lang.String)",
            "public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(java.lang.String)",
            "public static java.math.BigDecimal parseBigDecimal(java.lang.String) throws java.lang.NumberFormatException"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[], int, int)",
            "public static java.math.BigDecimal parseBigDecimal(char[], int, int) throws java.lang.NumberFormatException"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[])",
            "public static java.math.BigDecimal parseBigDecimal(char[]) throws java.lang.NumberFormatException"
        ],
        [
            "com.fasterxml.jackson.core.io.NumberOutput",
            "com.fasterxml.jackson.core.io.NumberOutput()",
            "public com.fasterxml.jackson.core.io.NumberOutput()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberOutput.outputInt(int, char[], int)",
            "public static int outputInt(int, char[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberOutput.outputInt(int, byte[], int)",
            "public static int outputInt(int, byte[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberOutput.outputLong(long, char[], int)",
            "public static int outputLong(long, char[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.NumberOutput.outputLong(long, byte[], int)",
            "public static int outputLong(long, byte[], int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.NumberOutput.toString(int)",
            "public static java.lang.String toString(int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.NumberOutput.toString(long)",
            "public static java.lang.String toString(long)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.NumberOutput.toString(double)",
            "public static java.lang.String toString(double)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.NumberOutput.toString(float)",
            "public static java.lang.String toString(float)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.NumberOutput.notFinite(double)",
            "public static boolean notFinite(double)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.NumberOutput.notFinite(float)",
            "public static boolean notFinite(float)"
        ],
        [
            "com.fasterxml.jackson.core.io.OutputDecorator",
            "com.fasterxml.jackson.core.io.OutputDecorator()",
            "public com.fasterxml.jackson.core.io.OutputDecorator()"
        ],
        [
            "com.fasterxml.jackson.core.io.SegmentedStringWriter",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter(com.fasterxml.jackson.core.util.BufferRecycler)",
            "public com.fasterxml.jackson.core.io.SegmentedStringWriter(com.fasterxml.jackson.core.util.BufferRecycler)"
        ],
        [
            "java.io.Writer",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.append(char)",
            "public java.io.Writer append(char)"
        ],
        [
            "java.io.Writer",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.append(java.lang.CharSequence)",
            "public java.io.Writer append(java.lang.CharSequence)"
        ],
        [
            "java.io.Writer",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.append(java.lang.CharSequence, int, int)",
            "public java.io.Writer append(java.lang.CharSequence, int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.close()",
            "public void close()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.flush()",
            "public void flush()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[])",
            "public void write(char[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[], int, int)",
            "public void write(char[], int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.write(int)",
            "public void write(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.write(java.lang.String)",
            "public void write(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.write(java.lang.String, int, int)",
            "public void write(java.lang.String, int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.getAndClear()",
            "public java.lang.String getAndClear()"
        ],
        [
            "java.lang.Appendable",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.append(char)",
            "public java.lang.Appendable append(char) throws java.io.IOException"
        ],
        [
            "java.lang.Appendable",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.append(java.lang.CharSequence, int, int)",
            "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"
        ],
        [
            "java.lang.Appendable",
            "com.fasterxml.jackson.core.io.SegmentedStringWriter.append(java.lang.CharSequence)",
            "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.io.SerializedString",
            "com.fasterxml.jackson.core.io.SerializedString(java.lang.String)",
            "public com.fasterxml.jackson.core.io.SerializedString(java.lang.String)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.SerializedString.getValue()",
            "public final java.lang.String getValue()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.charLength()",
            "public final int charLength()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.io.SerializedString.asQuotedChars()",
            "public final char[] asQuotedChars()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.SerializedString.asQuotedUTF8()",
            "public final byte[] asQuotedUTF8()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.io.SerializedString.asUnquotedUTF8()",
            "public final byte[] asUnquotedUTF8()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.appendQuoted(char[], int)",
            "public int appendQuoted(char[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8(byte[], int)",
            "public int appendQuotedUTF8(byte[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.appendUnquoted(char[], int)",
            "public int appendUnquoted(char[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8(byte[], int)",
            "public int appendUnquotedUTF8(byte[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.writeQuotedUTF8(java.io.OutputStream)",
            "public int writeQuotedUTF8(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.writeUnquotedUTF8(java.io.OutputStream)",
            "public int writeUnquotedUTF8(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.putQuotedUTF8(java.nio.ByteBuffer)",
            "public int putQuotedUTF8(java.nio.ByteBuffer)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.putUnquotedUTF8(java.nio.ByteBuffer)",
            "public int putUnquotedUTF8(java.nio.ByteBuffer)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.io.SerializedString.toString()",
            "public final java.lang.String toString()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.SerializedString.hashCode()",
            "public final int hashCode()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.io.SerializedString.equals(java.lang.Object)",
            "public final boolean equals(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.io.UTF32Reader",
            "com.fasterxml.jackson.core.io.UTF32Reader(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream, byte[], int, int, boolean)",
            "public com.fasterxml.jackson.core.io.UTF32Reader(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream, byte[], int, int, boolean)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF32Reader.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.UTF32Reader.read()",
            "public int read() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.io.UTF32Reader.read(char[], int, int)",
            "public int read(char[], int, int) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.io.UTF8Writer",
            "com.fasterxml.jackson.core.io.UTF8Writer(com.fasterxml.jackson.core.io.IOContext, java.io.OutputStream)",
            "public com.fasterxml.jackson.core.io.UTF8Writer(com.fasterxml.jackson.core.io.IOContext, java.io.OutputStream)"
        ],
        [
            "java.io.Writer",
            "com.fasterxml.jackson.core.io.UTF8Writer.append(char)",
            "public java.io.Writer append(char) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.write(char[])",
            "public void write(char[]) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.write(char[], int, int)",
            "public void write(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.write(java.lang.String)",
            "public void write(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.io.UTF8Writer.write(java.lang.String, int, int)",
            "public void write(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "java.lang.Appendable",
            "com.fasterxml.jackson.core.io.UTF8Writer.append(char)",
            "public java.lang.Appendable append(char) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream)",
            "public com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream)"
        ],
        [
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(com.fasterxml.jackson.core.io.IOContext, byte[], int, int)",
            "public com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(com.fasterxml.jackson.core.io.IOContext, byte[], int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonEncoding",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.detectEncoding()",
            "public com.fasterxml.jackson.core.JsonEncoding detectEncoding() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipUTF8BOM(java.io.DataInput)",
            "public static int skipUTF8BOM(java.io.DataInput) throws java.io.IOException"
        ],
        [
            "java.io.Reader",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructReader()",
            "public java.io.Reader constructReader() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int)",
            "public com.fasterxml.jackson.core.JsonParser constructParser(int, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.format.MatchStrength",
            "com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.hasJSONFormat(com.fasterxml.jackson.core.format.InputAccessor)",
            "public static com.fasterxml.jackson.core.format.MatchStrength hasJSONFormat(com.fasterxml.jackson.core.format.InputAccessor) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.json.DupDetector",
            "com.fasterxml.jackson.core.json.DupDetector.rootDetector(com.fasterxml.jackson.core.JsonParser)",
            "public static com.fasterxml.jackson.core.json.DupDetector rootDetector(com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "com.fasterxml.jackson.core.json.DupDetector",
            "com.fasterxml.jackson.core.json.DupDetector.rootDetector(com.fasterxml.jackson.core.JsonGenerator)",
            "public static com.fasterxml.jackson.core.json.DupDetector rootDetector(com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "com.fasterxml.jackson.core.json.DupDetector",
            "com.fasterxml.jackson.core.json.DupDetector.child()",
            "public com.fasterxml.jackson.core.json.DupDetector child()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.DupDetector.reset()",
            "public void reset()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.DupDetector.findLocation()",
            "public com.fasterxml.jackson.core.JsonLocation findLocation()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.DupDetector.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.DupDetector.isDup(java.lang.String)",
            "public boolean isDup(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec)",
            "public com.fasterxml.jackson.core.json.JsonGeneratorImpl(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int)",
            "public com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.getHighestEscapedChar()",
            "public int getHighestEscapedChar()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)",
            "public com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)"
        ],
        [
            "com.fasterxml.jackson.core.io.CharacterEscapes",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.getCharacterEscapes()",
            "public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability>",
            "com.fasterxml.jackson.core.json.JsonGeneratorImpl.getWriteCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability> getWriteCapabilities()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext(com.fasterxml.jackson.core.json.JsonReadContext, com.fasterxml.jackson.core.json.DupDetector, int, int, int)",
            "public com.fasterxml.jackson.core.json.JsonReadContext(com.fasterxml.jackson.core.json.JsonReadContext, com.fasterxml.jackson.core.json.DupDetector, int, int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.JsonReadContext.reset(int, int, int)",
            "public void reset(int, int, int)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.withDupDetector(com.fasterxml.jackson.core.json.DupDetector)",
            "public com.fasterxml.jackson.core.json.JsonReadContext withDupDetector(com.fasterxml.jackson.core.json.DupDetector)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.JsonReadContext.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.JsonReadContext.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int, int, com.fasterxml.jackson.core.json.DupDetector)",
            "public static com.fasterxml.jackson.core.json.JsonReadContext createRootContext(int, int, com.fasterxml.jackson.core.json.DupDetector)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(com.fasterxml.jackson.core.json.DupDetector)",
            "public static com.fasterxml.jackson.core.json.JsonReadContext createRootContext(com.fasterxml.jackson.core.json.DupDetector)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext(int, int)",
            "public com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int, int)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext(int, int)",
            "public com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.JsonReadContext.getCurrentName()",
            "public java.lang.String getCurrentName()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonReadContext.hasCurrentName()",
            "public boolean hasCurrentName()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.getParent()",
            "public com.fasterxml.jackson.core.json.JsonReadContext getParent()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.JsonReadContext.startLocation(com.fasterxml.jackson.core.io.ContentReference)",
            "public com.fasterxml.jackson.core.JsonLocation startLocation(com.fasterxml.jackson.core.io.ContentReference)"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.JsonReadContext.getStartLocation(java.lang.Object)",
            "public com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.clearAndGetParent()",
            "public com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()"
        ],
        [
            "com.fasterxml.jackson.core.json.DupDetector",
            "com.fasterxml.jackson.core.json.JsonReadContext.getDupDetector()",
            "public com.fasterxml.jackson.core.json.DupDetector getDupDetector()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonReadContext.expectComma()",
            "public boolean expectComma()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.JsonReadContext.setCurrentName(java.lang.String)",
            "public void setCurrentName(java.lang.String) throws com.fasterxml.jackson.core.JsonProcessingException"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.json.JsonReadContext.getParent()",
            "public com.fasterxml.jackson.core.JsonStreamContext getParent()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadFeature[]",
            "com.fasterxml.jackson.core.json.JsonReadFeature.values()",
            "public static com.fasterxml.jackson.core.json.JsonReadFeature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonReadFeature",
            "com.fasterxml.jackson.core.json.JsonReadFeature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.json.JsonReadFeature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonReadFeature.getMask()",
            "public int getMask()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$Feature",
            "com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()",
            "public com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.reset(int)",
            "public com.fasterxml.jackson.core.json.JsonWriteContext reset(int)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.reset(int, java.lang.Object)",
            "public com.fasterxml.jackson.core.json.JsonWriteContext reset(int, java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.withDupDetector(com.fasterxml.jackson.core.json.DupDetector)",
            "public com.fasterxml.jackson.core.json.JsonWriteContext withDupDetector(com.fasterxml.jackson.core.json.DupDetector)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.JsonWriteContext.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.JsonWriteContext.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext()",
            "public static com.fasterxml.jackson.core.json.JsonWriteContext createRootContext()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(com.fasterxml.jackson.core.json.DupDetector)",
            "public static com.fasterxml.jackson.core.json.JsonWriteContext createRootContext(com.fasterxml.jackson.core.json.DupDetector)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext()",
            "public com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext(java.lang.Object)",
            "public com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext()",
            "public com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext(java.lang.Object)",
            "public com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.getParent()",
            "public final com.fasterxml.jackson.core.json.JsonWriteContext getParent()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.JsonWriteContext.getCurrentName()",
            "public final java.lang.String getCurrentName()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonWriteContext.hasCurrentName()",
            "public boolean hasCurrentName()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.clearAndGetParent()",
            "public com.fasterxml.jackson.core.json.JsonWriteContext clearAndGetParent()"
        ],
        [
            "com.fasterxml.jackson.core.json.DupDetector",
            "com.fasterxml.jackson.core.json.JsonWriteContext.getDupDetector()",
            "public com.fasterxml.jackson.core.json.DupDetector getDupDetector()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(java.lang.String)",
            "public int writeFieldName(java.lang.String) throws com.fasterxml.jackson.core.JsonProcessingException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonWriteContext.writeValue()",
            "public int writeValue()"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.json.JsonWriteContext.getParent()",
            "public com.fasterxml.jackson.core.JsonStreamContext getParent()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteFeature[]",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.values()",
            "public static com.fasterxml.jackson.core.json.JsonWriteFeature[] values()"
        ],
        [
            "com.fasterxml.jackson.core.json.JsonWriteFeature",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.json.JsonWriteFeature valueOf(java.lang.String)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()",
            "public static int collectDefaults()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()",
            "public boolean enabledByDefault()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()",
            "public int getMask()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int)",
            "public boolean enabledIn(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator$Feature",
            "com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()",
            "public com.fasterxml.jackson.core.JsonGenerator$Feature mappedFeature()"
        ],
        [
            "com.fasterxml.jackson.core.json.PackageVersion",
            "com.fasterxml.jackson.core.json.PackageVersion()",
            "public com.fasterxml.jackson.core.json.PackageVersion()"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.json.PackageVersion.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.Reader, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, char[], int, int, boolean)",
            "public com.fasterxml.jackson.core.json.ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.Reader, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, char[], int, int, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.Reader, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)",
            "public com.fasterxml.jackson.core.json.ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.Reader, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public void setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getReadCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability> getReadCapabilities()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.releaseBuffered(java.io.Writer)",
            "public int releaseBuffered(java.io.Writer) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getInputSource()",
            "public java.lang.Object getInputSource()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText()",
            "public final java.lang.String getText() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText(java.io.Writer)",
            "public int getText(java.io.Writer) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString()",
            "public final java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(java.lang.String)",
            "public final java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextCharacters()",
            "public final char[] getTextCharacters() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextLength()",
            "public final int getTextLength() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextOffset()",
            "public final int getTextOffset() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken()",
            "public final com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.finishToken()",
            "public void finishToken() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName()",
            "public java.lang.String nextFieldName() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextTextValue()",
            "public final java.lang.String nextTextValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextIntValue(int)",
            "public final int nextIntValue(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextLongValue(long)",
            "public final long nextLongValue(long) throws java.io.IOException"
        ],
        [
            "java.lang.Boolean",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextBooleanValue()",
            "public final java.lang.Boolean nextBooleanValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.DataInput, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, int)",
            "public com.fasterxml.jackson.core.json.UTF8DataInputJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.DataInput, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, int)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public void setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getReadCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability> getReadCapabilities()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.releaseBuffered(java.io.OutputStream)",
            "public int releaseBuffered(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getInputSource()",
            "public java.lang.Object getInputSource()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText()",
            "public java.lang.String getText() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText(java.io.Writer)",
            "public int getText(java.io.Writer) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString(java.lang.String)",
            "public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt()",
            "public int getValueAsInt() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt(int)",
            "public int getValueAsInt(int) throws java.io.IOException"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextCharacters()",
            "public char[] getTextCharacters() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextLength()",
            "public int getTextLength() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextOffset()",
            "public int getTextOffset() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextToken()",
            "public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.finishToken()",
            "public void finishToken() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextFieldName()",
            "public java.lang.String nextFieldName() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextTextValue()",
            "public java.lang.String nextTextValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextIntValue(int)",
            "public int nextIntValue(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextLongValue(long)",
            "public long nextLongValue(long) throws java.io.IOException"
        ],
        [
            "java.lang.Boolean",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextBooleanValue()",
            "public java.lang.Boolean nextBooleanValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, char)",
            "public com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, char)"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, char, byte[], int, boolean)",
            "public com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, char, byte[], int, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream)",
            "public com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream)"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, byte[], int, boolean)",
            "public com.fasterxml.jackson.core.json.UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, byte[], int, boolean)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget()",
            "public java.lang.Object getOutputTarget()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered()",
            "public int getOutputBuffered()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(java.lang.String)",
            "public void writeFieldName(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()",
            "public final void writeStartArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(java.lang.Object)",
            "public final void writeStartArray(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(java.lang.Object, int)",
            "public void writeStartArray(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray()",
            "public final void writeEndArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject()",
            "public final void writeStartObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(java.lang.Object)",
            "public void writeStartObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject()",
            "public final void writeEndObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.lang.String)",
            "public void writeString(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(java.io.Reader, int)",
            "public void writeString(java.io.Reader, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[], int, int)",
            "public void writeString(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)",
            "public final void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[], int, int)",
            "public void writeRawUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[], int, int)",
            "public void writeUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String)",
            "public void writeRaw(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(java.lang.String, int, int)",
            "public void writeRaw(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRawValue(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[], int, int)",
            "public final void writeRaw(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char)",
            "public void writeRaw(char) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)",
            "public void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int)",
            "public int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short)",
            "public void writeNumber(short) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int)",
            "public void writeNumber(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long)",
            "public void writeNumber(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.math.BigInteger)",
            "public void writeNumber(java.math.BigInteger) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double)",
            "public void writeNumber(double) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float)",
            "public void writeNumber(float) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.math.BigDecimal)",
            "public void writeNumber(java.math.BigDecimal) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(java.lang.String)",
            "public void writeNumber(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[], int, int)",
            "public void writeNumber(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean)",
            "public void writeBoolean(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull()",
            "public void writeNull() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8JsonGenerator.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.InputStream, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, byte[], int, int, boolean)",
            "public com.fasterxml.jackson.core.json.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.InputStream, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, byte[], int, int, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.InputStream, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, byte[], int, int, int, boolean)",
            "public com.fasterxml.jackson.core.json.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext, int, java.io.InputStream, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, byte[], int, int, int, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public void setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getReadCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability> getReadCapabilities()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(java.io.OutputStream)",
            "public int releaseBuffered(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource()",
            "public java.lang.Object getInputSource()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText()",
            "public java.lang.String getText() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(java.io.Writer)",
            "public int getText(java.io.Writer) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(java.lang.String)",
            "public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt()",
            "public int getValueAsInt() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int)",
            "public int getValueAsInt(int) throws java.io.IOException"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters()",
            "public char[] getTextCharacters() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength()",
            "public int getTextLength() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset()",
            "public int getTextOffset() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken()",
            "public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken()",
            "public void finishToken() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName()",
            "public java.lang.String nextFieldName() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue()",
            "public java.lang.String nextTextValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int)",
            "public int nextIntValue(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long)",
            "public long nextLongValue(long) throws java.io.IOException"
        ],
        [
            "java.lang.Boolean",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue()",
            "public java.lang.Boolean nextBooleanValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.Writer)",
            "public com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.Writer)"
        ],
        [
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.Writer, char)",
            "public com.fasterxml.jackson.core.json.WriterBasedJsonGenerator(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.Writer, char)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget()",
            "public java.lang.Object getOutputTarget()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()",
            "public int getOutputBuffered()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.canWriteFormattedNumbers()",
            "public boolean canWriteFormattedNumbers()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(java.lang.String)",
            "public void writeFieldName(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()",
            "public void writeStartArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(java.lang.Object)",
            "public void writeStartArray(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(java.lang.Object, int)",
            "public void writeStartArray(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()",
            "public void writeEndArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()",
            "public void writeStartObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(java.lang.Object)",
            "public void writeStartObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()",
            "public void writeEndObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(java.lang.String)",
            "public void writeString(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(java.io.Reader, int)",
            "public void writeString(java.io.Reader, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[], int, int)",
            "public void writeString(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)",
            "public void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[], int, int)",
            "public void writeRawUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[], int, int)",
            "public void writeUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(java.lang.String)",
            "public void writeRaw(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(java.lang.String, int, int)",
            "public void writeRaw(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[], int, int)",
            "public void writeRaw(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char)",
            "public void writeRaw(char) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)",
            "public void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int)",
            "public int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(short)",
            "public void writeNumber(short) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(int)",
            "public void writeNumber(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(long)",
            "public void writeNumber(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(java.math.BigInteger)",
            "public void writeNumber(java.math.BigInteger) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(double)",
            "public void writeNumber(double) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(float)",
            "public void writeNumber(float) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(java.math.BigDecimal)",
            "public void writeNumber(java.math.BigDecimal) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(java.lang.String)",
            "public void writeNumber(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[], int, int)",
            "public void writeNumber(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(boolean)",
            "public void writeBoolean(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNull()",
            "public void writeNull() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)",
            "public com.fasterxml.jackson.core.json.async.NonBlockingJsonParser(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)"
        ],
        [
            "com.fasterxml.jackson.core.async.ByteArrayFeeder",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getNonBlockingInputFeeder()",
            "public com.fasterxml.jackson.core.async.ByteArrayFeeder getNonBlockingInputFeeder()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.needMoreInput()",
            "public final boolean needMoreInput()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[], int, int)",
            "public void feedInput(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.endOfInput()",
            "public void endOfInput()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.releaseBuffered(java.io.OutputStream)",
            "public int releaseBuffered(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.nextToken()",
            "public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.async.NonBlockingInputFeeder",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getNonBlockingInputFeeder()",
            "public com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder()"
        ],
        [
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)",
            "public com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public void setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.canParseAsync()",
            "public boolean canParseAsync()"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getReadCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability> getReadCapabilities()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getInputSource()",
            "public java.lang.Object getInputSource()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.hasTextCharacters()",
            "public boolean hasTextCharacters()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getText()",
            "public java.lang.String getText() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getText(java.io.Writer)",
            "public int getText(java.io.Writer) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getValueAsString(java.lang.String)",
            "public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTextCharacters()",
            "public char[] getTextCharacters() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTextLength()",
            "public int getTextLength() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTextOffset()",
            "public int getTextOffset() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getEmbeddedObject()",
            "public java.lang.Object getEmbeddedObject() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo(int, int, int, int[], java.lang.String[], int, int)",
            "public com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo(int, int, int, int[], java.lang.String[], int, int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)",
            "public com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo(com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)"
        ],
        [
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.createInitial(int)",
            "public static com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo createInitial(int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot()",
            "public static com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer createRoot()"
        ],
        [
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild(int)",
            "public com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer makeChild(int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChildOrPlaceholder(int)",
            "public com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer makeChildOrPlaceholder(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.release()",
            "public void release()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.size()",
            "public int size()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.bucketCount()",
            "public int bucketCount()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.maybeDirty()",
            "public boolean maybeDirty()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.hashSeed()",
            "public int hashSeed()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.isCanonicalizing()",
            "public boolean isCanonicalizing()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.primaryCount()",
            "public int primaryCount()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.secondaryCount()",
            "public int secondaryCount()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.tertiaryCount()",
            "public int tertiaryCount()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.spilloverCount()",
            "public int spilloverCount()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.totalCount()",
            "public int totalCount()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int)",
            "public java.lang.String findName(int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int, int)",
            "public java.lang.String findName(int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int, int, int)",
            "public java.lang.String findName(int, int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int[], int)",
            "public java.lang.String findName(int[], int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(java.lang.String, int)",
            "public java.lang.String addName(java.lang.String, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(java.lang.String, int, int)",
            "public java.lang.String addName(java.lang.String, int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(java.lang.String, int, int, int)",
            "public java.lang.String addName(java.lang.String, int, int, int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(java.lang.String, int[], int)",
            "public java.lang.String addName(java.lang.String, int[], int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int)",
            "public int calcHash(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int, int)",
            "public int calcHash(int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int, int, int)",
            "public int calcHash(int, int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int[], int)",
            "public int calcHash(int[], int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket(java.lang.String, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)",
            "public com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket(java.lang.String, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[], int, int)",
            "public java.lang.String has(char[], int, int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo(int, int, java.lang.String[], com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[])",
            "public com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo(int, int, java.lang.String[], com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[])"
        ],
        [
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)",
            "public com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)"
        ],
        [
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.createInitial(int)",
            "public static com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo createInitial(int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot()",
            "public static com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot()"
        ],
        [
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild(int)",
            "public com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer makeChild(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.release()",
            "public void release()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.size()",
            "public int size()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.bucketCount()",
            "public int bucketCount()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maybeDirty()",
            "public boolean maybeDirty()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.hashSeed()",
            "public int hashSeed()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.collisionCount()",
            "public int collisionCount()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maxCollisionLength()",
            "public int maxCollisionLength()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[], int, int, int)",
            "public java.lang.String findSymbol(char[], int, int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex(int)",
            "public int _hashToIndex(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[], int, int)",
            "public int calcHash(char[], int, int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(java.lang.String)",
            "public int calcHash(java.lang.String)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.Name.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.sym.Name.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.sym.Name.hashCode()",
            "public final int hashCode()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.sym.Name1",
            "com.fasterxml.jackson.core.sym.Name1.getEmptyName()",
            "public static com.fasterxml.jackson.core.sym.Name1 getEmptyName()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name1.equals(int)",
            "public boolean equals(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name1.equals(int, int)",
            "public boolean equals(int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name1.equals(int, int, int)",
            "public boolean equals(int, int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name1.equals(int[], int)",
            "public boolean equals(int[], int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name2.equals(int)",
            "public boolean equals(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name2.equals(int, int)",
            "public boolean equals(int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name2.equals(int, int, int)",
            "public boolean equals(int, int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name2.equals(int[], int)",
            "public boolean equals(int[], int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name3.equals(int)",
            "public boolean equals(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name3.equals(int, int)",
            "public boolean equals(int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name3.equals(int, int, int)",
            "public boolean equals(int, int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.Name3.equals(int[], int)",
            "public boolean equals(int[], int)"
        ],
        [
            "com.fasterxml.jackson.core.sym.NameN",
            "com.fasterxml.jackson.core.sym.NameN.construct(java.lang.String, int, int[], int)",
            "public static com.fasterxml.jackson.core.sym.NameN construct(java.lang.String, int, int[], int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.NameN.equals(int)",
            "public boolean equals(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.NameN.equals(int, int)",
            "public boolean equals(int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.NameN.equals(int, int, int)",
            "public boolean equals(int, int, int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.sym.NameN.equals(int[], int)",
            "public boolean equals(int[], int)"
        ],
        [
            "com.fasterxml.jackson.core.type.ResolvedType",
            "com.fasterxml.jackson.core.type.ResolvedType()",
            "public com.fasterxml.jackson.core.type.ResolvedType()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.type.ResolvedType.isReferenceType()",
            "public boolean isReferenceType()"
        ],
        [
            "java.lang.Class<?>",
            "com.fasterxml.jackson.core.type.ResolvedType.getParameterSource()",
            "public java.lang.Class<?> getParameterSource()"
        ],
        [
            "java.lang.reflect.Type",
            "com.fasterxml.jackson.core.type.TypeReference.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.type.TypeReference.compareTo(com.fasterxml.jackson.core.type.TypeReference<T>)",
            "public int compareTo(com.fasterxml.jackson.core.type.TypeReference<T>)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.type.TypeReference.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId$Inclusion[]",
            "com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.values()",
            "public static com.fasterxml.jackson.core.type.WritableTypeId$Inclusion[] values()"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId$Inclusion",
            "com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.valueOf(java.lang.String)",
            "public static com.fasterxml.jackson.core.type.WritableTypeId$Inclusion valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.requiresObjectContext()",
            "public boolean requiresObjectContext()"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId",
            "com.fasterxml.jackson.core.type.WritableTypeId()",
            "public com.fasterxml.jackson.core.type.WritableTypeId()"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId",
            "com.fasterxml.jackson.core.type.WritableTypeId(java.lang.Object, com.fasterxml.jackson.core.JsonToken)",
            "public com.fasterxml.jackson.core.type.WritableTypeId(java.lang.Object, com.fasterxml.jackson.core.JsonToken)"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId",
            "com.fasterxml.jackson.core.type.WritableTypeId(java.lang.Object, java.lang.Class<?>, com.fasterxml.jackson.core.JsonToken)",
            "public com.fasterxml.jackson.core.type.WritableTypeId(java.lang.Object, java.lang.Class<?>, com.fasterxml.jackson.core.JsonToken)"
        ],
        [
            "com.fasterxml.jackson.core.type.WritableTypeId",
            "com.fasterxml.jackson.core.type.WritableTypeId(java.lang.Object, com.fasterxml.jackson.core.JsonToken, java.lang.Object)",
            "public com.fasterxml.jackson.core.type.WritableTypeId(java.lang.Object, com.fasterxml.jackson.core.JsonToken, java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.util.BufferRecycler",
            "com.fasterxml.jackson.core.util.BufferRecycler()",
            "public com.fasterxml.jackson.core.util.BufferRecycler()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int)",
            "public final byte[] allocByteBuffer(int)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int, int)",
            "public byte[] allocByteBuffer(int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int, byte[])",
            "public void releaseByteBuffer(int, byte[])"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int)",
            "public final char[] allocCharBuffer(int)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int, int)",
            "public char[] allocCharBuffer(int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int, char[])",
            "public void releaseCharBuffer(int, char[])"
        ],
        [
            "com.fasterxml.jackson.core.util.BufferRecyclers",
            "com.fasterxml.jackson.core.util.BufferRecyclers()",
            "public com.fasterxml.jackson.core.util.BufferRecyclers()"
        ],
        [
            "com.fasterxml.jackson.core.util.BufferRecycler",
            "com.fasterxml.jackson.core.util.BufferRecyclers.getBufferRecycler()",
            "public static com.fasterxml.jackson.core.util.BufferRecycler getBufferRecycler()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.BufferRecyclers.releaseBuffers()",
            "public static int releaseBuffers()"
        ],
        [
            "com.fasterxml.jackson.core.io.JsonStringEncoder",
            "com.fasterxml.jackson.core.util.BufferRecyclers.getJsonStringEncoder()",
            "public static com.fasterxml.jackson.core.io.JsonStringEncoder getJsonStringEncoder()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.BufferRecyclers.encodeAsUTF8(java.lang.String)",
            "public static byte[] encodeAsUTF8(java.lang.String)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(java.lang.String)",
            "public static char[] quoteAsJsonText(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(java.lang.CharSequence, java.lang.StringBuilder)",
            "public static void quoteAsJsonText(java.lang.CharSequence, java.lang.StringBuilder)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonUTF8(java.lang.String)",
            "public static byte[] quoteAsJsonUTF8(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.util.ByteArrayBuilder",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder()",
            "public com.fasterxml.jackson.core.util.ByteArrayBuilder()"
        ],
        [
            "com.fasterxml.jackson.core.util.ByteArrayBuilder",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder(com.fasterxml.jackson.core.util.BufferRecycler)",
            "public com.fasterxml.jackson.core.util.ByteArrayBuilder(com.fasterxml.jackson.core.util.BufferRecycler)"
        ],
        [
            "com.fasterxml.jackson.core.util.ByteArrayBuilder",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder(int)",
            "public com.fasterxml.jackson.core.util.ByteArrayBuilder(int)"
        ],
        [
            "com.fasterxml.jackson.core.util.ByteArrayBuilder",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder(com.fasterxml.jackson.core.util.BufferRecycler, int)",
            "public com.fasterxml.jackson.core.util.ByteArrayBuilder(com.fasterxml.jackson.core.util.BufferRecycler, int)"
        ],
        [
            "com.fasterxml.jackson.core.util.ByteArrayBuilder",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.fromInitial(byte[], int)",
            "public static com.fasterxml.jackson.core.util.ByteArrayBuilder fromInitial(byte[], int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.reset()",
            "public void reset()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.size()",
            "public int size()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.release()",
            "public void release()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.append(int)",
            "public void append(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.appendTwoBytes(int)",
            "public void appendTwoBytes(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.appendThreeBytes(int)",
            "public void appendThreeBytes(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.appendFourBytes(int)",
            "public void appendFourBytes(int)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.toByteArray()",
            "public byte[] toByteArray()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.resetAndGetFirstSegment()",
            "public byte[] resetAndGetFirstSegment()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.finishCurrentSegment()",
            "public byte[] finishCurrentSegment()"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.completeAndCoalesce(int)",
            "public byte[] completeAndCoalesce(int)"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.getCurrentSegment()",
            "public byte[] getCurrentSegment()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.setCurrentSegmentLength(int)",
            "public void setCurrentSegmentLength(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.getCurrentSegmentLength()",
            "public int getCurrentSegmentLength()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[])",
            "public void write(byte[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[], int, int)",
            "public void write(byte[], int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.write(int)",
            "public void write(int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.close()",
            "public void close()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.ByteArrayBuilder.flush()",
            "public void flush()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultIndenter",
            "com.fasterxml.jackson.core.util.DefaultIndenter()",
            "public com.fasterxml.jackson.core.util.DefaultIndenter()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultIndenter",
            "com.fasterxml.jackson.core.util.DefaultIndenter(java.lang.String, java.lang.String)",
            "public com.fasterxml.jackson.core.util.DefaultIndenter(java.lang.String, java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultIndenter",
            "com.fasterxml.jackson.core.util.DefaultIndenter.withLinefeed(java.lang.String)",
            "public com.fasterxml.jackson.core.util.DefaultIndenter withLinefeed(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultIndenter",
            "com.fasterxml.jackson.core.util.DefaultIndenter.withIndent(java.lang.String)",
            "public com.fasterxml.jackson.core.util.DefaultIndenter withIndent(java.lang.String)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.DefaultIndenter.isInline()",
            "public boolean isInline()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.DefaultIndenter.getEol()",
            "public java.lang.String getEol()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.DefaultIndenter.getIndent()",
            "public java.lang.String getIndent()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter()",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.isInline()",
            "public boolean isInline()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter()",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeIndentation(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.isInline()",
            "public boolean isInline()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter()",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter(java.lang.String)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter(com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter(com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter, com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter, com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withRootSeparator(com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(java.lang.String)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withRootSeparator(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentArraysWith(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)",
            "public void indentArraysWith(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentObjectsWith(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)",
            "public void indentObjectsWith(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withArrayIndenter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withArrayIndenter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withObjectIndenter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withObjectIndenter(com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSpacesInObjectEntries()",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withSpacesInObjectEntries()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withoutSpacesInObjectEntries()",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withoutSpacesInObjectEntries()"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSeparators(com.fasterxml.jackson.core.util.Separators)",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter withSeparators(com.fasterxml.jackson.core.util.Separators)"
        ],
        [
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.createInstance()",
            "public com.fasterxml.jackson.core.util.DefaultPrettyPrinter createInstance()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeStartObject(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)",
            "public void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeStartArray(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)",
            "public void beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.createInstance()",
            "public java.lang.Object createInstance()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.InternCache.intern(java.lang.String)",
            "public java.lang.String intern(java.lang.String)"
        ],
        [
            "<F extends com.fasterxml.jackson.core.util.JacksonFeature> com.fasterxml.jackson.core.util.JacksonFeatureSet<F>",
            "com.fasterxml.jackson.core.util.JacksonFeatureSet.fromDefaults(F[])",
            "public static <F extends com.fasterxml.jackson.core.util.JacksonFeature> com.fasterxml.jackson.core.util.JacksonFeatureSet<F> fromDefaults(F[])"
        ],
        [
            "<F extends com.fasterxml.jackson.core.util.JacksonFeature> com.fasterxml.jackson.core.util.JacksonFeatureSet<F>",
            "com.fasterxml.jackson.core.util.JacksonFeatureSet.fromBitmask(int)",
            "public static <F extends com.fasterxml.jackson.core.util.JacksonFeature> com.fasterxml.jackson.core.util.JacksonFeatureSet<F> fromBitmask(int)"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<F>",
            "com.fasterxml.jackson.core.util.JacksonFeatureSet.with(F)",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<F> with(F)"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<F>",
            "com.fasterxml.jackson.core.util.JacksonFeatureSet.without(F)",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<F> without(F)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JacksonFeatureSet.isEnabled(F)",
            "public boolean isEnabled(F)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JacksonFeatureSet.asBitmask()",
            "public int asBitmask()"
        ],
        [
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator)",
            "public com.fasterxml.jackson.core.util.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator)"
        ],
        [
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator, boolean)",
            "public com.fasterxml.jackson.core.util.JsonGeneratorDelegate(com.fasterxml.jackson.core.JsonGenerator, boolean)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public void setSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "com.fasterxml.jackson.core.FormatSchema",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()",
            "public com.fasterxml.jackson.core.FormatSchema getSchema()"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()",
            "public java.lang.Object getOutputTarget()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()",
            "public int getOutputBuffered()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.assignCurrentValue(java.lang.Object)",
            "public void assignCurrentValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.currentValue()",
            "public java.lang.Object currentValue()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()",
            "public boolean canWriteTypeId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()",
            "public boolean canWriteObjectId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()",
            "public boolean canWriteBinaryNatively()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()",
            "public boolean canOmitFields()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()",
            "public boolean canWriteFormattedNumbers()"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability>",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getWriteCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamWriteCapability> getWriteCapabilities()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)",
            "public boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()",
            "public int getFeatureMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)",
            "public com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonGenerator overrideStdFeatures(int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonGenerator overrideFormatFeatures(int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)",
            "public com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)"
        ],
        [
            "com.fasterxml.jackson.core.PrettyPrinter",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()",
            "public com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()",
            "public com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)",
            "public com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()",
            "public int getHighestEscapedChar()"
        ],
        [
            "com.fasterxml.jackson.core.io.CharacterEscapes",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()",
            "public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)",
            "public com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)",
            "public com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()",
            "public void writeStartArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)",
            "public void writeStartArray(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object)",
            "public void writeStartArray(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(java.lang.Object, int)",
            "public void writeStartArray(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()",
            "public void writeEndArray() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()",
            "public void writeStartObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object)",
            "public void writeStartObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(java.lang.Object, int)",
            "public void writeStartObject(java.lang.Object, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()",
            "public void writeEndObject() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(java.lang.String)",
            "public void writeFieldName(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(com.fasterxml.jackson.core.SerializableString)",
            "public void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)",
            "public void writeFieldId(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[], int, int)",
            "public void writeArray(int[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[], int, int)",
            "public void writeArray(long[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[], int, int)",
            "public void writeArray(double[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(java.lang.String[], int, int)",
            "public void writeArray(java.lang.String[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.lang.String)",
            "public void writeString(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(java.io.Reader, int)",
            "public void writeString(java.io.Reader, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[], int, int)",
            "public void writeString(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(com.fasterxml.jackson.core.SerializableString)",
            "public void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[], int, int)",
            "public void writeRawUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[], int, int)",
            "public void writeUTF8String(byte[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String)",
            "public void writeRaw(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(java.lang.String, int, int)",
            "public void writeRaw(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(com.fasterxml.jackson.core.SerializableString)",
            "public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[], int, int)",
            "public void writeRaw(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)",
            "public void writeRaw(char) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String)",
            "public void writeRawValue(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(java.lang.String, int, int)",
            "public void writeRawValue(java.lang.String, int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[], int, int)",
            "public void writeRawValue(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int)",
            "public void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int)",
            "public int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)",
            "public void writeNumber(short) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)",
            "public void writeNumber(int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)",
            "public void writeNumber(long) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigInteger)",
            "public void writeNumber(java.math.BigInteger) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)",
            "public void writeNumber(double) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)",
            "public void writeNumber(float) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.math.BigDecimal)",
            "public void writeNumber(java.math.BigDecimal) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(java.lang.String)",
            "public void writeNumber(java.lang.String) throws java.io.IOException, java.lang.UnsupportedOperationException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[], int, int)",
            "public void writeNumber(char[], int, int) throws java.io.IOException, java.lang.UnsupportedOperationException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)",
            "public void writeBoolean(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()",
            "public void writeNull() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(java.lang.String)",
            "public void writeOmittedField(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(java.lang.Object)",
            "public void writeObjectId(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(java.lang.Object)",
            "public void writeObjectRef(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(java.lang.Object)",
            "public void writeTypeId(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(java.lang.Object)",
            "public void writeEmbeddedObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writePOJO(java.lang.Object)",
            "public void writePOJO(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(java.lang.Object)",
            "public void writeObject(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(com.fasterxml.jackson.core.TreeNode)",
            "public void writeTree(com.fasterxml.jackson.core.TreeNode) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)",
            "public void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)",
            "public void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getOutputContext()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()",
            "public boolean isClosed()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()",
            "public com.fasterxml.jackson.core.JsonGenerator getDelegate()"
        ],
        [
            "com.fasterxml.jackson.core.JsonGenerator",
            "com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()",
            "public com.fasterxml.jackson.core.JsonGenerator delegate()"
        ],
        [
            "com.fasterxml.jackson.core.util.JsonParserDelegate",
            "com.fasterxml.jackson.core.util.JsonParserDelegate(com.fasterxml.jackson.core.JsonParser)",
            "public com.fasterxml.jackson.core.util.JsonParserDelegate(com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)",
            "public void setCodec(com.fasterxml.jackson.core.ObjectCodec)"
        ],
        [
            "com.fasterxml.jackson.core.ObjectCodec",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()",
            "public com.fasterxml.jackson.core.ObjectCodec getCodec()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.enable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.disable(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)",
            "public boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()",
            "public int getFeatureMask()"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)",
            "public com.fasterxml.jackson.core.JsonParser setFeatureMask(int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int, int)"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int, int)",
            "public com.fasterxml.jackson.core.JsonParser overrideFormatFeatures(int, int)"
        ],
        [
            "com.fasterxml.jackson.core.FormatSchema",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()",
            "public com.fasterxml.jackson.core.FormatSchema getSchema()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public void setSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)",
            "public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()",
            "public java.lang.Object getInputSource()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()",
            "public boolean requiresCustomCodec()"
        ],
        [
            "com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability>",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getReadCapabilities()",
            "public com.fasterxml.jackson.core.util.JacksonFeatureSet<com.fasterxml.jackson.core.StreamReadCapability> getReadCapabilities()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()",
            "public boolean isClosed()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()",
            "public void clearCurrentToken()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()",
            "public com.fasterxml.jackson.core.JsonToken getLastClearedToken()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(java.lang.String)",
            "public void overrideCurrentName(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.assignCurrentValue(java.lang.Object)",
            "public void assignCurrentValue(java.lang.Object)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(java.lang.Object)",
            "public void setCurrentValue(java.lang.Object)"
        ],
        [
            "com.fasterxml.jackson.core.JsonStreamContext",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()",
            "public com.fasterxml.jackson.core.JsonStreamContext getParsingContext()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()",
            "public com.fasterxml.jackson.core.JsonToken currentToken()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()",
            "public int currentTokenId()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.currentName()",
            "public java.lang.String currentName() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.currentValue()",
            "public java.lang.Object currentValue()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.currentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation currentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation currentTokenLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()",
            "public com.fasterxml.jackson.core.JsonToken getCurrentToken()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()",
            "public int getCurrentTokenId()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()",
            "public java.lang.String getCurrentName() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()",
            "public java.lang.Object getCurrentValue()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()"
        ],
        [
            "com.fasterxml.jackson.core.JsonLocation",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()",
            "public com.fasterxml.jackson.core.JsonLocation getTokenLocation()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()",
            "public boolean hasCurrentToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)",
            "public boolean hasTokenId(int)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)",
            "public boolean hasToken(com.fasterxml.jackson.core.JsonToken)"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()",
            "public boolean isExpectedStartArrayToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()",
            "public boolean isExpectedStartObjectToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedNumberIntToken()",
            "public boolean isExpectedNumberIntToken()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()",
            "public boolean isNaN() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getText()",
            "public java.lang.String getText() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()",
            "public boolean hasTextCharacters()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()",
            "public char[] getTextCharacters() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()",
            "public int getTextLength() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()",
            "public int getTextOffset() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getText(java.io.Writer)",
            "public int getText(java.io.Writer) throws java.io.IOException, java.lang.UnsupportedOperationException"
        ],
        [
            "java.math.BigInteger",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()",
            "public java.math.BigInteger getBigIntegerValue() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()",
            "public boolean getBooleanValue() throws java.io.IOException"
        ],
        [
            "byte",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()",
            "public byte getByteValue() throws java.io.IOException"
        ],
        [
            "short",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()",
            "public short getShortValue() throws java.io.IOException"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()",
            "public java.math.BigDecimal getDecimalValue() throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()",
            "public double getDoubleValue() throws java.io.IOException"
        ],
        [
            "float",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()",
            "public float getFloatValue() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()",
            "public int getIntValue() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()",
            "public long getLongValue() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser$NumberType",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()",
            "public com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException"
        ],
        [
            "java.lang.Number",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()",
            "public java.lang.Number getNumberValue() throws java.io.IOException"
        ],
        [
            "java.lang.Number",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValueExact()",
            "public java.lang.Number getNumberValueExact() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()",
            "public int getValueAsInt() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)",
            "public int getValueAsInt(int) throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()",
            "public long getValueAsLong() throws java.io.IOException"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)",
            "public long getValueAsLong(long) throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()",
            "public double getValueAsDouble() throws java.io.IOException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)",
            "public double getValueAsDouble(double) throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()",
            "public boolean getValueAsBoolean() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)",
            "public boolean getValueAsBoolean(boolean) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()",
            "public java.lang.String getValueAsString() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(java.lang.String)",
            "public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()",
            "public java.lang.Object getEmbeddedObject() throws java.io.IOException"
        ],
        [
            "byte[]",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)",
            "public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream)",
            "public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()",
            "public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()",
            "public com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()",
            "public void finishToken() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()",
            "public com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()",
            "public boolean canReadObjectId()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()",
            "public boolean canReadTypeId()"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()",
            "public java.lang.Object getObjectId() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()",
            "public java.lang.Object getTypeId() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()",
            "public com.fasterxml.jackson.core.JsonParser delegate()"
        ],
        [
            "com.fasterxml.jackson.core.util.JsonParserSequence",
            "com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean, com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.JsonParser)",
            "public static com.fasterxml.jackson.core.util.JsonParserSequence createFlattened(boolean, com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "com.fasterxml.jackson.core.util.JsonParserSequence",
            "com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.JsonParser)",
            "public static com.fasterxml.jackson.core.util.JsonParserSequence createFlattened(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.JsonParser)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.JsonParserSequence.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonToken",
            "com.fasterxml.jackson.core.util.JsonParserSequence.nextToken()",
            "public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.JsonParser",
            "com.fasterxml.jackson.core.util.JsonParserSequence.skipChildren()",
            "public com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.JsonParserSequence.containedParsersCount()",
            "public int containedParsersCount()"
        ],
        [
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter()",
            "public com.fasterxml.jackson.core.util.MinimalPrettyPrinter()"
        ],
        [
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter(java.lang.String)",
            "public com.fasterxml.jackson.core.util.MinimalPrettyPrinter(java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator(java.lang.String)",
            "public void setRootValueSeparator(java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setSeparators(com.fasterxml.jackson.core.util.Separators)",
            "public com.fasterxml.jackson.core.util.MinimalPrettyPrinter setSeparators(com.fasterxml.jackson.core.util.Separators)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeStartObject(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)",
            "public void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeEndObject(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeStartArray(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)",
            "public void beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)",
            "public void writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int)",
            "public void writeEndArray(com.fasterxml.jackson.core.JsonGenerator, int) throws java.io.IOException"
        ],
        [
            "com.fasterxml.jackson.core.util.RequestPayload",
            "com.fasterxml.jackson.core.util.RequestPayload(byte[], java.lang.String)",
            "public com.fasterxml.jackson.core.util.RequestPayload(byte[], java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.util.RequestPayload",
            "com.fasterxml.jackson.core.util.RequestPayload(java.lang.CharSequence)",
            "public com.fasterxml.jackson.core.util.RequestPayload(java.lang.CharSequence)"
        ],
        [
            "java.lang.Object",
            "com.fasterxml.jackson.core.util.RequestPayload.getRawPayload()",
            "public java.lang.Object getRawPayload()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.RequestPayload.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.util.Separators",
            "com.fasterxml.jackson.core.util.Separators.createDefaultInstance()",
            "public static com.fasterxml.jackson.core.util.Separators createDefaultInstance()"
        ],
        [
            "com.fasterxml.jackson.core.util.Separators",
            "com.fasterxml.jackson.core.util.Separators()",
            "public com.fasterxml.jackson.core.util.Separators()"
        ],
        [
            "com.fasterxml.jackson.core.util.Separators",
            "com.fasterxml.jackson.core.util.Separators(char, char, char)",
            "public com.fasterxml.jackson.core.util.Separators(char, char, char)"
        ],
        [
            "com.fasterxml.jackson.core.util.Separators",
            "com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSeparator(char)",
            "public com.fasterxml.jackson.core.util.Separators withObjectFieldValueSeparator(char)"
        ],
        [
            "com.fasterxml.jackson.core.util.Separators",
            "com.fasterxml.jackson.core.util.Separators.withObjectEntrySeparator(char)",
            "public com.fasterxml.jackson.core.util.Separators withObjectEntrySeparator(char)"
        ],
        [
            "com.fasterxml.jackson.core.util.Separators",
            "com.fasterxml.jackson.core.util.Separators.withArrayValueSeparator(char)",
            "public com.fasterxml.jackson.core.util.Separators withArrayValueSeparator(char)"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.util.Separators.getObjectFieldValueSeparator()",
            "public char getObjectFieldValueSeparator()"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.util.Separators.getObjectEntrySeparator()",
            "public char getObjectEntrySeparator()"
        ],
        [
            "char",
            "com.fasterxml.jackson.core.util.Separators.getArrayValueSeparator()",
            "public char getArrayValueSeparator()"
        ],
        [
            "com.fasterxml.jackson.core.util.TextBuffer",
            "com.fasterxml.jackson.core.util.TextBuffer(com.fasterxml.jackson.core.util.BufferRecycler)",
            "public com.fasterxml.jackson.core.util.TextBuffer(com.fasterxml.jackson.core.util.BufferRecycler)"
        ],
        [
            "com.fasterxml.jackson.core.util.TextBuffer",
            "com.fasterxml.jackson.core.util.TextBuffer.fromInitial(char[])",
            "public static com.fasterxml.jackson.core.util.TextBuffer fromInitial(char[])"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.releaseBuffers()",
            "public void releaseBuffers()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.resetWithEmpty()",
            "public void resetWithEmpty()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.resetWith(char)",
            "public void resetWith(char)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[], int, int)",
            "public void resetWithShared(char[], int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[], int, int)",
            "public void resetWithCopy(char[], int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(java.lang.String, int, int)",
            "public void resetWithCopy(java.lang.String, int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.resetWithString(java.lang.String)",
            "public void resetWithString(java.lang.String)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.getBufferWithoutReset()",
            "public char[] getBufferWithoutReset()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.TextBuffer.size()",
            "public int size()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.TextBuffer.getTextOffset()",
            "public int getTextOffset()"
        ],
        [
            "boolean",
            "com.fasterxml.jackson.core.util.TextBuffer.hasTextAsCharacters()",
            "public boolean hasTextAsCharacters()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.getTextBuffer()",
            "public char[] getTextBuffer()"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsString()",
            "public java.lang.String contentsAsString()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsArray()",
            "public char[] contentsAsArray()"
        ],
        [
            "java.math.BigDecimal",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal()",
            "public java.math.BigDecimal contentsAsDecimal() throws java.lang.NumberFormatException"
        ],
        [
            "double",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble()",
            "public double contentsAsDouble() throws java.lang.NumberFormatException"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsInt(boolean)",
            "public int contentsAsInt(boolean)"
        ],
        [
            "long",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong(boolean)",
            "public long contentsAsLong(boolean)"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.TextBuffer.contentsToWriter(java.io.Writer)",
            "public int contentsToWriter(java.io.Writer) throws java.io.IOException"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.ensureNotShared()",
            "public void ensureNotShared()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.append(char)",
            "public void append(char)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.append(char[], int, int)",
            "public void append(char[], int, int)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.append(java.lang.String, int, int)",
            "public void append(java.lang.String, int, int)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegment()",
            "public char[] getCurrentSegment()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.emptyAndGetCurrentSegment()",
            "public char[] emptyAndGetCurrentSegment()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegmentSize()",
            "public int getCurrentSegmentSize()"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.TextBuffer.setCurrentLength(int)",
            "public void setCurrentLength(int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.TextBuffer.setCurrentAndReturn(int)",
            "public java.lang.String setCurrentAndReturn(int)"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.finishCurrentSegment()",
            "public char[] finishCurrentSegment()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment()",
            "public char[] expandCurrentSegment()"
        ],
        [
            "char[]",
            "com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(int)",
            "public char[] expandCurrentSegment(int)"
        ],
        [
            "java.lang.String",
            "com.fasterxml.jackson.core.util.TextBuffer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "com.fasterxml.jackson.core.util.ThreadLocalBufferManager",
            "com.fasterxml.jackson.core.util.ThreadLocalBufferManager.instance()",
            "public static com.fasterxml.jackson.core.util.ThreadLocalBufferManager instance()"
        ],
        [
            "int",
            "com.fasterxml.jackson.core.util.ThreadLocalBufferManager.releaseBuffers()",
            "public int releaseBuffers()"
        ],
        [
            "java.lang.ref.SoftReference<com.fasterxml.jackson.core.util.BufferRecycler>",
            "com.fasterxml.jackson.core.util.ThreadLocalBufferManager.wrapAndTrack(com.fasterxml.jackson.core.util.BufferRecycler)",
            "public java.lang.ref.SoftReference<com.fasterxml.jackson.core.util.BufferRecycler> wrapAndTrack(com.fasterxml.jackson.core.util.BufferRecycler)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.VersionUtil.version()",
            "public com.fasterxml.jackson.core.Version version()"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.VersionUtil.versionFor(java.lang.Class<?>)",
            "public static com.fasterxml.jackson.core.Version versionFor(java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.VersionUtil.packageVersionFor(java.lang.Class<?>)",
            "public static com.fasterxml.jackson.core.Version packageVersionFor(java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(java.lang.ClassLoader, java.lang.String, java.lang.String)",
            "public static com.fasterxml.jackson.core.Version mavenVersionFor(java.lang.ClassLoader, java.lang.String, java.lang.String)"
        ],
        [
            "com.fasterxml.jackson.core.Version",
            "com.fasterxml.jackson.core.util.VersionUtil.parseVersion(java.lang.String, java.lang.String, java.lang.String)",
            "public static com.fasterxml.jackson.core.Version parseVersion(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "com.fasterxml.jackson.core.util.VersionUtil.throwInternal()",
            "public static final void throwInternal()"
        ]
    ]
}