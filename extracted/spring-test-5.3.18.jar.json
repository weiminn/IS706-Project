{
    "spring-test-5.3.18.jar": [
        [
            "org.springframework.test.util.XmlExpectationsHelper",
            "org.springframework.test.util.XmlExpectationsHelper()",
            "public org.springframework.test.util.XmlExpectationsHelper()"
        ],
        [
            "void",
            "org.springframework.test.util.XmlExpectationsHelper.assertNode(java.lang.String, org.hamcrest.Matcher<? super org.w3c.dom.Node>)",
            "public void assertNode(java.lang.String, org.hamcrest.Matcher<? super org.w3c.dom.Node>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XmlExpectationsHelper.assertSource(java.lang.String, org.hamcrest.Matcher<? super javax.xml.transform.Source>)",
            "public void assertSource(java.lang.String, org.hamcrest.Matcher<? super javax.xml.transform.Source>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XmlExpectationsHelper.assertXmlEqual(java.lang.String, java.lang.String)",
            "public void assertXmlEqual(java.lang.String, java.lang.String) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.test.util.XmlExpectationsHelper$XmlUnitDiff.hasDifferences()",
            "public boolean hasDifferences()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.util.XmlExpectationsHelper$XmlUnitDiff.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.util.ExceptionCollector",
            "org.springframework.test.util.ExceptionCollector()",
            "public org.springframework.test.util.ExceptionCollector()"
        ],
        [
            "void",
            "org.springframework.test.util.ExceptionCollector.execute(org.springframework.test.util.ExceptionCollector$Executable)",
            "public void execute(org.springframework.test.util.ExceptionCollector$Executable)"
        ],
        [
            "java.util.List<java.lang.Throwable>",
            "org.springframework.test.util.ExceptionCollector.getExceptions()",
            "public java.util.List<java.lang.Throwable> getExceptions()"
        ],
        [
            "void",
            "org.springframework.test.util.ExceptionCollector.assertEmpty()",
            "public void assertEmpty() throws java.lang.Exception"
        ],
        [
            "org.springframework.test.util.ReflectionTestUtils",
            "org.springframework.test.util.ReflectionTestUtils()",
            "public org.springframework.test.util.ReflectionTestUtils()"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.setField(java.lang.Object, java.lang.String, java.lang.Object)",
            "public static void setField(java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.setField(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Class<?>)",
            "public static void setField(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.setField(java.lang.Class<?>, java.lang.String, java.lang.Object)",
            "public static void setField(java.lang.Class<?>, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.setField(java.lang.Class<?>, java.lang.String, java.lang.Object, java.lang.Class<?>)",
            "public static void setField(java.lang.Class<?>, java.lang.String, java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.setField(java.lang.Object, java.lang.Class<?>, java.lang.String, java.lang.Object, java.lang.Class<?>)",
            "public static void setField(java.lang.Object, java.lang.Class<?>, java.lang.String, java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.util.ReflectionTestUtils.getField(java.lang.Object, java.lang.String)",
            "public static java.lang.Object getField(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.util.ReflectionTestUtils.getField(java.lang.Class<?>, java.lang.String)",
            "public static java.lang.Object getField(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.util.ReflectionTestUtils.getField(java.lang.Object, java.lang.Class<?>, java.lang.String)",
            "public static java.lang.Object getField(java.lang.Object, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.invokeSetterMethod(java.lang.Object, java.lang.String, java.lang.Object)",
            "public static void invokeSetterMethod(java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.ReflectionTestUtils.invokeSetterMethod(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Class<?>)",
            "public static void invokeSetterMethod(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.util.ReflectionTestUtils.invokeGetterMethod(java.lang.Object, java.lang.String)",
            "public static java.lang.Object invokeGetterMethod(java.lang.Object, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.test.util.ReflectionTestUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object...)",
            "public static <T> T invokeMethod(java.lang.Object, java.lang.String, java.lang.Object...)"
        ],
        [
            "<T> T",
            "org.springframework.test.util.ReflectionTestUtils.invokeMethod(java.lang.Class<?>, java.lang.String, java.lang.Object...)",
            "public static <T> T invokeMethod(java.lang.Class<?>, java.lang.String, java.lang.Object...)"
        ],
        [
            "<T> T",
            "org.springframework.test.util.ReflectionTestUtils.invokeMethod(java.lang.Object, java.lang.Class<?>, java.lang.String, java.lang.Object...)",
            "public static <T> T invokeMethod(java.lang.Object, java.lang.Class<?>, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.util.JsonPathExpectationsHelper",
            "org.springframework.test.util.JsonPathExpectationsHelper(java.lang.String, java.lang.Object...)",
            "public org.springframework.test.util.JsonPathExpectationsHelper(java.lang.String, java.lang.Object...)"
        ],
        [
            "<T> void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValue(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public <T> void assertValue(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "<T> void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValue(java.lang.String, org.hamcrest.Matcher<? super T>, java.lang.Class<T>)",
            "public <T> void assertValue(java.lang.String, org.hamcrest.Matcher<? super T>, java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValue(java.lang.String, java.lang.Object)",
            "public void assertValue(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsString(java.lang.String)",
            "public void assertValueIsString(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsBoolean(java.lang.String)",
            "public void assertValueIsBoolean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsNumber(java.lang.String)",
            "public void assertValueIsNumber(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsArray(java.lang.String)",
            "public void assertValueIsArray(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsMap(java.lang.String)",
            "public void assertValueIsMap(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.exists(java.lang.String)",
            "public void exists(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.doesNotExist(java.lang.String)",
            "public void doesNotExist(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsEmpty(java.lang.String)",
            "public void assertValueIsEmpty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.assertValueIsNotEmpty(java.lang.String)",
            "public void assertValueIsNotEmpty(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.hasJsonPath(java.lang.String)",
            "public void hasJsonPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.JsonPathExpectationsHelper.doesNotHaveJsonPath(java.lang.String)",
            "public void doesNotHaveJsonPath(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.util.JsonPathExpectationsHelper.evaluateJsonPath(java.lang.String)",
            "public java.lang.Object evaluateJsonPath(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.util.JsonPathExpectationsHelper.evaluateJsonPath(java.lang.String, java.lang.Class<?>)",
            "public java.lang.Object evaluateJsonPath(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.util.AopTestUtils",
            "org.springframework.test.util.AopTestUtils()",
            "public org.springframework.test.util.AopTestUtils()"
        ],
        [
            "<T> T",
            "org.springframework.test.util.AopTestUtils.getTargetObject(java.lang.Object)",
            "public static <T> T getTargetObject(java.lang.Object)"
        ],
        [
            "<T> T",
            "org.springframework.test.util.AopTestUtils.getUltimateTargetObject(java.lang.Object)",
            "public static <T> T getUltimateTargetObject(java.lang.Object)"
        ],
        [
            "org.springframework.test.util.XpathExpectationsHelper",
            "org.springframework.test.util.XpathExpectationsHelper(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)",
            "public org.springframework.test.util.XpathExpectationsHelper(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...) throws javax.xml.xpath.XPathExpressionException"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertNode(byte[], java.lang.String, org.hamcrest.Matcher<? super org.w3c.dom.Node>)",
            "public void assertNode(byte[], java.lang.String, org.hamcrest.Matcher<? super org.w3c.dom.Node>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertNodeList(byte[], java.lang.String, org.hamcrest.Matcher<? super org.w3c.dom.NodeList>)",
            "public void assertNodeList(byte[], java.lang.String, org.hamcrest.Matcher<? super org.w3c.dom.NodeList>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.exists(byte[], java.lang.String)",
            "public void exists(byte[], java.lang.String) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.doesNotExist(byte[], java.lang.String)",
            "public void doesNotExist(byte[], java.lang.String) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte[], java.lang.String, org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public void assertNodeCount(byte[], java.lang.String, org.hamcrest.Matcher<? super java.lang.Integer>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertNodeCount(byte[], java.lang.String, int)",
            "public void assertNodeCount(byte[], java.lang.String, int) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertString(byte[], java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public void assertString(byte[], java.lang.String, org.hamcrest.Matcher<? super java.lang.String>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertString(byte[], java.lang.String, java.lang.String)",
            "public void assertString(byte[], java.lang.String, java.lang.String) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte[], java.lang.String, org.hamcrest.Matcher<? super java.lang.Double>)",
            "public void assertNumber(byte[], java.lang.String, org.hamcrest.Matcher<? super java.lang.Double>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertNumber(byte[], java.lang.String, java.lang.Double)",
            "public void assertNumber(byte[], java.lang.String, java.lang.Double) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.XpathExpectationsHelper.assertBoolean(byte[], java.lang.String, boolean)",
            "public void assertBoolean(byte[], java.lang.String, boolean) throws java.lang.Exception"
        ],
        [
            "<T> T",
            "org.springframework.test.util.XpathExpectationsHelper.evaluateXpath(byte[], java.lang.String, java.lang.Class<T>)",
            "public <T> T evaluateXpath(byte[], java.lang.String, java.lang.Class<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.util.MetaAnnotationUtils",
            "org.springframework.test.util.MetaAnnotationUtils()",
            "public org.springframework.test.util.MetaAnnotationUtils()"
        ],
        [
            "<T extends java.lang.annotation.Annotation> org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor<T>",
            "org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptor(java.lang.Class<?>, java.lang.Class<T>)",
            "public static <T extends java.lang.annotation.Annotation> org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor<T> findAnnotationDescriptor(java.lang.Class<?>, java.lang.Class<T>)"
        ],
        [
            "org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor",
            "org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...)",
            "public static org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor findAnnotationDescriptorForTypes(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...)"
        ],
        [
            "org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor",
            "org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor(java.lang.Class<?>, java.lang.annotation.Annotation)",
            "public org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor(java.lang.Class<?>, java.lang.annotation.Annotation)"
        ],
        [
            "org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor",
            "org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor(java.lang.Class<?>, java.lang.Class<?>, java.lang.annotation.Annotation, java.lang.annotation.Annotation)",
            "public org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor(java.lang.Class<?>, java.lang.Class<?>, java.lang.annotation.Annotation, java.lang.annotation.Annotation)"
        ],
        [
            "java.lang.annotation.Annotation",
            "org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor.synthesizeAnnotation()",
            "public java.lang.annotation.Annotation synthesizeAnnotation()"
        ],
        [
            "org.springframework.test.util.JsonExpectationsHelper",
            "org.springframework.test.util.JsonExpectationsHelper()",
            "public org.springframework.test.util.JsonExpectationsHelper()"
        ],
        [
            "void",
            "org.springframework.test.util.JsonExpectationsHelper.assertJsonEqual(java.lang.String, java.lang.String)",
            "public void assertJsonEqual(java.lang.String, java.lang.String) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.JsonExpectationsHelper.assertJsonEqual(java.lang.String, java.lang.String, boolean)",
            "public void assertJsonEqual(java.lang.String, java.lang.String, boolean) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.JsonExpectationsHelper.assertJsonNotEqual(java.lang.String, java.lang.String)",
            "public void assertJsonNotEqual(java.lang.String, java.lang.String) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.util.JsonExpectationsHelper.assertJsonNotEqual(java.lang.String, java.lang.String, boolean)",
            "public void assertJsonNotEqual(java.lang.String, java.lang.String, boolean) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor(java.lang.Class<?>, T)",
            "public org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor(java.lang.Class<?>, T)"
        ],
        [
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor(java.lang.Class<?>, java.lang.Class<?>, java.lang.annotation.Annotation, T)",
            "public org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor(java.lang.Class<?>, java.lang.Class<?>, java.lang.annotation.Annotation, T)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getRootDeclaringClass()",
            "public java.lang.Class<?> getRootDeclaringClass()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getDeclaringClass()",
            "public java.lang.Class<?> getDeclaringClass()"
        ],
        [
            "T",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getAnnotation()",
            "public T getAnnotation()"
        ],
        [
            "T",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.synthesizeAnnotation()",
            "public T synthesizeAnnotation()"
        ],
        [
            "java.lang.Class<? extends java.lang.annotation.Annotation>",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getAnnotationType()",
            "public java.lang.Class<? extends java.lang.annotation.Annotation> getAnnotationType()"
        ],
        [
            "org.springframework.core.annotation.AnnotationAttributes",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getAnnotationAttributes()",
            "public org.springframework.core.annotation.AnnotationAttributes getAnnotationAttributes()"
        ],
        [
            "java.lang.annotation.Annotation",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getComposedAnnotation()",
            "public java.lang.annotation.Annotation getComposedAnnotation()"
        ],
        [
            "java.lang.Class<? extends java.lang.annotation.Annotation>",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.getComposedAnnotationType()",
            "public java.lang.Class<? extends java.lang.annotation.Annotation> getComposedAnnotationType()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.util.AssertionErrors",
            "org.springframework.test.util.AssertionErrors()",
            "public org.springframework.test.util.AssertionErrors()"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.fail(java.lang.String)",
            "public static void fail(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.fail(java.lang.String, java.lang.Object, java.lang.Object)",
            "public static void fail(java.lang.String, java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.assertTrue(java.lang.String, boolean)",
            "public static void assertTrue(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.assertFalse(java.lang.String, boolean)",
            "public static void assertFalse(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.assertNull(java.lang.String, java.lang.Object)",
            "public static void assertNull(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.assertNotNull(java.lang.String, java.lang.Object)",
            "public static void assertNotNull(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)",
            "public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.util.AssertionErrors.assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object)",
            "public static void assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor.getRootDeclaringClass()",
            "public java.lang.Class<?> getRootDeclaringClass()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor.getDeclaringClass()",
            "public java.lang.Class<?> getDeclaringClass()"
        ],
        [
            "T",
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor.getAnnotation()",
            "public T getAnnotation()"
        ],
        [
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor<T>",
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor.next()",
            "public org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor<T> next()"
        ],
        [
            "java.util.Set<T>",
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor.findAllLocalMergedAnnotations()",
            "public java.util.Set<T> findAllLocalMergedAnnotations()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.test.context.TestContext.boolean hasApplicationContext()",
            "public default boolean hasApplicationContext()"
        ],
        [
            "default",
            "org.springframework.test.context.TestContext.void publishEvent(java.util.function.Function<org.springframework.test.context.TestContext, ? extends org.springframework.context.ApplicationEvent>)",
            "public default void publishEvent(java.util.function.Function<org.springframework.test.context.TestContext, ? extends org.springframework.context.ApplicationEvent>)"
        ],
        [
            "org.springframework.test.context.util.TestContextResourceUtils",
            "org.springframework.test.context.util.TestContextResourceUtils()",
            "public org.springframework.test.context.util.TestContextResourceUtils()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.util.TestContextResourceUtils.convertToClasspathResourcePaths(java.lang.Class<?>, java.lang.String...)",
            "public static java.lang.String[] convertToClasspathResourcePaths(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.util.TestContextResourceUtils.convertToClasspathResourcePaths(java.lang.Class<?>, boolean, java.lang.String...)",
            "public static java.lang.String[] convertToClasspathResourcePaths(java.lang.Class<?>, boolean, java.lang.String...)"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.test.context.util.TestContextResourceUtils.convertToResources(org.springframework.core.io.ResourceLoader, java.lang.String...)",
            "public static org.springframework.core.io.Resource[] convertToResources(org.springframework.core.io.ResourceLoader, java.lang.String...)"
        ],
        [
            "java.util.List<org.springframework.core.io.Resource>",
            "org.springframework.test.context.util.TestContextResourceUtils.convertToResourceList(org.springframework.core.io.ResourceLoader, java.lang.String...)",
            "public static java.util.List<org.springframework.core.io.Resource> convertToResourceList(org.springframework.core.io.ResourceLoader, java.lang.String...)"
        ],
        [
            "org.springframework.test.context.TestContextAnnotationUtils",
            "org.springframework.test.context.TestContextAnnotationUtils()",
            "public org.springframework.test.context.TestContextAnnotationUtils()"
        ],
        [
            "boolean",
            "org.springframework.test.context.TestContextAnnotationUtils.hasAnnotation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public static boolean hasAnnotation(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.test.context.TestContextAnnotationUtils.findMergedAnnotation(java.lang.Class<?>, java.lang.Class<T>)",
            "public static <T extends java.lang.annotation.Annotation> T findMergedAnnotation(java.lang.Class<?>, java.lang.Class<T>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> java.util.Set<T>",
            "org.springframework.test.context.TestContextAnnotationUtils.getMergedRepeatableAnnotations(java.lang.Class<?>, java.lang.Class<T>)",
            "public static <T extends java.lang.annotation.Annotation> java.util.Set<T> getMergedRepeatableAnnotations(java.lang.Class<?>, java.lang.Class<T>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor<T>",
            "org.springframework.test.context.TestContextAnnotationUtils.findAnnotationDescriptor(java.lang.Class<?>, java.lang.Class<T>)",
            "public static <T extends java.lang.annotation.Annotation> org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor<T> findAnnotationDescriptor(java.lang.Class<?>, java.lang.Class<T>)"
        ],
        [
            "org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor",
            "org.springframework.test.context.TestContextAnnotationUtils.findAnnotationDescriptorForTypes(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...)",
            "public static org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor findAnnotationDescriptorForTypes(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...)"
        ],
        [
            "boolean",
            "org.springframework.test.context.TestContextAnnotationUtils.searchEnclosingClass(java.lang.Class<?>)",
            "public static boolean searchEnclosingClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.context.TestContextManager",
            "org.springframework.test.context.TestContextManager(java.lang.Class<?>)",
            "public org.springframework.test.context.TestContextManager(java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.context.TestContextManager",
            "org.springframework.test.context.TestContextManager(org.springframework.test.context.TestContextBootstrapper)",
            "public org.springframework.test.context.TestContextManager(org.springframework.test.context.TestContextBootstrapper)"
        ],
        [
            "org.springframework.test.context.TestContext",
            "org.springframework.test.context.TestContextManager.getTestContext()",
            "public final org.springframework.test.context.TestContext getTestContext()"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.registerTestExecutionListeners(java.util.List<org.springframework.test.context.TestExecutionListener>)",
            "public void registerTestExecutionListeners(java.util.List<org.springframework.test.context.TestExecutionListener>)"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.registerTestExecutionListeners(org.springframework.test.context.TestExecutionListener...)",
            "public void registerTestExecutionListeners(org.springframework.test.context.TestExecutionListener...)"
        ],
        [
            "java.util.List<org.springframework.test.context.TestExecutionListener>",
            "org.springframework.test.context.TestContextManager.getTestExecutionListeners()",
            "public final java.util.List<org.springframework.test.context.TestExecutionListener> getTestExecutionListeners()"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.beforeTestClass()",
            "public void beforeTestClass() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.prepareTestInstance(java.lang.Object)",
            "public void prepareTestInstance(java.lang.Object) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.beforeTestMethod(java.lang.Object, java.lang.reflect.Method)",
            "public void beforeTestMethod(java.lang.Object, java.lang.reflect.Method) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.beforeTestExecution(java.lang.Object, java.lang.reflect.Method)",
            "public void beforeTestExecution(java.lang.Object, java.lang.reflect.Method) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.afterTestExecution(java.lang.Object, java.lang.reflect.Method, java.lang.Throwable)",
            "public void afterTestExecution(java.lang.Object, java.lang.reflect.Method, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.afterTestMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Throwable)",
            "public void afterTestMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.TestContextManager.afterTestClass()",
            "public void afterTestClass() throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor",
            "org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor.next()",
            "public org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor next()"
        ],
        [
            "java.util.Set<java.lang.annotation.Annotation>",
            "org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor.findAllLocalMergedAnnotations()",
            "public java.util.Set<java.lang.annotation.Annotation> findAllLocalMergedAnnotations()"
        ],
        [
            "org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor",
            "org.springframework.test.context.TestContextAnnotationUtils$UntypedAnnotationDescriptor.next()",
            "public org.springframework.test.context.TestContextAnnotationUtils$AnnotationDescriptor next()"
        ],
        [
            "org.springframework.test.context.TestExecutionListeners$MergeMode[]",
            "org.springframework.test.context.TestExecutionListeners$MergeMode.values()",
            "public static org.springframework.test.context.TestExecutionListeners$MergeMode[] values()"
        ],
        [
            "org.springframework.test.context.TestExecutionListeners$MergeMode",
            "org.springframework.test.context.TestExecutionListeners$MergeMode.valueOf(java.lang.String)",
            "public static org.springframework.test.context.TestExecutionListeners$MergeMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests",
            "org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests()",
            "public org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests()"
        ],
        [
            "void",
            "org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests.setSqlScriptEncoding(java.lang.String)",
            "public void setSqlScriptEncoding(java.lang.String)"
        ],
        [
            "org.springframework.test.context.testng.AbstractTestNGSpringContextTests",
            "org.springframework.test.context.testng.AbstractTestNGSpringContextTests()",
            "public org.springframework.test.context.testng.AbstractTestNGSpringContextTests()"
        ],
        [
            "void",
            "org.springframework.test.context.testng.AbstractTestNGSpringContextTests.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public final void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(org.testng.IHookCallBack, org.testng.ITestResult)",
            "public void run(org.testng.IHookCallBack, org.testng.ITestResult)"
        ],
        [
            "org.springframework.test.context.TestContext",
            "org.springframework.test.context.TestContextManager$1.get()",
            "public org.springframework.test.context.TestContext get()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.TestContextManager$1.get()",
            "public java.lang.Object get()"
        ],
        [
            "org.springframework.test.context.ContextConfigurationAttributes",
            "org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>)",
            "public org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.context.ContextConfigurationAttributes",
            "org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, org.springframework.test.context.ContextConfiguration)",
            "public org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, org.springframework.test.context.ContextConfiguration)"
        ],
        [
            "org.springframework.test.context.ContextConfigurationAttributes",
            "org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, org.springframework.core.annotation.AnnotationAttributes)",
            "public org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, org.springframework.core.annotation.AnnotationAttributes)"
        ],
        [
            "org.springframework.test.context.ContextConfigurationAttributes",
            "org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], boolean, java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>[], boolean, java.lang.Class<? extends org.springframework.test.context.ContextLoader>)",
            "public org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], boolean, java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>[], boolean, java.lang.Class<? extends org.springframework.test.context.ContextLoader>)"
        ],
        [
            "org.springframework.test.context.ContextConfigurationAttributes",
            "org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], boolean, java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>[], boolean, java.lang.String, java.lang.Class<? extends org.springframework.test.context.ContextLoader>)",
            "public org.springframework.test.context.ContextConfigurationAttributes(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], boolean, java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>[], boolean, java.lang.String, java.lang.Class<? extends org.springframework.test.context.ContextLoader>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.context.ContextConfigurationAttributes.getDeclaringClass()",
            "public java.lang.Class<?> getDeclaringClass()"
        ],
        [
            "void",
            "org.springframework.test.context.ContextConfigurationAttributes.setClasses(java.lang.Class<?>...)",
            "public void setClasses(java.lang.Class<?>...)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.test.context.ContextConfigurationAttributes.getClasses()",
            "public java.lang.Class<?>[] getClasses()"
        ],
        [
            "boolean",
            "org.springframework.test.context.ContextConfigurationAttributes.hasClasses()",
            "public boolean hasClasses()"
        ],
        [
            "void",
            "org.springframework.test.context.ContextConfigurationAttributes.setLocations(java.lang.String...)",
            "public void setLocations(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.ContextConfigurationAttributes.getLocations()",
            "public java.lang.String[] getLocations()"
        ],
        [
            "boolean",
            "org.springframework.test.context.ContextConfigurationAttributes.hasLocations()",
            "public boolean hasLocations()"
        ],
        [
            "boolean",
            "org.springframework.test.context.ContextConfigurationAttributes.hasResources()",
            "public boolean hasResources()"
        ],
        [
            "boolean",
            "org.springframework.test.context.ContextConfigurationAttributes.isInheritLocations()",
            "public boolean isInheritLocations()"
        ],
        [
            "java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>[]",
            "org.springframework.test.context.ContextConfigurationAttributes.getInitializers()",
            "public java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>[] getInitializers()"
        ],
        [
            "boolean",
            "org.springframework.test.context.ContextConfigurationAttributes.isInheritInitializers()",
            "public boolean isInheritInitializers()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.ContextConfigurationAttributes.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Class<? extends org.springframework.test.context.ContextLoader>",
            "org.springframework.test.context.ContextConfigurationAttributes.getContextLoaderClass()",
            "public java.lang.Class<? extends org.springframework.test.context.ContextLoader> getContextLoaderClass()"
        ],
        [
            "boolean",
            "org.springframework.test.context.ContextConfigurationAttributes.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.context.ContextConfigurationAttributes.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.ContextConfigurationAttributes.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.lang.String[], org.springframework.test.context.ContextLoader)",
            "public org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.lang.String[], org.springframework.test.context.ContextLoader)"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], org.springframework.test.context.ContextLoader)",
            "public org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], org.springframework.test.context.ContextLoader)"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration(org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.test.context.MergedContextConfiguration(org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], java.util.Set<org.springframework.test.context.ContextCustomizer>, org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.test.context.MergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], java.util.Set<org.springframework.test.context.ContextCustomizer>, org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.context.MergedContextConfiguration.getTestClass()",
            "public java.lang.Class<?> getTestClass()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.MergedContextConfiguration.getLocations()",
            "public java.lang.String[] getLocations()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.test.context.MergedContextConfiguration.getClasses()",
            "public java.lang.Class<?>[] getClasses()"
        ],
        [
            "boolean",
            "org.springframework.test.context.MergedContextConfiguration.hasLocations()",
            "public boolean hasLocations()"
        ],
        [
            "boolean",
            "org.springframework.test.context.MergedContextConfiguration.hasClasses()",
            "public boolean hasClasses()"
        ],
        [
            "boolean",
            "org.springframework.test.context.MergedContextConfiguration.hasResources()",
            "public boolean hasResources()"
        ],
        [
            "java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>",
            "org.springframework.test.context.MergedContextConfiguration.getContextInitializerClasses()",
            "public java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>> getContextInitializerClasses()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.MergedContextConfiguration.getActiveProfiles()",
            "public java.lang.String[] getActiveProfiles()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.MergedContextConfiguration.getPropertySourceLocations()",
            "public java.lang.String[] getPropertySourceLocations()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.MergedContextConfiguration.getPropertySourceProperties()",
            "public java.lang.String[] getPropertySourceProperties()"
        ],
        [
            "java.util.Set<org.springframework.test.context.ContextCustomizer>",
            "org.springframework.test.context.MergedContextConfiguration.getContextCustomizers()",
            "public java.util.Set<org.springframework.test.context.ContextCustomizer> getContextCustomizers()"
        ],
        [
            "org.springframework.test.context.ContextLoader",
            "org.springframework.test.context.MergedContextConfiguration.getContextLoader()",
            "public org.springframework.test.context.ContextLoader getContextLoader()"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.MergedContextConfiguration.getParent()",
            "public org.springframework.test.context.MergedContextConfiguration getParent()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.MergedContextConfiguration.getParentApplicationContext()",
            "public org.springframework.context.ApplicationContext getParentApplicationContext()"
        ],
        [
            "boolean",
            "org.springframework.test.context.MergedContextConfiguration.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.context.MergedContextConfiguration.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.MergedContextConfiguration.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests",
            "org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests()",
            "public org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests()"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests.setDataSource(javax.sql.DataSource)",
            "public void setDataSource(javax.sql.DataSource)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests.setSqlScriptEncoding(java.lang.String)",
            "public void setSqlScriptEncoding(java.lang.String)"
        ],
        [
            "org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests",
            "org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests()",
            "public org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests()"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public final void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.test.context.junit4.SpringRunner",
            "org.springframework.test.context.junit4.SpringRunner(java.lang.Class<?>)",
            "public org.springframework.test.context.junit4.SpringRunner(java.lang.Class<?>) throws org.junit.runners.model.InitializationError"
        ],
        [
            "org.springframework.test.context.junit4.statements.SpringRepeat",
            "org.springframework.test.context.junit4.statements.SpringRepeat(org.junit.runners.model.Statement, java.lang.reflect.Method)",
            "public org.springframework.test.context.junit4.statements.SpringRepeat(org.junit.runners.model.Statement, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.test.context.junit4.statements.SpringRepeat",
            "org.springframework.test.context.junit4.statements.SpringRepeat(org.junit.runners.model.Statement, java.lang.reflect.Method, int)",
            "public org.springframework.test.context.junit4.statements.SpringRepeat(org.junit.runners.model.Statement, java.lang.reflect.Method, int)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.SpringRepeat.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.ProfileValueChecker",
            "org.springframework.test.context.junit4.statements.ProfileValueChecker(org.junit.runners.model.Statement, java.lang.Class<?>, java.lang.reflect.Method)",
            "public org.springframework.test.context.junit4.statements.ProfileValueChecker(org.junit.runners.model.Statement, java.lang.Class<?>, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.SpringFailOnTimeout",
            "org.springframework.test.context.junit4.statements.SpringFailOnTimeout(org.junit.runners.model.Statement, java.lang.reflect.Method)",
            "public org.springframework.test.context.junit4.statements.SpringFailOnTimeout(org.junit.runners.model.Statement, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.test.context.junit4.statements.SpringFailOnTimeout",
            "org.springframework.test.context.junit4.statements.SpringFailOnTimeout(org.junit.runners.model.Statement, long)",
            "public org.springframework.test.context.junit4.statements.SpringFailOnTimeout(org.junit.runners.model.Statement, long)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks",
            "org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks",
            "org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks(org.junit.runners.model.Statement, java.lang.Object, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks(org.junit.runners.model.Statement, java.lang.Object, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks",
            "org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks",
            "org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks(org.junit.runners.model.Statement, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks(org.junit.runners.model.Statement, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks",
            "org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks",
            "org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks(org.junit.runners.model.Statement, java.lang.Object, java.lang.reflect.Method, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks",
            "org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks(org.junit.runners.model.Statement, org.springframework.test.context.TestContextManager)",
            "public org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks(org.junit.runners.model.Statement, org.springframework.test.context.TestContextManager)"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate()",
            "public void evaluate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.test.context.junit4.rules.SpringMethodRule",
            "org.springframework.test.context.junit4.rules.SpringMethodRule()",
            "public org.springframework.test.context.junit4.rules.SpringMethodRule()"
        ],
        [
            "org.junit.runners.model.Statement",
            "org.springframework.test.context.junit4.rules.SpringMethodRule.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)",
            "public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)"
        ],
        [
            "org.springframework.test.context.junit4.rules.SpringClassRule",
            "org.springframework.test.context.junit4.rules.SpringClassRule()",
            "public org.springframework.test.context.junit4.rules.SpringClassRule()"
        ],
        [
            "org.junit.runners.model.Statement",
            "org.springframework.test.context.junit4.rules.SpringClassRule.apply(org.junit.runners.model.Statement, org.junit.runner.Description)",
            "public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)"
        ],
        [
            "org.springframework.test.context.junit4.SpringJUnit4ClassRunner",
            "org.springframework.test.context.junit4.SpringJUnit4ClassRunner(java.lang.Class<?>)",
            "public org.springframework.test.context.junit4.SpringJUnit4ClassRunner(java.lang.Class<?>) throws org.junit.runners.model.InitializationError"
        ],
        [
            "org.junit.runner.Description",
            "org.springframework.test.context.junit4.SpringJUnit4ClassRunner.getDescription()",
            "public org.junit.runner.Description getDescription()"
        ],
        [
            "void",
            "org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)",
            "public void run(org.junit.runner.notification.RunNotifier)"
        ],
        [
            "org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration[]",
            "org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration.values()",
            "public static org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration[] values()"
        ],
        [
            "org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration",
            "org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration.valueOf(java.lang.String)",
            "public static org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration",
            "org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration.from(java.lang.String)",
            "public static org.springframework.test.context.NestedTestConfiguration$EnclosingConfiguration from(java.lang.String)"
        ],
        [
            "org.springframework.test.context.transaction.TransactionalTestExecutionListener",
            "org.springframework.test.context.transaction.TransactionalTestExecutionListener()",
            "public org.springframework.test.context.transaction.TransactionalTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.transaction.TransactionalTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.transaction.TransactionalTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.transaction.TestContextTransactionUtils$TestContextTransactionAttribute",
            "org.springframework.test.context.transaction.TestContextTransactionUtils$TestContextTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute, org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.transaction.TestContextTransactionUtils$TestContextTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute, org.springframework.test.context.TestContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.transaction.TestContextTransactionUtils$TestContextTransactionAttribute.getName()",
            "public java.lang.String getName()"
        ],
        [
            "org.springframework.test.context.transaction.TestContextTransactionUtils",
            "org.springframework.test.context.transaction.TestContextTransactionUtils()",
            "public org.springframework.test.context.transaction.TestContextTransactionUtils()"
        ],
        [
            "javax.sql.DataSource",
            "org.springframework.test.context.transaction.TestContextTransactionUtils.retrieveDataSource(org.springframework.test.context.TestContext, java.lang.String)",
            "public static javax.sql.DataSource retrieveDataSource(org.springframework.test.context.TestContext, java.lang.String)"
        ],
        [
            "org.springframework.transaction.PlatformTransactionManager",
            "org.springframework.test.context.transaction.TestContextTransactionUtils.retrieveTransactionManager(org.springframework.test.context.TestContext, java.lang.String)",
            "public static org.springframework.transaction.PlatformTransactionManager retrieveTransactionManager(org.springframework.test.context.TestContext, java.lang.String)"
        ],
        [
            "org.springframework.transaction.interceptor.TransactionAttribute",
            "org.springframework.test.context.transaction.TestContextTransactionUtils.createDelegatingTransactionAttribute(org.springframework.test.context.TestContext, org.springframework.transaction.interceptor.TransactionAttribute)",
            "public static org.springframework.transaction.interceptor.TransactionAttribute createDelegatingTransactionAttribute(org.springframework.test.context.TestContext, org.springframework.transaction.interceptor.TransactionAttribute)"
        ],
        [
            "boolean",
            "org.springframework.test.context.transaction.TestTransaction.isActive()",
            "public static boolean isActive()"
        ],
        [
            "boolean",
            "org.springframework.test.context.transaction.TestTransaction.isFlaggedForRollback()",
            "public static boolean isFlaggedForRollback()"
        ],
        [
            "void",
            "org.springframework.test.context.transaction.TestTransaction.flagForRollback()",
            "public static void flagForRollback()"
        ],
        [
            "void",
            "org.springframework.test.context.transaction.TestTransaction.flagForCommit()",
            "public static void flagForCommit()"
        ],
        [
            "void",
            "org.springframework.test.context.transaction.TestTransaction.start()",
            "public static void start()"
        ],
        [
            "void",
            "org.springframework.test.context.transaction.TestTransaction.end()",
            "public static void end()"
        ],
        [
            "org.springframework.test.context.support.AbstractDelegatingSmartContextLoader",
            "org.springframework.test.context.support.AbstractDelegatingSmartContextLoader()",
            "public org.springframework.test.context.support.AbstractDelegatingSmartContextLoader()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.processLocations(java.lang.Class<?>, java.lang.String...)",
            "public final java.lang.String[] processLocations(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(java.lang.String...)",
            "public final org.springframework.context.ApplicationContext loadContext(java.lang.String...) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)",
            "public void processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.context.ApplicationContext loadContext(org.springframework.test.context.MergedContextConfiguration) throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.support.DynamicValuesPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.DynamicValuesPropertySource.containsProperty(java.lang.String)",
            "public boolean containsProperty(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.support.DynamicValuesPropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "org.springframework.test.context.support.TestPropertySourceUtils",
            "org.springframework.test.context.support.TestPropertySourceUtils()",
            "public org.springframework.test.context.support.TestPropertySourceUtils()"
        ],
        [
            "void",
            "org.springframework.test.context.support.TestPropertySourceUtils.addPropertiesFilesToEnvironment(org.springframework.context.ConfigurableApplicationContext, java.lang.String...)",
            "public static void addPropertiesFilesToEnvironment(org.springframework.context.ConfigurableApplicationContext, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.context.support.TestPropertySourceUtils.addPropertiesFilesToEnvironment(org.springframework.core.env.ConfigurableEnvironment, org.springframework.core.io.ResourceLoader, java.lang.String...)",
            "public static void addPropertiesFilesToEnvironment(org.springframework.core.env.ConfigurableEnvironment, org.springframework.core.io.ResourceLoader, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.context.support.TestPropertySourceUtils.addInlinedPropertiesToEnvironment(org.springframework.context.ConfigurableApplicationContext, java.lang.String...)",
            "public static void addInlinedPropertiesToEnvironment(org.springframework.context.ConfigurableApplicationContext, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.context.support.TestPropertySourceUtils.addInlinedPropertiesToEnvironment(org.springframework.core.env.ConfigurableEnvironment, java.lang.String...)",
            "public static void addInlinedPropertiesToEnvironment(org.springframework.core.env.ConfigurableEnvironment, java.lang.String...)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.test.context.support.TestPropertySourceUtils.convertInlinedPropertiesToMap(java.lang.String...)",
            "public static java.util.Map<java.lang.String, java.lang.Object> convertInlinedPropertiesToMap(java.lang.String...)"
        ],
        [
            "org.springframework.test.context.support.DefaultBootstrapContext",
            "org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class<?>, org.springframework.test.context.CacheAwareContextLoaderDelegate)",
            "public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class<?>, org.springframework.test.context.CacheAwareContextLoaderDelegate)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.context.support.DefaultBootstrapContext.getTestClass()",
            "public java.lang.Class<?> getTestClass()"
        ],
        [
            "org.springframework.test.context.CacheAwareContextLoaderDelegate",
            "org.springframework.test.context.support.DefaultBootstrapContext.getCacheAwareContextLoaderDelegate()",
            "public org.springframework.test.context.CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.support.DefaultBootstrapContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.test.context.support.DynamicPropertiesContextCustomizer.customizeContext(org.springframework.context.ConfigurableApplicationContext, org.springframework.test.context.MergedContextConfiguration)",
            "public void customizeContext(org.springframework.context.ConfigurableApplicationContext, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "int",
            "org.springframework.test.context.support.DynamicPropertiesContextCustomizer.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.DynamicPropertiesContextCustomizer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener",
            "org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener()",
            "public org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener()"
        ],
        [
            "org.springframework.test.context.support.DependencyInjectionTestExecutionListener",
            "org.springframework.test.context.support.DependencyInjectionTestExecutionListener()",
            "public org.springframework.test.context.support.DependencyInjectionTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.support.DependencyInjectionTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(org.springframework.test.context.TestContext)",
            "public void prepareTestInstance(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.DependencyInjectionTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.support.AbstractTestContextBootstrapper",
            "org.springframework.test.context.support.AbstractTestContextBootstrapper()",
            "public org.springframework.test.context.support.AbstractTestContextBootstrapper()"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestContextBootstrapper.setBootstrapContext(org.springframework.test.context.BootstrapContext)",
            "public void setBootstrapContext(org.springframework.test.context.BootstrapContext)"
        ],
        [
            "org.springframework.test.context.BootstrapContext",
            "org.springframework.test.context.support.AbstractTestContextBootstrapper.getBootstrapContext()",
            "public org.springframework.test.context.BootstrapContext getBootstrapContext()"
        ],
        [
            "org.springframework.test.context.TestContext",
            "org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext()",
            "public org.springframework.test.context.TestContext buildTestContext()"
        ],
        [
            "java.util.List<org.springframework.test.context.TestExecutionListener>",
            "org.springframework.test.context.support.AbstractTestContextBootstrapper.getTestExecutionListeners()",
            "public final java.util.List<org.springframework.test.context.TestExecutionListener> getTestExecutionListeners()"
        ],
        [
            "org.springframework.test.context.MergedContextConfiguration",
            "org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration()",
            "public final org.springframework.test.context.MergedContextConfiguration buildMergedContextConfiguration()"
        ],
        [
            "org.springframework.test.context.support.DelegatingSmartContextLoader",
            "org.springframework.test.context.support.DelegatingSmartContextLoader()",
            "public org.springframework.test.context.support.DelegatingSmartContextLoader()"
        ],
        [
            "org.springframework.test.context.support.AbstractGenericContextLoader",
            "org.springframework.test.context.support.AbstractGenericContextLoader()",
            "public org.springframework.test.context.support.AbstractGenericContextLoader()"
        ],
        [
            "org.springframework.context.ConfigurableApplicationContext",
            "org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(org.springframework.test.context.MergedContextConfiguration)",
            "public final org.springframework.context.ConfigurableApplicationContext loadContext(org.springframework.test.context.MergedContextConfiguration) throws java.lang.Exception"
        ],
        [
            "org.springframework.context.ConfigurableApplicationContext",
            "org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(java.lang.String...)",
            "public final org.springframework.context.ConfigurableApplicationContext loadContext(java.lang.String...) throws java.lang.Exception"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.context.ApplicationContext loadContext(org.springframework.test.context.MergedContextConfiguration) throws java.lang.Exception"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(java.lang.String[])",
            "public org.springframework.context.ApplicationContext loadContext(java.lang.String[]) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils",
            "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils()",
            "public org.springframework.test.context.support.AnnotationConfigContextLoaderUtils()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(java.lang.Class<?>)",
            "public static java.lang.Class<?>[] detectDefaultConfigurationClasses(java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.context.support.DirtiesContextTestExecutionListener",
            "org.springframework.test.context.support.DirtiesContextTestExecutionListener()",
            "public org.springframework.test.context.support.DirtiesContextTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.support.DirtiesContextTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.support.DirtiesContextTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.DirtiesContextTestExecutionListener.afterTestClass(org.springframework.test.context.TestContext)",
            "public void afterTestClass(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.support.DefaultActiveProfilesResolver",
            "org.springframework.test.context.support.DefaultActiveProfilesResolver()",
            "public org.springframework.test.context.support.DefaultActiveProfilesResolver()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.support.DefaultActiveProfilesResolver.resolve(java.lang.Class<?>)",
            "public java.lang.String[] resolve(java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.context.support.GenericPropertiesContextLoader",
            "org.springframework.test.context.support.GenericPropertiesContextLoader()",
            "public org.springframework.test.context.support.GenericPropertiesContextLoader()"
        ],
        [
            "org.springframework.test.context.support.AnnotationConfigContextLoader",
            "org.springframework.test.context.support.AnnotationConfigContextLoader()",
            "public org.springframework.test.context.support.AnnotationConfigContextLoader()"
        ],
        [
            "void",
            "org.springframework.test.context.support.AnnotationConfigContextLoader.processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)",
            "public void processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)"
        ],
        [
            "org.springframework.test.context.support.DynamicPropertiesContextCustomizer",
            "org.springframework.test.context.support.DynamicPropertiesContextCustomizerFactory.createContextCustomizer(java.lang.Class<?>, java.util.List<org.springframework.test.context.ContextConfigurationAttributes>)",
            "public org.springframework.test.context.support.DynamicPropertiesContextCustomizer createContextCustomizer(java.lang.Class<?>, java.util.List<org.springframework.test.context.ContextConfigurationAttributes>)"
        ],
        [
            "org.springframework.test.context.ContextCustomizer",
            "org.springframework.test.context.support.DynamicPropertiesContextCustomizerFactory.createContextCustomizer(java.lang.Class, java.util.List)",
            "public org.springframework.test.context.ContextCustomizer createContextCustomizer(java.lang.Class, java.util.List)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.TestConstructorUtils.isAutowirableConstructor(java.lang.reflect.Executable, java.lang.Class<?>)",
            "public static boolean isAutowirableConstructor(java.lang.reflect.Executable, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.TestConstructorUtils.isAutowirableConstructor(java.lang.reflect.Constructor<?>, java.lang.Class<?>)",
            "public static boolean isAutowirableConstructor(java.lang.reflect.Constructor<?>, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.TestConstructorUtils.isAutowirableConstructor(java.lang.reflect.Executable, java.lang.Class<?>, org.springframework.test.context.support.PropertyProvider)",
            "public static boolean isAutowirableConstructor(java.lang.reflect.Executable, java.lang.Class<?>, org.springframework.test.context.support.PropertyProvider)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.TestConstructorUtils.isAutowirableConstructor(java.lang.reflect.Constructor<?>, java.lang.Class<?>, org.springframework.test.context.support.PropertyProvider)",
            "public static boolean isAutowirableConstructor(java.lang.reflect.Constructor<?>, java.lang.Class<?>, org.springframework.test.context.support.PropertyProvider)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.TestPropertySourceAttributes.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.context.support.TestPropertySourceAttributes.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.support.TestPropertySourceAttributes.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.support.AbstractContextLoader",
            "org.springframework.test.context.support.AbstractContextLoader()",
            "public org.springframework.test.context.support.AbstractContextLoader()"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractContextLoader.processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)",
            "public void processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.support.AbstractContextLoader.processLocations(java.lang.Class<?>, java.lang.String...)",
            "public final java.lang.String[] processLocations(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener",
            "org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener()",
            "public org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener.beforeTestClass(org.springframework.test.context.TestContext)",
            "public void beforeTestClass(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.support.AbstractTestExecutionListener",
            "org.springframework.test.context.support.AbstractTestExecutionListener()",
            "public org.springframework.test.context.support.AbstractTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.support.AbstractTestExecutionListener.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.beforeTestClass(org.springframework.test.context.TestContext)",
            "public void beforeTestClass(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.prepareTestInstance(org.springframework.test.context.TestContext)",
            "public void prepareTestInstance(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.beforeTestExecution(org.springframework.test.context.TestContext)",
            "public void beforeTestExecution(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.afterTestExecution(org.springframework.test.context.TestContext)",
            "public void afterTestExecution(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.support.AbstractTestExecutionListener.afterTestClass(org.springframework.test.context.TestContext)",
            "public void afterTestClass(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.support.GenericGroovyXmlContextLoader",
            "org.springframework.test.context.support.GenericGroovyXmlContextLoader()",
            "public org.springframework.test.context.support.GenericGroovyXmlContextLoader()"
        ],
        [
            "org.springframework.test.context.support.DefaultTestContext",
            "org.springframework.test.context.support.DefaultTestContext(org.springframework.test.context.support.DefaultTestContext)",
            "public org.springframework.test.context.support.DefaultTestContext(org.springframework.test.context.support.DefaultTestContext)"
        ],
        [
            "org.springframework.test.context.support.DefaultTestContext",
            "org.springframework.test.context.support.DefaultTestContext(java.lang.Class<?>, org.springframework.test.context.MergedContextConfiguration, org.springframework.test.context.CacheAwareContextLoaderDelegate)",
            "public org.springframework.test.context.support.DefaultTestContext(java.lang.Class<?>, org.springframework.test.context.MergedContextConfiguration, org.springframework.test.context.CacheAwareContextLoaderDelegate)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.DefaultTestContext.hasApplicationContext()",
            "public boolean hasApplicationContext()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.support.DefaultTestContext.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "void",
            "org.springframework.test.context.support.DefaultTestContext.markApplicationContextDirty(org.springframework.test.annotation.DirtiesContext$HierarchyMode)",
            "public void markApplicationContextDirty(org.springframework.test.annotation.DirtiesContext$HierarchyMode)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.context.support.DefaultTestContext.getTestClass()",
            "public final java.lang.Class<?> getTestClass()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.support.DefaultTestContext.getTestInstance()",
            "public final java.lang.Object getTestInstance()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.test.context.support.DefaultTestContext.getTestMethod()",
            "public final java.lang.reflect.Method getTestMethod()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.test.context.support.DefaultTestContext.getTestException()",
            "public final java.lang.Throwable getTestException()"
        ],
        [
            "void",
            "org.springframework.test.context.support.DefaultTestContext.updateState(java.lang.Object, java.lang.reflect.Method, java.lang.Throwable)",
            "public void updateState(java.lang.Object, java.lang.reflect.Method, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.test.context.support.DefaultTestContext.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.support.DefaultTestContext.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.test.context.support.DefaultTestContext.computeAttribute(java.lang.String, java.util.function.Function<java.lang.String, T>)",
            "public <T> T computeAttribute(java.lang.String, java.util.function.Function<java.lang.String, T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.support.DefaultTestContext.removeAttribute(java.lang.String)",
            "public java.lang.Object removeAttribute(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.DefaultTestContext.hasAttribute(java.lang.String)",
            "public boolean hasAttribute(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.context.support.DefaultTestContext.attributeNames()",
            "public java.lang.String[] attributeNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.support.DefaultTestContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.support.DefaultTestContextBootstrapper",
            "org.springframework.test.context.support.DefaultTestContextBootstrapper()",
            "public org.springframework.test.context.support.DefaultTestContextBootstrapper()"
        ],
        [
            "org.springframework.test.context.support.GenericXmlContextLoader",
            "org.springframework.test.context.support.GenericXmlContextLoader()",
            "public org.springframework.test.context.support.GenericXmlContextLoader()"
        ],
        [
            "boolean",
            "org.springframework.test.context.support.MergedTestPropertySources.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.context.support.MergedTestPropertySources.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.support.MergedTestPropertySources.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.jdbc.Sql$ExecutionPhase[]",
            "org.springframework.test.context.jdbc.Sql$ExecutionPhase.values()",
            "public static org.springframework.test.context.jdbc.Sql$ExecutionPhase[] values()"
        ],
        [
            "org.springframework.test.context.jdbc.Sql$ExecutionPhase",
            "org.springframework.test.context.jdbc.Sql$ExecutionPhase.valueOf(java.lang.String)",
            "public static org.springframework.test.context.jdbc.Sql$ExecutionPhase valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.context.jdbc.SqlMergeMode$MergeMode[]",
            "org.springframework.test.context.jdbc.SqlMergeMode$MergeMode.values()",
            "public static org.springframework.test.context.jdbc.SqlMergeMode$MergeMode[] values()"
        ],
        [
            "org.springframework.test.context.jdbc.SqlMergeMode$MergeMode",
            "org.springframework.test.context.jdbc.SqlMergeMode$MergeMode.valueOf(java.lang.String)",
            "public static org.springframework.test.context.jdbc.SqlMergeMode$MergeMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.context.jdbc.SqlConfig$ErrorMode[]",
            "org.springframework.test.context.jdbc.SqlConfig$ErrorMode.values()",
            "public static org.springframework.test.context.jdbc.SqlConfig$ErrorMode[] values()"
        ],
        [
            "org.springframework.test.context.jdbc.SqlConfig$ErrorMode",
            "org.springframework.test.context.jdbc.SqlConfig$ErrorMode.valueOf(java.lang.String)",
            "public static org.springframework.test.context.jdbc.SqlConfig$ErrorMode valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.jdbc.MergedSqlConfig.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener",
            "org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener()",
            "public org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.jdbc.SqlConfig$TransactionMode[]",
            "org.springframework.test.context.jdbc.SqlConfig$TransactionMode.values()",
            "public static org.springframework.test.context.jdbc.SqlConfig$TransactionMode[] values()"
        ],
        [
            "org.springframework.test.context.jdbc.SqlConfig$TransactionMode",
            "org.springframework.test.context.jdbc.SqlConfig$TransactionMode.valueOf(java.lang.String)",
            "public static org.springframework.test.context.jdbc.SqlConfig$TransactionMode valueOf(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.test.context.CacheAwareContextLoaderDelegate.boolean isContextLoaded(org.springframework.test.context.MergedContextConfiguration)",
            "public default boolean isContextLoaded(org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.test.context.junit.jupiter.EnabledIfCondition",
            "org.springframework.test.context.junit.jupiter.EnabledIfCondition()",
            "public org.springframework.test.context.junit.jupiter.EnabledIfCondition()"
        ],
        [
            "org.junit.jupiter.api.extension.ConditionEvaluationResult",
            "org.springframework.test.context.junit.jupiter.EnabledIfCondition.evaluateExecutionCondition(org.junit.jupiter.api.extension.ExtensionContext)",
            "public org.junit.jupiter.api.extension.ConditionEvaluationResult evaluateExecutionCondition(org.junit.jupiter.api.extension.ExtensionContext)"
        ],
        [
            "org.springframework.test.context.junit.jupiter.SpringExtension",
            "org.springframework.test.context.junit.jupiter.SpringExtension()",
            "public org.springframework.test.context.junit.jupiter.SpringExtension()"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.beforeAll(org.junit.jupiter.api.extension.ExtensionContext)",
            "public void beforeAll(org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.afterAll(org.junit.jupiter.api.extension.ExtensionContext)",
            "public void afterAll(org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(java.lang.Object, org.junit.jupiter.api.extension.ExtensionContext)",
            "public void postProcessTestInstance(java.lang.Object, org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(org.junit.jupiter.api.extension.ExtensionContext)",
            "public void beforeEach(org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.beforeTestExecution(org.junit.jupiter.api.extension.ExtensionContext)",
            "public void beforeTestExecution(org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.afterTestExecution(org.junit.jupiter.api.extension.ExtensionContext)",
            "public void afterTestExecution(org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.junit.jupiter.SpringExtension.afterEach(org.junit.jupiter.api.extension.ExtensionContext)",
            "public void afterEach(org.junit.jupiter.api.extension.ExtensionContext) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.test.context.junit.jupiter.SpringExtension.supportsParameter(org.junit.jupiter.api.extension.ParameterContext, org.junit.jupiter.api.extension.ExtensionContext)",
            "public boolean supportsParameter(org.junit.jupiter.api.extension.ParameterContext, org.junit.jupiter.api.extension.ExtensionContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.junit.jupiter.SpringExtension.resolveParameter(org.junit.jupiter.api.extension.ParameterContext, org.junit.jupiter.api.extension.ExtensionContext)",
            "public java.lang.Object resolveParameter(org.junit.jupiter.api.extension.ParameterContext, org.junit.jupiter.api.extension.ExtensionContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.junit.jupiter.SpringExtension.getApplicationContext(org.junit.jupiter.api.extension.ExtensionContext)",
            "public static org.springframework.context.ApplicationContext getApplicationContext(org.junit.jupiter.api.extension.ExtensionContext)"
        ],
        [
            "org.springframework.test.context.junit.jupiter.DisabledIfCondition",
            "org.springframework.test.context.junit.jupiter.DisabledIfCondition()",
            "public org.springframework.test.context.junit.jupiter.DisabledIfCondition()"
        ],
        [
            "org.junit.jupiter.api.extension.ConditionEvaluationResult",
            "org.springframework.test.context.junit.jupiter.DisabledIfCondition.evaluateExecutionCondition(org.junit.jupiter.api.extension.ExtensionContext)",
            "public org.junit.jupiter.api.extension.ConditionEvaluationResult evaluateExecutionCondition(org.junit.jupiter.api.extension.ExtensionContext)"
        ],
        [
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate",
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate()",
            "public org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate()"
        ],
        [
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate",
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate(org.springframework.test.context.cache.ContextCache)",
            "public org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate(org.springframework.test.context.cache.ContextCache)"
        ],
        [
            "boolean",
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.isContextLoaded(org.springframework.test.context.MergedContextConfiguration)",
            "public boolean isContextLoaded(org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.context.ApplicationContext loadContext(org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.closeContext(org.springframework.test.context.MergedContextConfiguration, org.springframework.test.annotation.DirtiesContext$HierarchyMode)",
            "public void closeContext(org.springframework.test.context.MergedContextConfiguration, org.springframework.test.annotation.DirtiesContext$HierarchyMode)"
        ],
        [
            "org.springframework.test.context.cache.DefaultContextCache",
            "org.springframework.test.context.cache.DefaultContextCache()",
            "public org.springframework.test.context.cache.DefaultContextCache()"
        ],
        [
            "org.springframework.test.context.cache.DefaultContextCache",
            "org.springframework.test.context.cache.DefaultContextCache(int)",
            "public org.springframework.test.context.cache.DefaultContextCache(int)"
        ],
        [
            "boolean",
            "org.springframework.test.context.cache.DefaultContextCache.contains(org.springframework.test.context.MergedContextConfiguration)",
            "public boolean contains(org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.cache.DefaultContextCache.get(org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.context.ApplicationContext get(org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultContextCache.put(org.springframework.test.context.MergedContextConfiguration, org.springframework.context.ApplicationContext)",
            "public void put(org.springframework.test.context.MergedContextConfiguration, org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultContextCache.remove(org.springframework.test.context.MergedContextConfiguration, org.springframework.test.annotation.DirtiesContext$HierarchyMode)",
            "public void remove(org.springframework.test.context.MergedContextConfiguration, org.springframework.test.annotation.DirtiesContext$HierarchyMode)"
        ],
        [
            "int",
            "org.springframework.test.context.cache.DefaultContextCache.size()",
            "public int size()"
        ],
        [
            "int",
            "org.springframework.test.context.cache.DefaultContextCache.getMaxSize()",
            "public int getMaxSize()"
        ],
        [
            "int",
            "org.springframework.test.context.cache.DefaultContextCache.getParentContextCount()",
            "public int getParentContextCount()"
        ],
        [
            "int",
            "org.springframework.test.context.cache.DefaultContextCache.getHitCount()",
            "public int getHitCount()"
        ],
        [
            "int",
            "org.springframework.test.context.cache.DefaultContextCache.getMissCount()",
            "public int getMissCount()"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultContextCache.reset()",
            "public void reset()"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultContextCache.clear()",
            "public void clear()"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultContextCache.clearStatistics()",
            "public void clearStatistics()"
        ],
        [
            "void",
            "org.springframework.test.context.cache.DefaultContextCache.logStatistics()",
            "public void logStatistics()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.cache.DefaultContextCache.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.cache.ContextCacheUtils",
            "org.springframework.test.context.cache.ContextCacheUtils()",
            "public org.springframework.test.context.cache.ContextCacheUtils()"
        ],
        [
            "int",
            "org.springframework.test.context.cache.ContextCacheUtils.retrieveMaxCacheSize()",
            "public static int retrieveMaxCacheSize()"
        ],
        [
            "org.springframework.test.context.TestConstructor$AutowireMode[]",
            "org.springframework.test.context.TestConstructor$AutowireMode.values()",
            "public static org.springframework.test.context.TestConstructor$AutowireMode[] values()"
        ],
        [
            "org.springframework.test.context.TestConstructor$AutowireMode",
            "org.springframework.test.context.TestConstructor$AutowireMode.valueOf(java.lang.String)",
            "public static org.springframework.test.context.TestConstructor$AutowireMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.context.TestConstructor$AutowireMode",
            "org.springframework.test.context.TestConstructor$AutowireMode.from(java.lang.String)",
            "public static org.springframework.test.context.TestConstructor$AutowireMode from(java.lang.String)"
        ],
        [
            "org.springframework.test.context.event.AfterTestMethodEvent",
            "org.springframework.test.context.event.AfterTestMethodEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.AfterTestMethodEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.event.EventPublishingTestExecutionListener",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener()",
            "public org.springframework.test.context.event.EventPublishingTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.beforeTestClass(org.springframework.test.context.TestContext)",
            "public void beforeTestClass(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.prepareTestInstance(org.springframework.test.context.TestContext)",
            "public void prepareTestInstance(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.beforeTestExecution(org.springframework.test.context.TestContext)",
            "public void beforeTestExecution(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.afterTestExecution(org.springframework.test.context.TestContext)",
            "public void afterTestExecution(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.EventPublishingTestExecutionListener.afterTestClass(org.springframework.test.context.TestContext)",
            "public void afterTestClass(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.event.BeforeTestClassEvent",
            "org.springframework.test.context.event.BeforeTestClassEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.BeforeTestClassEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "void",
            "org.springframework.test.context.event.ApplicationEventsApplicationListener.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener()",
            "public org.springframework.test.context.event.ApplicationEventsTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener.prepareTestInstance(org.springframework.test.context.TestContext)",
            "public void prepareTestInstance(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.event.ApplicationEvents",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener$ApplicationEventsObjectFactory.getObject()",
            "public org.springframework.test.context.event.ApplicationEvents getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener$ApplicationEventsObjectFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.event.ApplicationEventsTestExecutionListener$ApplicationEventsObjectFactory.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "java.util.stream.Stream<org.springframework.context.ApplicationEvent>",
            "org.springframework.test.context.event.DefaultApplicationEvents.stream()",
            "public java.util.stream.Stream<org.springframework.context.ApplicationEvent> stream()"
        ],
        [
            "<T> java.util.stream.Stream<T>",
            "org.springframework.test.context.event.DefaultApplicationEvents.stream(java.lang.Class<T>)",
            "public <T> java.util.stream.Stream<T> stream(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.test.context.event.DefaultApplicationEvents.clear()",
            "public void clear()"
        ],
        [
            "org.springframework.test.context.event.AfterTestExecutionEvent",
            "org.springframework.test.context.event.AfterTestExecutionEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.AfterTestExecutionEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.event.AfterTestClassEvent",
            "org.springframework.test.context.event.AfterTestClassEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.AfterTestClassEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.event.ApplicationEvents",
            "org.springframework.test.context.event.ApplicationEventsHolder.getApplicationEvents()",
            "public static org.springframework.test.context.event.ApplicationEvents getApplicationEvents()"
        ],
        [
            "org.springframework.test.context.event.ApplicationEvents",
            "org.springframework.test.context.event.ApplicationEventsHolder.getRequiredApplicationEvents()",
            "public static org.springframework.test.context.event.ApplicationEvents getRequiredApplicationEvents()"
        ],
        [
            "org.springframework.test.context.event.TestContextEvent",
            "org.springframework.test.context.event.TestContextEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.TestContextEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.TestContext",
            "org.springframework.test.context.event.TestContextEvent.getSource()",
            "public final org.springframework.test.context.TestContext getSource()"
        ],
        [
            "org.springframework.test.context.TestContext",
            "org.springframework.test.context.event.TestContextEvent.getTestContext()",
            "public final org.springframework.test.context.TestContext getTestContext()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.context.event.TestContextEvent.getSource()",
            "public java.lang.Object getSource()"
        ],
        [
            "org.springframework.test.context.event.BeforeTestMethodEvent",
            "org.springframework.test.context.event.BeforeTestMethodEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.BeforeTestMethodEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.event.PrepareTestInstanceEvent",
            "org.springframework.test.context.event.PrepareTestInstanceEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.PrepareTestInstanceEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "org.springframework.test.context.event.BeforeTestExecutionEvent",
            "org.springframework.test.context.event.BeforeTestExecutionEvent(org.springframework.test.context.TestContext)",
            "public org.springframework.test.context.event.BeforeTestExecutionEvent(org.springframework.test.context.TestContext)"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void beforeTestClass(org.springframework.test.context.TestContext)",
            "public default void beforeTestClass(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void prepareTestInstance(org.springframework.test.context.TestContext)",
            "public default void prepareTestInstance(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void beforeTestMethod(org.springframework.test.context.TestContext)",
            "public default void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void beforeTestExecution(org.springframework.test.context.TestContext)",
            "public default void beforeTestExecution(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void afterTestExecution(org.springframework.test.context.TestContext)",
            "public default void afterTestExecution(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void afterTestMethod(org.springframework.test.context.TestContext)",
            "public default void afterTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "default",
            "org.springframework.test.context.TestExecutionListener.void afterTestClass(org.springframework.test.context.TestContext)",
            "public default void afterTestClass(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainerContextCustomizer.customizeContext(org.springframework.context.ConfigurableApplicationContext, org.springframework.test.context.MergedContextConfiguration)",
            "public void customizeContext(org.springframework.context.ConfigurableApplicationContext, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "boolean",
            "org.springframework.test.context.web.socket.MockServerContainerContextCustomizer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.context.web.socket.MockServerContainerContextCustomizer.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.test.context.ContextCustomizer",
            "org.springframework.test.context.web.socket.MockServerContainerContextCustomizerFactory.createContextCustomizer(java.lang.Class<?>, java.util.List<org.springframework.test.context.ContextConfigurationAttributes>)",
            "public org.springframework.test.context.ContextCustomizer createContextCustomizer(java.lang.Class<?>, java.util.List<org.springframework.test.context.ContextConfigurationAttributes>)"
        ],
        [
            "long",
            "org.springframework.test.context.web.socket.MockServerContainer.getDefaultAsyncSendTimeout()",
            "public long getDefaultAsyncSendTimeout()"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainer.setAsyncSendTimeout(long)",
            "public void setAsyncSendTimeout(long)"
        ],
        [
            "long",
            "org.springframework.test.context.web.socket.MockServerContainer.getDefaultMaxSessionIdleTimeout()",
            "public long getDefaultMaxSessionIdleTimeout()"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainer.setDefaultMaxSessionIdleTimeout(long)",
            "public void setDefaultMaxSessionIdleTimeout(long)"
        ],
        [
            "int",
            "org.springframework.test.context.web.socket.MockServerContainer.getDefaultMaxBinaryMessageBufferSize()",
            "public int getDefaultMaxBinaryMessageBufferSize()"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainer.setDefaultMaxBinaryMessageBufferSize(int)",
            "public void setDefaultMaxBinaryMessageBufferSize(int)"
        ],
        [
            "int",
            "org.springframework.test.context.web.socket.MockServerContainer.getDefaultMaxTextMessageBufferSize()",
            "public int getDefaultMaxTextMessageBufferSize()"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainer.setDefaultMaxTextMessageBufferSize(int)",
            "public void setDefaultMaxTextMessageBufferSize(int)"
        ],
        [
            "java.util.Set<javax.websocket.Extension>",
            "org.springframework.test.context.web.socket.MockServerContainer.getInstalledExtensions()",
            "public java.util.Set<javax.websocket.Extension> getInstalledExtensions()"
        ],
        [
            "javax.websocket.Session",
            "org.springframework.test.context.web.socket.MockServerContainer.connectToServer(java.lang.Object, java.net.URI)",
            "public javax.websocket.Session connectToServer(java.lang.Object, java.net.URI) throws javax.websocket.DeploymentException, java.io.IOException"
        ],
        [
            "javax.websocket.Session",
            "org.springframework.test.context.web.socket.MockServerContainer.connectToServer(java.lang.Class<?>, java.net.URI)",
            "public javax.websocket.Session connectToServer(java.lang.Class<?>, java.net.URI) throws javax.websocket.DeploymentException, java.io.IOException"
        ],
        [
            "javax.websocket.Session",
            "org.springframework.test.context.web.socket.MockServerContainer.connectToServer(javax.websocket.Endpoint, javax.websocket.ClientEndpointConfig, java.net.URI)",
            "public javax.websocket.Session connectToServer(javax.websocket.Endpoint, javax.websocket.ClientEndpointConfig, java.net.URI) throws javax.websocket.DeploymentException, java.io.IOException"
        ],
        [
            "javax.websocket.Session",
            "org.springframework.test.context.web.socket.MockServerContainer.connectToServer(java.lang.Class<? extends javax.websocket.Endpoint>, javax.websocket.ClientEndpointConfig, java.net.URI)",
            "public javax.websocket.Session connectToServer(java.lang.Class<? extends javax.websocket.Endpoint>, javax.websocket.ClientEndpointConfig, java.net.URI) throws javax.websocket.DeploymentException, java.io.IOException"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainer.addEndpoint(java.lang.Class<?>)",
            "public void addEndpoint(java.lang.Class<?>) throws javax.websocket.DeploymentException"
        ],
        [
            "void",
            "org.springframework.test.context.web.socket.MockServerContainer.addEndpoint(javax.websocket.server.ServerEndpointConfig)",
            "public void addEndpoint(javax.websocket.server.ServerEndpointConfig) throws javax.websocket.DeploymentException"
        ],
        [
            "org.springframework.test.context.web.GenericGroovyXmlWebContextLoader",
            "org.springframework.test.context.web.GenericGroovyXmlWebContextLoader()",
            "public org.springframework.test.context.web.GenericGroovyXmlWebContextLoader()"
        ],
        [
            "org.springframework.test.context.web.WebTestContextBootstrapper",
            "org.springframework.test.context.web.WebTestContextBootstrapper()",
            "public org.springframework.test.context.web.WebTestContextBootstrapper()"
        ],
        [
            "org.springframework.test.context.web.ServletTestExecutionListener",
            "org.springframework.test.context.web.ServletTestExecutionListener()",
            "public org.springframework.test.context.web.ServletTestExecutionListener()"
        ],
        [
            "int",
            "org.springframework.test.context.web.ServletTestExecutionListener.getOrder()",
            "public final int getOrder()"
        ],
        [
            "void",
            "org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(org.springframework.test.context.TestContext)",
            "public void prepareTestInstance(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.web.ServletTestExecutionListener.beforeTestMethod(org.springframework.test.context.TestContext)",
            "public void beforeTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.test.context.web.ServletTestExecutionListener.afterTestMethod(org.springframework.test.context.TestContext)",
            "public void afterTestMethod(org.springframework.test.context.TestContext) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.web.AbstractGenericWebContextLoader",
            "org.springframework.test.context.web.AbstractGenericWebContextLoader()",
            "public org.springframework.test.context.web.AbstractGenericWebContextLoader()"
        ],
        [
            "org.springframework.context.ConfigurableApplicationContext",
            "org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(org.springframework.test.context.MergedContextConfiguration)",
            "public final org.springframework.context.ConfigurableApplicationContext loadContext(org.springframework.test.context.MergedContextConfiguration) throws java.lang.Exception"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(java.lang.String...)",
            "public final org.springframework.context.ApplicationContext loadContext(java.lang.String...) throws java.lang.Exception"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.context.ApplicationContext loadContext(org.springframework.test.context.MergedContextConfiguration) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.context.web.GenericXmlWebContextLoader",
            "org.springframework.test.context.web.GenericXmlWebContextLoader()",
            "public org.springframework.test.context.web.GenericXmlWebContextLoader()"
        ],
        [
            "org.springframework.test.context.web.WebMergedContextConfiguration",
            "org.springframework.test.context.web.WebMergedContextConfiguration(org.springframework.test.context.MergedContextConfiguration, java.lang.String)",
            "public org.springframework.test.context.web.WebMergedContextConfiguration(org.springframework.test.context.MergedContextConfiguration, java.lang.String)"
        ],
        [
            "org.springframework.test.context.web.WebMergedContextConfiguration",
            "org.springframework.test.context.web.WebMergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.test.context.web.WebMergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "org.springframework.test.context.web.WebMergedContextConfiguration",
            "org.springframework.test.context.web.WebMergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], java.util.Set<org.springframework.test.context.ContextCustomizer>, java.lang.String, org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)",
            "public org.springframework.test.context.web.WebMergedContextConfiguration(java.lang.Class<?>, java.lang.String[], java.lang.Class<?>[], java.util.Set<java.lang.Class<? extends org.springframework.context.ApplicationContextInitializer<?>>>, java.lang.String[], java.lang.String[], java.lang.String[], java.util.Set<org.springframework.test.context.ContextCustomizer>, java.lang.String, org.springframework.test.context.ContextLoader, org.springframework.test.context.CacheAwareContextLoaderDelegate, org.springframework.test.context.MergedContextConfiguration)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.web.WebMergedContextConfiguration.getResourceBasePath()",
            "public java.lang.String getResourceBasePath()"
        ],
        [
            "boolean",
            "org.springframework.test.context.web.WebMergedContextConfiguration.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.context.web.WebMergedContextConfiguration.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.context.web.WebMergedContextConfiguration.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.context.web.WebDelegatingSmartContextLoader",
            "org.springframework.test.context.web.WebDelegatingSmartContextLoader()",
            "public org.springframework.test.context.web.WebDelegatingSmartContextLoader()"
        ],
        [
            "org.springframework.test.context.web.AnnotationConfigWebContextLoader",
            "org.springframework.test.context.web.AnnotationConfigWebContextLoader()",
            "public org.springframework.test.context.web.AnnotationConfigWebContextLoader()"
        ],
        [
            "void",
            "org.springframework.test.context.web.AnnotationConfigWebContextLoader.processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)",
            "public void processContextConfiguration(org.springframework.test.context.ContextConfigurationAttributes)"
        ],
        [
            "org.springframework.test.jdbc.JdbcTestUtils",
            "org.springframework.test.jdbc.JdbcTestUtils()",
            "public org.springframework.test.jdbc.JdbcTestUtils()"
        ],
        [
            "int",
            "org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable(org.springframework.jdbc.core.JdbcTemplate, java.lang.String)",
            "public static int countRowsInTable(org.springframework.jdbc.core.JdbcTemplate, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere(org.springframework.jdbc.core.JdbcTemplate, java.lang.String, java.lang.String)",
            "public static int countRowsInTableWhere(org.springframework.jdbc.core.JdbcTemplate, java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.test.jdbc.JdbcTestUtils.deleteFromTables(org.springframework.jdbc.core.JdbcTemplate, java.lang.String...)",
            "public static int deleteFromTables(org.springframework.jdbc.core.JdbcTemplate, java.lang.String...)"
        ],
        [
            "int",
            "org.springframework.test.jdbc.JdbcTestUtils.deleteFromTableWhere(org.springframework.jdbc.core.JdbcTemplate, java.lang.String, java.lang.String, java.lang.Object...)",
            "public static int deleteFromTableWhere(org.springframework.jdbc.core.JdbcTemplate, java.lang.String, java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.test.jdbc.JdbcTestUtils.dropTables(org.springframework.jdbc.core.JdbcTemplate, java.lang.String...)",
            "public static void dropTables(org.springframework.jdbc.core.JdbcTemplate, java.lang.String...)"
        ],
        [
            "org.springframework.test.annotation.TestAnnotationUtils",
            "org.springframework.test.annotation.TestAnnotationUtils()",
            "public org.springframework.test.annotation.TestAnnotationUtils()"
        ],
        [
            "long",
            "org.springframework.test.annotation.TestAnnotationUtils.getTimeout(java.lang.reflect.Method)",
            "public static long getTimeout(java.lang.reflect.Method)"
        ],
        [
            "int",
            "org.springframework.test.annotation.TestAnnotationUtils.getRepeatCount(java.lang.reflect.Method)",
            "public static int getRepeatCount(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.test.annotation.ProfileValueUtils",
            "org.springframework.test.annotation.ProfileValueUtils()",
            "public org.springframework.test.annotation.ProfileValueUtils()"
        ],
        [
            "org.springframework.test.annotation.ProfileValueSource",
            "org.springframework.test.annotation.ProfileValueUtils.retrieveProfileValueSource(java.lang.Class<?>)",
            "public static org.springframework.test.annotation.ProfileValueSource retrieveProfileValueSource(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.test.annotation.ProfileValueUtils.isTestEnabledInThisEnvironment(java.lang.Class<?>)",
            "public static boolean isTestEnabledInThisEnvironment(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.test.annotation.ProfileValueUtils.isTestEnabledInThisEnvironment(java.lang.reflect.Method, java.lang.Class<?>)",
            "public static boolean isTestEnabledInThisEnvironment(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.test.annotation.ProfileValueUtils.isTestEnabledInThisEnvironment(org.springframework.test.annotation.ProfileValueSource, java.lang.reflect.Method, java.lang.Class<?>)",
            "public static boolean isTestEnabledInThisEnvironment(org.springframework.test.annotation.ProfileValueSource, java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.annotation.DirtiesContext$HierarchyMode[]",
            "org.springframework.test.annotation.DirtiesContext$HierarchyMode.values()",
            "public static org.springframework.test.annotation.DirtiesContext$HierarchyMode[] values()"
        ],
        [
            "org.springframework.test.annotation.DirtiesContext$HierarchyMode",
            "org.springframework.test.annotation.DirtiesContext$HierarchyMode.valueOf(java.lang.String)",
            "public static org.springframework.test.annotation.DirtiesContext$HierarchyMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.annotation.DirtiesContext$ClassMode[]",
            "org.springframework.test.annotation.DirtiesContext$ClassMode.values()",
            "public static org.springframework.test.annotation.DirtiesContext$ClassMode[] values()"
        ],
        [
            "org.springframework.test.annotation.DirtiesContext$ClassMode",
            "org.springframework.test.annotation.DirtiesContext$ClassMode.valueOf(java.lang.String)",
            "public static org.springframework.test.annotation.DirtiesContext$ClassMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.annotation.DirtiesContext$MethodMode[]",
            "org.springframework.test.annotation.DirtiesContext$MethodMode.values()",
            "public static org.springframework.test.annotation.DirtiesContext$MethodMode[] values()"
        ],
        [
            "org.springframework.test.annotation.DirtiesContext$MethodMode",
            "org.springframework.test.annotation.DirtiesContext$MethodMode.valueOf(java.lang.String)",
            "public static org.springframework.test.annotation.DirtiesContext$MethodMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.test.annotation.SystemProfileValueSource",
            "org.springframework.test.annotation.SystemProfileValueSource.getInstance()",
            "public static final org.springframework.test.annotation.SystemProfileValueSource getInstance()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.annotation.SystemProfileValueSource.get(java.lang.String)",
            "public java.lang.String get(java.lang.String)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.test.web.client.MockRestServiceServer$MockClientHttpRequestFactory.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.test.web.client.MockRestServiceServer$MockClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.test.web.client.UnorderedRequestExpectationManager",
            "org.springframework.test.web.client.UnorderedRequestExpectationManager()",
            "public org.springframework.test.web.client.UnorderedRequestExpectationManager()"
        ],
        [
            "org.springframework.test.web.client.RequestExpectation",
            "org.springframework.test.web.client.UnorderedRequestExpectationManager.matchRequest(org.springframework.http.client.ClientHttpRequest)",
            "public org.springframework.test.web.client.RequestExpectation matchRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.test.web.client.UnorderedRequestExpectationManager.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.test.web.client.ResponseActions",
            "org.springframework.test.web.client.MockRestServiceServer.expect(org.springframework.test.web.client.RequestMatcher)",
            "public org.springframework.test.web.client.ResponseActions expect(org.springframework.test.web.client.RequestMatcher)"
        ],
        [
            "org.springframework.test.web.client.ResponseActions",
            "org.springframework.test.web.client.MockRestServiceServer.expect(org.springframework.test.web.client.ExpectedCount, org.springframework.test.web.client.RequestMatcher)",
            "public org.springframework.test.web.client.ResponseActions expect(org.springframework.test.web.client.ExpectedCount, org.springframework.test.web.client.RequestMatcher)"
        ],
        [
            "void",
            "org.springframework.test.web.client.MockRestServiceServer.verify()",
            "public void verify()"
        ],
        [
            "void",
            "org.springframework.test.web.client.MockRestServiceServer.verify(java.time.Duration)",
            "public void verify(java.time.Duration)"
        ],
        [
            "void",
            "org.springframework.test.web.client.MockRestServiceServer.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder",
            "org.springframework.test.web.client.MockRestServiceServer.bindTo(org.springframework.web.client.RestTemplate)",
            "public static org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder bindTo(org.springframework.web.client.RestTemplate)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder",
            "org.springframework.test.web.client.MockRestServiceServer.bindTo(org.springframework.web.client.AsyncRestTemplate)",
            "public static org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder bindTo(org.springframework.web.client.AsyncRestTemplate)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder",
            "org.springframework.test.web.client.MockRestServiceServer.bindTo(org.springframework.web.client.support.RestGatewaySupport)",
            "public static org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder bindTo(org.springframework.web.client.support.RestGatewaySupport)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer",
            "org.springframework.test.web.client.MockRestServiceServer.createServer(org.springframework.web.client.RestTemplate)",
            "public static org.springframework.test.web.client.MockRestServiceServer createServer(org.springframework.web.client.RestTemplate)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer",
            "org.springframework.test.web.client.MockRestServiceServer.createServer(org.springframework.web.client.AsyncRestTemplate)",
            "public static org.springframework.test.web.client.MockRestServiceServer createServer(org.springframework.web.client.AsyncRestTemplate)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer",
            "org.springframework.test.web.client.MockRestServiceServer.createServer(org.springframework.web.client.support.RestGatewaySupport)",
            "public static org.springframework.test.web.client.MockRestServiceServer createServer(org.springframework.web.client.support.RestGatewaySupport)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder",
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder(org.springframework.web.client.RestTemplate)",
            "public org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder(org.springframework.web.client.RestTemplate)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder",
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder(org.springframework.web.client.AsyncRestTemplate)",
            "public org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder(org.springframework.web.client.AsyncRestTemplate)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder",
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder.ignoreExpectOrder(boolean)",
            "public org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder ignoreExpectOrder(boolean)"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder",
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder.bufferContent()",
            "public org.springframework.test.web.client.MockRestServiceServer$MockRestServiceServerBuilder bufferContent()"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer",
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder.build()",
            "public org.springframework.test.web.client.MockRestServiceServer build()"
        ],
        [
            "org.springframework.test.web.client.MockRestServiceServer",
            "org.springframework.test.web.client.MockRestServiceServer$DefaultBuilder.build(org.springframework.test.web.client.RequestExpectationManager)",
            "public org.springframework.test.web.client.MockRestServiceServer build(org.springframework.test.web.client.RequestExpectationManager)"
        ],
        [
            "org.springframework.test.web.client.response.MockRestResponseCreators",
            "org.springframework.test.web.client.response.MockRestResponseCreators()",
            "public org.springframework.test.web.client.response.MockRestResponseCreators()"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess()",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withSuccess()"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess(java.lang.String, org.springframework.http.MediaType)",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withSuccess(java.lang.String, org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess(byte[], org.springframework.http.MediaType)",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withSuccess(byte[], org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess(org.springframework.core.io.Resource, org.springframework.http.MediaType)",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withSuccess(org.springframework.core.io.Resource, org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withCreatedEntity(java.net.URI)",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withCreatedEntity(java.net.URI)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withNoContent()",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withNoContent()"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withBadRequest()",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withBadRequest()"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withUnauthorizedRequest()",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withUnauthorizedRequest()"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withServerError()",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withServerError()"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withStatus(org.springframework.http.HttpStatus)",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withStatus(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withRawStatus(int)",
            "public static org.springframework.test.web.client.response.DefaultResponseCreator withRawStatus(int)"
        ],
        [
            "org.springframework.test.web.client.ResponseCreator",
            "org.springframework.test.web.client.response.MockRestResponseCreators.withException(java.io.IOException)",
            "public static org.springframework.test.web.client.ResponseCreator withException(java.io.IOException)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.DefaultResponseCreator.body(java.lang.String)",
            "public org.springframework.test.web.client.response.DefaultResponseCreator body(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.DefaultResponseCreator.body(byte[])",
            "public org.springframework.test.web.client.response.DefaultResponseCreator body(byte[])"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.DefaultResponseCreator.body(org.springframework.core.io.Resource)",
            "public org.springframework.test.web.client.response.DefaultResponseCreator body(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.DefaultResponseCreator.contentType(org.springframework.http.MediaType)",
            "public org.springframework.test.web.client.response.DefaultResponseCreator contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.DefaultResponseCreator.location(java.net.URI)",
            "public org.springframework.test.web.client.response.DefaultResponseCreator location(java.net.URI)"
        ],
        [
            "org.springframework.test.web.client.response.DefaultResponseCreator",
            "org.springframework.test.web.client.response.DefaultResponseCreator.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.test.web.client.response.DefaultResponseCreator headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.test.web.client.response.DefaultResponseCreator.createResponse(org.springframework.http.client.ClientHttpRequest)",
            "public org.springframework.http.client.ClientHttpResponse createResponse(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.test.web.client.MockMvcClientHttpRequestFactory",
            "org.springframework.test.web.client.MockMvcClientHttpRequestFactory(org.springframework.test.web.servlet.MockMvc)",
            "public org.springframework.test.web.client.MockMvcClientHttpRequestFactory(org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.test.web.client.MockMvcClientHttpRequestFactory.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.test.web.client.MockMvcClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.test.web.client.MockMvcClientHttpRequestFactory$1.executeInternal()",
            "public org.springframework.http.client.ClientHttpResponse executeInternal() throws java.io.IOException"
        ],
        [
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount",
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount(org.springframework.test.web.client.ExpectedCount)",
            "public org.springframework.test.web.client.DefaultRequestExpectation$RequestCount(org.springframework.test.web.client.ExpectedCount)"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount.getExpectedCount()",
            "public org.springframework.test.web.client.ExpectedCount getExpectedCount()"
        ],
        [
            "int",
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount.getMatchedRequestCount()",
            "public int getMatchedRequestCount()"
        ],
        [
            "void",
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount.incrementAndValidate()",
            "public void incrementAndValidate()"
        ],
        [
            "boolean",
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount.hasRemainingCount()",
            "public boolean hasRemainingCount()"
        ],
        [
            "boolean",
            "org.springframework.test.web.client.DefaultRequestExpectation$RequestCount.isSatisfied()",
            "public boolean isSatisfied()"
        ],
        [
            "org.springframework.test.web.client.DefaultRequestExpectation",
            "org.springframework.test.web.client.DefaultRequestExpectation(org.springframework.test.web.client.ExpectedCount, org.springframework.test.web.client.RequestMatcher)",
            "public org.springframework.test.web.client.DefaultRequestExpectation(org.springframework.test.web.client.ExpectedCount, org.springframework.test.web.client.RequestMatcher)"
        ],
        [
            "org.springframework.test.web.client.ResponseActions",
            "org.springframework.test.web.client.DefaultRequestExpectation.andExpect(org.springframework.test.web.client.RequestMatcher)",
            "public org.springframework.test.web.client.ResponseActions andExpect(org.springframework.test.web.client.RequestMatcher)"
        ],
        [
            "void",
            "org.springframework.test.web.client.DefaultRequestExpectation.andRespond(org.springframework.test.web.client.ResponseCreator)",
            "public void andRespond(org.springframework.test.web.client.ResponseCreator)"
        ],
        [
            "void",
            "org.springframework.test.web.client.DefaultRequestExpectation.match(org.springframework.http.client.ClientHttpRequest)",
            "public void match(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.test.web.client.DefaultRequestExpectation.createResponse(org.springframework.http.client.ClientHttpRequest)",
            "public org.springframework.http.client.ClientHttpResponse createResponse(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.test.web.client.DefaultRequestExpectation.hasRemainingCount()",
            "public boolean hasRemainingCount()"
        ],
        [
            "void",
            "org.springframework.test.web.client.DefaultRequestExpectation.incrementAndValidate()",
            "public void incrementAndValidate()"
        ],
        [
            "boolean",
            "org.springframework.test.web.client.DefaultRequestExpectation.isSatisfied()",
            "public boolean isSatisfied()"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager$RequestExpectationGroup.addAllExpectations(java.util.Collection<org.springframework.test.web.client.RequestExpectation>)",
            "public void addAllExpectations(java.util.Collection<org.springframework.test.web.client.RequestExpectation>)"
        ],
        [
            "java.util.Set<org.springframework.test.web.client.RequestExpectation>",
            "org.springframework.test.web.client.AbstractRequestExpectationManager$RequestExpectationGroup.getExpectations()",
            "public java.util.Set<org.springframework.test.web.client.RequestExpectation> getExpectations()"
        ],
        [
            "org.springframework.test.web.client.RequestExpectation",
            "org.springframework.test.web.client.AbstractRequestExpectationManager$RequestExpectationGroup.findExpectation(org.springframework.http.client.ClientHttpRequest)",
            "public org.springframework.test.web.client.RequestExpectation findExpectation(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager$RequestExpectationGroup.update(org.springframework.test.web.client.RequestExpectation)",
            "public void update(org.springframework.test.web.client.RequestExpectation)"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager$RequestExpectationGroup.updateAll(java.util.Collection<org.springframework.test.web.client.RequestExpectation>)",
            "public void updateAll(java.util.Collection<org.springframework.test.web.client.RequestExpectation>)"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager$RequestExpectationGroup.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.test.web.client.AbstractRequestExpectationManager",
            "org.springframework.test.web.client.AbstractRequestExpectationManager()",
            "public org.springframework.test.web.client.AbstractRequestExpectationManager()"
        ],
        [
            "org.springframework.test.web.client.ResponseActions",
            "org.springframework.test.web.client.AbstractRequestExpectationManager.expectRequest(org.springframework.test.web.client.ExpectedCount, org.springframework.test.web.client.RequestMatcher)",
            "public org.springframework.test.web.client.ResponseActions expectRequest(org.springframework.test.web.client.ExpectedCount, org.springframework.test.web.client.RequestMatcher)"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.test.web.client.AbstractRequestExpectationManager.validateRequest(org.springframework.http.client.ClientHttpRequest)",
            "public org.springframework.http.client.ClientHttpResponse validateRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager.verify()",
            "public void verify()"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager.verify(java.time.Duration)",
            "public void verify(java.time.Duration)"
        ],
        [
            "void",
            "org.springframework.test.web.client.AbstractRequestExpectationManager.reset()",
            "public void reset()"
        ],
        [
            "int",
            "org.springframework.test.web.client.ExpectedCount.getMinCount()",
            "public int getMinCount()"
        ],
        [
            "int",
            "org.springframework.test.web.client.ExpectedCount.getMaxCount()",
            "public int getMaxCount()"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.once()",
            "public static org.springframework.test.web.client.ExpectedCount once()"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.twice()",
            "public static org.springframework.test.web.client.ExpectedCount twice()"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.manyTimes()",
            "public static org.springframework.test.web.client.ExpectedCount manyTimes()"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.times(int)",
            "public static org.springframework.test.web.client.ExpectedCount times(int)"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.min(int)",
            "public static org.springframework.test.web.client.ExpectedCount min(int)"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.max(int)",
            "public static org.springframework.test.web.client.ExpectedCount max(int)"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.never()",
            "public static org.springframework.test.web.client.ExpectedCount never()"
        ],
        [
            "org.springframework.test.web.client.ExpectedCount",
            "org.springframework.test.web.client.ExpectedCount.between(int, int)",
            "public static org.springframework.test.web.client.ExpectedCount between(int, int)"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$12.matchInternal(org.springframework.mock.http.client.MockClientHttpRequest)",
            "public void matchInternal(org.springframework.mock.http.client.MockClientHttpRequest) throws java.io.IOException, java.text.ParseException"
        ],
        [
            "default",
            "org.springframework.test.web.client.match.XpathRequestMatchers$XpathRequestMatcher.void match(org.springframework.http.client.ClientHttpRequest)",
            "public default void match(org.springframework.http.client.ClientHttpRequest)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)",
            "public org.springframework.test.web.client.RequestMatcher node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.exists()",
            "public org.springframework.test.web.client.RequestMatcher exists()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.doesNotExist()",
            "public org.springframework.test.web.client.RequestMatcher doesNotExist()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.nodeCount(org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.client.RequestMatcher nodeCount(org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.nodeCount(int)",
            "public org.springframework.test.web.client.RequestMatcher nodeCount(int)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.string(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.client.RequestMatcher string(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.string(java.lang.String)",
            "public org.springframework.test.web.client.RequestMatcher string(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.number(org.hamcrest.Matcher<? super java.lang.Double>)",
            "public org.springframework.test.web.client.RequestMatcher number(org.hamcrest.Matcher<? super java.lang.Double>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.number(java.lang.Double)",
            "public org.springframework.test.web.client.RequestMatcher number(java.lang.Double)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.XpathRequestMatchers.booleanValue(java.lang.Boolean)",
            "public org.springframework.test.web.client.RequestMatcher booleanValue(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$AbstractJsonPathRequestMatcher.match(org.springframework.http.client.ClientHttpRequest)",
            "public final void match(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError"
        ],
        [
            "<T> org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.value(org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.client.RequestMatcher value(org.hamcrest.Matcher<? super T>)"
        ],
        [
            "<T> org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.value(org.hamcrest.Matcher<? super T>, java.lang.Class<T>)",
            "public <T> org.springframework.test.web.client.RequestMatcher value(org.hamcrest.Matcher<? super T>, java.lang.Class<T>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.value(java.lang.Object)",
            "public org.springframework.test.web.client.RequestMatcher value(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.exists()",
            "public org.springframework.test.web.client.RequestMatcher exists()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.doesNotExist()",
            "public org.springframework.test.web.client.RequestMatcher doesNotExist()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.hasJsonPath()",
            "public org.springframework.test.web.client.RequestMatcher hasJsonPath()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.doesNotHaveJsonPath()",
            "public org.springframework.test.web.client.RequestMatcher doesNotHaveJsonPath()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isEmpty()",
            "public org.springframework.test.web.client.RequestMatcher isEmpty()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isNotEmpty()",
            "public org.springframework.test.web.client.RequestMatcher isNotEmpty()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isString()",
            "public org.springframework.test.web.client.RequestMatcher isString()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isBoolean()",
            "public org.springframework.test.web.client.RequestMatcher isBoolean()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isNumber()",
            "public org.springframework.test.web.client.RequestMatcher isNumber()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isArray()",
            "public org.springframework.test.web.client.RequestMatcher isArray()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers.isMap()",
            "public org.springframework.test.web.client.RequestMatcher isMap()"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$8.matchInternal(org.springframework.mock.http.client.MockClientHttpRequest)",
            "public void matchInternal(org.springframework.mock.http.client.MockClientHttpRequest) throws java.io.IOException, java.text.ParseException"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, ?>",
            "org.springframework.test.web.client.match.ContentRequestMatchers$MultipartHelper.parse(org.springframework.http.client.ClientHttpRequest)",
            "public static org.springframework.util.MultiValueMap<java.lang.String, ?> parse(org.springframework.http.client.ClientHttpRequest)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.contentType(java.lang.String)",
            "public org.springframework.test.web.client.RequestMatcher contentType(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.contentType(org.springframework.http.MediaType)",
            "public org.springframework.test.web.client.RequestMatcher contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.contentTypeCompatibleWith(java.lang.String)",
            "public org.springframework.test.web.client.RequestMatcher contentTypeCompatibleWith(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.contentTypeCompatibleWith(org.springframework.http.MediaType)",
            "public org.springframework.test.web.client.RequestMatcher contentTypeCompatibleWith(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.string(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.client.RequestMatcher string(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.string(java.lang.String)",
            "public org.springframework.test.web.client.RequestMatcher string(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.bytes(byte[])",
            "public org.springframework.test.web.client.RequestMatcher bytes(byte[])"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.formData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.test.web.client.RequestMatcher formData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.formDataContains(java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.test.web.client.RequestMatcher formDataContains(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.multipartData(org.springframework.util.MultiValueMap<java.lang.String, ?>)",
            "public org.springframework.test.web.client.RequestMatcher multipartData(org.springframework.util.MultiValueMap<java.lang.String, ?>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.multipartDataContains(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.test.web.client.RequestMatcher multipartDataContains(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.xml(java.lang.String)",
            "public org.springframework.test.web.client.RequestMatcher xml(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)",
            "public org.springframework.test.web.client.RequestMatcher node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.source(org.hamcrest.Matcher<? super javax.xml.transform.Source>)",
            "public org.springframework.test.web.client.RequestMatcher source(org.hamcrest.Matcher<? super javax.xml.transform.Source>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.json(java.lang.String)",
            "public org.springframework.test.web.client.RequestMatcher json(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.ContentRequestMatchers.json(java.lang.String, boolean)",
            "public org.springframework.test.web.client.RequestMatcher json(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$10.matchInternal(org.springframework.mock.http.client.MockClientHttpRequest)",
            "public void matchInternal(org.springframework.mock.http.client.MockClientHttpRequest) throws java.io.IOException, java.text.ParseException"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$11.matchInternal(org.springframework.mock.http.client.MockClientHttpRequest)",
            "public void matchInternal(org.springframework.mock.http.client.MockClientHttpRequest) throws java.io.IOException, java.text.ParseException"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$14.matchInternal(org.springframework.mock.http.client.MockClientHttpRequest)",
            "public void matchInternal(org.springframework.mock.http.client.MockClientHttpRequest) throws java.io.IOException, java.text.ParseException"
        ],
        [
            "org.springframework.test.web.client.match.MockRestRequestMatchers",
            "org.springframework.test.web.client.match.MockRestRequestMatchers()",
            "public org.springframework.test.web.client.match.MockRestRequestMatchers()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.anything()",
            "public static org.springframework.test.web.client.RequestMatcher anything()"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.method(org.springframework.http.HttpMethod)",
            "public static org.springframework.test.web.client.RequestMatcher method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo(org.hamcrest.Matcher<? super java.lang.String>)",
            "public static org.springframework.test.web.client.RequestMatcher requestTo(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo(java.lang.String)",
            "public static org.springframework.test.web.client.RequestMatcher requestTo(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.requestToUriTemplate(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.client.RequestMatcher requestToUriTemplate(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo(java.net.URI)",
            "public static org.springframework.test.web.client.RequestMatcher requestTo(java.net.URI)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.queryParam(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>...)",
            "public static org.springframework.test.web.client.RequestMatcher queryParam(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>...)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.queryParam(java.lang.String, java.lang.String...)",
            "public static org.springframework.test.web.client.RequestMatcher queryParam(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.header(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>...)",
            "public static org.springframework.test.web.client.RequestMatcher header(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>...)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.header(java.lang.String, java.lang.String...)",
            "public static org.springframework.test.web.client.RequestMatcher header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.headerDoesNotExist(java.lang.String)",
            "public static org.springframework.test.web.client.RequestMatcher headerDoesNotExist(java.lang.String)"
        ],
        [
            "org.springframework.test.web.client.match.ContentRequestMatchers",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.content()",
            "public static org.springframework.test.web.client.match.ContentRequestMatchers content()"
        ],
        [
            "org.springframework.test.web.client.match.JsonPathRequestMatchers",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.client.match.JsonPathRequestMatchers jsonPath(java.lang.String, java.lang.Object...)"
        ],
        [
            "<T> org.springframework.test.web.client.RequestMatcher",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public static <T> org.springframework.test.web.client.RequestMatcher jsonPath(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "org.springframework.test.web.client.match.XpathRequestMatchers",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.xpath(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.client.match.XpathRequestMatchers xpath(java.lang.String, java.lang.Object...) throws javax.xml.xpath.XPathExpressionException"
        ],
        [
            "org.springframework.test.web.client.match.XpathRequestMatchers",
            "org.springframework.test.web.client.match.MockRestRequestMatchers.xpath(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)",
            "public static org.springframework.test.web.client.match.XpathRequestMatchers xpath(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...) throws javax.xml.xpath.XPathExpressionException"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.ContentRequestMatchers$AbstractXmlRequestMatcher.match(org.springframework.http.client.ClientHttpRequest)",
            "public final void match(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException, java.lang.AssertionError"
        ],
        [
            "void",
            "org.springframework.test.web.client.match.JsonPathRequestMatchers$9.matchInternal(org.springframework.mock.http.client.MockClientHttpRequest)",
            "public void matchInternal(org.springframework.mock.http.client.MockClientHttpRequest) throws java.io.IOException, java.text.ParseException"
        ],
        [
            "org.springframework.test.web.client.SimpleRequestExpectationManager",
            "org.springframework.test.web.client.SimpleRequestExpectationManager()",
            "public org.springframework.test.web.client.SimpleRequestExpectationManager()"
        ],
        [
            "void",
            "org.springframework.test.web.client.SimpleRequestExpectationManager.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$MockMvcServerClientHttpResponse",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$MockMvcServerClientHttpResponse(org.springframework.test.web.servlet.MvcResult)",
            "public org.springframework.test.web.servlet.client.MockMvcHttpConnector$MockMvcServerClientHttpResponse(org.springframework.test.web.servlet.MvcResult)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$MockMvcServerClientHttpResponse.getServerResult()",
            "public java.lang.Object getServerResult()"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$1.andExpect(org.springframework.test.web.servlet.ResultMatcher)",
            "public org.springframework.test.web.servlet.ResultActions andExpect(org.springframework.test.web.servlet.ResultMatcher) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$1.andDo(org.springframework.test.web.servlet.ResultHandler)",
            "public org.springframework.test.web.servlet.ResultActions andDo(org.springframework.test.web.servlet.ResultHandler) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.servlet.MvcResult",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$1.andReturn()",
            "public org.springframework.test.web.servlet.MvcResult andReturn()"
        ],
        [
            "org.springframework.test.web.servlet.client.ApplicationContextMockMvcSpec",
            "org.springframework.test.web.servlet.client.ApplicationContextMockMvcSpec(org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.test.web.servlet.client.ApplicationContextMockMvcSpec(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector(org.springframework.test.web.servlet.MockMvc)",
            "public org.springframework.test.web.servlet.client.MockMvcHttpConnector(org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse>",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector.connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.filters(javax.servlet.Filter...)",
            "public <T extends B> T filters(javax.servlet.Filter...)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.filter(javax.servlet.Filter, java.lang.String...)",
            "public final <T extends B> T filter(javax.servlet.Filter, java.lang.String...)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.defaultRequest(org.springframework.test.web.servlet.RequestBuilder)",
            "public <T extends B> T defaultRequest(org.springframework.test.web.servlet.RequestBuilder)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)",
            "public <T extends B> T alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.dispatchOptions(boolean)",
            "public <T extends B> T dispatchOptions(boolean)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.dispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)",
            "public <T extends B> T dispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)",
            "public <T extends B> T apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.configureClient()",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder configureClient()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient",
            "org.springframework.test.web.servlet.client.AbstractMockMvcServerSpec.build()",
            "public org.springframework.test.web.reactive.server.WebTestClient build()"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult(org.springframework.test.web.servlet.MvcResult)",
            "public org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult(org.springframework.test.web.servlet.MvcResult)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getRequest()",
            "public org.springframework.mock.web.MockHttpServletRequest getRequest()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletResponse",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getResponse()",
            "public org.springframework.mock.web.MockHttpServletResponse getResponse()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getHandler()",
            "public java.lang.Object getHandler()"
        ],
        [
            "org.springframework.web.servlet.HandlerInterceptor[]",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getInterceptors()",
            "public org.springframework.web.servlet.HandlerInterceptor[] getInterceptors()"
        ],
        [
            "org.springframework.web.servlet.ModelAndView",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getModelAndView()",
            "public org.springframework.web.servlet.ModelAndView getModelAndView()"
        ],
        [
            "java.lang.Exception",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getResolvedException()",
            "public java.lang.Exception getResolvedException()"
        ],
        [
            "org.springframework.web.servlet.FlashMap",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getFlashMap()",
            "public org.springframework.web.servlet.FlashMap getFlashMap()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getAsyncResult()",
            "public java.lang.Object getAsyncResult()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.getAsyncResult(long)",
            "public java.lang.Object getAsyncResult(long)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.client.MockMvcHttpConnector$PrintingMvcResult.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient.bindToController(java.lang.Object...)",
            "public static org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec bindToController(java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec<?>",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient.bindToApplicationContext(org.springframework.web.context.WebApplicationContext)",
            "public static org.springframework.test.web.servlet.client.MockMvcWebTestClient$MockMvcServerSpec<?> bindToApplicationContext(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient.bindTo(org.springframework.test.web.servlet.MockMvc)",
            "public static org.springframework.test.web.reactive.server.WebTestClient$Builder bindTo(org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient.resultActionsFor(org.springframework.test.web.reactive.server.ExchangeResult)",
            "public static org.springframework.test.web.servlet.ResultActions resultActionsFor(org.springframework.test.web.reactive.server.ExchangeResult)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.controllerAdvice(java.lang.Object...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec controllerAdvice(java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.messageConverters(org.springframework.http.converter.HttpMessageConverter<?>...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec messageConverters(org.springframework.http.converter.HttpMessageConverter<?>...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.validator(org.springframework.validation.Validator)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec validator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.conversionService(org.springframework.format.support.FormattingConversionService)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec conversionService(org.springframework.format.support.FormattingConversionService)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.interceptors(org.springframework.web.servlet.HandlerInterceptor...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec interceptors(org.springframework.web.servlet.HandlerInterceptor...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.mappedInterceptors(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec mappedInterceptors(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.contentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec contentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.asyncRequestTimeout(long)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec asyncRequestTimeout(long)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.customArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.customReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.handlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec handlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.viewResolvers(org.springframework.web.servlet.ViewResolver...)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec viewResolvers(org.springframework.web.servlet.ViewResolver...)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.singleView(org.springframework.web.servlet.View)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec singleView(org.springframework.web.servlet.View)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.localeResolver(org.springframework.web.servlet.LocaleResolver)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec localeResolver(org.springframework.web.servlet.LocaleResolver)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.flashMapManager(org.springframework.web.servlet.FlashMapManager)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec flashMapManager(org.springframework.web.servlet.FlashMapManager)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.patternParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec patternParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.useTrailingSlashPatternMatch(boolean)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec useTrailingSlashPatternMatch(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.placeholderValue(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec placeholderValue(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.customHandlerMapping(java.util.function.Supplier<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping>)",
            "public org.springframework.test.web.servlet.client.StandaloneMockMvcSpec customHandlerMapping(java.util.function.Supplier<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping>)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.getMockMvcBuilder()",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?> getMockMvcBuilder()"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.customHandlerMapping(java.util.function.Supplier)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec customHandlerMapping(java.util.function.Supplier)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.placeholderValue(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec placeholderValue(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.useTrailingSlashPatternMatch(boolean)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec useTrailingSlashPatternMatch(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.patternParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec patternParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.flashMapManager(org.springframework.web.servlet.FlashMapManager)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec flashMapManager(org.springframework.web.servlet.FlashMapManager)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.localeResolver(org.springframework.web.servlet.LocaleResolver)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec localeResolver(org.springframework.web.servlet.LocaleResolver)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.singleView(org.springframework.web.servlet.View)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec singleView(org.springframework.web.servlet.View)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.viewResolvers(org.springframework.web.servlet.ViewResolver[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec viewResolvers(org.springframework.web.servlet.ViewResolver[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.handlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec handlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.customReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec customReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.customArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec customArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.asyncRequestTimeout(long)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec asyncRequestTimeout(long)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.contentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec contentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.mappedInterceptors(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec mappedInterceptors(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.interceptors(org.springframework.web.servlet.HandlerInterceptor[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec interceptors(org.springframework.web.servlet.HandlerInterceptor[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.conversionService(org.springframework.format.support.FormattingConversionService)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec conversionService(org.springframework.format.support.FormattingConversionService)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.validator(org.springframework.validation.Validator)",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec validator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.messageConverters(org.springframework.http.converter.HttpMessageConverter[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec messageConverters(org.springframework.http.converter.HttpMessageConverter[])"
        ],
        [
            "org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec",
            "org.springframework.test.web.servlet.client.StandaloneMockMvcSpec.controllerAdvice(java.lang.Object[])",
            "public org.springframework.test.web.servlet.client.MockMvcWebTestClient$ControllerSpec controllerAdvice(java.lang.Object[])"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.MockMvc$1.andExpect(org.springframework.test.web.servlet.ResultMatcher)",
            "public org.springframework.test.web.servlet.ResultActions andExpect(org.springframework.test.web.servlet.ResultMatcher) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.MockMvc$1.andDo(org.springframework.test.web.servlet.ResultHandler)",
            "public org.springframework.test.web.servlet.ResultActions andDo(org.springframework.test.web.servlet.ResultHandler) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.servlet.MvcResult",
            "org.springframework.test.web.servlet.MockMvc$1.andReturn()",
            "public org.springframework.test.web.servlet.MvcResult andReturn()"
        ],
        [
            "org.springframework.test.web.servlet.MockMvcBuilderSupport$MockMvcBuildException",
            "org.springframework.test.web.servlet.MockMvcBuilderSupport$MockMvcBuildException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.test.web.servlet.MockMvcBuilderSupport$MockMvcBuildException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.value(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher value(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.value(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher value(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.exists(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher exists(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.doesNotExist(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher doesNotExist(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.maxAge(java.lang.String, org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.servlet.ResultMatcher maxAge(java.lang.String, org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.maxAge(java.lang.String, int)",
            "public org.springframework.test.web.servlet.ResultMatcher maxAge(java.lang.String, int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.path(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher path(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.path(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher path(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.domain(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher domain(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.domain(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher domain(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.comment(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher comment(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.comment(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher comment(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.version(java.lang.String, org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.servlet.ResultMatcher version(java.lang.String, org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.version(java.lang.String, int)",
            "public org.springframework.test.web.servlet.ResultMatcher version(java.lang.String, int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.secure(java.lang.String, boolean)",
            "public org.springframework.test.web.servlet.ResultMatcher secure(java.lang.String, boolean)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.CookieResultMatchers.httpOnly(java.lang.String, boolean)",
            "public org.springframework.test.web.servlet.ResultMatcher httpOnly(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.PrintingResultHandler.handle(org.springframework.test.web.servlet.MvcResult)",
            "public final void handle(org.springframework.test.web.servlet.MvcResult) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers$PrintWriterPrintingResultHandler",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers$PrintWriterPrintingResultHandler(java.io.PrintWriter)",
            "public org.springframework.test.web.servlet.result.MockMvcResultHandlers$PrintWriterPrintingResultHandler(java.io.PrintWriter)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is(org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.servlet.ResultMatcher is(org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is(int)",
            "public org.springframework.test.web.servlet.ResultMatcher is(int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is1xxInformational()",
            "public org.springframework.test.web.servlet.ResultMatcher is1xxInformational()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is2xxSuccessful()",
            "public org.springframework.test.web.servlet.ResultMatcher is2xxSuccessful()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is3xxRedirection()",
            "public org.springframework.test.web.servlet.ResultMatcher is3xxRedirection()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is4xxClientError()",
            "public org.springframework.test.web.servlet.ResultMatcher is4xxClientError()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.is5xxServerError()",
            "public org.springframework.test.web.servlet.ResultMatcher is5xxServerError()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.reason(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher reason(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.reason(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher reason(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isContinue()",
            "public org.springframework.test.web.servlet.ResultMatcher isContinue()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isSwitchingProtocols()",
            "public org.springframework.test.web.servlet.ResultMatcher isSwitchingProtocols()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isProcessing()",
            "public org.springframework.test.web.servlet.ResultMatcher isProcessing()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isCheckpoint()",
            "public org.springframework.test.web.servlet.ResultMatcher isCheckpoint()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isOk()",
            "public org.springframework.test.web.servlet.ResultMatcher isOk()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isCreated()",
            "public org.springframework.test.web.servlet.ResultMatcher isCreated()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isAccepted()",
            "public org.springframework.test.web.servlet.ResultMatcher isAccepted()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNonAuthoritativeInformation()",
            "public org.springframework.test.web.servlet.ResultMatcher isNonAuthoritativeInformation()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNoContent()",
            "public org.springframework.test.web.servlet.ResultMatcher isNoContent()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isResetContent()",
            "public org.springframework.test.web.servlet.ResultMatcher isResetContent()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isPartialContent()",
            "public org.springframework.test.web.servlet.ResultMatcher isPartialContent()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isMultiStatus()",
            "public org.springframework.test.web.servlet.ResultMatcher isMultiStatus()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isAlreadyReported()",
            "public org.springframework.test.web.servlet.ResultMatcher isAlreadyReported()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isImUsed()",
            "public org.springframework.test.web.servlet.ResultMatcher isImUsed()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isMultipleChoices()",
            "public org.springframework.test.web.servlet.ResultMatcher isMultipleChoices()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isMovedPermanently()",
            "public org.springframework.test.web.servlet.ResultMatcher isMovedPermanently()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isFound()",
            "public org.springframework.test.web.servlet.ResultMatcher isFound()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isMovedTemporarily()",
            "public org.springframework.test.web.servlet.ResultMatcher isMovedTemporarily()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isSeeOther()",
            "public org.springframework.test.web.servlet.ResultMatcher isSeeOther()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNotModified()",
            "public org.springframework.test.web.servlet.ResultMatcher isNotModified()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUseProxy()",
            "public org.springframework.test.web.servlet.ResultMatcher isUseProxy()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isTemporaryRedirect()",
            "public org.springframework.test.web.servlet.ResultMatcher isTemporaryRedirect()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isPermanentRedirect()",
            "public org.springframework.test.web.servlet.ResultMatcher isPermanentRedirect()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isBadRequest()",
            "public org.springframework.test.web.servlet.ResultMatcher isBadRequest()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUnauthorized()",
            "public org.springframework.test.web.servlet.ResultMatcher isUnauthorized()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isPaymentRequired()",
            "public org.springframework.test.web.servlet.ResultMatcher isPaymentRequired()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isForbidden()",
            "public org.springframework.test.web.servlet.ResultMatcher isForbidden()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNotFound()",
            "public org.springframework.test.web.servlet.ResultMatcher isNotFound()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isMethodNotAllowed()",
            "public org.springframework.test.web.servlet.ResultMatcher isMethodNotAllowed()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNotAcceptable()",
            "public org.springframework.test.web.servlet.ResultMatcher isNotAcceptable()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isProxyAuthenticationRequired()",
            "public org.springframework.test.web.servlet.ResultMatcher isProxyAuthenticationRequired()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestTimeout()",
            "public org.springframework.test.web.servlet.ResultMatcher isRequestTimeout()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isConflict()",
            "public org.springframework.test.web.servlet.ResultMatcher isConflict()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isGone()",
            "public org.springframework.test.web.servlet.ResultMatcher isGone()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isLengthRequired()",
            "public org.springframework.test.web.servlet.ResultMatcher isLengthRequired()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isPreconditionFailed()",
            "public org.springframework.test.web.servlet.ResultMatcher isPreconditionFailed()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isPayloadTooLarge()",
            "public org.springframework.test.web.servlet.ResultMatcher isPayloadTooLarge()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestEntityTooLarge()",
            "public org.springframework.test.web.servlet.ResultMatcher isRequestEntityTooLarge()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUriTooLong()",
            "public org.springframework.test.web.servlet.ResultMatcher isUriTooLong()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestUriTooLong()",
            "public org.springframework.test.web.servlet.ResultMatcher isRequestUriTooLong()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUnsupportedMediaType()",
            "public org.springframework.test.web.servlet.ResultMatcher isUnsupportedMediaType()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestedRangeNotSatisfiable()",
            "public org.springframework.test.web.servlet.ResultMatcher isRequestedRangeNotSatisfiable()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isExpectationFailed()",
            "public org.springframework.test.web.servlet.ResultMatcher isExpectationFailed()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isIAmATeapot()",
            "public org.springframework.test.web.servlet.ResultMatcher isIAmATeapot()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isInsufficientSpaceOnResource()",
            "public org.springframework.test.web.servlet.ResultMatcher isInsufficientSpaceOnResource()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isMethodFailure()",
            "public org.springframework.test.web.servlet.ResultMatcher isMethodFailure()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isDestinationLocked()",
            "public org.springframework.test.web.servlet.ResultMatcher isDestinationLocked()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUnprocessableEntity()",
            "public org.springframework.test.web.servlet.ResultMatcher isUnprocessableEntity()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isLocked()",
            "public org.springframework.test.web.servlet.ResultMatcher isLocked()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isFailedDependency()",
            "public org.springframework.test.web.servlet.ResultMatcher isFailedDependency()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isTooEarly()",
            "public org.springframework.test.web.servlet.ResultMatcher isTooEarly()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUpgradeRequired()",
            "public org.springframework.test.web.servlet.ResultMatcher isUpgradeRequired()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isPreconditionRequired()",
            "public org.springframework.test.web.servlet.ResultMatcher isPreconditionRequired()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isTooManyRequests()",
            "public org.springframework.test.web.servlet.ResultMatcher isTooManyRequests()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestHeaderFieldsTooLarge()",
            "public org.springframework.test.web.servlet.ResultMatcher isRequestHeaderFieldsTooLarge()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isUnavailableForLegalReasons()",
            "public org.springframework.test.web.servlet.ResultMatcher isUnavailableForLegalReasons()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isInternalServerError()",
            "public org.springframework.test.web.servlet.ResultMatcher isInternalServerError()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNotImplemented()",
            "public org.springframework.test.web.servlet.ResultMatcher isNotImplemented()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isBadGateway()",
            "public org.springframework.test.web.servlet.ResultMatcher isBadGateway()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isServiceUnavailable()",
            "public org.springframework.test.web.servlet.ResultMatcher isServiceUnavailable()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isGatewayTimeout()",
            "public org.springframework.test.web.servlet.ResultMatcher isGatewayTimeout()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isHttpVersionNotSupported()",
            "public org.springframework.test.web.servlet.ResultMatcher isHttpVersionNotSupported()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isVariantAlsoNegotiates()",
            "public org.springframework.test.web.servlet.ResultMatcher isVariantAlsoNegotiates()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isInsufficientStorage()",
            "public org.springframework.test.web.servlet.ResultMatcher isInsufficientStorage()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isLoopDetected()",
            "public org.springframework.test.web.servlet.ResultMatcher isLoopDetected()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isBandwidthLimitExceeded()",
            "public org.springframework.test.web.servlet.ResultMatcher isBandwidthLimitExceeded()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNotExtended()",
            "public org.springframework.test.web.servlet.ResultMatcher isNotExtended()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchers.isNetworkAuthenticationRequired()",
            "public org.springframework.test.web.servlet.ResultMatcher isNetworkAuthenticationRequired()"
        ],
        [
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers()",
            "public org.springframework.test.web.servlet.result.MockMvcResultMatchers()"
        ],
        [
            "org.springframework.test.web.servlet.result.RequestResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.request()",
            "public static org.springframework.test.web.servlet.result.RequestResultMatchers request()"
        ],
        [
            "org.springframework.test.web.servlet.result.HandlerResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler()",
            "public static org.springframework.test.web.servlet.result.HandlerResultMatchers handler()"
        ],
        [
            "org.springframework.test.web.servlet.result.ModelResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()",
            "public static org.springframework.test.web.servlet.result.ModelResultMatchers model()"
        ],
        [
            "org.springframework.test.web.servlet.result.ViewResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()",
            "public static org.springframework.test.web.servlet.result.ViewResultMatchers view()"
        ],
        [
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.flash()",
            "public static org.springframework.test.web.servlet.result.FlashAttributeResultMatchers flash()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl(java.lang.String)",
            "public static org.springframework.test.web.servlet.ResultMatcher forwardedUrl(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlTemplate(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.ResultMatcher forwardedUrlTemplate(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlPattern(java.lang.String)",
            "public static org.springframework.test.web.servlet.ResultMatcher forwardedUrlPattern(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl(java.lang.String)",
            "public static org.springframework.test.web.servlet.ResultMatcher redirectedUrl(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlTemplate(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.ResultMatcher redirectedUrlTemplate(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern(java.lang.String)",
            "public static org.springframework.test.web.servlet.ResultMatcher redirectedUrlPattern(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.result.StatusResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()",
            "public static org.springframework.test.web.servlet.result.StatusResultMatchers status()"
        ],
        [
            "org.springframework.test.web.servlet.result.HeaderResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.header()",
            "public static org.springframework.test.web.servlet.result.HeaderResultMatchers header()"
        ],
        [
            "org.springframework.test.web.servlet.result.ContentResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.content()",
            "public static org.springframework.test.web.servlet.result.ContentResultMatchers content()"
        ],
        [
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.result.JsonPathResultMatchers jsonPath(java.lang.String, java.lang.Object...)"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public static <T> org.springframework.test.web.servlet.ResultMatcher jsonPath(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String, org.hamcrest.Matcher<? super T>, java.lang.Class<T>)",
            "public static <T> org.springframework.test.web.servlet.ResultMatcher jsonPath(java.lang.String, org.hamcrest.Matcher<? super T>, java.lang.Class<T>)"
        ],
        [
            "org.springframework.test.web.servlet.result.XpathResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.result.XpathResultMatchers xpath(java.lang.String, java.lang.Object...) throws javax.xml.xpath.XPathExpressionException"
        ],
        [
            "org.springframework.test.web.servlet.result.XpathResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.result.XpathResultMatchers xpath(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...) throws javax.xml.xpath.XPathExpressionException"
        ],
        [
            "org.springframework.test.web.servlet.result.CookieResultMatchers",
            "org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie()",
            "public static org.springframework.test.web.servlet.result.CookieResultMatchers cookie()"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attribute(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher attribute(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeExists(java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeExists(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeDoesNotExist(java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeDoesNotExist(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeErrorCount(java.lang.String, int)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeErrorCount(java.lang.String, int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasErrors(java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeHasErrors(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasNoErrors(java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeHasNoErrors(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrors(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeHasFieldErrors(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrorCode(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeHasFieldErrorCode(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrorCode(java.lang.String, java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeHasFieldErrorCode(java.lang.String, java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.errorCount(int)",
            "public org.springframework.test.web.servlet.ResultMatcher errorCount(int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.hasErrors()",
            "public org.springframework.test.web.servlet.ResultMatcher hasErrors()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.hasNoErrors()",
            "public org.springframework.test.web.servlet.ResultMatcher hasNoErrors()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ModelResultMatchers.size(int)",
            "public org.springframework.test.web.servlet.ResultMatcher size(int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.contentType(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher contentType(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.contentType(org.springframework.http.MediaType)",
            "public org.springframework.test.web.servlet.ResultMatcher contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher contentTypeCompatibleWith(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(org.springframework.http.MediaType)",
            "public org.springframework.test.web.servlet.ResultMatcher contentTypeCompatibleWith(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.encoding(java.nio.charset.Charset)",
            "public org.springframework.test.web.servlet.ResultMatcher encoding(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.encoding(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher encoding(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.string(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher string(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.string(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher string(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.bytes(byte[])",
            "public org.springframework.test.web.servlet.ResultMatcher bytes(byte[])"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.xml(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher xml(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)",
            "public org.springframework.test.web.servlet.ResultMatcher node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.source(org.hamcrest.Matcher<? super javax.xml.transform.Source>)",
            "public org.springframework.test.web.servlet.ResultMatcher source(org.hamcrest.Matcher<? super javax.xml.transform.Source>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.json(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher json(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ContentResultMatchers.json(java.lang.String, boolean)",
            "public org.springframework.test.web.servlet.ResultMatcher json(java.lang.String, boolean)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.string(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher string(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.stringValues(java.lang.String, org.hamcrest.Matcher<? super java.lang.Iterable<java.lang.String>>)",
            "public org.springframework.test.web.servlet.ResultMatcher stringValues(java.lang.String, org.hamcrest.Matcher<? super java.lang.Iterable<java.lang.String>>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.string(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher string(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.stringValues(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher stringValues(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.exists(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher exists(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.doesNotExist(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher doesNotExist(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.longValue(java.lang.String, long)",
            "public org.springframework.test.web.servlet.ResultMatcher longValue(java.lang.String, long)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HeaderResultMatchers.dateValue(java.lang.String, long)",
            "public org.springframework.test.web.servlet.ResultMatcher dateValue(java.lang.String, long)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers$PrintWriterPrintingResultHandler$1.printHeading(java.lang.String)",
            "public void printHeading(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers$PrintWriterPrintingResultHandler$1.printValue(java.lang.String, java.lang.Object)",
            "public void printValue(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers()",
            "public org.springframework.test.web.servlet.result.MockMvcResultHandlers()"
        ],
        [
            "org.springframework.test.web.servlet.ResultHandler",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers.log()",
            "public static org.springframework.test.web.servlet.ResultHandler log()"
        ],
        [
            "org.springframework.test.web.servlet.ResultHandler",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers.print()",
            "public static org.springframework.test.web.servlet.ResultHandler print()"
        ],
        [
            "org.springframework.test.web.servlet.ResultHandler",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers.print(java.io.OutputStream)",
            "public static org.springframework.test.web.servlet.ResultHandler print(java.io.OutputStream)"
        ],
        [
            "org.springframework.test.web.servlet.ResultHandler",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers.print(java.io.Writer)",
            "public static org.springframework.test.web.servlet.ResultHandler print(java.io.Writer)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.asyncStarted()",
            "public org.springframework.test.web.servlet.ResultMatcher asyncStarted()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.asyncNotStarted()",
            "public org.springframework.test.web.servlet.ResultMatcher asyncNotStarted()"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.asyncResult(org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher asyncResult(org.hamcrest.Matcher<? super T>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.asyncResult(java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher asyncResult(java.lang.Object)"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.attribute(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher attribute(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttribute(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher sessionAttribute(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher sessionAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttributeDoesNotExist(java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher sessionAttributeDoesNotExist(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.prefix(java.lang.String)",
            "public org.springframework.test.web.servlet.result.JsonPathResultMatchers prefix(java.lang.String)"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher value(org.hamcrest.Matcher<? super T>)"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(org.hamcrest.Matcher<? super T>, java.lang.Class<T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher value(org.hamcrest.Matcher<? super T>, java.lang.Class<T>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher value(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.exists()",
            "public org.springframework.test.web.servlet.ResultMatcher exists()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.doesNotExist()",
            "public org.springframework.test.web.servlet.ResultMatcher doesNotExist()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isEmpty()",
            "public org.springframework.test.web.servlet.ResultMatcher isEmpty()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isNotEmpty()",
            "public org.springframework.test.web.servlet.ResultMatcher isNotEmpty()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.hasJsonPath()",
            "public org.springframework.test.web.servlet.ResultMatcher hasJsonPath()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.doesNotHaveJsonPath()",
            "public org.springframework.test.web.servlet.ResultMatcher doesNotHaveJsonPath()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isString()",
            "public org.springframework.test.web.servlet.ResultMatcher isString()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isBoolean()",
            "public org.springframework.test.web.servlet.ResultMatcher isBoolean()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isNumber()",
            "public org.springframework.test.web.servlet.ResultMatcher isNumber()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isArray()",
            "public org.springframework.test.web.servlet.ResultMatcher isArray()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers.isMap()",
            "public org.springframework.test.web.servlet.ResultMatcher isMap()"
        ],
        [
            "<T> org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attribute(java.lang.String, org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.servlet.ResultMatcher attribute(java.lang.String, org.hamcrest.Matcher<? super T>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attributeExists(java.lang.String...)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeExists(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attributeCount(int)",
            "public org.springframework.test.web.servlet.ResultMatcher attributeCount(int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ViewResultMatchers.name(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher name(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.ViewResultMatchers.name(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher name(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)",
            "public org.springframework.test.web.servlet.ResultMatcher node(org.hamcrest.Matcher<? super org.w3c.dom.Node>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.nodeList(org.hamcrest.Matcher<? super org.w3c.dom.NodeList>)",
            "public org.springframework.test.web.servlet.ResultMatcher nodeList(org.hamcrest.Matcher<? super org.w3c.dom.NodeList>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.exists()",
            "public org.springframework.test.web.servlet.ResultMatcher exists()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.doesNotExist()",
            "public org.springframework.test.web.servlet.ResultMatcher doesNotExist()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.nodeCount(org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.servlet.ResultMatcher nodeCount(org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.nodeCount(int)",
            "public org.springframework.test.web.servlet.ResultMatcher nodeCount(int)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.string(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher string(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.string(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher string(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.number(org.hamcrest.Matcher<? super java.lang.Double>)",
            "public org.springframework.test.web.servlet.ResultMatcher number(org.hamcrest.Matcher<? super java.lang.Double>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.number(java.lang.Double)",
            "public org.springframework.test.web.servlet.ResultMatcher number(java.lang.Double)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.XpathResultMatchers.booleanValue(java.lang.Boolean)",
            "public org.springframework.test.web.servlet.ResultMatcher booleanValue(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.MockMvcResultHandlers$LoggingResultHandler.handle(org.springframework.test.web.servlet.MvcResult)",
            "public void handle(org.springframework.test.web.servlet.MvcResult) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HandlerResultMatchers.handlerType(java.lang.Class<?>)",
            "public org.springframework.test.web.servlet.ResultMatcher handlerType(java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HandlerResultMatchers.methodCall(java.lang.Object)",
            "public org.springframework.test.web.servlet.ResultMatcher methodCall(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HandlerResultMatchers.methodName(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.servlet.ResultMatcher methodName(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HandlerResultMatchers.methodName(java.lang.String)",
            "public org.springframework.test.web.servlet.ResultMatcher methodName(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.HandlerResultMatchers.method(java.lang.reflect.Method)",
            "public org.springframework.test.web.servlet.ResultMatcher method(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.test.web.servlet.DefaultMvcResult",
            "org.springframework.test.web.servlet.DefaultMvcResult(org.springframework.mock.web.MockHttpServletRequest, org.springframework.mock.web.MockHttpServletResponse)",
            "public org.springframework.test.web.servlet.DefaultMvcResult(org.springframework.mock.web.MockHttpServletRequest, org.springframework.mock.web.MockHttpServletResponse)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.test.web.servlet.DefaultMvcResult.getRequest()",
            "public org.springframework.mock.web.MockHttpServletRequest getRequest()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletResponse",
            "org.springframework.test.web.servlet.DefaultMvcResult.getResponse()",
            "public org.springframework.mock.web.MockHttpServletResponse getResponse()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.DefaultMvcResult.setHandler(java.lang.Object)",
            "public void setHandler(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.DefaultMvcResult.getHandler()",
            "public java.lang.Object getHandler()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.DefaultMvcResult.setInterceptors(org.springframework.web.servlet.HandlerInterceptor...)",
            "public void setInterceptors(org.springframework.web.servlet.HandlerInterceptor...)"
        ],
        [
            "org.springframework.web.servlet.HandlerInterceptor[]",
            "org.springframework.test.web.servlet.DefaultMvcResult.getInterceptors()",
            "public org.springframework.web.servlet.HandlerInterceptor[] getInterceptors()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.DefaultMvcResult.setResolvedException(java.lang.Exception)",
            "public void setResolvedException(java.lang.Exception)"
        ],
        [
            "java.lang.Exception",
            "org.springframework.test.web.servlet.DefaultMvcResult.getResolvedException()",
            "public java.lang.Exception getResolvedException()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.DefaultMvcResult.setModelAndView(org.springframework.web.servlet.ModelAndView)",
            "public void setModelAndView(org.springframework.web.servlet.ModelAndView)"
        ],
        [
            "org.springframework.web.servlet.ModelAndView",
            "org.springframework.test.web.servlet.DefaultMvcResult.getModelAndView()",
            "public org.springframework.web.servlet.ModelAndView getModelAndView()"
        ],
        [
            "org.springframework.web.servlet.FlashMap",
            "org.springframework.test.web.servlet.DefaultMvcResult.getFlashMap()",
            "public org.springframework.web.servlet.FlashMap getFlashMap()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.DefaultMvcResult.setAsyncResult(java.lang.Object)",
            "public void setAsyncResult(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult()",
            "public java.lang.Object getAsyncResult()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult(long)",
            "public java.lang.Object getAsyncResult(long)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.TestDispatcherServlet$1.postProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Object)",
            "public <T> void postProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.test.web.servlet.setup.MockMvcConfigurer.void afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>)",
            "public default void afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>)"
        ],
        [
            "default",
            "org.springframework.test.web.servlet.setup.MockMvcConfigurer.org.springframework.test.web.servlet.request.RequestPostProcessor beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>, org.springframework.web.context.WebApplicationContext)",
            "public default org.springframework.test.web.servlet.request.RequestPostProcessor beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>, org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder()",
            "public org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder()"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.addFilters(javax.servlet.Filter...)",
            "public final <T extends B> T addFilters(javax.servlet.Filter...)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.addFilter(javax.servlet.Filter, java.lang.String...)",
            "public final <T extends B> T addFilter(javax.servlet.Filter, java.lang.String...)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.defaultRequest(org.springframework.test.web.servlet.RequestBuilder)",
            "public final <T extends B> T defaultRequest(org.springframework.test.web.servlet.RequestBuilder)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.defaultResponseCharacterEncoding(java.nio.charset.Charset)",
            "public final <T extends B> T defaultResponseCharacterEncoding(java.nio.charset.Charset)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)",
            "public final <T extends B> T alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.alwaysDo(org.springframework.test.web.servlet.ResultHandler)",
            "public final <T extends B> T alwaysDo(org.springframework.test.web.servlet.ResultHandler)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.addDispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)",
            "public final <T extends B> T addDispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.dispatchOptions(boolean)",
            "public final <T extends B> T dispatchOptions(boolean)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)",
            "public final <T extends B> T apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)"
        ],
        [
            "org.springframework.test.web.servlet.MockMvc",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.build()",
            "public final org.springframework.test.web.servlet.MockMvc build()"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.addDispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder addDispatcherServletCustomizer(org.springframework.test.web.servlet.DispatcherServletCustomizer)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.dispatchOptions(boolean)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder dispatchOptions(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.alwaysDo(org.springframework.test.web.servlet.ResultHandler)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder alwaysDo(org.springframework.test.web.servlet.ResultHandler)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder alwaysExpect(org.springframework.test.web.servlet.ResultMatcher)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.defaultResponseCharacterEncoding(java.nio.charset.Charset)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder defaultResponseCharacterEncoding(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.defaultRequest(org.springframework.test.web.servlet.RequestBuilder)",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder defaultRequest(org.springframework.test.web.servlet.RequestBuilder)"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.addFilter(javax.servlet.Filter, java.lang.String[])",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder addFilter(javax.servlet.Filter, java.lang.String[])"
        ],
        [
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.AbstractMockMvcBuilder.addFilters(javax.servlet.Filter[])",
            "public org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder addFilters(javax.servlet.Filter[])"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.initializeBean(java.lang.Object, java.lang.String)",
            "public java.lang.Object initializeBean(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.createBean(java.lang.Class<T>)",
            "public <T> T createBean(java.lang.Class<T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.createBean(java.lang.Class<?>, int, boolean)",
            "public java.lang.Object createBean(java.lang.Class<?>, int, boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.autowire(java.lang.Class<?>, int, boolean)",
            "public java.lang.Object autowire(java.lang.Class<?>, int, boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.autowireBean(java.lang.Object)",
            "public void autowireBean(java.lang.Object) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.autowireBeanProperties(java.lang.Object, int, boolean)",
            "public void autowireBeanProperties(java.lang.Object, int, boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.configureBean(java.lang.Object, java.lang.String)",
            "public java.lang.Object configureBean(java.lang.Object, java.lang.String)"
        ],
        [
            "<T> org.springframework.beans.factory.config.NamedBeanHolder<T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.resolveNamedBean(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.config.NamedBeanHolder<T> resolveNamedBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.resolveBeanByName(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor)",
            "public java.lang.Object resolveBeanByName(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set<java.lang.String>, org.springframework.beans.TypeConverter)",
            "public java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set<java.lang.String>, org.springframework.beans.TypeConverter)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.applyBeanPropertyValues(java.lang.Object, java.lang.String)",
            "public void applyBeanPropertyValues(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.applyBeanPostProcessorsBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object applyBeanPostProcessorsBeforeInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.applyBeanPostProcessorsAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object applyBeanPostProcessorsAfterInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext$StubBeanFactory.destroyBean(java.lang.Object)",
            "public void destroyBean(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer",
            "org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer()",
            "public org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer.afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>)",
            "public void afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>)"
        ],
        [
            "org.springframework.test.web.servlet.request.RequestPostProcessor",
            "org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer.beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>, org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.test.web.servlet.request.RequestPostProcessor beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>, org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer",
            "org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer.sharedHttpSession()",
            "public static org.springframework.test.web.servlet.setup.SharedHttpSessionConfigurer sharedHttpSession()"
        ],
        [
            "org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup(org.springframework.web.context.WebApplicationContext)",
            "public static org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup(java.lang.Object...)",
            "public static org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder standaloneSetup(java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticStringValueResolver",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticStringValueResolver(java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticStringValueResolver(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticStringValueResolver.resolveStringValue(java.lang.String)",
            "public java.lang.String resolveStringValue(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StandaloneConfiguration.getHandlerMapping(org.springframework.format.support.FormattingConversionService, org.springframework.web.servlet.resource.ResourceUrlProvider)",
            "public org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping getHandlerMapping(org.springframework.format.support.FormattingConversionService, org.springframework.web.servlet.resource.ResourceUrlProvider)"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManager",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StandaloneConfiguration.mvcContentNegotiationManager()",
            "public org.springframework.web.accept.ContentNegotiationManager mvcContentNegotiationManager()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StandaloneConfiguration.mvcConversionService()",
            "public org.springframework.format.support.FormattingConversionService mvcConversionService()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StandaloneConfiguration.configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)",
            "public void configureAsyncSupport(org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StandaloneConfiguration.mvcValidator()",
            "public org.springframework.validation.Validator mvcValidator()"
        ],
        [
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext(javax.servlet.ServletContext)",
            "public org.springframework.test.web.servlet.setup.StubWebApplicationContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.beans.factory.config.AutowireCapableBeanFactory",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getAutowireCapableBeanFactory()",
            "public org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws java.lang.IllegalStateException"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getApplicationName()",
            "public java.lang.String getApplicationName()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getDisplayName()",
            "public java.lang.String getDisplayName()"
        ],
        [
            "long",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getStartupDate()",
            "public long getStartupDate()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getParent()",
            "public org.springframework.context.ApplicationContext getParent()"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getEnvironment()",
            "public org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.addBean(java.lang.String, java.lang.Object)",
            "public void addBean(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.addBeans(java.util.List<?>)",
            "public void addBeans(java.util.List<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBean(java.lang.String)",
            "public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBean(java.lang.String, java.lang.Class<T>)",
            "public <T> T getBean(java.lang.String, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBean(java.lang.String, java.lang.Object...)",
            "public java.lang.Object getBean(java.lang.String, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBean(java.lang.Class<T>)",
            "public <T> T getBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBean(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getBean(java.lang.Class<T>, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanProvider(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanProvider(org.springframework.core.ResolvableType)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.containsBean(java.lang.String)",
            "public boolean containsBean(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.isSingleton(java.lang.String)",
            "public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.isPrototype(java.lang.String)",
            "public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.isTypeMatch(java.lang.String, org.springframework.core.ResolvableType)",
            "public boolean isTypeMatch(java.lang.String, org.springframework.core.ResolvableType) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.isTypeMatch(java.lang.String, java.lang.Class<?>)",
            "public boolean isTypeMatch(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getType(java.lang.String)",
            "public java.lang.Class<?> getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getType(java.lang.String, boolean)",
            "public java.lang.Class<?> getType(java.lang.String, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getAliases(java.lang.String)",
            "public java.lang.String[] getAliases(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.containsBeanDefinition(java.lang.String)",
            "public boolean containsBeanDefinition(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanDefinitionCount()",
            "public int getBeanDefinitionCount()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanDefinitionNames()",
            "public java.lang.String[] getBeanDefinitionNames()"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanProvider(java.lang.Class<T>, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>, boolean)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanProvider(org.springframework.core.ResolvableType, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanNamesForType(org.springframework.core.ResolvableType)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanNamesForType(java.lang.Class<?>)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanNamesForType(java.lang.Class<?>, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>, boolean, boolean)"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeansOfType(java.lang.Class<T>)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeansOfType(java.lang.Class<T>, boolean, boolean)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.lang.String[] getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.util.Map<java.lang.String, java.lang.Object> getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>) throws org.springframework.beans.BeansException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.findAnnotationOnBean(java.lang.String, java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "org.springframework.beans.factory.BeanFactory",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getParentBeanFactory()",
            "public org.springframework.beans.factory.BeanFactory getParentBeanFactory()"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.containsLocalBean(java.lang.String)",
            "public boolean containsLocalBean(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getMessage(java.lang.String, java.lang.Object[], java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getResource(java.lang.String)",
            "public org.springframework.core.io.Resource getResource(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.publishEvent(org.springframework.context.ApplicationEvent)",
            "public void publishEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.publishEvent(java.lang.Object)",
            "public void publishEvent(java.lang.Object)"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.test.web.servlet.setup.StubWebApplicationContext.getResources(java.lang.String)",
            "public org.springframework.core.io.Resource[] getResources(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.test.web.servlet.setup.PatternMappingFilterProxy",
            "org.springframework.test.web.servlet.setup.PatternMappingFilterProxy(javax.servlet.Filter, java.lang.String...)",
            "public org.springframework.test.web.servlet.setup.PatternMappingFilterProxy(javax.servlet.Filter, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.PatternMappingFilterProxy.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.PatternMappingFilterProxy.init(javax.servlet.FilterConfig)",
            "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.PatternMappingFilterProxy.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setControllerAdvice(java.lang.Object...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setControllerAdvice(java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setMessageConverters(org.springframework.http.converter.HttpMessageConverter<?>...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setMessageConverters(org.springframework.http.converter.HttpMessageConverter<?>...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setValidator(org.springframework.validation.Validator)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setValidator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setConversionService(org.springframework.format.support.FormattingConversionService)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setConversionService(org.springframework.format.support.FormattingConversionService)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.addInterceptors(org.springframework.web.servlet.HandlerInterceptor...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder addInterceptors(org.springframework.web.servlet.HandlerInterceptor...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.addMappedInterceptors(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder addMappedInterceptors(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setContentNegotiationManager(org.springframework.web.accept.ContentNegotiationManager)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setAsyncRequestTimeout(long)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setAsyncRequestTimeout(long)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setCustomArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setCustomArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setCustomReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setCustomReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandler...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setHandlerExceptionResolvers(java.util.List<org.springframework.web.servlet.HandlerExceptionResolver>)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setHandlerExceptionResolvers(java.util.List<org.springframework.web.servlet.HandlerExceptionResolver>)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setHandlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setHandlerExceptionResolvers(org.springframework.web.servlet.HandlerExceptionResolver...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setViewResolvers(org.springframework.web.servlet.ViewResolver...)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setViewResolvers(org.springframework.web.servlet.ViewResolver...)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setSingleView(org.springframework.web.servlet.View)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setSingleView(org.springframework.web.servlet.View)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setLocaleResolver(org.springframework.web.servlet.LocaleResolver)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setLocaleResolver(org.springframework.web.servlet.LocaleResolver)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setFlashMapManager(org.springframework.web.servlet.FlashMapManager)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setFlashMapManager(org.springframework.web.servlet.FlashMapManager)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setPatternParser(org.springframework.web.util.pattern.PathPatternParser)",
            "public void setPatternParser(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setUseSuffixPatternMatch(boolean)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setUseSuffixPatternMatch(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setUseTrailingSlashPatternMatch(boolean)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setUseTrailingSlashPatternMatch(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setRemoveSemicolonContent(boolean)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setRemoveSemicolonContent(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.addPlaceholderValue(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder addPlaceholderValue(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.setCustomHandlerMapping(java.util.function.Supplier<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping>)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder setCustomHandlerMapping(java.util.function.Supplier<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping>)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder.defaultResponseCharacterEncoding(java.nio.charset.Charset)",
            "public default <T extends B> T defaultResponseCharacterEncoding(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter",
            "org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter()",
            "public org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter.afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>)",
            "public void afterConfigurerAdded(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>)"
        ],
        [
            "org.springframework.test.web.servlet.request.RequestPostProcessor",
            "org.springframework.test.web.servlet.setup.MockMvcConfigurerAdapter.beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>, org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.test.web.servlet.request.RequestPostProcessor beforeMockMvcCreated(org.springframework.test.web.servlet.setup.ConfigurableMockMvcBuilder<?>, org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticViewResolver",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticViewResolver(org.springframework.web.servlet.View)",
            "public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticViewResolver(org.springframework.web.servlet.View)"
        ],
        [
            "org.springframework.web.servlet.View",
            "org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder$StaticViewResolver.resolveViewName(java.lang.String, java.util.Locale)",
            "public org.springframework.web.servlet.View resolveViewName(java.lang.String, java.util.Locale)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection(org.springframework.test.web.servlet.MockMvc, com.gargoylesoftware.htmlunit.WebClient)",
            "public org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection(org.springframework.test.web.servlet.MockMvc, com.gargoylesoftware.htmlunit.WebClient)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection(org.springframework.test.web.servlet.MockMvc, com.gargoylesoftware.htmlunit.WebClient, java.lang.String)",
            "public org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection(org.springframework.test.web.servlet.MockMvc, com.gargoylesoftware.htmlunit.WebClient, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection.setWebClient(com.gargoylesoftware.htmlunit.WebClient)",
            "public void setWebClient(com.gargoylesoftware.htmlunit.WebClient)"
        ],
        [
            "com.gargoylesoftware.htmlunit.WebResponse",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection.getResponse(com.gargoylesoftware.htmlunit.WebRequest)",
            "public com.gargoylesoftware.htmlunit.WebResponse getResponse(com.gargoylesoftware.htmlunit.WebRequest) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection.close()",
            "public void close()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder",
            "org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder(long, com.gargoylesoftware.htmlunit.WebRequest, org.springframework.mock.web.MockHttpServletResponse)",
            "public org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder(long, com.gargoylesoftware.htmlunit.WebRequest, org.springframework.mock.web.MockHttpServletResponse)"
        ],
        [
            "com.gargoylesoftware.htmlunit.WebResponse",
            "org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder.build()",
            "public com.gargoylesoftware.htmlunit.WebResponse build() throws java.io.IOException"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection",
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection(com.gargoylesoftware.htmlunit.WebConnection, java.util.List<org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection>)",
            "public org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection(com.gargoylesoftware.htmlunit.WebConnection, java.util.List<org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection>)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection",
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection(com.gargoylesoftware.htmlunit.WebConnection, org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection...)",
            "public org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection(com.gargoylesoftware.htmlunit.WebConnection, org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection...)"
        ],
        [
            "com.gargoylesoftware.htmlunit.WebResponse",
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection.getResponse(com.gargoylesoftware.htmlunit.WebRequest)",
            "public com.gargoylesoftware.htmlunit.WebResponse getResponse(com.gargoylesoftware.htmlunit.WebRequest) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection.close()",
            "public void close()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpSession",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpSession(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder, org.springframework.mock.web.MockHttpServletRequest)",
            "public org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpSession(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder, org.springframework.mock.web.MockHttpServletRequest)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpSession.invalidate()",
            "public void invalidate()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder.mockMvcSetup(org.springframework.test.web.servlet.MockMvc)",
            "public static org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder mockMvcSetup(org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder.webAppContextSetup(org.springframework.web.context.WebApplicationContext)",
            "public static org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder.webAppContextSetup(org.springframework.web.context.WebApplicationContext, org.springframework.test.web.servlet.setup.MockMvcConfigurer)",
            "public static org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext, org.springframework.test.web.servlet.setup.MockMvcConfigurer)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder.withDelegate(com.gargoylesoftware.htmlunit.WebClient)",
            "public org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder withDelegate(com.gargoylesoftware.htmlunit.WebClient)"
        ],
        [
            "com.gargoylesoftware.htmlunit.WebClient",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebClientBuilder.build()",
            "public com.gargoylesoftware.htmlunit.WebClient build()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpServletRequest",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpServletRequest(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder, javax.servlet.ServletContext, java.lang.String, java.lang.String)",
            "public org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpServletRequest(org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder, javax.servlet.ServletContext, java.lang.String, java.lang.String)"
        ],
        [
            "javax.servlet.http.HttpSession",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder$HtmlUnitMockHttpServletRequest.getSession(boolean)",
            "public javax.servlet.http.HttpSession getSession(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder(java.util.Map<java.lang.String, org.springframework.mock.web.MockHttpSession>, com.gargoylesoftware.htmlunit.WebClient, com.gargoylesoftware.htmlunit.WebRequest)",
            "public org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder(java.util.Map<java.lang.String, org.springframework.mock.web.MockHttpSession>, com.gargoylesoftware.htmlunit.WebClient, com.gargoylesoftware.htmlunit.WebRequest)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.buildRequest(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockHttpServletRequest buildRequest(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.setContextPath(java.lang.String)",
            "public void setContextPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.setForwardPostProcessor(org.springframework.test.web.servlet.request.RequestPostProcessor)",
            "public void setForwardPostProcessor(org.springframework.test.web.servlet.request.RequestPostProcessor)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.isMergeEnabled()",
            "public boolean isMergeEnabled()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection",
            "org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection(org.springframework.test.web.servlet.htmlunit.WebRequestMatcher, com.gargoylesoftware.htmlunit.WebConnection)",
            "public org.springframework.test.web.servlet.htmlunit.DelegatingWebConnection$DelegateWebConnection(org.springframework.test.web.servlet.htmlunit.WebRequestMatcher, com.gargoylesoftware.htmlunit.WebConnection)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder",
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder.mockMvcSetup(org.springframework.test.web.servlet.MockMvc)",
            "public static org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder mockMvcSetup(org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder",
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder.webAppContextSetup(org.springframework.web.context.WebApplicationContext)",
            "public static org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder",
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder.webAppContextSetup(org.springframework.web.context.WebApplicationContext, org.springframework.test.web.servlet.setup.MockMvcConfigurer)",
            "public static org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext, org.springframework.test.web.servlet.setup.MockMvcConfigurer)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder",
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder.javascriptEnabled(boolean)",
            "public org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder javascriptEnabled(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder",
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder.withDelegate(org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver)",
            "public org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder withDelegate(org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver)"
        ],
        [
            "org.openqa.selenium.htmlunit.HtmlUnitDriver",
            "org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilder.build()",
            "public org.openqa.selenium.htmlunit.HtmlUnitDriver build()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver()",
            "public org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver(com.gargoylesoftware.htmlunit.BrowserVersion)",
            "public org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver(com.gargoylesoftware.htmlunit.BrowserVersion)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver(boolean)",
            "public org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver(org.openqa.selenium.Capabilities)",
            "public org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver(org.openqa.selenium.Capabilities)"
        ],
        [
            "com.gargoylesoftware.htmlunit.WebClient",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver.getWebClient()",
            "public com.gargoylesoftware.htmlunit.WebClient getWebClient()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver.setWebConnection(com.gargoylesoftware.htmlunit.WebConnection)",
            "public void setWebConnection(com.gargoylesoftware.htmlunit.WebConnection)"
        ],
        [
            "com.gargoylesoftware.htmlunit.WebConnection",
            "org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver.getWebConnection()",
            "public com.gargoylesoftware.htmlunit.WebConnection getWebConnection()"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.ForwardRequestPostProcessor",
            "org.springframework.test.web.servlet.htmlunit.ForwardRequestPostProcessor(java.lang.String)",
            "public org.springframework.test.web.servlet.htmlunit.ForwardRequestPostProcessor(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.test.web.servlet.htmlunit.ForwardRequestPostProcessor.postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)",
            "public org.springframework.mock.web.MockHttpServletRequest postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher",
            "org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher(java.lang.String)",
            "public org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher",
            "org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher(java.util.regex.Pattern)",
            "public org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher(java.util.regex.Pattern)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.htmlunit.UrlRegexRequestMatcher.matches(com.gargoylesoftware.htmlunit.WebRequest)",
            "public boolean matches(com.gargoylesoftware.htmlunit.WebRequest)"
        ],
        [
            "org.springframework.test.web.servlet.htmlunit.HostRequestMatcher",
            "org.springframework.test.web.servlet.htmlunit.HostRequestMatcher(java.lang.String...)",
            "public org.springframework.test.web.servlet.htmlunit.HostRequestMatcher(java.lang.String...)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.htmlunit.HostRequestMatcher.matches(com.gargoylesoftware.htmlunit.WebRequest)",
            "public boolean matches(com.gargoylesoftware.htmlunit.WebRequest)"
        ],
        [
            "T",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport.contextPath(java.lang.String)",
            "public T contextPath(java.lang.String)"
        ],
        [
            "T",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport.alwaysUseMockMvc()",
            "public T alwaysUseMockMvc()"
        ],
        [
            "T",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport.useMockMvc(org.springframework.test.web.servlet.htmlunit.WebRequestMatcher...)",
            "public T useMockMvc(org.springframework.test.web.servlet.htmlunit.WebRequestMatcher...)"
        ],
        [
            "T",
            "org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport.useMockMvcForHosts(java.lang.String...)",
            "public T useMockMvcForHosts(java.lang.String...)"
        ],
        [
            "default",
            "org.springframework.test.web.servlet.ResultActions.org.springframework.test.web.servlet.ResultActions andExpectAll(org.springframework.test.web.servlet.ResultMatcher...)",
            "public default org.springframework.test.web.servlet.ResultActions andExpectAll(org.springframework.test.web.servlet.ResultMatcher...) throws java.lang.Exception"
        ],
        [
            "java.io.InputStream",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder$1.getBody()",
            "public java.io.InputStream getBody()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.contextPath(java.lang.String)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder contextPath(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.servletPath(java.lang.String)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder servletPath(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.pathInfo(java.lang.String)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder pathInfo(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.secure(boolean)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder secure(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.characterEncoding(java.nio.charset.Charset)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder characterEncoding(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.characterEncoding(java.lang.String)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder characterEncoding(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.content(byte[])",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder content(byte[])"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.content(java.lang.String)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder content(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.contentType(java.lang.String)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder contentType(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.accept(org.springframework.http.MediaType...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.accept(java.lang.String...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder accept(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.header(java.lang.String, java.lang.Object...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder header(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.param(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder param(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.params(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder params(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.queryParam(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder queryParam(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.cookie(javax.servlet.http.Cookie...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder cookie(javax.servlet.http.Cookie...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.locale(java.util.Locale...)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder locale(java.util.Locale...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.locale(java.util.Locale)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder locale(java.util.Locale)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.requestAttr(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder requestAttr(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.sessionAttr(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder sessionAttr(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.sessionAttrs(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder sessionAttrs(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.flashAttr(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder flashAttr(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.flashAttrs(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder flashAttrs(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.session(org.springframework.mock.web.MockHttpSession)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder session(org.springframework.mock.web.MockHttpSession)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.principal(java.security.Principal)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder principal(java.security.Principal)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.with(org.springframework.test.web.servlet.request.RequestPostProcessor)",
            "public org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder with(org.springframework.test.web.servlet.request.RequestPostProcessor)"
        ],
        [
            "boolean",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.isMergeEnabled()",
            "public boolean isMergeEnabled()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.buildRequest(javax.servlet.ServletContext)",
            "public final org.springframework.mock.web.MockHttpServletRequest buildRequest(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)",
            "public org.springframework.mock.web.MockHttpServletRequest postProcessRequest(org.springframework.mock.web.MockHttpServletRequest)"
        ],
        [
            "org.springframework.test.web.servlet.request.ConfigurableSmartRequestBuilder",
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.with(org.springframework.test.web.servlet.request.RequestPostProcessor)",
            "public org.springframework.test.web.servlet.request.ConfigurableSmartRequestBuilder with(org.springframework.test.web.servlet.request.RequestPostProcessor)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders()",
            "public org.springframework.test.web.servlet.request.MockMvcRequestBuilders()"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder get(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder get(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder post(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder post(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder put(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder put(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder patch(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder patch(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder delete(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder delete(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.options(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder options(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.options(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder options(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.head(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder head(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.head(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder head(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.request(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder request(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.request(org.springframework.http.HttpMethod, java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder request(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.request(java.lang.String, java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder request(java.lang.String, java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder multipart(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder multipart(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload(java.lang.String, java.lang.Object...)",
            "public static org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder fileUpload(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload(java.net.URI)",
            "public static org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder fileUpload(java.net.URI)"
        ],
        [
            "org.springframework.test.web.servlet.RequestBuilder",
            "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch(org.springframework.test.web.servlet.MvcResult)",
            "public static org.springframework.test.web.servlet.RequestBuilder asyncDispatch(org.springframework.test.web.servlet.MvcResult)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder.file(java.lang.String, byte[])",
            "public org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder file(java.lang.String, byte[])"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder.file(org.springframework.mock.web.MockMultipartFile)",
            "public org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder file(org.springframework.mock.web.MockMultipartFile)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder.part(javax.servlet.http.Part...)",
            "public org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder part(javax.servlet.http.Part...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder.merge(java.lang.Object)",
            "public java.lang.Object merge(java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.TestDispatcherServlet$2.postProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Object)",
            "public <T> void postProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.TestDispatcherServlet",
            "org.springframework.test.web.servlet.TestDispatcherServlet(org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.test.web.servlet.TestDispatcherServlet(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.test.web.servlet.MockMvcBuilderSupport",
            "org.springframework.test.web.servlet.MockMvcBuilderSupport()",
            "public org.springframework.test.web.servlet.MockMvcBuilderSupport()"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.ResultMatcher.matchAll(org.springframework.test.web.servlet.ResultMatcher...)",
            "public static org.springframework.test.web.servlet.ResultMatcher matchAll(org.springframework.test.web.servlet.ResultMatcher...)"
        ],
        [
            "org.springframework.web.servlet.DispatcherServlet",
            "org.springframework.test.web.servlet.MockMvc.getDispatcherServlet()",
            "public org.springframework.web.servlet.DispatcherServlet getDispatcherServlet()"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.MockMvc.perform(org.springframework.test.web.servlet.RequestBuilder)",
            "public org.springframework.test.web.servlet.ResultActions perform(org.springframework.test.web.servlet.RequestBuilder) throws java.lang.Exception"
        ],
        [
            "org.springframework.test.web.ModelAndViewAssert",
            "org.springframework.test.web.ModelAndViewAssert()",
            "public org.springframework.test.web.ModelAndViewAssert()"
        ],
        [
            "<T> T",
            "org.springframework.test.web.ModelAndViewAssert.assertAndReturnModelAttributeOfType(org.springframework.web.servlet.ModelAndView, java.lang.String, java.lang.Class<T>)",
            "public static <T> T assertAndReturnModelAttributeOfType(org.springframework.web.servlet.ModelAndView, java.lang.String, java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.ModelAndViewAssert.assertCompareListModelAttribute(org.springframework.web.servlet.ModelAndView, java.lang.String, java.util.List)",
            "public static void assertCompareListModelAttribute(org.springframework.web.servlet.ModelAndView, java.lang.String, java.util.List)"
        ],
        [
            "void",
            "org.springframework.test.web.ModelAndViewAssert.assertModelAttributeAvailable(org.springframework.web.servlet.ModelAndView, java.lang.String)",
            "public static void assertModelAttributeAvailable(org.springframework.web.servlet.ModelAndView, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.ModelAndViewAssert.assertModelAttributeValue(org.springframework.web.servlet.ModelAndView, java.lang.String, java.lang.Object)",
            "public static void assertModelAttributeValue(org.springframework.web.servlet.ModelAndView, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.ModelAndViewAssert.assertModelAttributeValues(org.springframework.web.servlet.ModelAndView, java.util.Map<java.lang.String, java.lang.Object>)",
            "public static void assertModelAttributeValues(org.springframework.web.servlet.ModelAndView, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.test.web.ModelAndViewAssert.assertSortAndCompareListModelAttribute(org.springframework.web.servlet.ModelAndView, java.lang.String, java.util.List, java.util.Comparator)",
            "public static void assertSortAndCompareListModelAttribute(org.springframework.web.servlet.ModelAndView, java.lang.String, java.util.List, java.util.Comparator)"
        ],
        [
            "void",
            "org.springframework.test.web.ModelAndViewAssert.assertViewName(org.springframework.web.servlet.ModelAndView, java.lang.String)",
            "public static void assertViewName(org.springframework.web.servlet.ModelAndView, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isEqualTo(java.lang.Object)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.exists()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec exists()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.doesNotExist()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec doesNotExist()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isEmpty()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEmpty()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isNotEmpty()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isNotEmpty()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.hasJsonPath()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec hasJsonPath()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.doesNotHaveJsonPath()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec doesNotHaveJsonPath()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isBoolean()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isBoolean()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isNumber()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isNumber()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isArray()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isArray()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.isMap()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isMap()"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.value(org.hamcrest.Matcher<? super T>)",
            "public <T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec value(org.hamcrest.Matcher<? super T>)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.value(org.hamcrest.Matcher<? super T>, java.lang.Class<T>)",
            "public <T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec value(org.hamcrest.Matcher<? super T>, java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.value(java.util.function.Consumer<T>)",
            "public <T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec value(java.util.function.Consumer<T>)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.value(java.util.function.Consumer<T>, java.lang.Class<T>)",
            "public <T> org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec value(java.util.function.Consumer<T>, java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.web.reactive.server.JsonPathAssertions.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.lang.Object...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec uri(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec uri(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.util.function.Function<org.springframework.web.util.UriBuilder, java.net.URI>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec uri(java.util.function.Function<org.springframework.web.util.UriBuilder, java.net.URI>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.net.URI)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec uri(java.net.URI)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.header(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec attributes(java.util.function.Consumer<java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.accept(org.springframework.http.MediaType...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.acceptCharset(java.nio.charset.Charset...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec acceptCharset(java.nio.charset.Charset...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.contentType(org.springframework.http.MediaType)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.contentLength(long)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec contentLength(long)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.cookie(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec cookie(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec cookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.ifModifiedSince(java.time.ZonedDateTime)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec ifModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.ifNoneMatch(java.lang.String...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec ifNoneMatch(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.bodyValue(java.lang.Object)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> bodyValue(java.lang.Object)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.body(P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.body(P, java.lang.Class<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(P, java.lang.Class<T>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.body(java.lang.Object, java.lang.Class<?>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.body(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(org.springframework.web.reactive.function.BodyInserter<?, ? super org.springframework.http.client.reactive.ClientHttpRequest>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.syncBody(java.lang.Object)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> syncBody(java.lang.Object)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec exchange()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.attributes(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec attributes(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.headers(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec headers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.header(java.lang.String, java.lang.String[])",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec header(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.ifNoneMatch(java.lang.String[])",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec ifNoneMatch(java.lang.String[])"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.ifModifiedSince(java.time.ZonedDateTime)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec ifModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.cookies(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec cookies(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.cookie(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec cookie(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.acceptCharset(java.nio.charset.Charset[])",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec acceptCharset(java.nio.charset.Charset[])"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.accept(org.springframework.http.MediaType[])",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec accept(org.springframework.http.MediaType[])"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.util.function.Function)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec uri(java.util.function.Function)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.util.Map)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec uri(java.lang.String, java.util.Map)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.lang.String, java.lang.Object[])",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec uri(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.uri(java.net.URI)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec uri(java.net.URI)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.get()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?> get()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.head()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?> head()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.post()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec post()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.put()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec put()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.patch()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec patch()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.delete()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?> delete()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.options()",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersUriSpec<?> options()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.method(org.springframework.http.HttpMethod)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RequestBodyUriSpec method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.mutate()",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder mutate()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient.mutateWith(org.springframework.test.web.reactive.server.WebTestClientConfigurer)",
            "public org.springframework.test.web.reactive.server.WebTestClient mutateWith(org.springframework.test.web.reactive.server.WebTestClientConfigurer)"
        ],
        [
            "T",
            "org.springframework.test.web.reactive.server.EntityExchangeResult.getResponseBody()",
            "public T getResponseBody()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.valueEquals(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEquals(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.valueEquals(java.lang.String, long)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEquals(java.lang.String, long)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.valueEqualsDate(java.lang.String, long)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEqualsDate(java.lang.String, long)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.valueMatches(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueMatches(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.valuesMatch(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valuesMatch(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.value(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.values(java.lang.String, org.hamcrest.Matcher<? super java.lang.Iterable<java.lang.String>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec values(java.lang.String, org.hamcrest.Matcher<? super java.lang.Iterable<java.lang.String>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.value(java.lang.String, java.util.function.Consumer<java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String, java.util.function.Consumer<java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.values(java.lang.String, java.util.function.Consumer<java.util.List<java.lang.String>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec values(java.lang.String, java.util.function.Consumer<java.util.List<java.lang.String>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.exists(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec exists(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.doesNotExist(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec doesNotExist(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.cacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec cacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.contentDisposition(org.springframework.http.ContentDisposition)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentDisposition(org.springframework.http.ContentDisposition)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.contentLength(long)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentLength(long)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.contentType(org.springframework.http.MediaType)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.contentType(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentType(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.contentTypeCompatibleWith(org.springframework.http.MediaType)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentTypeCompatibleWith(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.contentTypeCompatibleWith(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec contentTypeCompatibleWith(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.expires(long)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec expires(long)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.lastModified(long)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec lastModified(long)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.HeaderAssertions.location(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec location(java.lang.String)"
        ],
        [
            "org.springframework.http.client.reactive.ClientHttpResponse",
            "org.springframework.test.web.reactive.server.HttpHandlerConnector$FailureAfterResponseCompletedException.getCompletedResponse()",
            "public org.springframework.http.client.reactive.ClientHttpResponse getCompletedResponse()"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest(org.springframework.http.client.reactive.ClientHttpRequest)",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest(org.springframework.http.client.reactive.ClientHttpRequest)"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest.getRecorder()",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder getRecorder()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RouterFunctionSpec",
            "org.springframework.test.web.reactive.server.DefaultRouterFunctionSpec.handlerStrategies(org.springframework.web.reactive.function.server.HandlerStrategies)",
            "public org.springframework.test.web.reactive.server.WebTestClient$RouterFunctionSpec handlerStrategies(org.springframework.web.reactive.function.server.HandlerStrategies)"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$ClientExchangeInfo",
            "org.springframework.test.web.reactive.server.WiretapConnector$ClientExchangeInfo(org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest, org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse)",
            "public org.springframework.test.web.reactive.server.WiretapConnector$ClientExchangeInfo(org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest, org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse)"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest",
            "org.springframework.test.web.reactive.server.WiretapConnector$ClientExchangeInfo.getRequest()",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpRequest getRequest()"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse",
            "org.springframework.test.web.reactive.server.WiretapConnector$ClientExchangeInfo.getResponse()",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse getResponse()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.test.web.reactive.server.ExchangeResult.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.test.web.reactive.server.ExchangeResult.getUrl()",
            "public java.net.URI getUrl()"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.reactive.server.ExchangeResult.getUriTemplate()",
            "public java.lang.String getUriTemplate()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.test.web.reactive.server.ExchangeResult.getRequestHeaders()",
            "public org.springframework.http.HttpHeaders getRequestHeaders()"
        ],
        [
            "byte[]",
            "org.springframework.test.web.reactive.server.ExchangeResult.getRequestBodyContent()",
            "public byte[] getRequestBodyContent()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.test.web.reactive.server.ExchangeResult.getStatus()",
            "public org.springframework.http.HttpStatus getStatus()"
        ],
        [
            "int",
            "org.springframework.test.web.reactive.server.ExchangeResult.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.test.web.reactive.server.ExchangeResult.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.test.web.reactive.server.ExchangeResult.getResponseCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getResponseCookies()"
        ],
        [
            "byte[]",
            "org.springframework.test.web.reactive.server.ExchangeResult.getResponseBodyContent()",
            "public byte[] getResponseBodyContent()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.reactive.server.ExchangeResult.getMockServerResult()",
            "public java.lang.Object getMockServerResult()"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.ExchangeResult.assertWithDiagnostics(java.lang.Runnable)",
            "public void assertWithDiagnostics(java.lang.Runnable)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.reactive.server.ExchangeResult.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T extends S> T",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodySpec.isEqualTo(B)",
            "public <T extends S> T isEqualTo(B)"
        ],
        [
            "<T extends S> T",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodySpec.value(org.hamcrest.Matcher<? super B>)",
            "public <T extends S> T value(org.hamcrest.Matcher<? super B>)"
        ],
        [
            "<T extends S, R> T",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodySpec.value(java.util.function.Function<B, R>, org.hamcrest.Matcher<? super R>)",
            "public <T extends S, R> T value(java.util.function.Function<B, R>, org.hamcrest.Matcher<? super R>)"
        ],
        [
            "<T extends S> T",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodySpec.value(java.util.function.Consumer<B>)",
            "public <T extends S> T value(java.util.function.Consumer<B>)"
        ],
        [
            "<T extends S> T",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodySpec.consumeWith(java.util.function.Consumer<org.springframework.test.web.reactive.server.EntityExchangeResult<B>>)",
            "public <T extends S> T consumeWith(java.util.function.Consumer<org.springframework.test.web.reactive.server.EntityExchangeResult<B>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.EntityExchangeResult<B>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodySpec.returnResult()",
            "public org.springframework.test.web.reactive.server.EntityExchangeResult<B> returnResult()"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.controllerAdvice(java.lang.Object...)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec controllerAdvice(java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.contentTypeResolver(java.util.function.Consumer<org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec contentTypeResolver(java.util.function.Consumer<org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder>)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.corsMappings(java.util.function.Consumer<org.springframework.web.reactive.config.CorsRegistry>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec corsMappings(java.util.function.Consumer<org.springframework.web.reactive.config.CorsRegistry>)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.argumentResolvers(java.util.function.Consumer<org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec argumentResolvers(java.util.function.Consumer<org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.pathMatching(java.util.function.Consumer<org.springframework.web.reactive.config.PathMatchConfigurer>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec pathMatching(java.util.function.Consumer<org.springframework.web.reactive.config.PathMatchConfigurer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.httpMessageCodecs(java.util.function.Consumer<org.springframework.http.codec.ServerCodecConfigurer>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec httpMessageCodecs(java.util.function.Consumer<org.springframework.http.codec.ServerCodecConfigurer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.formatters(java.util.function.Consumer<org.springframework.format.FormatterRegistry>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec formatters(java.util.function.Consumer<org.springframework.format.FormatterRegistry>)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.validator(org.springframework.validation.Validator)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec validator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.test.web.reactive.server.DefaultControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.viewResolvers(java.util.function.Consumer<org.springframework.web.reactive.config.ViewResolverRegistry>)",
            "public org.springframework.test.web.reactive.server.DefaultControllerSpec viewResolvers(java.util.function.Consumer<org.springframework.web.reactive.config.ViewResolverRegistry>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.viewResolvers(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec viewResolvers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.validator(org.springframework.validation.Validator)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec validator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.formatters(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec formatters(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.httpMessageCodecs(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec httpMessageCodecs(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.argumentResolvers(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec argumentResolvers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.pathMatching(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec pathMatching(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.corsMappings(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec corsMappings(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.contentTypeResolver(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec contentTypeResolver(java.util.function.Consumer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec.controllerAdvice(java.lang.Object[])",
            "public org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec controllerAdvice(java.lang.Object[])"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec",
            "org.springframework.test.web.reactive.server.WebTestClient.bindToController(java.lang.Object...)",
            "public static org.springframework.test.web.reactive.server.WebTestClient$ControllerSpec bindToController(java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$RouterFunctionSpec",
            "org.springframework.test.web.reactive.server.WebTestClient.bindToRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<?>)",
            "public static org.springframework.test.web.reactive.server.WebTestClient$RouterFunctionSpec bindToRouterFunction(org.springframework.web.reactive.function.server.RouterFunction<?>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec<?>",
            "org.springframework.test.web.reactive.server.WebTestClient.bindToApplicationContext(org.springframework.context.ApplicationContext)",
            "public static org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec<?> bindToApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec<?>",
            "org.springframework.test.web.reactive.server.WebTestClient.bindToWebHandler(org.springframework.web.server.WebHandler)",
            "public static org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec<?> bindToWebHandler(org.springframework.web.server.WebHandler)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.WebTestClient.bindToServer()",
            "public static org.springframework.test.web.reactive.server.WebTestClient$Builder bindToServer()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.WebTestClient.bindToServer(org.springframework.http.client.reactive.ClientHttpConnector)",
            "public static org.springframework.test.web.reactive.server.WebTestClient$Builder bindToServer(org.springframework.http.client.reactive.ClientHttpConnector)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isEqualTo(org.springframework.http.HttpStatus)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isEqualTo(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isEqualTo(int)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isEqualTo(int)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isOk()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isOk()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isCreated()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isCreated()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isAccepted()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isAccepted()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isNoContent()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isNoContent()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isFound()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isFound()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isSeeOther()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isSeeOther()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isNotModified()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isNotModified()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isTemporaryRedirect()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isTemporaryRedirect()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isPermanentRedirect()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isPermanentRedirect()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isBadRequest()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isBadRequest()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isUnauthorized()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isUnauthorized()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isForbidden()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isForbidden()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.isNotFound()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec isNotFound()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.reasonEquals(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec reasonEquals(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.is1xxInformational()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec is1xxInformational()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.is2xxSuccessful()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec is2xxSuccessful()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.is3xxRedirection()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec is3xxRedirection()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.is4xxClientError()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec is4xxClientError()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.is5xxServerError()",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec is5xxServerError()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.value(org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.StatusAssertions.value(java.util.function.Consumer<java.lang.Integer>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.util.function.Consumer<java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.HttpHandlerConnector",
            "org.springframework.test.web.reactive.server.HttpHandlerConnector(org.springframework.http.server.reactive.HttpHandler)",
            "public org.springframework.test.web.reactive.server.HttpHandlerConnector(org.springframework.http.server.reactive.HttpHandler)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse>",
            "org.springframework.test.web.reactive.server.HttpHandlerConnector.connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse>",
            "org.springframework.test.web.reactive.server.WiretapConnector.connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.configureContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder)",
            "public void configureContentTypeResolver(org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.addCorsMappings(org.springframework.web.reactive.config.CorsRegistry)",
            "public void addCorsMappings(org.springframework.web.reactive.config.CorsRegistry)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)",
            "public void configurePathMatching(org.springframework.web.reactive.config.PathMatchConfigurer)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.configureArgumentResolvers(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)",
            "public void configureArgumentResolvers(org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer)",
            "public void configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.addFormatters(org.springframework.format.FormatterRegistry)",
            "public void addFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.DefaultControllerSpec$TestWebFluxConfigurer.configureViewResolvers(org.springframework.web.reactive.config.ViewResolverRegistry)",
            "public void configureViewResolvers(org.springframework.web.reactive.config.ViewResolverRegistry)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.baseUrl(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder baseUrl(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.uriBuilderFactory(org.springframework.web.util.UriBuilderFactory)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder uriBuilderFactory(org.springframework.web.util.UriBuilderFactory)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.defaultHeader(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder defaultHeader(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.defaultHeaders(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder defaultHeaders(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.defaultCookie(java.lang.String, java.lang.String...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder defaultCookie(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.defaultCookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder defaultCookies(java.util.function.Consumer<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder filter(org.springframework.web.reactive.function.client.ExchangeFilterFunction)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.filters(java.util.function.Consumer<java.util.List<org.springframework.web.reactive.function.client.ExchangeFilterFunction>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder filters(java.util.function.Consumer<java.util.List<org.springframework.web.reactive.function.client.ExchangeFilterFunction>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.entityExchangeResultConsumer(java.util.function.Consumer<org.springframework.test.web.reactive.server.EntityExchangeResult<?>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder entityExchangeResultConsumer(java.util.function.Consumer<org.springframework.test.web.reactive.server.EntityExchangeResult<?>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.codecs(java.util.function.Consumer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder codecs(java.util.function.Consumer<org.springframework.http.codec.ClientCodecConfigurer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.exchangeStrategies(org.springframework.web.reactive.function.client.ExchangeStrategies)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder exchangeStrategies(org.springframework.web.reactive.function.client.ExchangeStrategies)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.exchangeStrategies(java.util.function.Consumer<org.springframework.web.reactive.function.client.ExchangeStrategies$Builder>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder exchangeStrategies(java.util.function.Consumer<org.springframework.web.reactive.function.client.ExchangeStrategies$Builder>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.apply(org.springframework.test.web.reactive.server.WebTestClientConfigurer)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder apply(org.springframework.test.web.reactive.server.WebTestClientConfigurer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.responseTimeout(java.time.Duration)",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder responseTimeout(java.time.Duration)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient",
            "org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.build()",
            "public org.springframework.test.web.reactive.server.WebTestClient build()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(java.lang.Double)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(java.lang.Double)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(boolean)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec isEqualTo(boolean)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.exists()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec exists()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.doesNotExist()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec doesNotExist()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(int)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec nodeCount(int)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.string(org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec string(org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.number(org.hamcrest.Matcher<? super java.lang.Double>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec number(org.hamcrest.Matcher<? super java.lang.Double>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(org.hamcrest.Matcher<? super java.lang.Integer>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec nodeCount(org.hamcrest.Matcher<? super java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.string(java.util.function.Consumer<java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec string(java.util.function.Consumer<java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.number(java.util.function.Consumer<java.lang.Double>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec number(java.util.function.Consumer<java.lang.Double>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(java.util.function.Consumer<java.lang.Integer>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec nodeCount(java.util.function.Consumer<java.lang.Integer>)"
        ],
        [
            "boolean",
            "org.springframework.test.web.reactive.server.XpathAssertions.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.test.web.reactive.server.XpathAssertions.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse(org.springframework.http.client.reactive.ClientHttpResponse)",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse(org.springframework.http.client.reactive.ClientHttpResponse)"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse.getRecorder()",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder getRecorder()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapClientHttpResponse.getMockServerResult()",
            "public java.lang.Object getMockServerResult()"
        ],
        [
            "reactor.core.publisher.Flux<T>",
            "org.springframework.test.web.reactive.server.FluxExchangeResult.getResponseBody()",
            "public reactor.core.publisher.Flux<T> getResponseBody()"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.FluxExchangeResult.consumeWith(java.util.function.Consumer<org.springframework.test.web.reactive.server.FluxExchangeResult<T>>)",
            "public void consumeWith(java.util.function.Consumer<org.springframework.test.web.reactive.server.FluxExchangeResult<T>>)"
        ],
        [
            "default",
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec.org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec json(java.lang.String)",
            "public default org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec json(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec.org.springframework.test.web.reactive.server.XpathAssertions xpath(java.lang.String, java.lang.Object...)",
            "public default org.springframework.test.web.reactive.server.XpathAssertions xpath(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.isEmpty()",
            "public org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void> isEmpty()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.json(java.lang.String, boolean)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec json(java.lang.String, boolean)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.xml(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec xml(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.JsonPathAssertions",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.jsonPath(java.lang.String, java.lang.Object...)",
            "public org.springframework.test.web.reactive.server.JsonPathAssertions jsonPath(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.reactive.server.XpathAssertions",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.xpath(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)",
            "public org.springframework.test.web.reactive.server.XpathAssertions xpath(java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.consumeWith(java.util.function.Consumer<org.springframework.test.web.reactive.server.EntityExchangeResult<byte[]>>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec consumeWith(java.util.function.Consumer<org.springframework.test.web.reactive.server.EntityExchangeResult<byte[]>>)"
        ],
        [
            "org.springframework.test.web.reactive.server.EntityExchangeResult<byte[]>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultBodyContentSpec.returnResult()",
            "public org.springframework.test.web.reactive.server.EntityExchangeResult<byte[]> returnResult()"
        ],
        [
            "org.springframework.test.web.reactive.server.CookieAssertions",
            "org.springframework.test.web.reactive.server.CookieAssertions(org.springframework.test.web.reactive.server.ExchangeResult, org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)",
            "public org.springframework.test.web.reactive.server.CookieAssertions(org.springframework.test.web.reactive.server.ExchangeResult, org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.valueEquals(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec valueEquals(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.value(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.value(java.lang.String, java.util.function.Consumer<java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec value(java.lang.String, java.util.function.Consumer<java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.exists(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec exists(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.doesNotExist(java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec doesNotExist(java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.maxAge(java.lang.String, java.time.Duration)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec maxAge(java.lang.String, java.time.Duration)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.maxAge(java.lang.String, org.hamcrest.Matcher<? super java.lang.Long>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec maxAge(java.lang.String, org.hamcrest.Matcher<? super java.lang.Long>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.path(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec path(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.path(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec path(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.domain(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec domain(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.domain(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec domain(java.lang.String, org.hamcrest.Matcher<? super java.lang.String>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.secure(java.lang.String, boolean)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec secure(java.lang.String, boolean)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.httpOnly(java.lang.String, boolean)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec httpOnly(java.lang.String, boolean)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.CookieAssertions.sameSite(java.lang.String, java.lang.String)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec sameSite(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.test.web.reactive.server.StatusAssertions",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectStatus()",
            "public org.springframework.test.web.reactive.server.StatusAssertions expectStatus()"
        ],
        [
            "org.springframework.test.web.reactive.server.HeaderAssertions",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectHeader()",
            "public org.springframework.test.web.reactive.server.HeaderAssertions expectHeader()"
        ],
        [
            "org.springframework.test.web.reactive.server.CookieAssertions",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectCookie()",
            "public org.springframework.test.web.reactive.server.CookieAssertions expectCookie()"
        ],
        [
            "<B> org.springframework.test.web.reactive.server.WebTestClient$BodySpec<B, ?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectBody(java.lang.Class<B>)",
            "public <B> org.springframework.test.web.reactive.server.WebTestClient$BodySpec<B, ?> expectBody(java.lang.Class<B>)"
        ],
        [
            "<B> org.springframework.test.web.reactive.server.WebTestClient$BodySpec<B, ?>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectBody(org.springframework.core.ParameterizedTypeReference<B>)",
            "public <B> org.springframework.test.web.reactive.server.WebTestClient$BodySpec<B, ?> expectBody(org.springframework.core.ParameterizedTypeReference<B>)"
        ],
        [
            "<E> org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectBodyList(java.lang.Class<E>)",
            "public <E> org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E> expectBodyList(java.lang.Class<E>)"
        ],
        [
            "<E> org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectBodyList(org.springframework.core.ParameterizedTypeReference<E>)",
            "public <E> org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E> expectBodyList(org.springframework.core.ParameterizedTypeReference<E>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectBody()",
            "public org.springframework.test.web.reactive.server.WebTestClient$BodyContentSpec expectBody()"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.FluxExchangeResult<T>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.returnResult(java.lang.Class<T>)",
            "public <T> org.springframework.test.web.reactive.server.FluxExchangeResult<T> returnResult(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.FluxExchangeResult<T>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.returnResult(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> org.springframework.test.web.reactive.server.FluxExchangeResult<T> returnResult(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultResponseSpec.expectAll(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec$ResponseSpecConsumer...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec expectAll(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec$ResponseSpecConsumer...)"
        ],
        [
            "default",
            "org.springframework.test.web.reactive.server.MockServerConfigurer.void afterConfigureAdded(org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec<?>)",
            "public default void afterConfigureAdded(org.springframework.test.web.reactive.server.WebTestClient$MockServerSpec<?>)"
        ],
        [
            "default",
            "org.springframework.test.web.reactive.server.MockServerConfigurer.void beforeServerCreated(org.springframework.web.server.adapter.WebHttpHandlerBuilder)",
            "public default void beforeServerCreated(org.springframework.web.server.adapter.WebHttpHandlerBuilder)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.reactive.server.AbstractMockServerSpec.webFilter(org.springframework.web.server.WebFilter...)",
            "public <T extends B> T webFilter(org.springframework.web.server.WebFilter...)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.reactive.server.AbstractMockServerSpec.webSessionManager(org.springframework.web.server.session.WebSessionManager)",
            "public <T extends B> T webSessionManager(org.springframework.web.server.session.WebSessionManager)"
        ],
        [
            "<T extends B> T",
            "org.springframework.test.web.reactive.server.AbstractMockServerSpec.apply(org.springframework.test.web.reactive.server.MockServerConfigurer)",
            "public <T extends B> T apply(org.springframework.test.web.reactive.server.MockServerConfigurer)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$Builder",
            "org.springframework.test.web.reactive.server.AbstractMockServerSpec.configureClient()",
            "public org.springframework.test.web.reactive.server.WebTestClient$Builder configureClient()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient",
            "org.springframework.test.web.reactive.server.AbstractMockServerSpec.build()",
            "public org.springframework.test.web.reactive.server.WebTestClient build()"
        ],
        [
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>, org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder.getPublisherToUse()",
            "public org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer> getPublisherToUse()"
        ],
        [
            "org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder.getNestedPublisherToUse()",
            "public org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>> getNestedPublisherToUse()"
        ],
        [
            "reactor.core.publisher.Mono<byte[]>",
            "org.springframework.test.web.reactive.server.WiretapConnector$WiretapRecorder.getContent()",
            "public reactor.core.publisher.Mono<byte[]> getContent()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultListBodySpec.hasSize(int)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E> hasSize(int)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultListBodySpec.contains(E...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E> contains(E...)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultListBodySpec.doesNotContain(E...)",
            "public org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E> doesNotContain(E...)"
        ],
        [
            "org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<E>>",
            "org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultListBodySpec.returnResult()",
            "public org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<E>> returnResult()"
        ],
        [
            "org.springframework.mock.env.MockEnvironment",
            "org.springframework.mock.env.MockEnvironment()",
            "public org.springframework.mock.env.MockEnvironment()"
        ],
        [
            "void",
            "org.springframework.mock.env.MockEnvironment.setProperty(java.lang.String, java.lang.String)",
            "public void setProperty(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.mock.env.MockEnvironment",
            "org.springframework.mock.env.MockEnvironment.withProperty(java.lang.String, java.lang.String)",
            "public org.springframework.mock.env.MockEnvironment withProperty(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.mock.env.MockPropertySource",
            "org.springframework.mock.env.MockPropertySource()",
            "public org.springframework.mock.env.MockPropertySource()"
        ],
        [
            "org.springframework.mock.env.MockPropertySource",
            "org.springframework.mock.env.MockPropertySource(java.lang.String)",
            "public org.springframework.mock.env.MockPropertySource(java.lang.String)"
        ],
        [
            "org.springframework.mock.env.MockPropertySource",
            "org.springframework.mock.env.MockPropertySource(java.util.Properties)",
            "public org.springframework.mock.env.MockPropertySource(java.util.Properties)"
        ],
        [
            "org.springframework.mock.env.MockPropertySource",
            "org.springframework.mock.env.MockPropertySource(java.lang.String, java.util.Properties)",
            "public org.springframework.mock.env.MockPropertySource(java.lang.String, java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.mock.env.MockPropertySource.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.mock.env.MockPropertySource",
            "org.springframework.mock.env.MockPropertySource.withProperty(java.lang.String, java.lang.Object)",
            "public org.springframework.mock.env.MockPropertySource withProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.mock.jndi.SimpleNamingContext$AbstractNamingEnumeration.hasMore()",
            "public boolean hasMore()"
        ],
        [
            "T",
            "org.springframework.mock.jndi.SimpleNamingContext$AbstractNamingEnumeration.next()",
            "public T next()"
        ],
        [
            "boolean",
            "org.springframework.mock.jndi.SimpleNamingContext$AbstractNamingEnumeration.hasMoreElements()",
            "public boolean hasMoreElements()"
        ],
        [
            "T",
            "org.springframework.mock.jndi.SimpleNamingContext$AbstractNamingEnumeration.nextElement()",
            "public T nextElement()"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext$AbstractNamingEnumeration.close()",
            "public void close()"
        ],
        [
            "org.springframework.mock.jndi.SimpleNamingContextBuilder",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder()",
            "public org.springframework.mock.jndi.SimpleNamingContextBuilder()"
        ],
        [
            "org.springframework.mock.jndi.SimpleNamingContextBuilder",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.getCurrentContextBuilder()",
            "public static org.springframework.mock.jndi.SimpleNamingContextBuilder getCurrentContextBuilder()"
        ],
        [
            "org.springframework.mock.jndi.SimpleNamingContextBuilder",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.emptyActivatedContextBuilder()",
            "public static org.springframework.mock.jndi.SimpleNamingContextBuilder emptyActivatedContextBuilder() throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.activate()",
            "public void activate() throws java.lang.IllegalStateException, javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.deactivate()",
            "public void deactivate()"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.clear()",
            "public void clear()"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.bind(java.lang.String, java.lang.Object)",
            "public void bind(java.lang.String, java.lang.Object)"
        ],
        [
            "javax.naming.spi.InitialContextFactory",
            "org.springframework.mock.jndi.SimpleNamingContextBuilder.createInitialContextFactory(java.util.Hashtable<?, ?>)",
            "public javax.naming.spi.InitialContextFactory createInitialContextFactory(java.util.Hashtable<?, ?>)"
        ],
        [
            "org.springframework.mock.jndi.ExpectedLookupTemplate",
            "org.springframework.mock.jndi.ExpectedLookupTemplate()",
            "public org.springframework.mock.jndi.ExpectedLookupTemplate()"
        ],
        [
            "org.springframework.mock.jndi.ExpectedLookupTemplate",
            "org.springframework.mock.jndi.ExpectedLookupTemplate(java.lang.String, java.lang.Object)",
            "public org.springframework.mock.jndi.ExpectedLookupTemplate(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.jndi.ExpectedLookupTemplate.addObject(java.lang.String, java.lang.Object)",
            "public void addObject(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.ExpectedLookupTemplate.lookup(java.lang.String)",
            "public java.lang.Object lookup(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "org.springframework.mock.jndi.SimpleNamingContext",
            "org.springframework.mock.jndi.SimpleNamingContext()",
            "public org.springframework.mock.jndi.SimpleNamingContext()"
        ],
        [
            "org.springframework.mock.jndi.SimpleNamingContext",
            "org.springframework.mock.jndi.SimpleNamingContext(java.lang.String)",
            "public org.springframework.mock.jndi.SimpleNamingContext(java.lang.String)"
        ],
        [
            "org.springframework.mock.jndi.SimpleNamingContext",
            "org.springframework.mock.jndi.SimpleNamingContext(java.lang.String, java.util.Hashtable<java.lang.String, java.lang.Object>, java.util.Hashtable<java.lang.String, java.lang.Object>)",
            "public org.springframework.mock.jndi.SimpleNamingContext(java.lang.String, java.util.Hashtable<java.lang.String, java.lang.Object>, java.util.Hashtable<java.lang.String, java.lang.Object>)"
        ],
        [
            "javax.naming.NamingEnumeration<javax.naming.NameClassPair>",
            "org.springframework.mock.jndi.SimpleNamingContext.list(java.lang.String)",
            "public javax.naming.NamingEnumeration<javax.naming.NameClassPair> list(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "javax.naming.NamingEnumeration<javax.naming.Binding>",
            "org.springframework.mock.jndi.SimpleNamingContext.listBindings(java.lang.String)",
            "public javax.naming.NamingEnumeration<javax.naming.Binding> listBindings(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.SimpleNamingContext.lookup(java.lang.String)",
            "public java.lang.Object lookup(java.lang.String) throws javax.naming.NameNotFoundException"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.SimpleNamingContext.lookupLink(java.lang.String)",
            "public java.lang.Object lookupLink(java.lang.String) throws javax.naming.NameNotFoundException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.bind(java.lang.String, java.lang.Object)",
            "public void bind(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.unbind(java.lang.String)",
            "public void unbind(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.rebind(java.lang.String, java.lang.Object)",
            "public void rebind(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.rename(java.lang.String, java.lang.String)",
            "public void rename(java.lang.String, java.lang.String) throws javax.naming.NameNotFoundException"
        ],
        [
            "javax.naming.Context",
            "org.springframework.mock.jndi.SimpleNamingContext.createSubcontext(java.lang.String)",
            "public javax.naming.Context createSubcontext(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.destroySubcontext(java.lang.String)",
            "public void destroySubcontext(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.jndi.SimpleNamingContext.composeName(java.lang.String, java.lang.String)",
            "public java.lang.String composeName(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Hashtable<java.lang.String, java.lang.Object>",
            "org.springframework.mock.jndi.SimpleNamingContext.getEnvironment()",
            "public java.util.Hashtable<java.lang.String, java.lang.Object> getEnvironment()"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.SimpleNamingContext.addToEnvironment(java.lang.String, java.lang.Object)",
            "public java.lang.Object addToEnvironment(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.SimpleNamingContext.removeFromEnvironment(java.lang.String)",
            "public java.lang.Object removeFromEnvironment(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.close()",
            "public void close()"
        ],
        [
            "javax.naming.NamingEnumeration<javax.naming.NameClassPair>",
            "org.springframework.mock.jndi.SimpleNamingContext.list(javax.naming.Name)",
            "public javax.naming.NamingEnumeration<javax.naming.NameClassPair> list(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "javax.naming.NamingEnumeration<javax.naming.Binding>",
            "org.springframework.mock.jndi.SimpleNamingContext.listBindings(javax.naming.Name)",
            "public javax.naming.NamingEnumeration<javax.naming.Binding> listBindings(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.SimpleNamingContext.lookup(javax.naming.Name)",
            "public java.lang.Object lookup(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.jndi.SimpleNamingContext.lookupLink(javax.naming.Name)",
            "public java.lang.Object lookupLink(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.bind(javax.naming.Name, java.lang.Object)",
            "public void bind(javax.naming.Name, java.lang.Object) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.unbind(javax.naming.Name)",
            "public void unbind(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.rebind(javax.naming.Name, java.lang.Object)",
            "public void rebind(javax.naming.Name, java.lang.Object) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.rename(javax.naming.Name, javax.naming.Name)",
            "public void rename(javax.naming.Name, javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "javax.naming.Context",
            "org.springframework.mock.jndi.SimpleNamingContext.createSubcontext(javax.naming.Name)",
            "public javax.naming.Context createSubcontext(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.mock.jndi.SimpleNamingContext.destroySubcontext(javax.naming.Name)",
            "public void destroySubcontext(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.jndi.SimpleNamingContext.getNameInNamespace()",
            "public java.lang.String getNameInNamespace() throws javax.naming.NamingException"
        ],
        [
            "javax.naming.NameParser",
            "org.springframework.mock.jndi.SimpleNamingContext.getNameParser(javax.naming.Name)",
            "public javax.naming.NameParser getNameParser(javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "javax.naming.NameParser",
            "org.springframework.mock.jndi.SimpleNamingContext.getNameParser(java.lang.String)",
            "public javax.naming.NameParser getNameParser(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "javax.naming.Name",
            "org.springframework.mock.jndi.SimpleNamingContext.composeName(javax.naming.Name, javax.naming.Name)",
            "public javax.naming.Name composeName(javax.naming.Name, javax.naming.Name) throws javax.naming.NamingException"
        ],
        [
            "org.springframework.mock.web.MockJspWriter",
            "org.springframework.mock.web.MockJspWriter(javax.servlet.http.HttpServletResponse)",
            "public org.springframework.mock.web.MockJspWriter(javax.servlet.http.HttpServletResponse)"
        ],
        [
            "org.springframework.mock.web.MockJspWriter",
            "org.springframework.mock.web.MockJspWriter(java.io.Writer)",
            "public org.springframework.mock.web.MockJspWriter(java.io.Writer)"
        ],
        [
            "org.springframework.mock.web.MockJspWriter",
            "org.springframework.mock.web.MockJspWriter(javax.servlet.http.HttpServletResponse, java.io.Writer)",
            "public org.springframework.mock.web.MockJspWriter(javax.servlet.http.HttpServletResponse, java.io.Writer)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.clear()",
            "public void clear() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.clearBuffer()",
            "public void clearBuffer() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.mock.web.MockJspWriter.getRemaining()",
            "public int getRemaining()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.newLine()",
            "public void newLine() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.write(char[], int, int)",
            "public void write(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(boolean)",
            "public void print(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(char)",
            "public void print(char) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(char[])",
            "public void print(char[]) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(double)",
            "public void print(double) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(float)",
            "public void print(float) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(int)",
            "public void print(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(long)",
            "public void print(long) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(java.lang.Object)",
            "public void print(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.print(java.lang.String)",
            "public void print(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println()",
            "public void println() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(boolean)",
            "public void println(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(char)",
            "public void println(char) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(char[])",
            "public void println(char[]) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(double)",
            "public void println(double) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(float)",
            "public void println(float) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(int)",
            "public void println(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(long)",
            "public void println(long) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(java.lang.Object)",
            "public void println(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockJspWriter.println(java.lang.String)",
            "public void println(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.mock.web.MockServletConfig",
            "org.springframework.mock.web.MockServletConfig()",
            "public org.springframework.mock.web.MockServletConfig()"
        ],
        [
            "org.springframework.mock.web.MockServletConfig",
            "org.springframework.mock.web.MockServletConfig(java.lang.String)",
            "public org.springframework.mock.web.MockServletConfig(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockServletConfig",
            "org.springframework.mock.web.MockServletConfig(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockServletConfig(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.mock.web.MockServletConfig",
            "org.springframework.mock.web.MockServletConfig(javax.servlet.ServletContext, java.lang.String)",
            "public org.springframework.mock.web.MockServletConfig(javax.servlet.ServletContext, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletConfig.getServletName()",
            "public java.lang.String getServletName()"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.mock.web.MockServletConfig.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletConfig.addInitParameter(java.lang.String, java.lang.String)",
            "public void addInitParameter(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletConfig.getInitParameter(java.lang.String)",
            "public java.lang.String getInitParameter(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockServletConfig.getInitParameterNames()",
            "public java.util.Enumeration<java.lang.String> getInitParameterNames()"
        ],
        [
            "org.springframework.mock.web.DelegatingServletOutputStream",
            "org.springframework.mock.web.DelegatingServletOutputStream(java.io.OutputStream)",
            "public org.springframework.mock.web.DelegatingServletOutputStream(java.io.OutputStream)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.mock.web.DelegatingServletOutputStream.getTargetStream()",
            "public final java.io.OutputStream getTargetStream()"
        ],
        [
            "void",
            "org.springframework.mock.web.DelegatingServletOutputStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.DelegatingServletOutputStream.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.DelegatingServletOutputStream.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.mock.web.DelegatingServletOutputStream.isReady()",
            "public boolean isReady()"
        ],
        [
            "void",
            "org.springframework.mock.web.DelegatingServletOutputStream.setWriteListener(javax.servlet.WriteListener)",
            "public void setWriteListener(javax.servlet.WriteListener)"
        ],
        [
            "org.springframework.mock.web.MockAsyncContext",
            "org.springframework.mock.web.MockAsyncContext(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public org.springframework.mock.web.MockAsyncContext(javax.servlet.ServletRequest, javax.servlet.ServletResponse)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.addDispatchHandler(java.lang.Runnable)",
            "public void addDispatchHandler(java.lang.Runnable)"
        ],
        [
            "javax.servlet.ServletRequest",
            "org.springframework.mock.web.MockAsyncContext.getRequest()",
            "public javax.servlet.ServletRequest getRequest()"
        ],
        [
            "javax.servlet.ServletResponse",
            "org.springframework.mock.web.MockAsyncContext.getResponse()",
            "public javax.servlet.ServletResponse getResponse()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockAsyncContext.hasOriginalRequestAndResponse()",
            "public boolean hasOriginalRequestAndResponse()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.dispatch()",
            "public void dispatch()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.dispatch(java.lang.String)",
            "public void dispatch(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.dispatch(javax.servlet.ServletContext, java.lang.String)",
            "public void dispatch(javax.servlet.ServletContext, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockAsyncContext.getDispatchedPath()",
            "public java.lang.String getDispatchedPath()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.complete()",
            "public void complete()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.start(java.lang.Runnable)",
            "public void start(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.addListener(javax.servlet.AsyncListener)",
            "public void addListener(javax.servlet.AsyncListener)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"
        ],
        [
            "java.util.List<javax.servlet.AsyncListener>",
            "org.springframework.mock.web.MockAsyncContext.getListeners()",
            "public java.util.List<javax.servlet.AsyncListener> getListeners()"
        ],
        [
            "<T extends javax.servlet.AsyncListener> T",
            "org.springframework.mock.web.MockAsyncContext.createListener(java.lang.Class<T>)",
            "public <T extends javax.servlet.AsyncListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockAsyncContext.setTimeout(long)",
            "public void setTimeout(long)"
        ],
        [
            "long",
            "org.springframework.mock.web.MockAsyncContext.getTimeout()",
            "public long getTimeout()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.mock.web.MockHttpServletRequest()",
            "public org.springframework.mock.web.MockHttpServletRequest()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.mock.web.MockHttpServletRequest(java.lang.String, java.lang.String)",
            "public org.springframework.mock.web.MockHttpServletRequest(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.mock.web.MockHttpServletRequest(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockHttpServletRequest(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.mock.web.MockHttpServletRequest",
            "org.springframework.mock.web.MockHttpServletRequest(javax.servlet.ServletContext, java.lang.String, java.lang.String)",
            "public org.springframework.mock.web.MockHttpServletRequest(javax.servlet.ServletContext, java.lang.String, java.lang.String)"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.mock.web.MockHttpServletRequest.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isActive()",
            "public boolean isActive()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.close()",
            "public void close()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.invalidate()",
            "public void invalidate()"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockHttpServletRequest.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletRequest.getAttributeNames()",
            "public java.util.Enumeration<java.lang.String> getAttributeNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getCharacterEncoding()",
            "public java.lang.String getCharacterEncoding()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setCharacterEncoding(java.lang.String)",
            "public void setCharacterEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setContent(byte[])",
            "public void setContent(byte[])"
        ],
        [
            "byte[]",
            "org.springframework.mock.web.MockHttpServletRequest.getContentAsByteArray()",
            "public byte[] getContentAsByteArray()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getContentAsString()",
            "public java.lang.String getContentAsString() throws java.lang.IllegalStateException, java.io.UnsupportedEncodingException"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletRequest.getContentLength()",
            "public int getContentLength()"
        ],
        [
            "long",
            "org.springframework.mock.web.MockHttpServletRequest.getContentLengthLong()",
            "public long getContentLengthLong()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setContentType(java.lang.String)",
            "public void setContentType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "javax.servlet.ServletInputStream",
            "org.springframework.mock.web.MockHttpServletRequest.getInputStream()",
            "public javax.servlet.ServletInputStream getInputStream()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setParameter(java.lang.String, java.lang.String)",
            "public void setParameter(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setParameter(java.lang.String, java.lang.String...)",
            "public void setParameter(java.lang.String, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setParameters(java.util.Map<java.lang.String, ?>)",
            "public void setParameters(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addParameter(java.lang.String, java.lang.String)",
            "public void addParameter(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addParameter(java.lang.String, java.lang.String...)",
            "public void addParameter(java.lang.String, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addParameters(java.util.Map<java.lang.String, ?>)",
            "public void addParameters(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.removeParameter(java.lang.String)",
            "public void removeParameter(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.removeAllParameters()",
            "public void removeAllParameters()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletRequest.getParameterNames()",
            "public java.util.Enumeration<java.lang.String> getParameterNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.mock.web.MockHttpServletRequest.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.mock.web.MockHttpServletRequest.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setProtocol(java.lang.String)",
            "public void setProtocol(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getProtocol()",
            "public java.lang.String getProtocol()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setScheme(java.lang.String)",
            "public void setScheme(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getScheme()",
            "public java.lang.String getScheme()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setServerName(java.lang.String)",
            "public void setServerName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getServerName()",
            "public java.lang.String getServerName()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setServerPort(int)",
            "public void setServerPort(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletRequest.getServerPort()",
            "public int getServerPort()"
        ],
        [
            "java.io.BufferedReader",
            "org.springframework.mock.web.MockHttpServletRequest.getReader()",
            "public java.io.BufferedReader getReader() throws java.io.UnsupportedEncodingException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRemoteAddr(java.lang.String)",
            "public void setRemoteAddr(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getRemoteAddr()",
            "public java.lang.String getRemoteAddr()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRemoteHost(java.lang.String)",
            "public void setRemoteHost(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getRemoteHost()",
            "public java.lang.String getRemoteHost()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.removeAttribute(java.lang.String)",
            "public void removeAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.clearAttributes()",
            "public void clearAttributes()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addPreferredLocale(java.util.Locale)",
            "public void addPreferredLocale(java.util.Locale)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setPreferredLocales(java.util.List<java.util.Locale>)",
            "public void setPreferredLocales(java.util.List<java.util.Locale>)"
        ],
        [
            "java.util.Locale",
            "org.springframework.mock.web.MockHttpServletRequest.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.util.Enumeration<java.util.Locale>",
            "org.springframework.mock.web.MockHttpServletRequest.getLocales()",
            "public java.util.Enumeration<java.util.Locale> getLocales()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setSecure(boolean)",
            "public void setSecure(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isSecure()",
            "public boolean isSecure()"
        ],
        [
            "javax.servlet.RequestDispatcher",
            "org.springframework.mock.web.MockHttpServletRequest.getRequestDispatcher(java.lang.String)",
            "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getRealPath(java.lang.String)",
            "public java.lang.String getRealPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRemotePort(int)",
            "public void setRemotePort(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletRequest.getRemotePort()",
            "public int getRemotePort()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setLocalName(java.lang.String)",
            "public void setLocalName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getLocalName()",
            "public java.lang.String getLocalName()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setLocalAddr(java.lang.String)",
            "public void setLocalAddr(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getLocalAddr()",
            "public java.lang.String getLocalAddr()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setLocalPort(int)",
            "public void setLocalPort(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletRequest.getLocalPort()",
            "public int getLocalPort()"
        ],
        [
            "javax.servlet.AsyncContext",
            "org.springframework.mock.web.MockHttpServletRequest.startAsync()",
            "public javax.servlet.AsyncContext startAsync()"
        ],
        [
            "javax.servlet.AsyncContext",
            "org.springframework.mock.web.MockHttpServletRequest.startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setAsyncStarted(boolean)",
            "public void setAsyncStarted(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isAsyncStarted()",
            "public boolean isAsyncStarted()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setAsyncSupported(boolean)",
            "public void setAsyncSupported(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isAsyncSupported()",
            "public boolean isAsyncSupported()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setAsyncContext(org.springframework.mock.web.MockAsyncContext)",
            "public void setAsyncContext(org.springframework.mock.web.MockAsyncContext)"
        ],
        [
            "javax.servlet.AsyncContext",
            "org.springframework.mock.web.MockHttpServletRequest.getAsyncContext()",
            "public javax.servlet.AsyncContext getAsyncContext()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setDispatcherType(javax.servlet.DispatcherType)",
            "public void setDispatcherType(javax.servlet.DispatcherType)"
        ],
        [
            "javax.servlet.DispatcherType",
            "org.springframework.mock.web.MockHttpServletRequest.getDispatcherType()",
            "public javax.servlet.DispatcherType getDispatcherType()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setAuthType(java.lang.String)",
            "public void setAuthType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getAuthType()",
            "public java.lang.String getAuthType()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setCookies(javax.servlet.http.Cookie...)",
            "public void setCookies(javax.servlet.http.Cookie...)"
        ],
        [
            "javax.servlet.http.Cookie[]",
            "org.springframework.mock.web.MockHttpServletRequest.getCookies()",
            "public javax.servlet.http.Cookie[] getCookies()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addHeader(java.lang.String, java.lang.Object)",
            "public void addHeader(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.removeHeader(java.lang.String)",
            "public void removeHeader(java.lang.String)"
        ],
        [
            "long",
            "org.springframework.mock.web.MockHttpServletRequest.getDateHeader(java.lang.String)",
            "public long getDateHeader(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getHeader(java.lang.String)",
            "public java.lang.String getHeader(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletRequest.getHeaders(java.lang.String)",
            "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletRequest.getHeaderNames()",
            "public java.util.Enumeration<java.lang.String> getHeaderNames()"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletRequest.getIntHeader(java.lang.String)",
            "public int getIntHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setMethod(java.lang.String)",
            "public void setMethod(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getMethod()",
            "public java.lang.String getMethod()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setPathInfo(java.lang.String)",
            "public void setPathInfo(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getPathInfo()",
            "public java.lang.String getPathInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getPathTranslated()",
            "public java.lang.String getPathTranslated()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setContextPath(java.lang.String)",
            "public void setContextPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setQueryString(java.lang.String)",
            "public void setQueryString(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getQueryString()",
            "public java.lang.String getQueryString()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRemoteUser(java.lang.String)",
            "public void setRemoteUser(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getRemoteUser()",
            "public java.lang.String getRemoteUser()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addUserRole(java.lang.String)",
            "public void addUserRole(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isUserInRole(java.lang.String)",
            "public boolean isUserInRole(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setUserPrincipal(java.security.Principal)",
            "public void setUserPrincipal(java.security.Principal)"
        ],
        [
            "java.security.Principal",
            "org.springframework.mock.web.MockHttpServletRequest.getUserPrincipal()",
            "public java.security.Principal getUserPrincipal()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRequestedSessionId(java.lang.String)",
            "public void setRequestedSessionId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getRequestedSessionId()",
            "public java.lang.String getRequestedSessionId()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRequestURI(java.lang.String)",
            "public void setRequestURI(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getRequestURI()",
            "public java.lang.String getRequestURI()"
        ],
        [
            "java.lang.StringBuffer",
            "org.springframework.mock.web.MockHttpServletRequest.getRequestURL()",
            "public java.lang.StringBuffer getRequestURL()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setServletPath(java.lang.String)",
            "public void setServletPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.getServletPath()",
            "public java.lang.String getServletPath()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setSession(javax.servlet.http.HttpSession)",
            "public void setSession(javax.servlet.http.HttpSession)"
        ],
        [
            "javax.servlet.http.HttpSession",
            "org.springframework.mock.web.MockHttpServletRequest.getSession(boolean)",
            "public javax.servlet.http.HttpSession getSession(boolean)"
        ],
        [
            "javax.servlet.http.HttpSession",
            "org.springframework.mock.web.MockHttpServletRequest.getSession()",
            "public javax.servlet.http.HttpSession getSession()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletRequest.changeSessionId()",
            "public java.lang.String changeSessionId()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRequestedSessionIdValid(boolean)",
            "public void setRequestedSessionIdValid(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isRequestedSessionIdValid()",
            "public boolean isRequestedSessionIdValid()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRequestedSessionIdFromCookie(boolean)",
            "public void setRequestedSessionIdFromCookie(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isRequestedSessionIdFromCookie()",
            "public boolean isRequestedSessionIdFromCookie()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.setRequestedSessionIdFromURL(boolean)",
            "public void setRequestedSessionIdFromURL(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isRequestedSessionIdFromURL()",
            "public boolean isRequestedSessionIdFromURL()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.isRequestedSessionIdFromUrl()",
            "public boolean isRequestedSessionIdFromUrl()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletRequest.authenticate(javax.servlet.http.HttpServletResponse)",
            "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.login(java.lang.String, java.lang.String)",
            "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.logout()",
            "public void logout() throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletRequest.addPart(javax.servlet.http.Part)",
            "public void addPart(javax.servlet.http.Part)"
        ],
        [
            "javax.servlet.http.Part",
            "org.springframework.mock.web.MockHttpServletRequest.getPart(java.lang.String)",
            "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "java.util.Collection<javax.servlet.http.Part>",
            "org.springframework.mock.web.MockHttpServletRequest.getParts()",
            "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "<T extends javax.servlet.http.HttpUpgradeHandler> T",
            "org.springframework.mock.web.MockHttpServletRequest.upgrade(java.lang.Class<T>)",
            "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "org.springframework.mock.web.MockFilterConfig",
            "org.springframework.mock.web.MockFilterConfig()",
            "public org.springframework.mock.web.MockFilterConfig()"
        ],
        [
            "org.springframework.mock.web.MockFilterConfig",
            "org.springframework.mock.web.MockFilterConfig(java.lang.String)",
            "public org.springframework.mock.web.MockFilterConfig(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockFilterConfig",
            "org.springframework.mock.web.MockFilterConfig(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockFilterConfig(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.mock.web.MockFilterConfig",
            "org.springframework.mock.web.MockFilterConfig(javax.servlet.ServletContext, java.lang.String)",
            "public org.springframework.mock.web.MockFilterConfig(javax.servlet.ServletContext, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockFilterConfig.getFilterName()",
            "public java.lang.String getFilterName()"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.mock.web.MockFilterConfig.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockFilterConfig.addInitParameter(java.lang.String, java.lang.String)",
            "public void addInitParameter(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockFilterConfig.getInitParameter(java.lang.String)",
            "public java.lang.String getInitParameter(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockFilterConfig.getInitParameterNames()",
            "public java.util.Enumeration<java.lang.String> getInitParameterNames()"
        ],
        [
            "org.springframework.mock.web.MockCookie",
            "org.springframework.mock.web.MockCookie(java.lang.String, java.lang.String)",
            "public org.springframework.mock.web.MockCookie(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockCookie.setExpires(java.time.ZonedDateTime)",
            "public void setExpires(java.time.ZonedDateTime)"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.mock.web.MockCookie.getExpires()",
            "public java.time.ZonedDateTime getExpires()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockCookie.setSameSite(java.lang.String)",
            "public void setSameSite(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockCookie.getSameSite()",
            "public java.lang.String getSameSite()"
        ],
        [
            "org.springframework.mock.web.MockCookie",
            "org.springframework.mock.web.MockCookie.parse(java.lang.String)",
            "public static org.springframework.mock.web.MockCookie parse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockCookie.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.mock.web.MockMultipartFile",
            "org.springframework.mock.web.MockMultipartFile(java.lang.String, byte[])",
            "public org.springframework.mock.web.MockMultipartFile(java.lang.String, byte[])"
        ],
        [
            "org.springframework.mock.web.MockMultipartFile",
            "org.springframework.mock.web.MockMultipartFile(java.lang.String, java.io.InputStream)",
            "public org.springframework.mock.web.MockMultipartFile(java.lang.String, java.io.InputStream) throws java.io.IOException"
        ],
        [
            "org.springframework.mock.web.MockMultipartFile",
            "org.springframework.mock.web.MockMultipartFile(java.lang.String, java.lang.String, java.lang.String, byte[])",
            "public org.springframework.mock.web.MockMultipartFile(java.lang.String, java.lang.String, java.lang.String, byte[])"
        ],
        [
            "org.springframework.mock.web.MockMultipartFile",
            "org.springframework.mock.web.MockMultipartFile(java.lang.String, java.lang.String, java.lang.String, java.io.InputStream)",
            "public org.springframework.mock.web.MockMultipartFile(java.lang.String, java.lang.String, java.lang.String, java.io.InputStream) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockMultipartFile.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockMultipartFile.getOriginalFilename()",
            "public java.lang.String getOriginalFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockMultipartFile.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockMultipartFile.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "long",
            "org.springframework.mock.web.MockMultipartFile.getSize()",
            "public long getSize()"
        ],
        [
            "byte[]",
            "org.springframework.mock.web.MockMultipartFile.getBytes()",
            "public byte[] getBytes() throws java.io.IOException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.mock.web.MockMultipartFile.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockMultipartFile.transferTo(java.io.File)",
            "public void transferTo(java.io.File) throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockFilterChain$ServletFilterProxy.init(javax.servlet.FilterConfig)",
            "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockFilterChain$ServletFilterProxy.destroy()",
            "public void destroy()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockFilterChain$ServletFilterProxy.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse",
            "org.springframework.mock.web.server.MockServerWebExchange.getResponse()",
            "public org.springframework.mock.http.server.reactive.MockServerHttpResponse getResponse()"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange",
            "org.springframework.mock.web.server.MockServerWebExchange.from(org.springframework.mock.http.server.reactive.MockServerHttpRequest)",
            "public static org.springframework.mock.web.server.MockServerWebExchange from(org.springframework.mock.http.server.reactive.MockServerHttpRequest)"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange",
            "org.springframework.mock.web.server.MockServerWebExchange.from(org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>)",
            "public static org.springframework.mock.web.server.MockServerWebExchange from(org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>)"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange$Builder",
            "org.springframework.mock.web.server.MockServerWebExchange.builder(org.springframework.mock.http.server.reactive.MockServerHttpRequest)",
            "public static org.springframework.mock.web.server.MockServerWebExchange$Builder builder(org.springframework.mock.http.server.reactive.MockServerHttpRequest)"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange$Builder",
            "org.springframework.mock.web.server.MockServerWebExchange.builder(org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>)",
            "public static org.springframework.mock.web.server.MockServerWebExchange$Builder builder(org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponse",
            "org.springframework.mock.web.server.MockServerWebExchange.getResponse()",
            "public org.springframework.http.server.reactive.ServerHttpResponse getResponse()"
        ],
        [
            "org.springframework.mock.web.server.MockWebSession",
            "org.springframework.mock.web.server.MockWebSession()",
            "public org.springframework.mock.web.server.MockWebSession()"
        ],
        [
            "org.springframework.mock.web.server.MockWebSession",
            "org.springframework.mock.web.server.MockWebSession(java.time.Clock)",
            "public org.springframework.mock.web.server.MockWebSession(java.time.Clock)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.server.MockWebSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.mock.web.server.MockWebSession.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "void",
            "org.springframework.mock.web.server.MockWebSession.start()",
            "public void start()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.server.MockWebSession.isStarted()",
            "public boolean isStarted()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.web.server.MockWebSession.changeSessionId()",
            "public reactor.core.publisher.Mono<java.lang.Void> changeSessionId()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.web.server.MockWebSession.invalidate()",
            "public reactor.core.publisher.Mono<java.lang.Void> invalidate()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.web.server.MockWebSession.save()",
            "public reactor.core.publisher.Mono<java.lang.Void> save()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.server.MockWebSession.isExpired()",
            "public boolean isExpired()"
        ],
        [
            "java.time.Instant",
            "org.springframework.mock.web.server.MockWebSession.getCreationTime()",
            "public java.time.Instant getCreationTime()"
        ],
        [
            "java.time.Instant",
            "org.springframework.mock.web.server.MockWebSession.getLastAccessTime()",
            "public java.time.Instant getLastAccessTime()"
        ],
        [
            "void",
            "org.springframework.mock.web.server.MockWebSession.setMaxIdleTime(java.time.Duration)",
            "public void setMaxIdleTime(java.time.Duration)"
        ],
        [
            "java.time.Duration",
            "org.springframework.mock.web.server.MockWebSession.getMaxIdleTime()",
            "public java.time.Duration getMaxIdleTime()"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange$Builder",
            "org.springframework.mock.web.server.MockServerWebExchange$Builder(org.springframework.mock.http.server.reactive.MockServerHttpRequest)",
            "public org.springframework.mock.web.server.MockServerWebExchange$Builder(org.springframework.mock.http.server.reactive.MockServerHttpRequest)"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange$Builder",
            "org.springframework.mock.web.server.MockServerWebExchange$Builder.session(org.springframework.web.server.WebSession)",
            "public org.springframework.mock.web.server.MockServerWebExchange$Builder session(org.springframework.web.server.WebSession)"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange$Builder",
            "org.springframework.mock.web.server.MockServerWebExchange$Builder.sessionManager(org.springframework.web.server.session.WebSessionManager)",
            "public org.springframework.mock.web.server.MockServerWebExchange$Builder sessionManager(org.springframework.web.server.session.WebSessionManager)"
        ],
        [
            "org.springframework.mock.web.server.MockServerWebExchange",
            "org.springframework.mock.web.server.MockServerWebExchange$Builder.build()",
            "public org.springframework.mock.web.server.MockServerWebExchange build()"
        ],
        [
            "org.springframework.mock.web.MockServletContext",
            "org.springframework.mock.web.MockServletContext()",
            "public org.springframework.mock.web.MockServletContext()"
        ],
        [
            "org.springframework.mock.web.MockServletContext",
            "org.springframework.mock.web.MockServletContext(java.lang.String)",
            "public org.springframework.mock.web.MockServletContext(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockServletContext",
            "org.springframework.mock.web.MockServletContext(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.mock.web.MockServletContext(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.mock.web.MockServletContext",
            "org.springframework.mock.web.MockServletContext(java.lang.String, org.springframework.core.io.ResourceLoader)",
            "public org.springframework.mock.web.MockServletContext(java.lang.String, org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setContextPath(java.lang.String)",
            "public void setContextPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.registerContext(java.lang.String, javax.servlet.ServletContext)",
            "public void registerContext(java.lang.String, javax.servlet.ServletContext)"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.mock.web.MockServletContext.getContext(java.lang.String)",
            "public javax.servlet.ServletContext getContext(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setMajorVersion(int)",
            "public void setMajorVersion(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockServletContext.getMajorVersion()",
            "public int getMajorVersion()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setMinorVersion(int)",
            "public void setMinorVersion(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockServletContext.getMinorVersion()",
            "public int getMinorVersion()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setEffectiveMajorVersion(int)",
            "public void setEffectiveMajorVersion(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockServletContext.getEffectiveMajorVersion()",
            "public int getEffectiveMajorVersion()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setEffectiveMinorVersion(int)",
            "public void setEffectiveMinorVersion(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockServletContext.getEffectiveMinorVersion()",
            "public int getEffectiveMinorVersion()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getMimeType(java.lang.String)",
            "public java.lang.String getMimeType(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.addMimeType(java.lang.String, org.springframework.http.MediaType)",
            "public void addMimeType(java.lang.String, org.springframework.http.MediaType)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.mock.web.MockServletContext.getResourcePaths(java.lang.String)",
            "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"
        ],
        [
            "java.net.URL",
            "org.springframework.mock.web.MockServletContext.getResource(java.lang.String)",
            "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.mock.web.MockServletContext.getResourceAsStream(java.lang.String)",
            "public java.io.InputStream getResourceAsStream(java.lang.String)"
        ],
        [
            "javax.servlet.RequestDispatcher",
            "org.springframework.mock.web.MockServletContext.getRequestDispatcher(java.lang.String)",
            "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"
        ],
        [
            "javax.servlet.RequestDispatcher",
            "org.springframework.mock.web.MockServletContext.getNamedDispatcher(java.lang.String)",
            "public javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.registerNamedDispatcher(java.lang.String, javax.servlet.RequestDispatcher)",
            "public void registerNamedDispatcher(java.lang.String, javax.servlet.RequestDispatcher)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.unregisterNamedDispatcher(java.lang.String)",
            "public void unregisterNamedDispatcher(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getDefaultServletName()",
            "public java.lang.String getDefaultServletName()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setDefaultServletName(java.lang.String)",
            "public void setDefaultServletName(java.lang.String)"
        ],
        [
            "javax.servlet.Servlet",
            "org.springframework.mock.web.MockServletContext.getServlet(java.lang.String)",
            "public javax.servlet.Servlet getServlet(java.lang.String)"
        ],
        [
            "java.util.Enumeration<javax.servlet.Servlet>",
            "org.springframework.mock.web.MockServletContext.getServlets()",
            "public java.util.Enumeration<javax.servlet.Servlet> getServlets()"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockServletContext.getServletNames()",
            "public java.util.Enumeration<java.lang.String> getServletNames()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.log(java.lang.String)",
            "public void log(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.log(java.lang.Exception, java.lang.String)",
            "public void log(java.lang.Exception, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.log(java.lang.String, java.lang.Throwable)",
            "public void log(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getRealPath(java.lang.String)",
            "public java.lang.String getRealPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getServerInfo()",
            "public java.lang.String getServerInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getInitParameter(java.lang.String)",
            "public java.lang.String getInitParameter(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockServletContext.getInitParameterNames()",
            "public java.util.Enumeration<java.lang.String> getInitParameterNames()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockServletContext.setInitParameter(java.lang.String, java.lang.String)",
            "public boolean setInitParameter(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.addInitParameter(java.lang.String, java.lang.String)",
            "public void addInitParameter(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockServletContext.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockServletContext.getAttributeNames()",
            "public java.util.Enumeration<java.lang.String> getAttributeNames()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.removeAttribute(java.lang.String)",
            "public void removeAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setServletContextName(java.lang.String)",
            "public void setServletContextName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getServletContextName()",
            "public java.lang.String getServletContextName()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.mock.web.MockServletContext.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.declareRoles(java.lang.String...)",
            "public void declareRoles(java.lang.String...)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.mock.web.MockServletContext.getDeclaredRoles()",
            "public java.util.Set<java.lang.String> getDeclaredRoles()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)",
            "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException"
        ],
        [
            "java.util.Set<javax.servlet.SessionTrackingMode>",
            "org.springframework.mock.web.MockServletContext.getDefaultSessionTrackingModes()",
            "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"
        ],
        [
            "java.util.Set<javax.servlet.SessionTrackingMode>",
            "org.springframework.mock.web.MockServletContext.getEffectiveSessionTrackingModes()",
            "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"
        ],
        [
            "javax.servlet.SessionCookieConfig",
            "org.springframework.mock.web.MockServletContext.getSessionCookieConfig()",
            "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setSessionTimeout(int)",
            "public void setSessionTimeout(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockServletContext.getSessionTimeout()",
            "public int getSessionTimeout()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setRequestCharacterEncoding(java.lang.String)",
            "public void setRequestCharacterEncoding(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getRequestCharacterEncoding()",
            "public java.lang.String getRequestCharacterEncoding()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.setResponseCharacterEncoding(java.lang.String)",
            "public void setResponseCharacterEncoding(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getResponseCharacterEncoding()",
            "public java.lang.String getResponseCharacterEncoding()"
        ],
        [
            "javax.servlet.descriptor.JspConfigDescriptor",
            "org.springframework.mock.web.MockServletContext.getJspConfigDescriptor()",
            "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"
        ],
        [
            "javax.servlet.ServletRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addJspFile(java.lang.String, java.lang.String)",
            "public javax.servlet.ServletRegistration$Dynamic addJspFile(java.lang.String, java.lang.String)"
        ],
        [
            "javax.servlet.ServletRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addServlet(java.lang.String, java.lang.String)",
            "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String)"
        ],
        [
            "javax.servlet.ServletRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addServlet(java.lang.String, javax.servlet.Servlet)",
            "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, javax.servlet.Servlet)"
        ],
        [
            "javax.servlet.ServletRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)",
            "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)"
        ],
        [
            "<T extends javax.servlet.Servlet> T",
            "org.springframework.mock.web.MockServletContext.createServlet(java.lang.Class<T>)",
            "public <T extends javax.servlet.Servlet> T createServlet(java.lang.Class<T>) throws javax.servlet.ServletException"
        ],
        [
            "javax.servlet.ServletRegistration",
            "org.springframework.mock.web.MockServletContext.getServletRegistration(java.lang.String)",
            "public javax.servlet.ServletRegistration getServletRegistration(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration>",
            "org.springframework.mock.web.MockServletContext.getServletRegistrations()",
            "public java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration> getServletRegistrations()"
        ],
        [
            "javax.servlet.FilterRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addFilter(java.lang.String, java.lang.String)",
            "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String)"
        ],
        [
            "javax.servlet.FilterRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addFilter(java.lang.String, javax.servlet.Filter)",
            "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, javax.servlet.Filter)"
        ],
        [
            "javax.servlet.FilterRegistration$Dynamic",
            "org.springframework.mock.web.MockServletContext.addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)",
            "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)"
        ],
        [
            "<T extends javax.servlet.Filter> T",
            "org.springframework.mock.web.MockServletContext.createFilter(java.lang.Class<T>)",
            "public <T extends javax.servlet.Filter> T createFilter(java.lang.Class<T>) throws javax.servlet.ServletException"
        ],
        [
            "javax.servlet.FilterRegistration",
            "org.springframework.mock.web.MockServletContext.getFilterRegistration(java.lang.String)",
            "public javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration>",
            "org.springframework.mock.web.MockServletContext.getFilterRegistrations()",
            "public java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.addListener(java.lang.Class<? extends java.util.EventListener>)",
            "public void addListener(java.lang.Class<? extends java.util.EventListener>)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockServletContext.addListener(java.lang.String)",
            "public void addListener(java.lang.String)"
        ],
        [
            "<T extends java.util.EventListener> void",
            "org.springframework.mock.web.MockServletContext.addListener(T)",
            "public <T extends java.util.EventListener> void addListener(T)"
        ],
        [
            "<T extends java.util.EventListener> T",
            "org.springframework.mock.web.MockServletContext.createListener(java.lang.Class<T>)",
            "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockServletContext.getVirtualServerName()",
            "public java.lang.String getVirtualServerName()"
        ],
        [
            "org.springframework.mock.web.MockBodyContent",
            "org.springframework.mock.web.MockBodyContent(java.lang.String, javax.servlet.http.HttpServletResponse)",
            "public org.springframework.mock.web.MockBodyContent(java.lang.String, javax.servlet.http.HttpServletResponse)"
        ],
        [
            "org.springframework.mock.web.MockBodyContent",
            "org.springframework.mock.web.MockBodyContent(java.lang.String, java.io.Writer)",
            "public org.springframework.mock.web.MockBodyContent(java.lang.String, java.io.Writer)"
        ],
        [
            "org.springframework.mock.web.MockBodyContent",
            "org.springframework.mock.web.MockBodyContent(java.lang.String, javax.servlet.http.HttpServletResponse, java.io.Writer)",
            "public org.springframework.mock.web.MockBodyContent(java.lang.String, javax.servlet.http.HttpServletResponse, java.io.Writer)"
        ],
        [
            "java.io.Reader",
            "org.springframework.mock.web.MockBodyContent.getReader()",
            "public java.io.Reader getReader()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockBodyContent.getString()",
            "public java.lang.String getString()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.writeOut(java.io.Writer)",
            "public void writeOut(java.io.Writer) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.clear()",
            "public void clear() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.clearBuffer()",
            "public void clearBuffer() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.mock.web.MockBodyContent.getRemaining()",
            "public int getRemaining()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.newLine()",
            "public void newLine() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.write(char[], int, int)",
            "public void write(char[], int, int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(boolean)",
            "public void print(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(char)",
            "public void print(char) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(char[])",
            "public void print(char[]) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(double)",
            "public void print(double) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(float)",
            "public void print(float) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(int)",
            "public void print(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(long)",
            "public void print(long) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(java.lang.Object)",
            "public void print(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.print(java.lang.String)",
            "public void print(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println()",
            "public void println() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(boolean)",
            "public void println(boolean) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(char)",
            "public void println(char) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(char[])",
            "public void println(char[]) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(double)",
            "public void println(double) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(float)",
            "public void println(float) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(int)",
            "public void println(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(long)",
            "public void println(long) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(java.lang.Object)",
            "public void println(java.lang.Object) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockBodyContent.println(java.lang.String)",
            "public void println(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.mock.web.MockHttpServletMapping",
            "org.springframework.mock.web.MockHttpServletMapping(java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.MappingMatch)",
            "public org.springframework.mock.web.MockHttpServletMapping(java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.MappingMatch)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletMapping.getMatchValue()",
            "public java.lang.String getMatchValue()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletMapping.getPattern()",
            "public java.lang.String getPattern()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletMapping.getServletName()",
            "public java.lang.String getServletName()"
        ],
        [
            "javax.servlet.http.MappingMatch",
            "org.springframework.mock.web.MockHttpServletMapping.getMappingMatch()",
            "public javax.servlet.http.MappingMatch getMappingMatch()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletMapping.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletResponse$ResponseServletOutputStream",
            "org.springframework.mock.web.MockHttpServletResponse$ResponseServletOutputStream(org.springframework.mock.web.MockHttpServletResponse, java.io.OutputStream)",
            "public org.springframework.mock.web.MockHttpServletResponse$ResponseServletOutputStream(org.springframework.mock.web.MockHttpServletResponse, java.io.OutputStream)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponseServletOutputStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponseServletOutputStream.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "org.springframework.mock.web.MockHttpSession",
            "org.springframework.mock.web.MockHttpSession()",
            "public org.springframework.mock.web.MockHttpSession()"
        ],
        [
            "org.springframework.mock.web.MockHttpSession",
            "org.springframework.mock.web.MockHttpSession(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockHttpSession(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.mock.web.MockHttpSession",
            "org.springframework.mock.web.MockHttpSession(javax.servlet.ServletContext, java.lang.String)",
            "public org.springframework.mock.web.MockHttpSession(javax.servlet.ServletContext, java.lang.String)"
        ],
        [
            "long",
            "org.springframework.mock.web.MockHttpSession.getCreationTime()",
            "public long getCreationTime()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpSession.changeSessionId()",
            "public java.lang.String changeSessionId()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.access()",
            "public void access()"
        ],
        [
            "long",
            "org.springframework.mock.web.MockHttpSession.getLastAccessedTime()",
            "public long getLastAccessedTime()"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.mock.web.MockHttpSession.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.setMaxInactiveInterval(int)",
            "public void setMaxInactiveInterval(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpSession.getMaxInactiveInterval()",
            "public int getMaxInactiveInterval()"
        ],
        [
            "javax.servlet.http.HttpSessionContext",
            "org.springframework.mock.web.MockHttpSession.getSessionContext()",
            "public javax.servlet.http.HttpSessionContext getSessionContext()"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockHttpSession.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockHttpSession.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockHttpSession.getAttributeNames()",
            "public java.util.Enumeration<java.lang.String> getAttributeNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.mock.web.MockHttpSession.getValueNames()",
            "public java.lang.String[] getValueNames()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.putValue(java.lang.String, java.lang.Object)",
            "public void putValue(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.removeAttribute(java.lang.String)",
            "public void removeAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.removeValue(java.lang.String)",
            "public void removeValue(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.clearAttributes()",
            "public void clearAttributes()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.invalidate()",
            "public void invalidate()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpSession.isInvalid()",
            "public boolean isInvalid()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.setNew(boolean)",
            "public void setNew(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpSession.isNew()",
            "public boolean isNew()"
        ],
        [
            "java.io.Serializable",
            "org.springframework.mock.web.MockHttpSession.serializeState()",
            "public java.io.Serializable serializeState()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpSession.deserializeState(java.io.Serializable)",
            "public void deserializeState(java.io.Serializable)"
        ],
        [
            "org.springframework.mock.web.MockPageContext",
            "org.springframework.mock.web.MockPageContext()",
            "public org.springframework.mock.web.MockPageContext()"
        ],
        [
            "org.springframework.mock.web.MockPageContext",
            "org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.mock.web.MockPageContext",
            "org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest)",
            "public org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.mock.web.MockPageContext",
            "org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"
        ],
        [
            "org.springframework.mock.web.MockPageContext",
            "org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletConfig)",
            "public org.springframework.mock.web.MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletConfig)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.initialize(javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.String, boolean, int, boolean)",
            "public void initialize(javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.String, boolean, int, boolean)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.release()",
            "public void release()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.setAttribute(java.lang.String, java.lang.Object, int)",
            "public void setAttribute(java.lang.String, java.lang.Object, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockPageContext.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockPageContext.getAttribute(java.lang.String, int)",
            "public java.lang.Object getAttribute(java.lang.String, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockPageContext.findAttribute(java.lang.String)",
            "public java.lang.Object findAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.removeAttribute(java.lang.String)",
            "public void removeAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.removeAttribute(java.lang.String, int)",
            "public void removeAttribute(java.lang.String, int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockPageContext.getAttributesScope(java.lang.String)",
            "public int getAttributesScope(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockPageContext.getAttributeNames()",
            "public java.util.Enumeration<java.lang.String> getAttributeNames()"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.mock.web.MockPageContext.getAttributeNamesInScope(int)",
            "public java.util.Enumeration<java.lang.String> getAttributeNamesInScope(int)"
        ],
        [
            "javax.servlet.jsp.JspWriter",
            "org.springframework.mock.web.MockPageContext.getOut()",
            "public javax.servlet.jsp.JspWriter getOut()"
        ],
        [
            "javax.servlet.jsp.el.ExpressionEvaluator",
            "org.springframework.mock.web.MockPageContext.getExpressionEvaluator()",
            "public javax.servlet.jsp.el.ExpressionEvaluator getExpressionEvaluator()"
        ],
        [
            "javax.el.ELContext",
            "org.springframework.mock.web.MockPageContext.getELContext()",
            "public javax.el.ELContext getELContext()"
        ],
        [
            "javax.servlet.jsp.el.VariableResolver",
            "org.springframework.mock.web.MockPageContext.getVariableResolver()",
            "public javax.servlet.jsp.el.VariableResolver getVariableResolver()"
        ],
        [
            "javax.servlet.http.HttpSession",
            "org.springframework.mock.web.MockPageContext.getSession()",
            "public javax.servlet.http.HttpSession getSession()"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockPageContext.getPage()",
            "public java.lang.Object getPage()"
        ],
        [
            "javax.servlet.ServletRequest",
            "org.springframework.mock.web.MockPageContext.getRequest()",
            "public javax.servlet.ServletRequest getRequest()"
        ],
        [
            "javax.servlet.ServletResponse",
            "org.springframework.mock.web.MockPageContext.getResponse()",
            "public javax.servlet.ServletResponse getResponse()"
        ],
        [
            "java.lang.Exception",
            "org.springframework.mock.web.MockPageContext.getException()",
            "public java.lang.Exception getException()"
        ],
        [
            "javax.servlet.ServletConfig",
            "org.springframework.mock.web.MockPageContext.getServletConfig()",
            "public javax.servlet.ServletConfig getServletConfig()"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.mock.web.MockPageContext.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.forward(java.lang.String)",
            "public void forward(java.lang.String) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.include(java.lang.String)",
            "public void include(java.lang.String) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.include(java.lang.String, boolean)",
            "public void include(java.lang.String, boolean) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "byte[]",
            "org.springframework.mock.web.MockPageContext.getContentAsByteArray()",
            "public byte[] getContentAsByteArray()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockPageContext.getContentAsString()",
            "public java.lang.String getContentAsString() throws java.io.UnsupportedEncodingException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.handlePageException(java.lang.Exception)",
            "public void handlePageException(java.lang.Exception) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPageContext.handlePageException(java.lang.Throwable)",
            "public void handlePageException(java.lang.Throwable) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.mock.web.DelegatingServletInputStream",
            "org.springframework.mock.web.DelegatingServletInputStream(java.io.InputStream)",
            "public org.springframework.mock.web.DelegatingServletInputStream(java.io.InputStream)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.mock.web.DelegatingServletInputStream.getSourceStream()",
            "public final java.io.InputStream getSourceStream()"
        ],
        [
            "int",
            "org.springframework.mock.web.DelegatingServletInputStream.read()",
            "public int read() throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.mock.web.DelegatingServletInputStream.available()",
            "public int available() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.DelegatingServletInputStream.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.mock.web.DelegatingServletInputStream.isFinished()",
            "public boolean isFinished()"
        ],
        [
            "boolean",
            "org.springframework.mock.web.DelegatingServletInputStream.isReady()",
            "public boolean isReady()"
        ],
        [
            "void",
            "org.springframework.mock.web.DelegatingServletInputStream.setReadListener(javax.servlet.ReadListener)",
            "public void setReadListener(javax.servlet.ReadListener)"
        ],
        [
            "org.springframework.mock.web.MockPart",
            "org.springframework.mock.web.MockPart(java.lang.String, byte[])",
            "public org.springframework.mock.web.MockPart(java.lang.String, byte[])"
        ],
        [
            "org.springframework.mock.web.MockPart",
            "org.springframework.mock.web.MockPart(java.lang.String, java.lang.String, byte[])",
            "public org.springframework.mock.web.MockPart(java.lang.String, java.lang.String, byte[])"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockPart.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockPart.getSubmittedFileName()",
            "public java.lang.String getSubmittedFileName()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockPart.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "long",
            "org.springframework.mock.web.MockPart.getSize()",
            "public long getSize()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.mock.web.MockPart.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPart.write(java.lang.String)",
            "public void write(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockPart.delete()",
            "public void delete() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockPart.getHeader(java.lang.String)",
            "public java.lang.String getHeader(java.lang.String)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.mock.web.MockPart.getHeaders(java.lang.String)",
            "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.mock.web.MockPart.getHeaderNames()",
            "public java.util.Collection<java.lang.String> getHeaderNames()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.web.MockPart.getHeaders()",
            "public final org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter",
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter(org.springframework.mock.web.MockHttpServletResponse, java.io.Writer)",
            "public org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter(org.springframework.mock.web.MockHttpServletResponse, java.io.Writer)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter.write(char[], int, int)",
            "public void write(char[], int, int)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter.write(java.lang.String, int, int)",
            "public void write(java.lang.String, int, int)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter.write(int)",
            "public void write(int)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter.flush()",
            "public void flush()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse$ResponsePrintWriter.close()",
            "public void close()"
        ],
        [
            "org.springframework.mock.web.MockExpressionEvaluator",
            "org.springframework.mock.web.MockExpressionEvaluator(javax.servlet.jsp.PageContext)",
            "public org.springframework.mock.web.MockExpressionEvaluator(javax.servlet.jsp.PageContext)"
        ],
        [
            "javax.servlet.jsp.el.Expression",
            "org.springframework.mock.web.MockExpressionEvaluator.parseExpression(java.lang.String, java.lang.Class, javax.servlet.jsp.el.FunctionMapper)",
            "public javax.servlet.jsp.el.Expression parseExpression(java.lang.String, java.lang.Class, javax.servlet.jsp.el.FunctionMapper) throws javax.servlet.jsp.el.ELException"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockExpressionEvaluator.evaluate(java.lang.String, java.lang.Class, javax.servlet.jsp.el.VariableResolver, javax.servlet.jsp.el.FunctionMapper)",
            "public java.lang.Object evaluate(java.lang.String, java.lang.Class, javax.servlet.jsp.el.VariableResolver, javax.servlet.jsp.el.FunctionMapper) throws javax.servlet.jsp.el.ELException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.HeaderValueHolder.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.mock.web.MockHttpServletResponse",
            "org.springframework.mock.web.MockHttpServletResponse()",
            "public org.springframework.mock.web.MockHttpServletResponse()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setOutputStreamAccessAllowed(boolean)",
            "public void setOutputStreamAccessAllowed(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletResponse.isOutputStreamAccessAllowed()",
            "public boolean isOutputStreamAccessAllowed()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setWriterAccessAllowed(boolean)",
            "public void setWriterAccessAllowed(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletResponse.isWriterAccessAllowed()",
            "public boolean isWriterAccessAllowed()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setDefaultCharacterEncoding(java.lang.String)",
            "public void setDefaultCharacterEncoding(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletResponse.isCharset()",
            "public boolean isCharset()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setCharacterEncoding(java.lang.String)",
            "public void setCharacterEncoding(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getCharacterEncoding()",
            "public java.lang.String getCharacterEncoding()"
        ],
        [
            "javax.servlet.ServletOutputStream",
            "org.springframework.mock.web.MockHttpServletResponse.getOutputStream()",
            "public javax.servlet.ServletOutputStream getOutputStream()"
        ],
        [
            "java.io.PrintWriter",
            "org.springframework.mock.web.MockHttpServletResponse.getWriter()",
            "public java.io.PrintWriter getWriter() throws java.io.UnsupportedEncodingException"
        ],
        [
            "byte[]",
            "org.springframework.mock.web.MockHttpServletResponse.getContentAsByteArray()",
            "public byte[] getContentAsByteArray()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getContentAsString()",
            "public java.lang.String getContentAsString() throws java.io.UnsupportedEncodingException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getContentAsString(java.nio.charset.Charset)",
            "public java.lang.String getContentAsString(java.nio.charset.Charset) throws java.io.UnsupportedEncodingException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setContentLength(int)",
            "public void setContentLength(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletResponse.getContentLength()",
            "public int getContentLength()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setContentLengthLong(long)",
            "public void setContentLengthLong(long)"
        ],
        [
            "long",
            "org.springframework.mock.web.MockHttpServletResponse.getContentLengthLong()",
            "public long getContentLengthLong()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setContentType(java.lang.String)",
            "public void setContentType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setBufferSize(int)",
            "public void setBufferSize(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletResponse.getBufferSize()",
            "public int getBufferSize()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.flushBuffer()",
            "public void flushBuffer()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.resetBuffer()",
            "public void resetBuffer()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setCommitted(boolean)",
            "public void setCommitted(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletResponse.isCommitted()",
            "public boolean isCommitted()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.reset()",
            "public void reset()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setLocale(java.util.Locale)",
            "public void setLocale(java.util.Locale)"
        ],
        [
            "java.util.Locale",
            "org.springframework.mock.web.MockHttpServletResponse.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.addCookie(javax.servlet.http.Cookie)",
            "public void addCookie(javax.servlet.http.Cookie)"
        ],
        [
            "javax.servlet.http.Cookie[]",
            "org.springframework.mock.web.MockHttpServletResponse.getCookies()",
            "public javax.servlet.http.Cookie[] getCookies()"
        ],
        [
            "javax.servlet.http.Cookie",
            "org.springframework.mock.web.MockHttpServletResponse.getCookie(java.lang.String)",
            "public javax.servlet.http.Cookie getCookie(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockHttpServletResponse.containsHeader(java.lang.String)",
            "public boolean containsHeader(java.lang.String)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletResponse.getHeaderNames()",
            "public java.util.Collection<java.lang.String> getHeaderNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getHeader(java.lang.String)",
            "public java.lang.String getHeader(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletResponse.getHeaders(java.lang.String)",
            "public java.util.List<java.lang.String> getHeaders(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockHttpServletResponse.getHeaderValue(java.lang.String)",
            "public java.lang.Object getHeaderValue(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.Object>",
            "org.springframework.mock.web.MockHttpServletResponse.getHeaderValues(java.lang.String)",
            "public java.util.List<java.lang.Object> getHeaderValues(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.encodeURL(java.lang.String)",
            "public java.lang.String encodeURL(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.encodeRedirectURL(java.lang.String)",
            "public java.lang.String encodeRedirectURL(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.encodeUrl(java.lang.String)",
            "public java.lang.String encodeUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.encodeRedirectUrl(java.lang.String)",
            "public java.lang.String encodeRedirectUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.sendError(int, java.lang.String)",
            "public void sendError(int, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.sendError(int)",
            "public void sendError(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.sendRedirect(java.lang.String)",
            "public void sendRedirect(java.lang.String) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getRedirectedUrl()",
            "public java.lang.String getRedirectedUrl()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setDateHeader(java.lang.String, long)",
            "public void setDateHeader(java.lang.String, long)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.addDateHeader(java.lang.String, long)",
            "public void addDateHeader(java.lang.String, long)"
        ],
        [
            "long",
            "org.springframework.mock.web.MockHttpServletResponse.getDateHeader(java.lang.String)",
            "public long getDateHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setHeader(java.lang.String, java.lang.String)",
            "public void setHeader(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.addHeader(java.lang.String, java.lang.String)",
            "public void addHeader(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setIntHeader(java.lang.String, int)",
            "public void setIntHeader(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.addIntHeader(java.lang.String, int)",
            "public void addIntHeader(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setStatus(int)",
            "public void setStatus(int)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setStatus(int, java.lang.String)",
            "public void setStatus(int, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockHttpServletResponse.getStatus()",
            "public int getStatus()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getErrorMessage()",
            "public java.lang.String getErrorMessage()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setForwardedUrl(java.lang.String)",
            "public void setForwardedUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getForwardedUrl()",
            "public java.lang.String getForwardedUrl()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.setIncludedUrl(java.lang.String)",
            "public void setIncludedUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockHttpServletResponse.getIncludedUrl()",
            "public java.lang.String getIncludedUrl()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockHttpServletResponse.addIncludedUrl(java.lang.String)",
            "public void addIncludedUrl(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.mock.web.MockHttpServletResponse.getIncludedUrls()",
            "public java.util.List<java.lang.String> getIncludedUrls()"
        ],
        [
            "java.util.Collection",
            "org.springframework.mock.web.MockHttpServletResponse.getHeaders(java.lang.String)",
            "public java.util.Collection getHeaders(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockRequestDispatcher",
            "org.springframework.mock.web.MockRequestDispatcher(java.lang.String)",
            "public org.springframework.mock.web.MockRequestDispatcher(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockRequestDispatcher.forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockRequestDispatcher.include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)"
        ],
        [
            "org.springframework.mock.web.PassThroughFilterChain",
            "org.springframework.mock.web.PassThroughFilterChain(javax.servlet.Filter, javax.servlet.FilterChain)",
            "public org.springframework.mock.web.PassThroughFilterChain(javax.servlet.Filter, javax.servlet.FilterChain)"
        ],
        [
            "org.springframework.mock.web.PassThroughFilterChain",
            "org.springframework.mock.web.PassThroughFilterChain(javax.servlet.Servlet)",
            "public org.springframework.mock.web.PassThroughFilterChain(javax.servlet.Servlet)"
        ],
        [
            "void",
            "org.springframework.mock.web.PassThroughFilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.mock.web.MockFilterChain",
            "org.springframework.mock.web.MockFilterChain()",
            "public org.springframework.mock.web.MockFilterChain()"
        ],
        [
            "org.springframework.mock.web.MockFilterChain",
            "org.springframework.mock.web.MockFilterChain(javax.servlet.Servlet)",
            "public org.springframework.mock.web.MockFilterChain(javax.servlet.Servlet)"
        ],
        [
            "org.springframework.mock.web.MockFilterChain",
            "org.springframework.mock.web.MockFilterChain(javax.servlet.Servlet, javax.servlet.Filter...)",
            "public org.springframework.mock.web.MockFilterChain(javax.servlet.Servlet, javax.servlet.Filter...)"
        ],
        [
            "javax.servlet.ServletRequest",
            "org.springframework.mock.web.MockFilterChain.getRequest()",
            "public javax.servlet.ServletRequest getRequest()"
        ],
        [
            "javax.servlet.ServletResponse",
            "org.springframework.mock.web.MockFilterChain.getResponse()",
            "public javax.servlet.ServletResponse getResponse()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockFilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.mock.web.MockFilterChain.reset()",
            "public void reset()"
        ],
        [
            "org.springframework.mock.web.MockMultipartHttpServletRequest",
            "org.springframework.mock.web.MockMultipartHttpServletRequest()",
            "public org.springframework.mock.web.MockMultipartHttpServletRequest()"
        ],
        [
            "org.springframework.mock.web.MockMultipartHttpServletRequest",
            "org.springframework.mock.web.MockMultipartHttpServletRequest(javax.servlet.ServletContext)",
            "public org.springframework.mock.web.MockMultipartHttpServletRequest(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.addFile(org.springframework.web.multipart.MultipartFile)",
            "public void addFile(org.springframework.web.multipart.MultipartFile)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getFileNames()",
            "public java.util.Iterator<java.lang.String> getFileNames()"
        ],
        [
            "org.springframework.web.multipart.MultipartFile",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getFile(java.lang.String)",
            "public org.springframework.web.multipart.MultipartFile getFile(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.web.multipart.MultipartFile>",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getFiles(java.lang.String)",
            "public java.util.List<org.springframework.web.multipart.MultipartFile> getFiles(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.web.multipart.MultipartFile>",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getFileMap()",
            "public java.util.Map<java.lang.String, org.springframework.web.multipart.MultipartFile> getFileMap()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getMultiFileMap()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile> getMultiFileMap()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getMultipartContentType(java.lang.String)",
            "public java.lang.String getMultipartContentType(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getRequestMethod()",
            "public org.springframework.http.HttpMethod getRequestMethod()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getRequestHeaders()",
            "public org.springframework.http.HttpHeaders getRequestHeaders()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.web.MockMultipartHttpServletRequest.getMultipartHeaders(java.lang.String)",
            "public org.springframework.http.HttpHeaders getMultipartHeaders(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.MockSessionCookieConfig",
            "org.springframework.mock.web.MockSessionCookieConfig()",
            "public org.springframework.mock.web.MockSessionCookieConfig()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockSessionCookieConfig.getName()",
            "public java.lang.String getName()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setDomain(java.lang.String)",
            "public void setDomain(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockSessionCookieConfig.getDomain()",
            "public java.lang.String getDomain()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setPath(java.lang.String)",
            "public void setPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockSessionCookieConfig.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setComment(java.lang.String)",
            "public void setComment(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.MockSessionCookieConfig.getComment()",
            "public java.lang.String getComment()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setHttpOnly(boolean)",
            "public void setHttpOnly(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockSessionCookieConfig.isHttpOnly()",
            "public boolean isHttpOnly()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setSecure(boolean)",
            "public void setSecure(boolean)"
        ],
        [
            "boolean",
            "org.springframework.mock.web.MockSessionCookieConfig.isSecure()",
            "public boolean isSecure()"
        ],
        [
            "void",
            "org.springframework.mock.web.MockSessionCookieConfig.setMaxAge(int)",
            "public void setMaxAge(int)"
        ],
        [
            "int",
            "org.springframework.mock.web.MockSessionCookieConfig.getMaxAge()",
            "public int getMaxAge()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.method()",
            "public org.springframework.http.HttpMethod method()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.methodName()",
            "public java.lang.String methodName()"
        ],
        [
            "java.net.URI",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.uri()",
            "public java.net.URI uri()"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.uriBuilder()",
            "public org.springframework.web.util.UriBuilder uriBuilder()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.requestPath()",
            "public org.springframework.http.server.RequestPath requestPath()"
        ],
        [
            "org.springframework.web.reactive.function.server.ServerRequest$Headers",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.headers()",
            "public org.springframework.web.reactive.function.server.ServerRequest$Headers headers()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.cookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> cookies()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.remoteAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> remoteAddress()"
        ],
        [
            "java.util.Optional<java.net.InetSocketAddress>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.localAddress()",
            "public java.util.Optional<java.net.InetSocketAddress> localAddress()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.messageReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> messageReaders()"
        ],
        [
            "<S> S",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.body(org.springframework.web.reactive.function.BodyExtractor<S, ? super org.springframework.http.server.reactive.ServerHttpRequest>)",
            "public <S> S body(org.springframework.web.reactive.function.BodyExtractor<S, ? super org.springframework.http.server.reactive.ServerHttpRequest>)"
        ],
        [
            "<S> S",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.body(org.springframework.web.reactive.function.BodyExtractor<S, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)",
            "public <S> S body(org.springframework.web.reactive.function.BodyExtractor<S, ? super org.springframework.http.server.reactive.ServerHttpRequest>, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "<S> reactor.core.publisher.Mono<S>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.bodyToMono(java.lang.Class<? extends S>)",
            "public <S> reactor.core.publisher.Mono<S> bodyToMono(java.lang.Class<? extends S>)"
        ],
        [
            "<S> reactor.core.publisher.Mono<S>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.bodyToMono(org.springframework.core.ParameterizedTypeReference<S>)",
            "public <S> reactor.core.publisher.Mono<S> bodyToMono(org.springframework.core.ParameterizedTypeReference<S>)"
        ],
        [
            "<S> reactor.core.publisher.Flux<S>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.bodyToFlux(java.lang.Class<? extends S>)",
            "public <S> reactor.core.publisher.Flux<S> bodyToFlux(java.lang.Class<? extends S>)"
        ],
        [
            "<S> reactor.core.publisher.Flux<S>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.bodyToFlux(org.springframework.core.ParameterizedTypeReference<S>)",
            "public <S> reactor.core.publisher.Flux<S> bodyToFlux(org.springframework.core.ParameterizedTypeReference<S>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.attributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> attributes()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.queryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> queryParams()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.pathVariables()",
            "public java.util.Map<java.lang.String, java.lang.String> pathVariables()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.session()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> session()"
        ],
        [
            "reactor.core.publisher.Mono<? extends java.security.Principal>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.principal()",
            "public reactor.core.publisher.Mono<? extends java.security.Principal> principal()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.formData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> formData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.multipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> multipartData()"
        ],
        [
            "org.springframework.web.server.ServerWebExchange",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.exchange()",
            "public org.springframework.web.server.ServerWebExchange exchange()"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest.builder()",
            "public static org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder builder()"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.method(org.springframework.http.HttpMethod)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.uri(java.net.URI)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder uri(java.net.URI)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.contextPath(java.lang.String)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder contextPath(java.lang.String)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.cookie(org.springframework.http.HttpCookie...)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder cookie(org.springframework.http.HttpCookie...)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.cookies(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder cookies(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.header(java.lang.String, java.lang.String)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder header(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.attribute(java.lang.String, java.lang.Object)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.attributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder attributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.queryParam(java.lang.String, java.lang.String)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder queryParam(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.pathVariable(java.lang.String, java.lang.String)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder pathVariable(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.pathVariables(java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder pathVariables(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.session(org.springframework.web.server.WebSession)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder session(org.springframework.web.server.WebSession)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.session(java.security.Principal)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder session(java.security.Principal)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.principal(java.security.Principal)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder principal(java.security.Principal)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.remoteAddress(java.net.InetSocketAddress)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder remoteAddress(java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.localAddress(java.net.InetSocketAddress)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder localAddress(java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.messageReaders(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder messageReaders(java.util.List<org.springframework.http.codec.HttpMessageReader<?>>)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.exchange(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$Builder exchange(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.body(java.lang.Object)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest body(java.lang.Object)"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$BuilderImpl.build()",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest build()"
        ],
        [
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders(org.springframework.http.HttpHeaders)",
            "public org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders(org.springframework.http.HttpHeaders)"
        ],
        [
            "void",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.header(java.lang.String, java.lang.String)",
            "public void header(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.accept()",
            "public java.util.List<org.springframework.http.MediaType> accept()"
        ],
        [
            "java.util.List<java.nio.charset.Charset>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.acceptCharset()",
            "public java.util.List<java.nio.charset.Charset> acceptCharset()"
        ],
        [
            "java.util.List<java.util.Locale$LanguageRange>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.acceptLanguage()",
            "public java.util.List<java.util.Locale$LanguageRange> acceptLanguage()"
        ],
        [
            "java.util.OptionalLong",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.contentLength()",
            "public java.util.OptionalLong contentLength()"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.contentType()",
            "public java.util.Optional<org.springframework.http.MediaType> contentType()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.host()",
            "public java.net.InetSocketAddress host()"
        ],
        [
            "java.util.List<org.springframework.http.HttpRange>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.range()",
            "public java.util.List<org.springframework.http.HttpRange> range()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.header(java.lang.String)",
            "public java.util.List<java.lang.String> header(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.web.reactive.function.server.MockServerRequest$MockHeaders.asHttpHeaders()",
            "public org.springframework.http.HttpHeaders asHttpHeaders()"
        ],
        [
            "java.lang.Object",
            "org.springframework.mock.web.MockExpressionEvaluator$1.evaluate(javax.servlet.jsp.el.VariableResolver)",
            "public java.lang.Object evaluate(javax.servlet.jsp.el.VariableResolver) throws javax.servlet.jsp.el.ELException"
        ],
        [
            "org.springframework.mock.http.client.MockClientHttpRequest",
            "org.springframework.mock.http.client.MockClientHttpRequest()",
            "public org.springframework.mock.http.client.MockClientHttpRequest()"
        ],
        [
            "org.springframework.mock.http.client.MockClientHttpRequest",
            "org.springframework.mock.http.client.MockClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.mock.http.client.MockClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "void",
            "org.springframework.mock.http.client.MockClientHttpRequest.setMethod(org.springframework.http.HttpMethod)",
            "public void setMethod(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.mock.http.client.MockClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.client.MockClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "void",
            "org.springframework.mock.http.client.MockClientHttpRequest.setURI(java.net.URI)",
            "public void setURI(java.net.URI)"
        ],
        [
            "java.net.URI",
            "org.springframework.mock.http.client.MockClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "void",
            "org.springframework.mock.http.client.MockClientHttpRequest.setResponse(org.springframework.http.client.ClientHttpResponse)",
            "public void setResponse(org.springframework.http.client.ClientHttpResponse)"
        ],
        [
            "boolean",
            "org.springframework.mock.http.client.MockClientHttpRequest.isExecuted()",
            "public boolean isExecuted()"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.mock.http.client.MockClientHttpRequest.execute()",
            "public final org.springframework.http.client.ClientHttpResponse execute() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.client.MockClientHttpRequest.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.mock.http.client.MockAsyncClientHttpRequest",
            "org.springframework.mock.http.client.MockAsyncClientHttpRequest()",
            "public org.springframework.mock.http.client.MockAsyncClientHttpRequest()"
        ],
        [
            "org.springframework.mock.http.client.MockAsyncClientHttpRequest",
            "org.springframework.mock.http.client.MockAsyncClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.mock.http.client.MockAsyncClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse>",
            "org.springframework.mock.http.client.MockAsyncClientHttpRequest.executeAsync()",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse> executeAsync() throws java.io.IOException"
        ],
        [
            "org.springframework.mock.http.client.MockClientHttpResponse",
            "org.springframework.mock.http.client.MockClientHttpResponse(byte[], org.springframework.http.HttpStatus)",
            "public org.springframework.mock.http.client.MockClientHttpResponse(byte[], org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.mock.http.client.MockClientHttpResponse",
            "org.springframework.mock.http.client.MockClientHttpResponse(byte[], int)",
            "public org.springframework.mock.http.client.MockClientHttpResponse(byte[], int)"
        ],
        [
            "org.springframework.mock.http.client.MockClientHttpResponse",
            "org.springframework.mock.http.client.MockClientHttpResponse(java.io.InputStream, org.springframework.http.HttpStatus)",
            "public org.springframework.mock.http.client.MockClientHttpResponse(java.io.InputStream, org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.mock.http.client.MockClientHttpResponse",
            "org.springframework.mock.http.client.MockClientHttpResponse(java.io.InputStream, int)",
            "public org.springframework.mock.http.client.MockClientHttpResponse(java.io.InputStream, int)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.mock.http.client.MockClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.mock.http.client.MockClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.client.MockClientHttpResponse.getStatusText()",
            "public java.lang.String getStatusText()"
        ],
        [
            "void",
            "org.springframework.mock.http.client.MockClientHttpResponse.close()",
            "public void close()"
        ],
        [
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)",
            "public org.springframework.mock.http.client.reactive.MockClientHttpRequest(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.mock.http.client.reactive.MockClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "void",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "<T> T",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.mock.http.client.reactive.MockClientHttpRequest.getBodyAsString()",
            "public reactor.core.publisher.Mono<java.lang.String> getBodyAsString()"
        ],
        [
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse(org.springframework.http.HttpStatus)",
            "public org.springframework.mock.http.client.reactive.MockClientHttpResponse(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse(int)",
            "public org.springframework.mock.http.client.reactive.MockClientHttpResponse(int)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "void",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.setBody(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>)",
            "public void setBody(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "void",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.setBody(java.lang.String)",
            "public void setBody(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.setBody(java.lang.String, java.nio.charset.Charset)",
            "public void setBody(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.getBodyAsString()",
            "public reactor.core.publisher.Mono<java.lang.String> getBodyAsString()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.client.reactive.MockClientHttpResponse.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.mock.http.MockHttpInputMessage",
            "org.springframework.mock.http.MockHttpInputMessage(byte[])",
            "public org.springframework.mock.http.MockHttpInputMessage(byte[])"
        ],
        [
            "org.springframework.mock.http.MockHttpInputMessage",
            "org.springframework.mock.http.MockHttpInputMessage(java.io.InputStream)",
            "public org.springframework.mock.http.MockHttpInputMessage(java.io.InputStream)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.http.MockHttpInputMessage.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.mock.http.MockHttpInputMessage.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.contextPath(java.lang.String)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder contextPath(java.lang.String)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.queryParam(java.lang.String, java.lang.Object...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder queryParam(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.remoteAddress(java.net.InetSocketAddress)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder remoteAddress(java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.localAddress(java.net.InetSocketAddress)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder localAddress(java.net.InetSocketAddress)"
        ],
        [
            "void",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.sslInfo(org.springframework.http.server.reactive.SslInfo)",
            "public void sslInfo(org.springframework.http.server.reactive.SslInfo)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.cookie(org.springframework.http.HttpCookie...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder cookie(org.springframework.http.HttpCookie...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.cookies(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder cookies(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.headers(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder headers(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.accept(org.springframework.http.MediaType...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.acceptCharset(java.nio.charset.Charset...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder acceptCharset(java.nio.charset.Charset...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.acceptLanguageAsLocales(java.util.Locale...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder acceptLanguageAsLocales(java.util.Locale...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.contentLength(long)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder contentLength(long)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.ifModifiedSince(long)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder ifModifiedSince(long)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.ifUnmodifiedSince(long)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder ifUnmodifiedSince(long)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.ifNoneMatch(java.lang.String...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder ifNoneMatch(java.lang.String...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.range(org.springframework.http.HttpRange...)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder range(org.springframework.http.HttpRange...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.build()",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest build()"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.body(java.lang.String)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest body(java.lang.String)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.body(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest body(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.range(org.springframework.http.HttpRange[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder range(org.springframework.http.HttpRange[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.ifNoneMatch(java.lang.String[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder ifNoneMatch(java.lang.String[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.ifUnmodifiedSince(long)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder ifUnmodifiedSince(long)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.ifModifiedSince(long)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder ifModifiedSince(long)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.acceptLanguageAsLocales(java.util.Locale[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder acceptLanguageAsLocales(java.util.Locale[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.acceptCharset(java.nio.charset.Charset[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder acceptCharset(java.nio.charset.Charset[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.accept(org.springframework.http.MediaType[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder accept(org.springframework.http.MediaType[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.headers(org.springframework.util.MultiValueMap)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder headers(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.header(java.lang.String, java.lang.String[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder header(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.cookies(org.springframework.util.MultiValueMap)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder cookies(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.cookie(org.springframework.http.HttpCookie[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder cookie(org.springframework.http.HttpCookie[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.localAddress(java.net.InetSocketAddress)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder localAddress(java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.remoteAddress(java.net.InetSocketAddress)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder remoteAddress(java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.queryParams(org.springframework.util.MultiValueMap)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder queryParams(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.queryParam(java.lang.String, java.lang.Object[])",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder queryParam(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$DefaultBodyBuilder.contextPath(java.lang.String)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder contextPath(java.lang.String)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse()",
            "public org.springframework.mock.http.server.reactive.MockServerHttpResponse()"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.mock.http.server.reactive.MockServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "void",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse.setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "<T> T",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse.getNativeResponse()",
            "public <T> T getNativeResponse()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.String>",
            "org.springframework.mock.http.server.reactive.MockServerHttpResponse.getBodyAsString()",
            "public reactor.core.publisher.Mono<java.lang.String> getBodyAsString()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "<T> T",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.get(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?> get(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.head(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?> head(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.post(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder post(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.put(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder put(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.patch(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder patch(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.delete(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?> delete(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?>",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.options(java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BaseBuilder<?> options(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.method(org.springframework.http.HttpMethod, java.net.URI)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder method(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.method(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder method(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder",
            "org.springframework.mock.http.server.reactive.MockServerHttpRequest.method(java.lang.String, java.lang.String, java.lang.Object...)",
            "public static org.springframework.mock.http.server.reactive.MockServerHttpRequest$BodyBuilder method(java.lang.String, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.mock.http.MockHttpOutputMessage",
            "org.springframework.mock.http.MockHttpOutputMessage()",
            "public org.springframework.mock.http.MockHttpOutputMessage()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.mock.http.MockHttpOutputMessage.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.mock.http.MockHttpOutputMessage.getBody()",
            "public java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "byte[]",
            "org.springframework.mock.http.MockHttpOutputMessage.getBodyAsBytes()",
            "public byte[] getBodyAsBytes()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.MockHttpOutputMessage.getBodyAsString()",
            "public java.lang.String getBodyAsString()"
        ],
        [
            "java.lang.String",
            "org.springframework.mock.http.MockHttpOutputMessage.getBodyAsString(java.nio.charset.Charset)",
            "public java.lang.String getBodyAsString(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl.file(java.lang.String, byte[])",
            "public final org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder file(java.lang.String, byte[])"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl.file(org.springframework.mock.web.MockMultipartFile)",
            "public final org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder file(org.springframework.mock.web.MockMultipartFile)"
        ],
        [
            "org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder",
            "org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl.part(javax.servlet.http.Part...)",
            "public final org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder part(javax.servlet.http.Part...)"
        ],
        [
            "org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl",
            "org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl(org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder)",
            "public org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl(org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$delete$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$delete$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$multipart$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$multipart$1.invoke(org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.ResultActionsDsl$asyncDispatch$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.ResultActionsDsl$asyncDispatch$1.invoke(org.springframework.test.web.servlet.MockMvcResultMatchersDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockMvcResultMatchersDsl)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getContextPath()",
            "public final java.lang.String getContextPath()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setContextPath(java.lang.String)",
            "public final void setContextPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getServletPath()",
            "public final java.lang.String getServletPath()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setServletPath(java.lang.String)",
            "public final void setServletPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getPathInfo()",
            "public final java.lang.String getPathInfo()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setPathInfo(java.lang.String)",
            "public final void setPathInfo(java.lang.String)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getSecure()",
            "public final java.lang.Boolean getSecure()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setSecure(java.lang.Boolean)",
            "public final void setSecure(java.lang.Boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getCharacterEncoding()",
            "public final java.lang.String getCharacterEncoding()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setCharacterEncoding(java.lang.String)",
            "public final void setCharacterEncoding(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getContent()",
            "public final java.lang.Object getContent()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setContent(java.lang.Object)",
            "public final void setContent(java.lang.Object)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getAccept()",
            "public final org.springframework.http.MediaType getAccept()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setAccept(org.springframework.http.MediaType)",
            "public final void setAccept(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.accept(org.springframework.http.MediaType...)",
            "public final void accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getContentType()",
            "public final org.springframework.http.MediaType getContentType()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setContentType(org.springframework.http.MediaType)",
            "public final void setContentType(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.headers(kotlin.jvm.functions.Function1<? super org.springframework.http.HttpHeaders, kotlin.Unit>)",
            "public final void headers(kotlin.jvm.functions.Function1<? super org.springframework.http.HttpHeaders, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.header(java.lang.String, java.lang.Object...)",
            "public final void header(java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.param(java.lang.String, java.lang.String...)",
            "public final void param(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getParams()",
            "public final org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getParams()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public final void setParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.cookie(javax.servlet.http.Cookie...)",
            "public final void cookie(javax.servlet.http.Cookie...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.locale(java.util.Locale...)",
            "public final void locale(java.util.Locale...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.requestAttr(java.lang.String, java.lang.Object)",
            "public final void requestAttr(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.sessionAttr(java.lang.String, java.lang.Object)",
            "public final void sessionAttr(java.lang.String, java.lang.Object)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getSessionAttrs()",
            "public final java.util.Map<java.lang.String, java.lang.Object> getSessionAttrs()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setSessionAttrs(java.util.Map<java.lang.String, ? extends java.lang.Object>)",
            "public final void setSessionAttrs(java.util.Map<java.lang.String, ? extends java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.flashAttr(java.lang.String, java.lang.Object)",
            "public final void flashAttr(java.lang.String, java.lang.Object)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getFlashAttrs()",
            "public final java.util.Map<java.lang.String, java.lang.Object> getFlashAttrs()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setFlashAttrs(java.util.Map<java.lang.String, ? extends java.lang.Object>)",
            "public final void setFlashAttrs(java.util.Map<java.lang.String, ? extends java.lang.Object>)"
        ],
        [
            "org.springframework.mock.web.MockHttpSession",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getSession()",
            "public final org.springframework.mock.web.MockHttpSession getSession()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setSession(org.springframework.mock.web.MockHttpSession)",
            "public final void setSession(org.springframework.mock.web.MockHttpSession)"
        ],
        [
            "java.security.Principal",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.getPrincipal()",
            "public final java.security.Principal getPrincipal()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.setPrincipal(java.security.Principal)",
            "public final void setPrincipal(java.security.Principal)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.with(org.springframework.test.web.servlet.request.RequestPostProcessor)",
            "public final void with(org.springframework.test.web.servlet.request.RequestPostProcessor)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.merge(org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder)",
            "public final void merge(org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl.perform$spring_test(org.springframework.test.web.servlet.MockMvc)",
            "public final org.springframework.test.web.servlet.ResultActionsDsl perform$spring_test(org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl",
            "org.springframework.test.web.servlet.MockHttpServletRequestDsl(org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder)",
            "public org.springframework.test.web.servlet.MockHttpServletRequestDsl(org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$options$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$options$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$patch$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$patch$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$head$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$head$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.request(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.RequestResultMatchersDsl, kotlin.Unit>)",
            "public final void request(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.RequestResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.view(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.ViewResultMatchersDsl, kotlin.Unit>)",
            "public final void view(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.ViewResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.model(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.ModelResultMatchersDsl, kotlin.Unit>)",
            "public final void model(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.ModelResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.flash(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl, kotlin.Unit>)",
            "public final void flash(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.forwardedUrl(java.lang.String)",
            "public final void forwardedUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.forwardedUrlTemplate(java.lang.String, java.lang.Object...)",
            "public final void forwardedUrlTemplate(java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.forwardedUrlPattern(java.lang.String)",
            "public final void forwardedUrlPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.redirectedUrl(java.lang.String)",
            "public final void redirectedUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.redirectedUrlPattern(java.lang.String)",
            "public final void redirectedUrlPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.status(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.StatusResultMatchersDsl, kotlin.Unit>)",
            "public final void status(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.StatusResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.header(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.HeaderResultMatchersDsl, kotlin.Unit>)",
            "public final void header(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.HeaderResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.content(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.ContentResultMatchersDsl, kotlin.Unit>)",
            "public final void content(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.ContentResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.jsonPath(java.lang.String, org.hamcrest.Matcher<T>)",
            "public final <T> void jsonPath(java.lang.String, org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.jsonPath(java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl, kotlin.Unit>)",
            "public final void jsonPath(java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.xpath(java.lang.String, java.lang.Object[], java.util.Map<java.lang.String, java.lang.String>, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.XpathResultMatchersDsl, kotlin.Unit>)",
            "public final void xpath(java.lang.String, java.lang.Object[], java.util.Map<java.lang.String, java.lang.String>, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.XpathResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.xpath$default(org.springframework.test.web.servlet.MockMvcResultMatchersDsl, java.lang.String, java.lang.Object[], java.util.Map, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static void xpath$default(org.springframework.test.web.servlet.MockMvcResultMatchersDsl, java.lang.String, java.lang.Object[], java.util.Map, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.cookie(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.CookieResultMatchersDsl, kotlin.Unit>)",
            "public final void cookie(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.result.CookieResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl.match(org.springframework.test.web.servlet.ResultMatcher)",
            "public final void match(org.springframework.test.web.servlet.ResultMatcher)"
        ],
        [
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl",
            "org.springframework.test.web.servlet.MockMvcResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.MockMvcResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$get$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$get$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$patch$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$patch$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$head$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$head$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.value(java.lang.String, org.hamcrest.Matcher<java.lang.String>)",
            "public final void value(java.lang.String, org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.value(java.lang.String, java.lang.String)",
            "public final void value(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.exists(java.lang.String)",
            "public final void exists(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.doesNotExist(java.lang.String)",
            "public final void doesNotExist(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.maxAge(java.lang.String, org.hamcrest.Matcher<java.lang.Integer>)",
            "public final void maxAge(java.lang.String, org.hamcrest.Matcher<java.lang.Integer>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.maxAge(java.lang.String, int)",
            "public final void maxAge(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.path(java.lang.String, org.hamcrest.Matcher<java.lang.String>)",
            "public final void path(java.lang.String, org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.path(java.lang.String, java.lang.String)",
            "public final void path(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.domain(java.lang.String, org.hamcrest.Matcher<java.lang.String>)",
            "public final void domain(java.lang.String, org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.domain(java.lang.String, java.lang.String)",
            "public final void domain(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.comment(java.lang.String, org.hamcrest.Matcher<java.lang.String>)",
            "public final void comment(java.lang.String, org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.comment(java.lang.String, java.lang.String)",
            "public final void comment(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.version(java.lang.String, org.hamcrest.Matcher<java.lang.Integer>)",
            "public final void version(java.lang.String, org.hamcrest.Matcher<java.lang.Integer>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.version(java.lang.String, int)",
            "public final void version(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.secure(java.lang.String, boolean)",
            "public final void secure(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl.httpOnly(java.lang.String, boolean)",
            "public final void httpOnly(java.lang.String, boolean)"
        ],
        [
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl",
            "org.springframework.test.web.servlet.result.CookieResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.CookieResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.node(org.hamcrest.Matcher<org.w3c.dom.Node>)",
            "public final void node(org.hamcrest.Matcher<org.w3c.dom.Node>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.nodeList(org.hamcrest.Matcher<org.w3c.dom.NodeList>)",
            "public final void nodeList(org.hamcrest.Matcher<org.w3c.dom.NodeList>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.exists()",
            "public final void exists()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.doesNotExist()",
            "public final void doesNotExist()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.nodeCount(org.hamcrest.Matcher<java.lang.Integer>)",
            "public final void nodeCount(org.hamcrest.Matcher<java.lang.Integer>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.nodeCount(int)",
            "public final void nodeCount(int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.string(org.hamcrest.Matcher<java.lang.String>)",
            "public final void string(org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.string(java.lang.String)",
            "public final void string(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.number(org.hamcrest.Matcher<java.lang.Double>)",
            "public final void number(org.hamcrest.Matcher<java.lang.Double>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.number(double)",
            "public final void number(double)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl.booleanValue(boolean)",
            "public final void booleanValue(boolean)"
        ],
        [
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl(org.springframework.test.web.servlet.ResultActions, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)",
            "public org.springframework.test.web.servlet.result.XpathResultMatchersDsl(org.springframework.test.web.servlet.ResultActions, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.lang.Object...)"
        ],
        [
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl",
            "org.springframework.test.web.servlet.result.XpathResultMatchersDsl(org.springframework.test.web.servlet.ResultActions, java.lang.String, java.util.Map, java.lang.Object[], int, kotlin.jvm.internal.DefaultConstructorMarker)",
            "public org.springframework.test.web.servlet.result.XpathResultMatchersDsl(org.springframework.test.web.servlet.ResultActions, java.lang.String, java.util.Map, java.lang.Object[], int, kotlin.jvm.internal.DefaultConstructorMarker)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ViewResultMatchersDsl.name(org.hamcrest.Matcher<java.lang.String>)",
            "public final void name(org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ViewResultMatchersDsl.name(java.lang.String)",
            "public final void name(java.lang.String)"
        ],
        [
            "org.springframework.test.web.servlet.result.ViewResultMatchersDsl",
            "org.springframework.test.web.servlet.result.ViewResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.ViewResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.contentType(java.lang.String)",
            "public final void contentType(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.contentType(org.springframework.http.MediaType)",
            "public final void contentType(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.contentTypeCompatibleWith(java.lang.String)",
            "public final void contentTypeCompatibleWith(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.contentTypeCompatibleWith(org.springframework.http.MediaType)",
            "public final void contentTypeCompatibleWith(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.encoding(java.lang.String)",
            "public final void encoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.string(org.hamcrest.Matcher<java.lang.String>)",
            "public final void string(org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.string(java.lang.String)",
            "public final void string(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.bytes(byte[])",
            "public final void bytes(byte[])"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.xml(java.lang.String)",
            "public final void xml(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.node(org.hamcrest.Matcher<org.w3c.dom.Node>)",
            "public final void node(org.hamcrest.Matcher<org.w3c.dom.Node>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.source(org.hamcrest.Matcher<javax.xml.transform.Source>)",
            "public final void source(org.hamcrest.Matcher<javax.xml.transform.Source>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.json(java.lang.String, boolean)",
            "public final void json(java.lang.String, boolean)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl.json$default(org.springframework.test.web.servlet.result.ContentResultMatchersDsl, java.lang.String, boolean, int, java.lang.Object)",
            "public static void json$default(org.springframework.test.web.servlet.result.ContentResultMatchersDsl, java.lang.String, boolean, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl",
            "org.springframework.test.web.servlet.result.ContentResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.ContentResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isEqualTo(org.hamcrest.Matcher<java.lang.Integer>)",
            "public final void isEqualTo(org.hamcrest.Matcher<java.lang.Integer>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isEqualTo(int)",
            "public final void isEqualTo(int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.is1xxInformational()",
            "public final void is1xxInformational()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.is2xxSuccessful()",
            "public final void is2xxSuccessful()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.is3xxRedirection()",
            "public final void is3xxRedirection()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.is4xxClientError()",
            "public final void is4xxClientError()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.is5xxServerError()",
            "public final void is5xxServerError()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.reason(org.hamcrest.Matcher<java.lang.String>)",
            "public final void reason(org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.reason(java.lang.String)",
            "public final void reason(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isContinue()",
            "public final void isContinue()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isSwitchingProtocols()",
            "public final void isSwitchingProtocols()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isProcessing()",
            "public final void isProcessing()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isCheckpoint()",
            "public final void isCheckpoint()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isOk()",
            "public final void isOk()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isCreated()",
            "public final void isCreated()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isAccepted()",
            "public final void isAccepted()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNonAuthoritativeInformation()",
            "public final void isNonAuthoritativeInformation()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNoContent()",
            "public final void isNoContent()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isResetContent()",
            "public final void isResetContent()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isPartialContent()",
            "public final void isPartialContent()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isMultiStatus()",
            "public final void isMultiStatus()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isAlreadyReported()",
            "public final void isAlreadyReported()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isImUsed()",
            "public final void isImUsed()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isMultipleChoices()",
            "public final void isMultipleChoices()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isFound()",
            "public final void isFound()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isSeeOther()",
            "public final void isSeeOther()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNotModified()",
            "public final void isNotModified()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isTemporaryRedirect()",
            "public final void isTemporaryRedirect()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isPermanentRedirect()",
            "public final void isPermanentRedirect()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isBadRequest()",
            "public final void isBadRequest()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isUnauthorized()",
            "public final void isUnauthorized()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isPaymentRequired()",
            "public final void isPaymentRequired()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isForbidden()",
            "public final void isForbidden()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNotFound()",
            "public final void isNotFound()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isMethodNotAllowed()",
            "public final void isMethodNotAllowed()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNotAcceptable()",
            "public final void isNotAcceptable()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isProxyAuthenticationRequired()",
            "public final void isProxyAuthenticationRequired()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isRequestTimeout()",
            "public final void isRequestTimeout()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isConflict()",
            "public final void isConflict()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isGone()",
            "public final void isGone()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isLengthRequired()",
            "public final void isLengthRequired()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isPreconditionFailed()",
            "public final void isPreconditionFailed()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isPayloadTooLarge()",
            "public final void isPayloadTooLarge()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isUriTooLong()",
            "public final void isUriTooLong()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isUnsupportedMediaType()",
            "public final void isUnsupportedMediaType()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isRequestedRangeNotSatisfiable()",
            "public final void isRequestedRangeNotSatisfiable()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isExpectationFailed()",
            "public final void isExpectationFailed()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isIAmATeapot()",
            "public final void isIAmATeapot()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isUnprocessableEntity()",
            "public final void isUnprocessableEntity()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isLocked()",
            "public final void isLocked()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isFailedDependency()",
            "public final void isFailedDependency()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isTooEarly()",
            "public final void isTooEarly()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isUpgradeRequired()",
            "public final void isUpgradeRequired()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isPreconditionRequired()",
            "public final void isPreconditionRequired()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isTooManyRequests()",
            "public final void isTooManyRequests()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isRequestHeaderFieldsTooLarge()",
            "public final void isRequestHeaderFieldsTooLarge()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isUnavailableForLegalReasons()",
            "public final void isUnavailableForLegalReasons()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isInternalServerError()",
            "public final void isInternalServerError()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNotImplemented()",
            "public final void isNotImplemented()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isBadGateway()",
            "public final void isBadGateway()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isServiceUnavailable()",
            "public final void isServiceUnavailable()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isGatewayTimeout()",
            "public final void isGatewayTimeout()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isHttpVersionNotSupported()",
            "public final void isHttpVersionNotSupported()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isVariantAlsoNegotiates()",
            "public final void isVariantAlsoNegotiates()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isInsufficientStorage()",
            "public final void isInsufficientStorage()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isLoopDetected()",
            "public final void isLoopDetected()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isBandwidthLimitExceeded()",
            "public final void isBandwidthLimitExceeded()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNotExtended()",
            "public final void isNotExtended()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl.isNetworkAuthenticationRequired()",
            "public final void isNetworkAuthenticationRequired()"
        ],
        [
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl",
            "org.springframework.test.web.servlet.result.StatusResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.StatusResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl.attribute(java.lang.String, org.hamcrest.Matcher<T>)",
            "public final <T> void attribute(java.lang.String, org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl.attribute(java.lang.String, java.lang.Object)",
            "public final void attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl.attributeExists(java.lang.String...)",
            "public final void attributeExists(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl.attributeCount(int)",
            "public final void attributeCount(int)"
        ],
        [
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl",
            "org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.FlashAttributeResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchersExtensionsKt.isEqualTo(org.springframework.test.web.servlet.result.StatusResultMatchers, org.hamcrest.Matcher<java.lang.Integer>)",
            "public static final org.springframework.test.web.servlet.ResultMatcher isEqualTo(org.springframework.test.web.servlet.result.StatusResultMatchers, org.hamcrest.Matcher<java.lang.Integer>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultMatcher",
            "org.springframework.test.web.servlet.result.StatusResultMatchersExtensionsKt.isEqualTo(org.springframework.test.web.servlet.result.StatusResultMatchers, int)",
            "public static final org.springframework.test.web.servlet.ResultMatcher isEqualTo(org.springframework.test.web.servlet.result.StatusResultMatchers, int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.string(java.lang.String, org.hamcrest.Matcher<java.lang.String>)",
            "public final void string(java.lang.String, org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.stringValues(java.lang.String, org.hamcrest.Matcher<java.lang.Iterable<java.lang.String>>)",
            "public final void stringValues(java.lang.String, org.hamcrest.Matcher<java.lang.Iterable<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.string(java.lang.String, java.lang.String)",
            "public final void string(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.stringValues(java.lang.String, java.lang.String...)",
            "public final void stringValues(java.lang.String, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.exists(java.lang.String)",
            "public final void exists(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.doesNotExist(java.lang.String)",
            "public final void doesNotExist(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.longValue(java.lang.String, long)",
            "public final void longValue(java.lang.String, long)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl.dateValue(java.lang.String, long)",
            "public final void dateValue(java.lang.String, long)"
        ],
        [
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl",
            "org.springframework.test.web.servlet.result.HeaderResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.HeaderResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.matchers$annotations()",
            "public static void matchers$annotations()"
        ],
        [
            "org.springframework.test.web.servlet.result.JsonPathResultMatchers",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.getMatchers()",
            "public final org.springframework.test.web.servlet.result.JsonPathResultMatchers getMatchers()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.prefix(java.lang.String)",
            "public final void prefix(java.lang.String)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.value(org.hamcrest.Matcher<T>)",
            "public final <T> void value(org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.value(java.lang.Object)",
            "public final void value(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.exists()",
            "public final void exists()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.doesNotExist()",
            "public final void doesNotExist()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isEmpty()",
            "public final void isEmpty()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isNotEmpty()",
            "public final void isNotEmpty()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.hasJsonPath()",
            "public final void hasJsonPath()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.doesNotHaveJsonPath()",
            "public final void doesNotHaveJsonPath()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isString()",
            "public final void isString()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isBoolean()",
            "public final void isBoolean()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isNumber()",
            "public final void isNumber()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isArray()",
            "public final void isArray()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.isMap()",
            "public final void isMap()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.actions$annotations()",
            "public static void actions$annotations()"
        ],
        [
            "org.springframework.test.web.servlet.ResultActions",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl.getActions()",
            "public final org.springframework.test.web.servlet.ResultActions getActions()"
        ],
        [
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl",
            "org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl(org.springframework.test.web.servlet.ResultActions, java.lang.String, java.lang.Object...)",
            "public org.springframework.test.web.servlet.result.JsonPathResultMatchersDsl(org.springframework.test.web.servlet.ResultActions, java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.asyncStarted()",
            "public final void asyncStarted()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.asyncNotStarted()",
            "public final void asyncNotStarted()"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.asyncResult(org.hamcrest.Matcher<T>)",
            "public final <T> void asyncResult(org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.asyncResult(java.lang.Object)",
            "public final void asyncResult(java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.attribute(java.lang.String, org.hamcrest.Matcher<T>)",
            "public final <T> void attribute(java.lang.String, org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.attribute(java.lang.String, java.lang.Object)",
            "public final void attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.sessionAttribute(java.lang.String, org.hamcrest.Matcher<T>)",
            "public final <T> void sessionAttribute(java.lang.String, org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.sessionAttribute(java.lang.String, java.lang.Object)",
            "public final void sessionAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl.sessionAttributeDoesNotExist(java.lang.String...)",
            "public final void sessionAttributeDoesNotExist(java.lang.String...)"
        ],
        [
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl",
            "org.springframework.test.web.servlet.result.RequestResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.RequestResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "<T> void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attribute(java.lang.String, org.hamcrest.Matcher<T>)",
            "public final <T> void attribute(java.lang.String, org.hamcrest.Matcher<T>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attribute(java.lang.String, java.lang.Object)",
            "public final void attribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeExists(java.lang.String...)",
            "public final void attributeExists(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeDoesNotExist(java.lang.String...)",
            "public final void attributeDoesNotExist(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeErrorCount(java.lang.String, int)",
            "public final void attributeErrorCount(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeHasErrors(java.lang.String...)",
            "public final void attributeHasErrors(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeHasNoErrors(java.lang.String...)",
            "public final void attributeHasNoErrors(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeHasFieldErrors(java.lang.String, java.lang.String...)",
            "public final void attributeHasFieldErrors(java.lang.String, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeHasFieldErrorCode(java.lang.String, java.lang.String, java.lang.String)",
            "public final void attributeHasFieldErrorCode(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.attributeHasFieldErrorCode(java.lang.String, java.lang.String, org.hamcrest.Matcher<java.lang.String>)",
            "public final void attributeHasFieldErrorCode(java.lang.String, java.lang.String, org.hamcrest.Matcher<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.errorCount(int)",
            "public final void errorCount(int)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.hasErrors()",
            "public final void hasErrors()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.hasNoErrors()",
            "public final void hasNoErrors()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl.size(int)",
            "public final void size(int)"
        ],
        [
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl",
            "org.springframework.test.web.servlet.result.ModelResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.result.ModelResultMatchersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$request$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$request$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$options$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$options$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$put$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$put$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$post$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$post$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl.print()",
            "public final void print()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl.print(java.io.OutputStream)",
            "public final void print(java.io.OutputStream)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl.print(java.io.Writer)",
            "public final void print(java.io.Writer)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl.log()",
            "public final void log()"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl.handle(org.springframework.test.web.servlet.ResultHandler)",
            "public final void handle(org.springframework.test.web.servlet.ResultHandler)"
        ],
        [
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl",
            "org.springframework.test.web.servlet.MockMvcResultHandlersDsl(org.springframework.test.web.servlet.ResultActions)",
            "public org.springframework.test.web.servlet.MockMvcResultHandlersDsl(org.springframework.test.web.servlet.ResultActions)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$request$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$request$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$delete$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$delete$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.ResultActionsDsl.andExpect(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMvcResultMatchersDsl, kotlin.Unit>)",
            "public final org.springframework.test.web.servlet.ResultActionsDsl andExpect(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMvcResultMatchersDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.ResultActionsDsl.andDo(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMvcResultHandlersDsl, kotlin.Unit>)",
            "public final org.springframework.test.web.servlet.ResultActionsDsl andDo(kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMvcResultHandlersDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.ResultActionsDsl.asyncDispatch()",
            "public final org.springframework.test.web.servlet.ResultActionsDsl asyncDispatch()"
        ],
        [
            "org.springframework.test.web.servlet.MvcResult",
            "org.springframework.test.web.servlet.ResultActionsDsl.andReturn()",
            "public final org.springframework.test.web.servlet.MvcResult andReturn()"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.ResultActionsDsl(org.springframework.test.web.servlet.ResultActions, org.springframework.test.web.servlet.MockMvc)",
            "public org.springframework.test.web.servlet.ResultActionsDsl(org.springframework.test.web.servlet.ResultActions, org.springframework.test.web.servlet.MockMvc)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.ResultActionsDsl$asyncDispatch$1$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.ResultActionsDsl$asyncDispatch$1$1.invoke(org.springframework.test.web.servlet.result.RequestResultMatchersDsl)",
            "public final void invoke(org.springframework.test.web.servlet.result.RequestResultMatchersDsl)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.get(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl get(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.get$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl get$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.get(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl get(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.get$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl get$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.post(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl post(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.post$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl post$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.post(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl post(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.post$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl post$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.put(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl put(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.put$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl put$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.put(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl put(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.put$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl put$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.patch(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl patch(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.patch$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl patch$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.patch(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl patch(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.patch$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl patch$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.delete(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl delete(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.delete$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl delete$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.delete(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl delete(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.delete$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl delete$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.options(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl options(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.options$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl options$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.options(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl options(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.options$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl options$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.head(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl head(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.head$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl head$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.head(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl head(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.head$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl head$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.request(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl request(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.request$default(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl request$default(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.request(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl request(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.request$default(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl request$default(org.springframework.test.web.servlet.MockMvc, org.springframework.http.HttpMethod, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.multipart(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl multipart(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.multipart$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl multipart$default(org.springframework.test.web.servlet.MockMvc, java.lang.String, java.lang.Object[], kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.multipart(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl, kotlin.Unit>)",
            "public static final org.springframework.test.web.servlet.ResultActionsDsl multipart(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1<? super org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.servlet.ResultActionsDsl",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt.multipart$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static org.springframework.test.web.servlet.ResultActionsDsl multipart$default(org.springframework.test.web.servlet.MockMvc, java.net.URI, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$post$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$post$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$multipart$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$multipart$2.invoke(org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockMultipartHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$get$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$get$1.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "java.lang.Object",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$put$2.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.test.web.servlet.MockMvcExtensionsKt$put$2.invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)",
            "public final void invoke(org.springframework.test.web.servlet.MockHttpServletRequestDsl)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$consumeWith$1.run()",
            "public final void run()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$consumeWith$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$consumeWith$1(org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1, kotlin.jvm.functions.Function1)",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$consumeWith$1(org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1, kotlin.jvm.functions.Function1)"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$returnResult$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$returnResult$1()",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$returnResult$1()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$1()",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$1()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBodyList$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBodyList$1()",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBodyList$1()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$2",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$2()",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$2()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$1()",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$1()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$3",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$3()",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$body$3()"
        ],
        [
            "org.springframework.test.web.reactive.server.KotlinBodySpec<B>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1.isEqualTo(B)",
            "public org.springframework.test.web.reactive.server.KotlinBodySpec<B> isEqualTo(B)"
        ],
        [
            "org.springframework.test.web.reactive.server.KotlinBodySpec<B>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1.consumeWith(kotlin.jvm.functions.Function1<? super org.springframework.test.web.reactive.server.EntityExchangeResult<B>, kotlin.Unit>)",
            "public org.springframework.test.web.reactive.server.KotlinBodySpec<B> consumeWith(kotlin.jvm.functions.Function1<? super org.springframework.test.web.reactive.server.EntityExchangeResult<B>, kotlin.Unit>)"
        ],
        [
            "org.springframework.test.web.reactive.server.EntityExchangeResult<B>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1.returnResult()",
            "public org.springframework.test.web.reactive.server.EntityExchangeResult<B> returnResult()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1(org.springframework.test.web.reactive.server.EntityExchangeResult)",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1(org.springframework.test.web.reactive.server.EntityExchangeResult)"
        ],
        [
            "<T, S extends org.reactivestreams.Publisher<T>> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt.body(org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec, S)",
            "public static final <T, S extends org.reactivestreams.Publisher<T>> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec, S)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt.body(org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec, java.lang.Object)",
            "public static final <T> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec, java.lang.Object)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt.body(org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec, kotlinx.coroutines.flow.Flow<? extends T>)",
            "public static final <T> org.springframework.test.web.reactive.server.WebTestClient$RequestHeadersSpec<?> body(org.springframework.test.web.reactive.server.WebTestClient$RequestBodySpec, kotlinx.coroutines.flow.Flow<? extends T>)"
        ],
        [
            "<B> org.springframework.test.web.reactive.server.KotlinBodySpec<B>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt.expectBody(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)",
            "public static final <B> org.springframework.test.web.reactive.server.KotlinBodySpec<B> expectBody(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)"
        ],
        [
            "<E> org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt.expectBodyList(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)",
            "public static final <E> org.springframework.test.web.reactive.server.WebTestClient$ListBodySpec<E> expectBodyList(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)"
        ],
        [
            "<T> org.springframework.test.web.reactive.server.FluxExchangeResult<T>",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt.returnResult(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)",
            "public static final <T> org.springframework.test.web.reactive.server.FluxExchangeResult<T> returnResult(org.springframework.test.web.reactive.server.WebTestClient$ResponseSpec)"
        ],
        [
            "void",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$isEqualTo$1.run()",
            "public final void run()"
        ],
        [
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$isEqualTo$1",
            "org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$isEqualTo$1(org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1, java.lang.Object)",
            "public org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1$isEqualTo$1(org.springframework.test.web.reactive.server.WebTestClientExtensionsKt$expectBody$2$1, java.lang.Object)"
        ]
    ]
}