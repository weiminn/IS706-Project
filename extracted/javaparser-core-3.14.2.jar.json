{"javaparser-core-3.14.2.jar": [["void", "com.github.javaparser.SimpleCharStream.setTabSize(int)"], ["int", "com.github.javaparser.SimpleCharStream.getTabSize()"], ["char", "com.github.javaparser.SimpleCharStream.BeginToken()"], ["char", "com.github.javaparser.SimpleCharStream.readChar()"], ["int", "com.github.javaparser.SimpleCharStream.getColumn()"], ["int", "com.github.javaparser.SimpleCharStream.getLine()"], ["int", "com.github.javaparser.SimpleCharStream.getEndColumn()"], ["int", "com.github.javaparser.SimpleCharStream.getEndLine()"], ["int", "com.github.javaparser.SimpleCharStream.getBeginColumn()"], ["int", "com.github.javaparser.SimpleCharStream.getBeginLine()"], ["void", "com.github.javaparser.SimpleCharStream.backup(int)"], ["com.github.javaparser.SimpleCharStream", "com.github.javaparser.SimpleCharStream(com.github.javaparser.Provider, int, int, int)"], ["com.github.javaparser.SimpleCharStream", "com.github.javaparser.SimpleCharStream(com.github.javaparser.Provider, int, int)"], ["com.github.javaparser.SimpleCharStream", "com.github.javaparser.SimpleCharStream(com.github.javaparser.Provider)"], ["void", "com.github.javaparser.SimpleCharStream.ReInit(com.github.javaparser.Provider, int, int, int)"], ["void", "com.github.javaparser.SimpleCharStream.ReInit(com.github.javaparser.Provider, int, int)"], ["void", "com.github.javaparser.SimpleCharStream.ReInit(com.github.javaparser.Provider)"], ["java.lang.String", "com.github.javaparser.SimpleCharStream.GetImage()"], ["char[]", "com.github.javaparser.SimpleCharStream.GetSuffix(int)"], ["void", "com.github.javaparser.SimpleCharStream.Done()"], ["void", "com.github.javaparser.SimpleCharStream.adjustBeginLineColumn(int, int)"], ["com.github.javaparser.TokenRange", "com.github.javaparser.TokenRange(com.github.javaparser.JavaToken, com.github.javaparser.JavaToken)"], ["com.github.javaparser.JavaToken", "com.github.javaparser.TokenRange.getBegin()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.TokenRange.getEnd()"], ["com.github.javaparser.TokenRange", "com.github.javaparser.TokenRange.withBegin(com.github.javaparser.JavaToken)"], ["com.github.javaparser.TokenRange", "com.github.javaparser.TokenRange.withEnd(com.github.javaparser.JavaToken)"], ["java.lang.String", "com.github.javaparser.TokenRange.toString()"], ["com.github.javaparser.Problem", "com.github.javaparser.Problem(java.lang.String, com.github.javaparser.TokenRange, java.lang.Throwable)"], ["java.lang.String", "com.github.javaparser.Problem.toString()"], ["java.lang.String", "com.github.javaparser.Problem.getMessage()"], ["java.lang.String", "com.github.javaparser.Problem.getVerboseMessage()"], ["com.github.javaparser.metamodel.BaseNodeMetaModel", "com.github.javaparser.metamodel.BaseNodeMetaModel(java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>, java.lang.Class<? extends com.github.javaparser.ast.Node>, java.lang.String, java.lang.String, boolean, boolean)"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.is(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getQualifiedClassName()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.isInstanceOfMetaModel(com.github.javaparser.metamodel.BaseNodeMetaModel)"], ["java.lang.Class<? extends com.github.javaparser.ast.Node>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getType()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getPackageName()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.isAbstract()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.hasWildcard()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.isRootNode()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.equals(java.lang.Object)"], ["int", "com.github.javaparser.metamodel.BaseNodeMetaModel.hashCode()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.toString()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getMetaModelFieldName()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.metamodel.BaseNodeMetaModel.construct(java.util.Map<java.lang.String, java.lang.Object>)"], ["com.github.javaparser.metamodel.PropertyMetaModel", "com.github.javaparser.metamodel.PropertyMetaModel(com.github.javaparser.metamodel.BaseNodeMetaModel, java.lang.String, java.lang.Class<?>, java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>, boolean, boolean, boolean, boolean)"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.is(java.lang.Class<? extends com.github.javaparser.ast.Node>, java.lang.String)"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.is(java.lang.String)"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getSetterMethodName()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName()"], ["com.github.javaparser.metamodel.BaseNodeMetaModel", "com.github.javaparser.metamodel.PropertyMetaModel.getContainingNodeMetaModel()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getName()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isNonEmpty()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isOptional()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isRequired()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isNodeList()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.hasWildcard()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isSingular()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.toString()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.equals(java.lang.Object)"], ["int", "com.github.javaparser.metamodel.PropertyMetaModel.hashCode()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeName()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForGetter()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForSetter()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isNode()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getMetaModelFieldName()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isAttribute()"], ["java.lang.Object", "com.github.javaparser.metamodel.PropertyMetaModel.getValue(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.NodeText.remove(com.github.javaparser.printer.lexicalpreservation.TextElementMatcher, boolean)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.NodeText.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.NodeText.endWithSpace()"], ["void", "com.github.javaparser.printer.lexicalpreservation.NodeText.removeLastElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.hashCode()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isSpaceOrTab()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isNewline()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isComment()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isChildOfClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmMix", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.getElement()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmMix", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.getPreviousOrder()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmMix", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.getNextOrder()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.isAdded()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.isRemoved()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Reshuffled.getElement()"], ["com.github.javaparser.printer.DotPrinter", "com.github.javaparser.printer.DotPrinter(boolean)"], ["java.lang.String", "com.github.javaparser.printer.DotPrinter.output(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.DotPrinter.output(com.github.javaparser.ast.Node, java.lang.String, java.lang.String, java.lang.StringBuilder)"], ["com.github.javaparser.resolution.types.ResolvedReferenceType", "com.github.javaparser.resolution.types.ResolvedReferenceType(com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration)"], ["com.github.javaparser.resolution.types.ResolvedReferenceType", "com.github.javaparser.resolution.types.ResolvedReferenceType(com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration, java.util.List<com.github.javaparser.resolution.types.ResolvedType>)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedReferenceType.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.ResolvedReferenceType.hashCode()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedReferenceType.toString()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedReferenceType.isReferenceType()"], ["com.github.javaparser.resolution.types.ResolvedReferenceType", "com.github.javaparser.resolution.types.ResolvedReferenceType.asReferenceType()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedReferenceType.describe()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedReferenceType.replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType, java.util.Map<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>)"], ["java.util.List<com.github.javaparser.utils.Pair<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>>", "com.github.javaparser.resolution.types.ResolvedReferenceType.getTypeParametersMap()"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap", "com.github.javaparser.resolution.types.ResolvedReferenceType.typeParametersMap()"], ["com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration", "com.github.javaparser.resolution.types.ResolvedReferenceType.getTypeDeclaration()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedReferenceType.hasName()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedReferenceType.getQualifiedName()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedReferenceType.getId()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedReferenceType.isRawType()"], ["com.github.javaparser.resolution.types.ResolvedWildcard$BoundType[]", "com.github.javaparser.resolution.types.ResolvedWildcard$BoundType.values()"], ["com.github.javaparser.resolution.types.ResolvedWildcard$BoundType", "com.github.javaparser.resolution.types.ResolvedWildcard$BoundType.valueOf(java.lang.String)"], ["com.github.javaparser.resolution.types.ResolvedIntersectionType", "com.github.javaparser.resolution.types.ResolvedIntersectionType(java.util.Collection<com.github.javaparser.resolution.types.ResolvedType>)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedIntersectionType.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.ResolvedIntersectionType.hashCode()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedIntersectionType.describe()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedIntersectionType.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedIntersectionType.replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType, java.util.Map<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>)"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedVoidType.describe()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedVoidType.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedVoidType.isVoid()"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.Reader)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.InputStream, java.nio.charset.Charset)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.InputStream)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.File, java.nio.charset.Charset)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.File)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.nio.file.Path, java.nio.charset.Charset)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.nio.file.Path)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.lang.String)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.resourceProvider(java.lang.ClassLoader, java.lang.String, java.nio.charset.Charset)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.resourceProvider(java.lang.String, java.nio.charset.Charset)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.resourceProvider(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.GeneratedJavaParser.CompilationUnit()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.GeneratedJavaParser.PackageDeclaration()"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.GeneratedJavaParser.ImportDeclaration()"], ["com.github.javaparser.ModifierHolder", "com.github.javaparser.GeneratedJavaParser.Modifiers()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.GeneratedJavaParser.EnumDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.GeneratedJavaParser.EnumConstantDeclaration()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.GeneratedJavaParser.TypeParameter(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.GeneratedJavaParser.FieldDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.GeneratedJavaParser.VariableDeclarator(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.utils.Pair<com.github.javaparser.ast.expr.SimpleName, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>>", "com.github.javaparser.GeneratedJavaParser.VariableDeclaratorId()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.VariableInitializer()"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.GeneratedJavaParser.ArrayInitializer()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.GeneratedJavaParser.MethodDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.GeneratedJavaParser.AnnotatedReferenceType()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.AnnotatedType()"], ["com.github.javaparser.utils.Pair<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.body.ReceiverParameter>", "com.github.javaparser.GeneratedJavaParser.Parameters()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.GeneratedJavaParser.Parameter()"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.GeneratedJavaParser.ReceiverParameter()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.GeneratedJavaParser.ReceiverParameterId()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.GeneratedJavaParser.ConstructorDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.GeneratedJavaParser.ExplicitConstructorInvocation()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.GeneratedJavaParser.InitializerDeclaration()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.Type(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.GeneratedJavaParser.ReferenceType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.GeneratedJavaParser.ArrayBracketPair(com.github.javaparser.ast.type.ArrayType$Origin)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.GeneratedJavaParser.IntersectionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.GeneratedJavaParser.AnnotatedClassOrInterfaceType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.TypeArgument()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.GeneratedJavaParser.Wildcard(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.GeneratedJavaParser.PrimitiveType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.ResultType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.GeneratedJavaParser.Name()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.GeneratedJavaParser.SimpleName()"], ["java.lang.String", "com.github.javaparser.GeneratedJavaParser.Identifier()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.Expression()"], ["com.github.javaparser.ast.expr.AssignExpr$Operator", "com.github.javaparser.GeneratedJavaParser.AssignmentOperator()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ConditionalExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ConditionalOrExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ConditionalAndExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.InclusiveOrExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ExclusiveOrExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.AndExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.EqualityExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.InstanceOfExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.RelationalExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ShiftExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.AdditiveExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.MultiplicativeExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.UnaryExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PreIncrementExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PreDecrementExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.UnaryExpressionNotPlusMinus()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PostfixExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.CastExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimaryExpression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimaryExpressionWithoutSuperSuffix()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimaryPrefix()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimarySuffix(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimarySuffixWithoutSuper(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.Literal()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.BooleanLiteral()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.NullLiteral()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.AllocationExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.GeneratedJavaParser.ArrayCreation(com.github.javaparser.JavaToken, com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.Statement()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.GeneratedJavaParser.AssertStatement()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.GeneratedJavaParser.LabeledStatement()"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.GeneratedJavaParser.Block()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.BlockStatement()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.GeneratedJavaParser.VariableDeclarationExpression()"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.GeneratedJavaParser.EmptyStatement()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.LambdaBody()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.GeneratedJavaParser.StatementExpression()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.GeneratedJavaParser.SwitchStatement()"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.GeneratedJavaParser.SwitchExpression()"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.GeneratedJavaParser.SwitchEntry()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.GeneratedJavaParser.IfStatement()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.GeneratedJavaParser.WhileStatement()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.GeneratedJavaParser.DoStatement()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.ForStatement()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.GeneratedJavaParser.BreakStatement()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.GeneratedJavaParser.ContinueStatement()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.GeneratedJavaParser.ReturnStatement()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.GeneratedJavaParser.ThrowStatement()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.GeneratedJavaParser.SynchronizedStatement()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.GeneratedJavaParser.TryStatement()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.Resource()"], ["void", "com.github.javaparser.GeneratedJavaParser.RUNSIGNEDSHIFT()"], ["void", "com.github.javaparser.GeneratedJavaParser.RSIGNEDSHIFT()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.GeneratedJavaParser.Annotation()"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.GeneratedJavaParser.MemberValuePair()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.MemberValue()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.MemberValueArrayInitializer()"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.GeneratedJavaParser.AnnotationTypeDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.GeneratedJavaParser.AnnotationTypeMemberDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.DefaultValue()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.GeneratedJavaParser.ModuleDirective()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.GeneratedJavaParser.ModuleDeclaration(com.github.javaparser.ModifierHolder)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.GeneratedJavaParser.BlockParseStart()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.BlockStatementParseStart()"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.GeneratedJavaParser.ImportDeclarationParseStart()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ExpressionParseStart()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.GeneratedJavaParser.AnnotationParseStart()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceTypeParseStart()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.ResultTypeParseStart()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.GeneratedJavaParser.VariableDeclarationExpressionParseStart()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.GeneratedJavaParser.ExplicitConstructorInvocationParseStart()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.GeneratedJavaParser.NameParseStart()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.GeneratedJavaParser.SimpleNameParseStart()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.GeneratedJavaParser.ParameterParseStart()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.GeneratedJavaParser.PackageDeclarationParseStart()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.GeneratedJavaParser.ModuleDeclarationParseStart()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.GeneratedJavaParser.ModuleDirectiveParseStart()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.GeneratedJavaParser.TypeParameterParseStart()"], ["com.github.javaparser.GeneratedJavaParser", "com.github.javaparser.GeneratedJavaParser(com.github.javaparser.Provider)"], ["com.github.javaparser.GeneratedJavaParser", "com.github.javaparser.GeneratedJavaParser(java.lang.String)"], ["void", "com.github.javaparser.GeneratedJavaParser.ReInit(java.lang.String)"], ["void", "com.github.javaparser.GeneratedJavaParser.ReInit(com.github.javaparser.Provider)"], ["com.github.javaparser.GeneratedJavaParser", "com.github.javaparser.GeneratedJavaParser(com.github.javaparser.GeneratedJavaParserTokenManager)"], ["void", "com.github.javaparser.GeneratedJavaParser.ReInit(com.github.javaparser.GeneratedJavaParserTokenManager)"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParser.getNextToken()"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParser.getToken(int)"], ["com.github.javaparser.ParseException", "com.github.javaparser.GeneratedJavaParser.generateParseException()"], ["boolean", "com.github.javaparser.GeneratedJavaParser.trace_enabled()"], ["void", "com.github.javaparser.GeneratedJavaParser.enable_tracing()"], ["void", "com.github.javaparser.GeneratedJavaParser.disable_tracing()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, java.lang.String, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.body.ReceiverParameter)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.body.ReceiverParameter)"], ["<R, A> R", "com.github.javaparser.ast.body.MethodDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.MethodDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.MethodDeclaration.getType()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["java.lang.String", "com.github.javaparser.ast.body.MethodDeclaration.getDeclarationAsString(boolean, boolean, boolean)"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isNative()"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isSynchronized()"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isDefault()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setNative(boolean)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setSynchronized(boolean)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setDefault(boolean)"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.removeBody()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.clone()"], ["com.github.javaparser.metamodel.MethodDeclarationMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isMethodDeclaration()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.asMethodDeclaration()"], ["void", "com.github.javaparser.ast.body.MethodDeclaration.ifMethodDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.MethodDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.resolve()"], ["com.github.javaparser.metamodel.CallableDeclarationMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.clone()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.MethodDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.removeBody()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["java.lang.Object", "com.github.javaparser.ast.body.MethodDeclaration.resolve()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.body.VariableDeclarator.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.VariableDeclarator.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.VariableDeclarator.getName()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setInitializer(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setInitializer(java.lang.String)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.VariableDeclarator.getType()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.body.VariableDeclarator.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.removeInitializer()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.clone()"], ["com.github.javaparser.metamodel.VariableDeclaratorMetaModel", "com.github.javaparser.ast.body.VariableDeclarator.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.VariableDeclarator.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.resolution.declarations.ResolvedValueDeclaration", "com.github.javaparser.ast.body.VariableDeclarator.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.VariableDeclarator.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.VariableDeclarator.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.VariableDeclarator.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.VariableDeclarator.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.VariableDeclarator.setName(com.github.javaparser.ast.expr.SimpleName)"], ["java.lang.Object", "com.github.javaparser.ast.body.VariableDeclarator.resolve()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.EnumConstantDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.EnumConstantDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.EnumConstantDeclaration.getName()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.setClassBody(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.body.EnumConstantDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()"], ["com.github.javaparser.metamodel.EnumConstantDeclarationMetaModel", "com.github.javaparser.ast.body.EnumConstantDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.EnumConstantDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.EnumConstantDeclaration.isEnumConstantDeclaration()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.asEnumConstantDeclaration()"], ["void", "com.github.javaparser.ast.body.EnumConstantDeclaration.ifEnumConstantDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.EnumConstantDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.resolve()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.EnumConstantDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.EnumConstantDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumConstantDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumConstantDeclaration.setArguments(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.body.EnumConstantDeclaration.resolve()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getName()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getType()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.removeDefaultValue()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setDefaultValue(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()"], ["com.github.javaparser.metamodel.AnnotationMemberDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.isAnnotationMemberDeclaration()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.asAnnotationMemberDeclaration()"], ["void", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.ifAnnotationMemberDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.AnnotationMemberDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedAnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.resolve()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.resolve()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, boolean, java.lang.String)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setExtendedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setInterface(boolean)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isLocalClassDeclaration()"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInnerClass()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()"], ["com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isClassOrInterfaceDeclaration()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.asClassOrInterfaceDeclaration()"], ["void", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.ifClassOrInterfaceDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve()"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setExtendedTypes(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.resolve()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.Parameter.getType()"], ["boolean", "com.github.javaparser.ast.body.Parameter.isVarArgs()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setVarArgs(boolean)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.Parameter.getName()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["boolean", "com.github.javaparser.ast.body.Parameter.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setVarArgsAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.clone()"], ["com.github.javaparser.metamodel.ParameterMetaModel", "com.github.javaparser.ast.body.Parameter.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.Parameter.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration", "com.github.javaparser.ast.body.Parameter.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.Parameter.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.Parameter.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setModifiers(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.body.Parameter.resolve()"], ["void", "com.github.javaparser.ast.body.VariableDeclarator$1.propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration(boolean, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration(com.github.javaparser.TokenRange, boolean, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.body.InitializerDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.InitializerDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.body.InitializerDeclaration.getBody()"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.isStatic()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.setStatic(boolean)"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.clone()"], ["com.github.javaparser.metamodel.InitializerDeclarationMetaModel", "com.github.javaparser.ast.body.InitializerDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.isInitializerDeclaration()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.asInitializerDeclaration()"], ["void", "com.github.javaparser.ast.body.InitializerDeclaration.ifInitializerDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.InitializerDeclaration>)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.InitializerDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.InitializerDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.InitializerDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.InitializerDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.InitializerDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.BodyDeclaration()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.BodyDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.BodyDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["T", "com.github.javaparser.ast.body.BodyDeclaration.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.BodyDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isAnnotationDeclaration()"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asAnnotationDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isAnnotationMemberDeclaration()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asAnnotationMemberDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isCallableDeclaration()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asCallableDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isClassOrInterfaceDeclaration()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asClassOrInterfaceDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isConstructorDeclaration()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asConstructorDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isEnumConstantDeclaration()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asEnumConstantDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isEnumDeclaration()"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asEnumDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isFieldDeclaration()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asFieldDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isInitializerDeclaration()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asInitializerDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isMethodDeclaration()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asMethodDeclaration()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.isTypeDeclaration()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.BodyDeclaration.asTypeDeclaration()"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifAnnotationDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.AnnotationDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifAnnotationMemberDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.AnnotationMemberDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifCallableDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.CallableDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifClassOrInterfaceDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifConstructorDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.ConstructorDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifEnumConstantDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.EnumConstantDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifEnumDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.EnumDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifFieldDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.FieldDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifInitializerDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.InitializerDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifMethodDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.MethodDeclaration>)"], ["void", "com.github.javaparser.ast.body.BodyDeclaration.ifTypeDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.TypeDeclaration>)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.BodyDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.BodyDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.BodyDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.BodyDeclaration.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.nio.file.Path", "com.github.javaparser.ast.CompilationUnit$Storage.getPath()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit$Storage.getCompilationUnit()"], ["java.nio.file.Path", "com.github.javaparser.ast.CompilationUnit$Storage.getSourceRoot()"], ["java.lang.String", "com.github.javaparser.ast.CompilationUnit$Storage.getFileName()"], ["java.nio.file.Path", "com.github.javaparser.ast.CompilationUnit$Storage.getDirectory()"], ["void", "com.github.javaparser.ast.CompilationUnit$Storage.save()"], ["void", "com.github.javaparser.ast.CompilationUnit$Storage.save(java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry()"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.SwitchEntry$Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.SwitchEntry$Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.SwitchEntry.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.SwitchEntry.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry.setLabels(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry.setStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["boolean", "com.github.javaparser.ast.stmt.SwitchEntry.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry.clone()"], ["com.github.javaparser.metamodel.SwitchEntryMetaModel", "com.github.javaparser.ast.stmt.SwitchEntry.getMetaModel()"], ["com.github.javaparser.ast.stmt.SwitchEntry$Type", "com.github.javaparser.ast.stmt.SwitchEntry.getType()"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchEntry.setType(com.github.javaparser.ast.stmt.SwitchEntry$Type)"], ["boolean", "com.github.javaparser.ast.stmt.SwitchEntry.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.SwitchEntry.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SwitchEntry.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.SwitchEntry.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SwitchEntry.setStatements(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.isThis()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setThis(boolean)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.removeExpression()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()"], ["com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.isExplicitConstructorInvocationStmt()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.asExplicitConstructorInvocationStmt()"], ["void", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.ifExplicitConstructorInvocationStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt>)"], ["com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.resolve()"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setArguments(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.resolve()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.AssertStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.AssertStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.AssertStmt.getCheck()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.setCheck(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.setMessage(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.AssertStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.removeMessage()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.clone()"], ["com.github.javaparser.metamodel.AssertStmtMetaModel", "com.github.javaparser.ast.stmt.AssertStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.AssertStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.AssertStmt.isAssertStmt()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.asAssertStmt()"], ["void", "com.github.javaparser.ast.stmt.AssertStmt.ifAssertStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.AssertStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.AssertStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.AssertStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.AssertStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.AssertStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.AssertStmt.clone()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.SynchronizedStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.SynchronizedStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.SynchronizedStmt.getExpression()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.getBody()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["boolean", "com.github.javaparser.ast.stmt.SynchronizedStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()"], ["com.github.javaparser.metamodel.SynchronizedStmtMetaModel", "com.github.javaparser.ast.stmt.SynchronizedStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.SynchronizedStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.SynchronizedStmt.isSynchronizedStmt()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.asSynchronizedStmt()"], ["void", "com.github.javaparser.ast.stmt.SynchronizedStmt.ifSynchronizedStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.SynchronizedStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.SynchronizedStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.SynchronizedStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SynchronizedStmt.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SynchronizedStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.Statement()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.Statement(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.stmt.Statement.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.Statement.clone()"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.Statement.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isAssertStmt()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.Statement.asAssertStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isBlockStmt()"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.Statement.asBlockStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isBreakStmt()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.Statement.asBreakStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isContinueStmt()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.Statement.asContinueStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isDoStmt()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.Statement.asDoStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isEmptyStmt()"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.Statement.asEmptyStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isExplicitConstructorInvocationStmt()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.Statement.asExplicitConstructorInvocationStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isExpressionStmt()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.Statement.asExpressionStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isForStmt()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.Statement.asForStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isIfStmt()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.Statement.asIfStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isLabeledStmt()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.Statement.asLabeledStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isLocalClassDeclarationStmt()"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.Statement.asLocalClassDeclarationStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isReturnStmt()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.Statement.asReturnStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isSwitchStmt()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.Statement.asSwitchStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isSynchronizedStmt()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.Statement.asSynchronizedStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isThrowStmt()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.Statement.asThrowStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isTryStmt()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.Statement.asTryStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isUnparsableStmt()"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.Statement.asUnparsableStmt()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isWhileStmt()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.Statement.asWhileStmt()"], ["void", "com.github.javaparser.ast.stmt.Statement.ifAssertStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.AssertStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifBlockStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.BlockStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifBreakStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.BreakStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifContinueStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ContinueStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifDoStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.DoStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifEmptyStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.EmptyStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifExplicitConstructorInvocationStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifExpressionStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ExpressionStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifForStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ForStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifIfStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.IfStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifLabeledStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.LabeledStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifLocalClassDeclarationStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.LocalClassDeclarationStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifReturnStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ReturnStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifSwitchStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.SwitchStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifSynchronizedStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.SynchronizedStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifThrowStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ThrowStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifTryStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.TryStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifUnparsableStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.UnparsableStmt>)"], ["void", "com.github.javaparser.ast.stmt.Statement.ifWhileStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.WhileStmt>)"], ["boolean", "com.github.javaparser.ast.stmt.Statement.isForEachStmt()"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.Statement.asForEachStmt()"], ["void", "com.github.javaparser.ast.stmt.Statement.ifForEachStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ForEachStmt>)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.Statement.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.Statement.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.Statement.clone()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt(java.lang.String)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ContinueStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ContinueStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.ContinueStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.removeLabel()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.clone()"], ["com.github.javaparser.metamodel.ContinueStmtMetaModel", "com.github.javaparser.ast.stmt.ContinueStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ContinueStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ContinueStmt.isContinueStmt()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.asContinueStmt()"], ["void", "com.github.javaparser.ast.stmt.ContinueStmt.ifContinueStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ContinueStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ContinueStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ContinueStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ContinueStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ContinueStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ContinueStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ContinueStmt.removeLabel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ContinueStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt()"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.stmt.UnparsableStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.UnparsableStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.stmt.UnparsableStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()"], ["com.github.javaparser.metamodel.UnparsableStmtMetaModel", "com.github.javaparser.ast.stmt.UnparsableStmt.getMetaModel()"], ["com.github.javaparser.ast.Node$Parsedness", "com.github.javaparser.ast.stmt.UnparsableStmt.getParsed()"], ["boolean", "com.github.javaparser.ast.stmt.UnparsableStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.UnparsableStmt.isUnparsableStmt()"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt.asUnparsableStmt()"], ["void", "com.github.javaparser.ast.stmt.UnparsableStmt.ifUnparsableStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.UnparsableStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.UnparsableStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.UnparsableStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt()"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.String, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ForEachStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ForEachStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForEachStmt.getBody()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ForEachStmt.getIterable()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.stmt.ForEachStmt.getVariable()"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt.setIterable(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt.setVariable(com.github.javaparser.ast.expr.VariableDeclarationExpr)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.stmt.ForEachStmt.getVariableDeclarator()"], ["boolean", "com.github.javaparser.ast.stmt.ForEachStmt.hasFinalVariable()"], ["boolean", "com.github.javaparser.ast.stmt.ForEachStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt.clone()"], ["boolean", "com.github.javaparser.ast.stmt.ForEachStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ForEachStmt.isForEachStmt()"], ["com.github.javaparser.ast.stmt.ForEachStmt", "com.github.javaparser.ast.stmt.ForEachStmt.asForEachStmt()"], ["void", "com.github.javaparser.ast.stmt.ForEachStmt.ifForEachStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ForEachStmt>)"], ["com.github.javaparser.metamodel.ForEachStmtMetaModel", "com.github.javaparser.ast.stmt.ForEachStmt.getMetaModel()"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ForEachStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForEachStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ForEachStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForEachStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ForEachStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForEachStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt(java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ReturnStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ReturnStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ReturnStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.removeExpression()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.clone()"], ["com.github.javaparser.metamodel.ReturnStmtMetaModel", "com.github.javaparser.ast.stmt.ReturnStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ReturnStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ReturnStmt.isReturnStmt()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.asReturnStmt()"], ["void", "com.github.javaparser.ast.stmt.ReturnStmt.ifReturnStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ReturnStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ReturnStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ReturnStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ReturnStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ReturnStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ReturnStmt.clone()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.IfStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.IfStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.IfStmt.getCondition()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.IfStmt.getThenStmt()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.setElseStmt(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.setThenStmt(com.github.javaparser.ast.stmt.Statement)"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.removeElseStmt()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.hasThenBlock()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.hasElseBlock()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.hasCascadingIfStmt()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.hasElseBranch()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.clone()"], ["com.github.javaparser.metamodel.IfStmtMetaModel", "com.github.javaparser.ast.stmt.IfStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.isIfStmt()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.asIfStmt()"], ["void", "com.github.javaparser.ast.stmt.IfStmt.ifIfStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.IfStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.IfStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.IfStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.IfStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.IfStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.IfStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.IfStmt.setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt(java.lang.String)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.BreakStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.BreakStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.setValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.BreakStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.removeValue()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.clone()"], ["com.github.javaparser.metamodel.BreakStmtMetaModel", "com.github.javaparser.ast.stmt.BreakStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.BreakStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.BreakStmt.isBreakStmt()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.asBreakStmt()"], ["void", "com.github.javaparser.ast.stmt.BreakStmt.ifBreakStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.BreakStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.BreakStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.BreakStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.BreakStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.BreakStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.BreakStmt.clone()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ForStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ForStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForStmt.getBody()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setCompare(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setInitialization(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setUpdate(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["boolean", "com.github.javaparser.ast.stmt.ForStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.removeCompare()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.clone()"], ["com.github.javaparser.metamodel.ForStmtMetaModel", "com.github.javaparser.ast.stmt.ForStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ForStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ForStmt.isForStmt()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.asForStmt()"], ["void", "com.github.javaparser.ast.stmt.ForStmt.ifForStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ForStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ForStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ForStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ForStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment(java.lang.String)"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.comments.JavadocComment.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.comments.JavadocComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.ast.comments.JavadocComment.parse()"], ["boolean", "com.github.javaparser.ast.comments.JavadocComment.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment.clone()"], ["com.github.javaparser.metamodel.JavadocCommentMetaModel", "com.github.javaparser.ast.comments.JavadocComment.getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.JavadocComment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.comments.JavadocComment.isJavadocComment()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment.asJavadocComment()"], ["void", "com.github.javaparser.ast.comments.JavadocComment.ifJavadocComment(java.util.function.Consumer<com.github.javaparser.ast.comments.JavadocComment>)"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.JavadocComment.getMetaModel()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.JavadocComment.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.JavadocComment.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.JavadocComment.clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.JavadocComment.clone()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment(java.lang.String)"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment(com.github.javaparser.TokenRange, java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.comments.Comment.getContent()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment.setContent(java.lang.String)"], ["boolean", "com.github.javaparser.ast.comments.Comment.isLineComment()"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.Comment.asLineComment()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment.setCommentedNode(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.comments.Comment.isOrphan()"], ["boolean", "com.github.javaparser.ast.comments.Comment.remove()"], ["boolean", "com.github.javaparser.ast.comments.Comment.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment.clone()"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.Comment.getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.Comment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.comments.Comment.isBlockComment()"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.Comment.asBlockComment()"], ["boolean", "com.github.javaparser.ast.comments.Comment.isJavadocComment()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.Comment.asJavadocComment()"], ["void", "com.github.javaparser.ast.comments.Comment.ifBlockComment(java.util.function.Consumer<com.github.javaparser.ast.comments.BlockComment>)"], ["void", "com.github.javaparser.ast.comments.Comment.ifJavadocComment(java.util.function.Consumer<com.github.javaparser.ast.comments.JavadocComment>)"], ["void", "com.github.javaparser.ast.comments.Comment.ifLineComment(java.util.function.Consumer<com.github.javaparser.ast.comments.LineComment>)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.Comment.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.Comment.clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.Comment.clone()"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment()"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment(java.lang.String)"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.comments.LineComment.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.comments.LineComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.comments.LineComment.isLineComment()"], ["boolean", "com.github.javaparser.ast.comments.LineComment.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment.clone()"], ["com.github.javaparser.metamodel.LineCommentMetaModel", "com.github.javaparser.ast.comments.LineComment.getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.LineComment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment.asLineComment()"], ["void", "com.github.javaparser.ast.comments.LineComment.ifLineComment(java.util.function.Consumer<com.github.javaparser.ast.comments.LineComment>)"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.LineComment.getMetaModel()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.LineComment.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.LineComment.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.LineComment.clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.LineComment.clone()"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators(com.github.javaparser.ast.validator.Validator...)"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators.remove(com.github.javaparser.ast.validator.Validator)"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators.replace(com.github.javaparser.ast.validator.Validator, com.github.javaparser.ast.validator.Validator)"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators.add(com.github.javaparser.ast.validator.Validator)"], ["void", "com.github.javaparser.ast.validator.Validators.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.Validators.accept(java.lang.Object, java.lang.Object)"], ["boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.equals(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.VarType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.Modifier, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor()"], ["int", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.hashCode(com.github.javaparser.ast.Node)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Void)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityHashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.ModifierVisitor", "com.github.javaparser.ast.visitor.ModifierVisitor()"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.CompilationUnit, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.Parameter, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.Name, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ArrayType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnionType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnknownType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.VoidType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.WildcardType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.NodeList, A)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.LineComment, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.VarType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.Modifier, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, A)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.MethodReferenceExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MethodReferenceExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MethodReferenceExpr.getScope()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.lang.String", "com.github.javaparser.ast.expr.MethodReferenceExpr.getIdentifier()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.setIdentifier(java.lang.String)"], ["boolean", "com.github.javaparser.ast.expr.MethodReferenceExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()"], ["com.github.javaparser.metamodel.MethodReferenceExprMetaModel", "com.github.javaparser.ast.expr.MethodReferenceExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MethodReferenceExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.MethodReferenceExpr.isMethodReferenceExpr()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.asMethodReferenceExpr()"], ["void", "com.github.javaparser.ast.expr.MethodReferenceExpr.ifMethodReferenceExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.MethodReferenceExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.MethodReferenceExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MethodReferenceExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodReferenceExpr.setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodReferenceExpr.setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr()"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.StringLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.StringLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.StringLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.setEscapedValue(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.StringLiteralExpr.asString()"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.setString(java.lang.String)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()"], ["com.github.javaparser.metamodel.StringLiteralExprMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.StringLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.StringLiteralExpr.isStringLiteralExpr()"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.asStringLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.StringLiteralExpr.ifStringLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.StringLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExpression.N setExpression(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.Statement getStatement(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N setStatement(int, com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(int, com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(int, com.github.javaparser.ast.expr.Expression)"], ["<A extends com.github.javaparser.ast.stmt.Statement> A", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.addAndGetStatement(A)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.Statement addAndGetStatement(int, com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.ExpressionStmt addAndGetStatement(com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.ExpressionStmt addAndGetStatement(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.boolean isEmpty()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N copyStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N copyStatements(com.github.javaparser.ast.nodeTypes.NodeWithStatements<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.com.github.javaparser.ast.type.TypeParameter getTypeParameter(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N setTypeParameter(int, com.github.javaparser.ast.type.TypeParameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N addTypeParameter(com.github.javaparser.ast.type.TypeParameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N addTypeParameter(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.boolean isGeneric()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.com.github.javaparser.ast.type.ClassOrInterfaceType getExtendedTypes(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N setExtendedType(int, com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtendedType(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtends(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtends(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtendedType(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtendedType(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(com.github.javaparser.ast.comments.JavadocComment)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(java.lang.String, com.github.javaparser.javadoc.Javadoc)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(com.github.javaparser.javadoc.Javadoc)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.boolean removeJavaDocComment()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.boolean hasJavaDocComment()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.com.github.javaparser.ast.type.ReferenceType getThrownException(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N addThrownException(com.github.javaparser.ast.type.ReferenceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N addThrownException(java.lang.Class<? extends java.lang.Throwable>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.boolean isThrown(java.lang.Class<? extends java.lang.Throwable>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.boolean isThrown(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.boolean isProtected()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.N setProtected(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier.boolean isAbstract()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier.N setAbstract(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier.boolean isFinal()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier.N setFinal(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.SwitchNode.boolean isEmpty()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.boolean isUsingDiamondOperator()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.N setDiamondOperator()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.N removeTypeArguments()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.N setTypeArguments(com.github.javaparser.ast.type.Type...)"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException(com.github.javaparser.Token, int[][], java.lang.String[])"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException(com.github.javaparser.Token, int[][], java.lang.String[], java.lang.String)"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException()"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocSnippet", "com.github.javaparser.javadoc.description.JavadocSnippet(java.lang.String)"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocSnippet.toText()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocSnippet.equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.description.JavadocSnippet.hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocSnippet.toString()"], ["com.github.javaparser.javadoc.JavadocBlockTag$Type[]", "com.github.javaparser.javadoc.JavadocBlockTag$Type.values()"], ["com.github.javaparser.javadoc.JavadocBlockTag$Type", "com.github.javaparser.javadoc.JavadocBlockTag$Type.valueOf(java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc(com.github.javaparser.javadoc.description.JavadocDescription)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(com.github.javaparser.javadoc.JavadocBlockTag)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(java.lang.String, java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(java.lang.String)"], ["java.lang.String", "com.github.javaparser.javadoc.Javadoc.toText()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.javadoc.Javadoc.toComment()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.javadoc.Javadoc.toComment(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.Javadoc.getDescription()"], ["boolean", "com.github.javaparser.javadoc.Javadoc.equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.Javadoc.hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.Javadoc.toString()"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.setStoreTokens(boolean)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.setDebugStream(java.io.PrintStream)"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParserTokenManager.getNextToken()"], ["com.github.javaparser.GeneratedJavaParserTokenManager", "com.github.javaparser.GeneratedJavaParserTokenManager(com.github.javaparser.SimpleCharStream)"], ["com.github.javaparser.GeneratedJavaParserTokenManager", "com.github.javaparser.GeneratedJavaParserTokenManager(com.github.javaparser.SimpleCharStream, int)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.ReInit(com.github.javaparser.SimpleCharStream)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.ReInit(com.github.javaparser.SimpleCharStream, int)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.SwitchTo(int)"], ["com.github.javaparser.JavaParser", "com.github.javaparser.JavaParser()"], ["com.github.javaparser.JavaParser", "com.github.javaparser.JavaParser(com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.JavaParser.getParserConfiguration()"], ["<N extends com.github.javaparser.ast.Node> com.github.javaparser.ParseResult<N>", "com.github.javaparser.JavaParser.parse(com.github.javaparser.ParseStart<N>, com.github.javaparser.Provider)"], ["<T extends com.github.javaparser.ast.expr.Expression> com.github.javaparser.ParseResult<T>", "com.github.javaparser.JavaParser.parseExpression(java.lang.String)"], ["com.github.javaparser.Range", "com.github.javaparser.Range(com.github.javaparser.Position, com.github.javaparser.Position)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.range(com.github.javaparser.Position, com.github.javaparser.Position)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.range(int, int, int, int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withBeginColumn(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withBeginLine(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withEndColumn(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withEndLine(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withBegin(com.github.javaparser.Position)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withEnd(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Range.contains(com.github.javaparser.Range)"], ["boolean", "com.github.javaparser.Range.strictlyContains(com.github.javaparser.Range)"], ["boolean", "com.github.javaparser.Range.isBefore(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Range.isAfter(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Range.equals(java.lang.Object)"], ["int", "com.github.javaparser.Range.hashCode()"], ["java.lang.String", "com.github.javaparser.Range.toString()"], ["int", "com.github.javaparser.Range.getLineCount()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.StaticJavaParser.getConfiguration()"], ["void", "com.github.javaparser.StaticJavaParser.setConfiguration(com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.io.InputStream, java.nio.charset.Charset)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.io.InputStream)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.io.File, java.nio.charset.Charset)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.io.File)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.nio.file.Path, java.nio.charset.Charset)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.nio.file.Path)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parseResource(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parseResource(java.lang.String, java.nio.charset.Charset)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parseResource(java.lang.ClassLoader, java.lang.String, java.nio.charset.Charset)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.io.Reader)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.StaticJavaParser.parse(java.lang.String)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.StaticJavaParser.parseBlock(java.lang.String)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.StaticJavaParser.parseStatement(java.lang.String)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.StaticJavaParser.parseImport(java.lang.String)"], ["<T extends com.github.javaparser.ast.expr.Expression> T", "com.github.javaparser.StaticJavaParser.parseExpression(java.lang.String)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.StaticJavaParser.parseAnnotation(java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType(java.lang.String)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.StaticJavaParser.parseType(java.lang.String)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.StaticJavaParser.parseVariableDeclarationExpr(java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.StaticJavaParser.parseJavadoc(java.lang.String)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.StaticJavaParser.parseExplicitConstructorInvocationStmt(java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.StaticJavaParser.parseName(java.lang.String)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.StaticJavaParser.parseSimpleName(java.lang.String)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.StaticJavaParser.parseParameter(java.lang.String)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.StaticJavaParser.parsePackageDeclaration(java.lang.String)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.StaticJavaParser.parseModuleDeclaration(java.lang.String)"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.StaticJavaParser.parseModuleDirective(java.lang.String)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.StaticJavaParser.parseTypeParameter(java.lang.String)"], ["java.lang.String", "com.github.javaparser.TokenMgrException.getMessage()"], ["com.github.javaparser.TokenMgrException", "com.github.javaparser.TokenMgrException()"], ["com.github.javaparser.TokenMgrException", "com.github.javaparser.TokenMgrException(java.lang.String, int)"], ["com.github.javaparser.TokenMgrException", "com.github.javaparser.TokenMgrException(boolean, int, int, int, java.lang.String, int, int)"], ["com.github.javaparser.ParseProblemException", "com.github.javaparser.ParseProblemException(java.util.List<com.github.javaparser.Problem>)"], ["com.github.javaparser.ParseProblemException", "com.github.javaparser.ParseProblemException(java.lang.Throwable)"], ["java.lang.Object", "com.github.javaparser.Token.getValue()"], ["com.github.javaparser.Token", "com.github.javaparser.Token()"], ["com.github.javaparser.Token", "com.github.javaparser.Token(int)"], ["com.github.javaparser.Token", "com.github.javaparser.Token(int, java.lang.String)"], ["java.lang.String", "com.github.javaparser.Token.toString()"], ["com.github.javaparser.Token", "com.github.javaparser.Token.newToken(int, java.lang.String)"], ["com.github.javaparser.Token", "com.github.javaparser.Token.newToken(int)"], ["com.github.javaparser.printer.YamlPrinter", "com.github.javaparser.printer.YamlPrinter(boolean)"], ["java.lang.String", "com.github.javaparser.printer.YamlPrinter.output(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.YamlPrinter.output(com.github.javaparser.ast.Node, java.lang.String, int, java.lang.StringBuilder)"], ["com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator", "com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator(int)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator.hasNext()"], ["java.lang.Integer", "com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator.next()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.WrappingRangeIterator.next()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Removed.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Removed.hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Removed.getElement()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.printer.lexicalpreservation.Removed.getChild()"], ["int", "com.github.javaparser.printer.lexicalpreservation.Removed.getTokenType()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isAdded()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isToken()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isChild()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isPrimitiveType()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isRemoved()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Removed.isNewLine()"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$2.process(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.PhantomNodeLogic$1.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.RemovedGroup", "com.github.javaparser.printer.lexicalpreservation.RemovedGroup.of(java.lang.Integer, java.util.List<com.github.javaparser.printer.lexicalpreservation.Removed>)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Added.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Added.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Added.hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Added.getElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Added.isAdded()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Added.isRemoved()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Added.isIndent()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Added.isUnindent()"], ["com.github.javaparser.printer.lexicalpreservation.TextElement", "com.github.javaparser.printer.lexicalpreservation.Added.toTextElement()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.getToken()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.hashCode()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isSpaceOrTab()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isComment()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isNewline()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isChildOfClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$ComposedIterator.hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$ComposedIterator.next()"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$ComposedIterator.remove()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Kept.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Kept.hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Kept.getElement()"], ["int", "com.github.javaparser.printer.lexicalpreservation.Kept.getTokenType()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isAdded()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isIndent()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isUnindent()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isToken()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isChild()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isPrimitiveType()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isWhiteSpaceOrComment()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isNewLine()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Kept.isRemoved()"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.indent()"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.indentWithAlignTo(int)"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.unindent()"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.print(java.lang.String)"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.println(java.lang.String)"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.println()"], ["com.github.javaparser.Position", "com.github.javaparser.printer.SourcePrinter.getCursor()"], ["java.lang.String", "com.github.javaparser.printer.SourcePrinter.getSource()"], ["java.lang.String", "com.github.javaparser.printer.SourcePrinter.toString()"], ["java.lang.String", "com.github.javaparser.printer.SourcePrinter.normalizeEolInTextBlock(java.lang.String)"], ["void", "com.github.javaparser.printer.SourcePrinter.reindentWithAlignToCursor()"], ["void", "com.github.javaparser.printer.SourcePrinter.reindentToPreviousLevel()"], ["void", "com.github.javaparser.printer.SourcePrinter.duplicateIndent()"], ["com.github.javaparser.printer.XmlPrinter", "com.github.javaparser.printer.XmlPrinter(boolean)"], ["java.lang.String", "com.github.javaparser.printer.XmlPrinter.output(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.XmlPrinter.output(com.github.javaparser.ast.Node, java.lang.String, int, java.lang.StringBuilder)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration()"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrinterConfiguration.getIndent()"], ["int", "com.github.javaparser.printer.PrettyPrinterConfiguration.getIndentSize()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setIndentSize(int)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration$IndentType", "com.github.javaparser.printer.PrettyPrinterConfiguration.getIndentType()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setIndentType(com.github.javaparser.printer.PrettyPrinterConfiguration$IndentType)"], ["int", "com.github.javaparser.printer.PrettyPrinterConfiguration.getTabWidth()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setTabWidth(int)"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isOrderImports()"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isPrintComments()"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isIgnoreComments()"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isPrintJavadoc()"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isColumnAlignParameters()"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isColumnAlignFirstMethodChain()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setPrintComments(boolean)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setPrintJavadoc(boolean)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setColumnAlignParameters(boolean)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setColumnAlignFirstMethodChain(boolean)"], ["java.util.function.Function<com.github.javaparser.printer.PrettyPrinterConfiguration, com.github.javaparser.ast.visitor.VoidVisitor<java.lang.Void>>", "com.github.javaparser.printer.PrettyPrinterConfiguration.getVisitorFactory()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setVisitorFactory(java.util.function.Function<com.github.javaparser.printer.PrettyPrinterConfiguration, com.github.javaparser.ast.visitor.VoidVisitor<java.lang.Void>>)"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrinterConfiguration.getEndOfLineCharacter()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setEndOfLineCharacter(java.lang.String)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setOrderImports(boolean)"], ["int", "com.github.javaparser.printer.PrettyPrinterConfiguration.getMaxEnumConstantsToAlignHorizontally()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setMaxEnumConstantsToAlignHorizontally(int)"], ["void", "com.github.javaparser.printer.ConcreteSyntaxModel.genericPrettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.ConcreteSyntaxModel.genericPrettyPrint(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.ConcreteSyntaxModel.forClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration$IndentType[]", "com.github.javaparser.printer.PrettyPrinterConfiguration$IndentType.values()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration$IndentType", "com.github.javaparser.printer.PrettyPrinterConfiguration$IndentType.valueOf(java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmSequence", "com.github.javaparser.printer.concretesyntaxmodel.CsmSequence(java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmSequence.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmMix", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix(java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.hashCode()"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.toString()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding", "com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition[]", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition.values()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition.valueOf(java.lang.String)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getSeparatorPost()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getSeparatorPre()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getPreceeding()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getFollowing()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmList", "com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmList", "com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmList", "com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmNone", "com.github.javaparser.printer.concretesyntaxmodel.CsmNone()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmNone.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent.hashCode()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent.equals(java.lang.Object)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmIndent", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent.hashCode()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent.equals(java.lang.Object)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute.getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute.getTokenType(com.github.javaparser.ast.Node, java.lang.String, java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getCondition()"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getThenElement()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getElseElement()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(java.util.List<com.github.javaparser.ast.observer.ObservableProperty>, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.getTokenType()"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.getContent(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmToken", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmToken", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int, java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmToken", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int, com.github.javaparser.printer.concretesyntaxmodel.CsmToken$TokenContentCalculator)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.toString()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.hashCode()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.isNewLine()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmChar", "com.github.javaparser.printer.concretesyntaxmodel.CsmChar(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmChar.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference.getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference", "com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmString", "com.github.javaparser.printer.concretesyntaxmodel.CsmString(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmString.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmString.toString()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.child(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.attribute(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.sequence(com.github.javaparser.printer.concretesyntaxmodel.CsmElement...)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.string(int, java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.string(int)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.stringToken(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.charToken(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.token(int)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.token(int, com.github.javaparser.printer.concretesyntaxmodel.CsmToken$TokenContentCalculator)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.conditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.conditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.conditional(java.util.List<com.github.javaparser.ast.observer.ObservableProperty>, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.space()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.semicolon()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.comment()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.newline()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.none()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.comma()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.orphanCommentsEnding()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.orphanCommentsBeforeThis()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.indent()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.unindent()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.block(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmComment", "com.github.javaparser.printer.concretesyntaxmodel.CsmComment()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmComment.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["<N> java.util.Optional<N>", "com.github.javaparser.HasParentNode.findAncestor(java.lang.Class<N>)"], ["<N> java.util.Optional<N>", "com.github.javaparser.HasParentNode.findAncestor(java.lang.Class<N>, java.util.function.Predicate<N>)"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken(int, java.lang.String)"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken(int)"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken(com.github.javaparser.Range, int, java.lang.String, com.github.javaparser.JavaToken, com.github.javaparser.JavaToken)"], ["int", "com.github.javaparser.JavaToken.getKind()"], ["java.lang.String", "com.github.javaparser.JavaToken.getText()"], ["void", "com.github.javaparser.JavaToken.setRange(com.github.javaparser.Range)"], ["void", "com.github.javaparser.JavaToken.setText(java.lang.String)"], ["java.lang.String", "com.github.javaparser.JavaToken.asString()"], ["com.github.javaparser.TokenRange", "com.github.javaparser.JavaToken.toTokenRange()"], ["java.lang.String", "com.github.javaparser.JavaToken.toString()"], ["boolean", "com.github.javaparser.JavaToken.valid()"], ["boolean", "com.github.javaparser.JavaToken.invalid()"], ["com.github.javaparser.JavaToken$Category", "com.github.javaparser.JavaToken.getCategory()"], ["void", "com.github.javaparser.JavaToken.insert(com.github.javaparser.JavaToken)"], ["void", "com.github.javaparser.JavaToken.insertAfter(com.github.javaparser.JavaToken)"], ["void", "com.github.javaparser.JavaToken.deleteToken()"], ["void", "com.github.javaparser.JavaToken.replaceToken(com.github.javaparser.JavaToken)"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken.findLastToken()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken.findFirstToken()"], ["int", "com.github.javaparser.JavaToken.hashCode()"], ["boolean", "com.github.javaparser.JavaToken.equals(java.lang.Object)"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage(com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration)"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage(com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration, java.util.List<com.github.javaparser.resolution.types.ResolvedType>, com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage(com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration, java.util.List<com.github.javaparser.resolution.types.ResolvedType>, com.github.javaparser.resolution.types.ResolvedType, java.util.List<com.github.javaparser.resolution.types.ResolvedType>)"], ["java.lang.String", "com.github.javaparser.resolution.MethodUsage.toString()"], ["com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration", "com.github.javaparser.resolution.MethodUsage.getDeclaration()"], ["java.lang.String", "com.github.javaparser.resolution.MethodUsage.getName()"], ["com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration", "com.github.javaparser.resolution.MethodUsage.declaringType()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.MethodUsage.returnType()"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage.replaceParamType(int, com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage.replaceExceptionType(int, com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage.replaceReturnType(com.github.javaparser.resolution.types.ResolvedType)"], ["int", "com.github.javaparser.resolution.MethodUsage.getNoParams()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.MethodUsage.getParamType(int)"], ["com.github.javaparser.resolution.MethodUsage", "com.github.javaparser.resolution.MethodUsage.replaceTypeParameter(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap", "com.github.javaparser.resolution.MethodUsage.typeParametersMap()"], ["java.lang.String", "com.github.javaparser.resolution.MethodUsage.getQualifiedSignature()"], ["com.github.javaparser.resolution.UnsolvedSymbolException", "com.github.javaparser.resolution.UnsolvedSymbolException(java.lang.String)"], ["com.github.javaparser.resolution.UnsolvedSymbolException", "com.github.javaparser.resolution.UnsolvedSymbolException(java.lang.String, java.lang.String)"], ["com.github.javaparser.resolution.UnsolvedSymbolException", "com.github.javaparser.resolution.UnsolvedSymbolException(java.lang.String, java.lang.Throwable)"], ["com.github.javaparser.resolution.UnsolvedSymbolException", "com.github.javaparser.resolution.UnsolvedSymbolException(java.lang.String, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "com.github.javaparser.resolution.UnsolvedSymbolException.getName()"], ["java.lang.String", "com.github.javaparser.resolution.UnsolvedSymbolException.toString()"], ["com.github.javaparser.resolution.MethodAmbiguityException", "com.github.javaparser.resolution.MethodAmbiguityException(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedClassDeclaration.boolean isClass()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration.boolean isParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration.boolean hasName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration.com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration asParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration.java.lang.String describeType()"], ["com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.extendsBound(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.superBound(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.getType()"], ["boolean", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.isExtends()"], ["boolean", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.isSuper()"], ["java.lang.String", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.toString()"], ["boolean", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound.hashCode()"], ["com.github.javaparser.utils.StringEscapeUtils$LookupTranslator", "com.github.javaparser.utils.StringEscapeUtils$LookupTranslator(java.lang.CharSequence[]...)"], ["int", "com.github.javaparser.utils.StringEscapeUtils$LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer)"], ["com.github.javaparser.utils.ProjectRoot", "com.github.javaparser.utils.ProjectRoot(java.nio.file.Path)"], ["com.github.javaparser.utils.ProjectRoot", "com.github.javaparser.utils.ProjectRoot(java.nio.file.Path, com.github.javaparser.ParserConfiguration)"], ["void", "com.github.javaparser.utils.ProjectRoot.addSourceRoot(java.nio.file.Path)"], ["java.nio.file.Path", "com.github.javaparser.utils.ProjectRoot.getRoot()"], ["java.lang.String", "com.github.javaparser.utils.ProjectRoot.toString()"], ["java.lang.String", "com.github.javaparser.utils.StringEscapeUtils.escapeJava(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.StringEscapeUtils.unescapeJava(java.lang.String)"], ["com.github.javaparser.utils.Log$StandardOutStandardErrorAdapter", "com.github.javaparser.utils.Log$StandardOutStandardErrorAdapter()"], ["void", "com.github.javaparser.utils.Log$StandardOutStandardErrorAdapter.info(java.util.function.Supplier<java.lang.String>)"], ["void", "com.github.javaparser.utils.Log$StandardOutStandardErrorAdapter.trace(java.util.function.Supplier<java.lang.String>)"], ["void", "com.github.javaparser.utils.Log$StandardOutStandardErrorAdapter.error(java.util.function.Supplier<java.lang.Throwable>, java.util.function.Supplier<java.lang.String>)"], ["boolean", "com.github.javaparser.utils.VisitorList$1.hasNext()"], ["N", "com.github.javaparser.utils.VisitorList$1.next()"], ["void", "com.github.javaparser.utils.VisitorList$1.remove()"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList$1.next()"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.utils.PositionUtils.sortByBeginPosition(com.github.javaparser.ast.NodeList<T>)"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>, boolean)"], ["boolean", "com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.utils.PositionUtils.getLastAnnotation(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.utils.PositionUtils.nodeContains(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)"], ["<R, A> R", "com.github.javaparser.utils.VisitorSet$EqualsHashcodeOverridingFacade.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.utils.VisitorSet$EqualsHashcodeOverridingFacade.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["int", "com.github.javaparser.utils.VisitorSet$EqualsHashcodeOverridingFacade.hashCode()"], ["boolean", "com.github.javaparser.utils.VisitorSet$EqualsHashcodeOverridingFacade.equals(java.lang.Object)"], ["int", "com.github.javaparser.utils.StringEscapeUtils$OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)"], ["com.github.javaparser.utils.Pair", "com.github.javaparser.utils.Pair(A, B)"], ["boolean", "com.github.javaparser.utils.Pair.equals(java.lang.Object)"], ["int", "com.github.javaparser.utils.Pair.hashCode()"], ["java.lang.String", "com.github.javaparser.utils.Pair.toString()"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot(java.nio.file.Path)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot(java.nio.file.Path, com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, java.lang.String)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, java.lang.String, com.github.javaparser.ParserConfiguration, com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, java.lang.String, com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, com.github.javaparser.ParserConfiguration, com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parseParallelized(java.lang.String, com.github.javaparser.ParserConfiguration, com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parseParallelized(java.lang.String, com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parseParallelized(com.github.javaparser.utils.SourceRoot$Callback)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.add(java.lang.String, java.lang.String, com.github.javaparser.ast.CompilationUnit)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.add(com.github.javaparser.ast.CompilationUnit)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.saveAll(java.nio.file.Path)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.saveAll()"], ["java.nio.file.Path", "com.github.javaparser.utils.SourceRoot.getRoot()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.utils.SourceRoot.getParserConfiguration()"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.setParserConfiguration(com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.setPrinter(java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>)"], ["java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>", "com.github.javaparser.utils.SourceRoot.getPrinter()"], ["java.lang.String", "com.github.javaparser.utils.SourceRoot.toString()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.CallableDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.body.ReceiverParameter)"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.CallableDeclaration.getName()"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.CallableDeclaration$Signature", "com.github.javaparser.ast.body.CallableDeclaration.getSignature()"], ["com.github.javaparser.metamodel.CallableDeclarationMetaModel", "com.github.javaparser.ast.body.CallableDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration.isCallableDeclaration()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.CallableDeclaration.asCallableDeclaration()"], ["void", "com.github.javaparser.ast.body.CallableDeclaration.ifCallableDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.CallableDeclaration>)"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setReceiverParameter(com.github.javaparser.ast.body.ReceiverParameter)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.CallableDeclaration.removeReceiverParameter()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.CallableDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.CallableDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.CallableDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.CallableDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.addMember(com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.setMembers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.TypeDeclaration.getName()"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.isTopLevelType()"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.isNestedType()"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.TypeDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.isTypeDeclaration()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration.asTypeDeclaration()"], ["void", "com.github.javaparser.ast.body.TypeDeclaration.ifTypeDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.TypeDeclaration>)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.TypeDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.TypeDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.TypeDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.TypeDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.setMembers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.addMember(com.github.javaparser.ast.body.BodyDeclaration)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration()"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.EnumDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.EnumDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.getEntry(int)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.setEntry(int, com.github.javaparser.ast.body.EnumConstantDeclaration)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.addEntry(com.github.javaparser.ast.body.EnumConstantDeclaration)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.addEnumConstant(java.lang.String)"], ["boolean", "com.github.javaparser.ast.body.EnumDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.clone()"], ["com.github.javaparser.metamodel.EnumDeclarationMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.EnumDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.EnumDeclaration.isEnumDeclaration()"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.asEnumDeclaration()"], ["void", "com.github.javaparser.ast.body.EnumDeclaration.ifEnumDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.EnumDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.resolve()"], ["com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.resolve()"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.EnumDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.body.EnumDeclaration.resolve()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.body.ReceiverParameter)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.body.ReceiverParameter)"], ["<R, A> R", "com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.body.ConstructorDeclaration.getBody()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["java.lang.String", "com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean, boolean)"], ["boolean", "com.github.javaparser.ast.body.ConstructorDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()"], ["com.github.javaparser.metamodel.ConstructorDeclarationMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.ConstructorDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.ConstructorDeclaration.isConstructorDeclaration()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.asConstructorDeclaration()"], ["void", "com.github.javaparser.ast.body.ConstructorDeclaration.ifConstructorDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.ConstructorDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.resolve()"], ["com.github.javaparser.metamodel.CallableDeclarationMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["java.lang.Object", "com.github.javaparser.ast.body.ConstructorDeclaration.resolve()"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration()"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.AnnotationDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.AnnotationDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.body.AnnotationDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()"], ["com.github.javaparser.metamodel.AnnotationDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.AnnotationDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.AnnotationDeclaration.isAnnotationDeclaration()"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.asAnnotationDeclaration()"], ["void", "com.github.javaparser.ast.body.AnnotationDeclaration.ifAnnotationDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.AnnotationDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedAnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.resolve()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.addField(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.resolve()"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.AnnotationDeclaration.resolve()"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration$Signature.getName()"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration$Signature.equals(java.lang.Object)"], ["int", "com.github.javaparser.ast.body.CallableDeclaration$Signature.hashCode()"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration$Signature.asString()"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration$Signature.toString()"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter()"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.body.ReceiverParameter.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.ReceiverParameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.ReceiverParameter.getType()"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter.clone()"], ["com.github.javaparser.metamodel.ReceiverParameterMetaModel", "com.github.javaparser.ast.body.ReceiverParameter.getMetaModel()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.body.ReceiverParameter.getName()"], ["com.github.javaparser.ast.body.ReceiverParameter", "com.github.javaparser.ast.body.ReceiverParameter.setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.body.ReceiverParameter.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.ReceiverParameter.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.ReceiverParameter.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ReceiverParameter.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.ReceiverParameter.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ReceiverParameter.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ReceiverParameter.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ReceiverParameter.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.body.VariableDeclarator)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.body.FieldDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.FieldDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setVariables(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.createGetter()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.createSetter()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.isTransient()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.isVolatile()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setTransient(boolean)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setVolatile(boolean)"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.clone()"], ["com.github.javaparser.metamodel.FieldDeclarationMetaModel", "com.github.javaparser.ast.body.FieldDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.isFieldDeclaration()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.asFieldDeclaration()"], ["void", "com.github.javaparser.ast.body.FieldDeclaration.ifFieldDeclaration(java.util.function.Consumer<com.github.javaparser.ast.body.FieldDeclaration>)"], ["com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.resolve()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.FieldDeclaration.getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.FieldDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.FieldDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.FieldDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.FieldDeclaration.setVariables(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.FieldDeclaration.setModifiers(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.body.FieldDeclaration.resolve()"], ["com.github.javaparser.ast.validator.ProblemReporter", "com.github.javaparser.ast.validator.ProblemReporter(java.util.function.Consumer<com.github.javaparser.Problem>)"], ["void", "com.github.javaparser.ast.validator.ProblemReporter.report(com.github.javaparser.ast.nodeTypes.NodeWithTokenRange<?>, java.lang.String, java.lang.Object...)"], ["void", "com.github.javaparser.ast.validator.ProblemReporter.report(com.github.javaparser.TokenRange, java.lang.String, java.lang.Object...)"], ["com.github.javaparser.ast.validator.Java10Validator", "com.github.javaparser.ast.validator.Java10Validator()"], ["com.github.javaparser.ast.validator.Java7Validator", "com.github.javaparser.ast.validator.Java7Validator()"], ["com.github.javaparser.ast.validator.Java5Validator", "com.github.javaparser.ast.validator.Java5Validator()"], ["default", "com.github.javaparser.ast.validator.Validator.void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration(java.lang.String, boolean, boolean)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration(com.github.javaparser.ast.expr.Name, boolean, boolean)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, boolean, boolean)"], ["<R, A> R", "com.github.javaparser.ast.ImportDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.ImportDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.ImportDeclaration.getName()"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.isAsterisk()"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.isStatic()"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.setAsterisk(boolean)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.setStatic(boolean)"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.clone()"], ["com.github.javaparser.metamodel.ImportDeclarationMetaModel", "com.github.javaparser.ast.ImportDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.ImportDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ImportDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.ImportDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ImportDeclaration.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.visitor.TreeVisitor", "com.github.javaparser.ast.visitor.TreeVisitor()"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitLeavesFirst(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitPreOrder(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitPostOrder(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitBreadthFirst(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitDirectChildren(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setTokenRange(com.github.javaparser.TokenRange)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setRange(com.github.javaparser.Range)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setLineComment(java.lang.String)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setBlockComment(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.Node.toString()"], ["java.lang.String", "com.github.javaparser.ast.Node.toString(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["int", "com.github.javaparser.ast.Node.hashCode()"], ["boolean", "com.github.javaparser.ast.Node.equals(java.lang.Object)"], ["void", "com.github.javaparser.ast.Node.addOrphanComment(com.github.javaparser.ast.comments.Comment)"], ["boolean", "com.github.javaparser.ast.Node.removeOrphanComment(com.github.javaparser.ast.comments.Comment)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit(java.lang.Class<?>)"], ["<N extends com.github.javaparser.ast.Node> java.util.List<N>", "com.github.javaparser.ast.Node.getChildNodesByType(java.lang.Class<N>)"], ["<N extends com.github.javaparser.ast.Node> java.util.List<N>", "com.github.javaparser.ast.Node.getNodesByType(java.lang.Class<N>)"], ["<M> M", "com.github.javaparser.ast.Node.getData(com.github.javaparser.ast.DataKey<M>)"], ["<M> void", "com.github.javaparser.ast.Node.setData(com.github.javaparser.ast.DataKey<M>, M)"], ["boolean", "com.github.javaparser.ast.Node.containsData(com.github.javaparser.ast.DataKey<?>)"], ["void", "com.github.javaparser.ast.Node.removeData(com.github.javaparser.ast.DataKey<com.github.javaparser.resolution.types.ResolvedType>)"], ["boolean", "com.github.javaparser.ast.Node.remove()"], ["boolean", "com.github.javaparser.ast.Node.replace(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.Node.removeForced()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.getParentNodeForChildren()"], ["<P> void", "com.github.javaparser.ast.Node.notifyPropertyChange(com.github.javaparser.ast.observer.ObservableProperty, P, P)"], ["void", "com.github.javaparser.ast.Node.unregister(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.Node.register(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.Node.register(com.github.javaparser.ast.observer.AstObserver, com.github.javaparser.ast.Node$ObserverRegistrationMode)"], ["void", "com.github.javaparser.ast.Node.registerForSubtree(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.Node.isRegistered(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.Node.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.removeComment()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.Node.getMetaModel()"], ["com.github.javaparser.ast.Node$Parsedness", "com.github.javaparser.ast.Node.getParsed()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setParsed(com.github.javaparser.ast.Node$Parsedness)"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.ast.Node.getToStringPrettyPrinterConfiguration()"], ["void", "com.github.javaparser.ast.Node.setToStringPrettyPrinterConfiguration(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["boolean", "com.github.javaparser.ast.Node.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.findRootNode()"], ["void", "com.github.javaparser.ast.Node.walk(com.github.javaparser.ast.Node$TreeTraversal, java.util.function.Consumer<com.github.javaparser.ast.Node>)"], ["void", "com.github.javaparser.ast.Node.walk(java.util.function.Consumer<com.github.javaparser.ast.Node>)"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.ast.Node.walk(java.lang.Class<T>, java.util.function.Consumer<T>)"], ["<T extends com.github.javaparser.ast.Node> java.util.List<T>", "com.github.javaparser.ast.Node.findAll(java.lang.Class<T>)"], ["<T extends com.github.javaparser.ast.Node> java.util.List<T>", "com.github.javaparser.ast.Node.findAll(java.lang.Class<T>, java.util.function.Predicate<T>)"], ["<T> java.util.Optional<T>", "com.github.javaparser.ast.Node.findFirst(com.github.javaparser.ast.Node$TreeTraversal, java.util.function.Function<com.github.javaparser.ast.Node, java.util.Optional<T>>)"], ["<N extends com.github.javaparser.ast.Node> java.util.Optional<N>", "com.github.javaparser.ast.Node.findFirst(java.lang.Class<N>)"], ["<N extends com.github.javaparser.ast.Node> java.util.Optional<N>", "com.github.javaparser.ast.Node.findFirst(java.lang.Class<N>, java.util.function.Predicate<N>)"], ["java.lang.Object", "com.github.javaparser.ast.Node.clone()"], ["java.lang.Object", "com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.ast.Node.setRange(com.github.javaparser.Range)"], ["java.lang.Object", "com.github.javaparser.ast.Node.setTokenRange(com.github.javaparser.TokenRange)"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.publicModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.protectedModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.privateModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.staticModifier()"], ["finalModifier()", "com.github.javaparser.ast.Modifier."], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.transientModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.volatileModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.synchronizedModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.nativeModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.strictfpModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.transitiveModifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier(com.github.javaparser.ast.Modifier$Keyword)"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier(com.github.javaparser.TokenRange, com.github.javaparser.ast.Modifier$Keyword)"], ["<R, A> R", "com.github.javaparser.ast.Modifier.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.Modifier.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.Modifier$Keyword", "com.github.javaparser.ast.Modifier.getKeyword()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.setKeyword(com.github.javaparser.ast.Modifier$Keyword)"], ["boolean", "com.github.javaparser.ast.Modifier.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Modifier.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.clone()"], ["com.github.javaparser.metamodel.ModifierMetaModel", "com.github.javaparser.ast.Modifier.getMetaModel()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.Modifier.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Modifier.clone()"], ["java.lang.Object", "com.github.javaparser.ast.Modifier.clone()"], ["com.github.javaparser.ast.AccessSpecifier[]", "com.github.javaparser.ast.AccessSpecifier.values()"], ["com.github.javaparser.ast.AccessSpecifier", "com.github.javaparser.ast.AccessSpecifier.valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.AccessSpecifier.asString()"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel()"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(int)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.ArrayCreationLevel.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.ArrayCreationLevel.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.setDimension(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.removeDimension()"], ["boolean", "com.github.javaparser.ast.ArrayCreationLevel.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.clone()"], ["com.github.javaparser.metamodel.ArrayCreationLevelMetaModel", "com.github.javaparser.ast.ArrayCreationLevel.getMetaModel()"], ["boolean", "com.github.javaparser.ast.ArrayCreationLevel.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.ArrayCreationLevel.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ArrayCreationLevel.clone()"], ["java.lang.Object", "com.github.javaparser.ast.ArrayCreationLevel.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ArrayCreationLevel.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node$BreadthFirstIterator", "com.github.javaparser.ast.Node$BreadthFirstIterator(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Node$BreadthFirstIterator.hasNext()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node$BreadthFirstIterator.next()"], ["java.lang.Object", "com.github.javaparser.ast.Node$BreadthFirstIterator.next()"], ["com.github.javaparser.ast.Node$DirectChildrenIterator", "com.github.javaparser.ast.Node$DirectChildrenIterator(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Node$DirectChildrenIterator.hasNext()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node$DirectChildrenIterator.next()"], ["java.lang.Object", "com.github.javaparser.ast.Node$DirectChildrenIterator.next()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.ConditionalExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ConditionalExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.getCondition()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.getElseExpr()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.getThenExpr()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.setElseExpr(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.setThenExpr(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ConditionalExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.clone()"], ["com.github.javaparser.metamodel.ConditionalExprMetaModel", "com.github.javaparser.ast.expr.ConditionalExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ConditionalExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ConditionalExpr.isConditionalExpr()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.asConditionalExpr()"], ["void", "com.github.javaparser.ast.expr.ConditionalExpr.ifConditionalExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ConditionalExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ConditionalExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ConditionalExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ConditionalExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ConditionalExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ConditionalExpr.setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr()"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr(double)"], ["<R, A> R", "com.github.javaparser.ast.expr.DoubleLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.DoubleLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.DoubleLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["double", "com.github.javaparser.ast.expr.DoubleLiteralExpr.asDouble()"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.setDouble(double)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()"], ["com.github.javaparser.metamodel.DoubleLiteralExprMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.DoubleLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.DoubleLiteralExpr.isDoubleLiteralExpr()"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.asDoubleLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.DoubleLiteralExpr.ifDoubleLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.DoubleLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.ArrayAccessExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ArrayAccessExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayAccessExpr.getIndex()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayAccessExpr.getName()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.setIndex(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.setName(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ArrayAccessExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()"], ["com.github.javaparser.metamodel.ArrayAccessExprMetaModel", "com.github.javaparser.ast.expr.ArrayAccessExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ArrayAccessExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ArrayAccessExpr.isArrayAccessExpr()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.asArrayAccessExpr()"], ["void", "com.github.javaparser.ast.expr.ArrayAccessExpr.ifArrayAccessExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ArrayAccessExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ArrayAccessExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ArrayAccessExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>, com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>, com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["<R, A> R", "com.github.javaparser.ast.expr.ArrayCreationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ArrayCreationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ArrayCreationExpr.getElementType()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setElementType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setLevels(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ArrayCreationExpr.createdType()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setElementType(java.lang.Class<?>)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setElementType(java.lang.String)"], ["boolean", "com.github.javaparser.ast.expr.ArrayCreationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.removeInitializer()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()"], ["com.github.javaparser.metamodel.ArrayCreationExprMetaModel", "com.github.javaparser.ast.expr.ArrayCreationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ArrayCreationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ArrayCreationExpr.isArrayCreationExpr()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.asArrayCreationExpr()"], ["void", "com.github.javaparser.ast.expr.ArrayCreationExpr.ifArrayCreationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ArrayCreationExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ArrayCreationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ArrayCreationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr()"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.isMarkerAnnotationExpr()"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.asMarkerAnnotationExpr()"], ["void", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.ifMarkerAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.MarkerAnnotationExpr>)"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)"], ["<R, A> R", "com.github.javaparser.ast.expr.TypeExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.TypeExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.TypeExpr.getType()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr.setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.expr.TypeExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr.clone()"], ["com.github.javaparser.metamodel.TypeExprMetaModel", "com.github.javaparser.ast.expr.TypeExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.TypeExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.TypeExpr.isTypeExpr()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr.asTypeExpr()"], ["void", "com.github.javaparser.ast.expr.TypeExpr.ifTypeExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.TypeExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.TypeExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.TypeExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.TypeExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.TypeExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.TypeExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.TypeExpr.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr()"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)"], ["<R, A> R", "com.github.javaparser.ast.expr.ClassExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ClassExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ClassExpr.getType()"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr.setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.expr.ClassExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr.clone()"], ["com.github.javaparser.metamodel.ClassExprMetaModel", "com.github.javaparser.ast.expr.ClassExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ClassExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ClassExpr.isClassExpr()"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr.asClassExpr()"], ["void", "com.github.javaparser.ast.expr.ClassExpr.ifClassExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ClassExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ClassExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ClassExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ClassExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ClassExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ClassExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ClassExpr.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr()"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.CastExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.CastExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.CastExpr.getExpression()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.CastExpr.getType()"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.expr.CastExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.clone()"], ["com.github.javaparser.metamodel.CastExprMetaModel", "com.github.javaparser.ast.expr.CastExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.CastExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.CastExpr.isCastExpr()"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.asCastExpr()"], ["void", "com.github.javaparser.ast.expr.CastExpr.ifCastExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.CastExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.CastExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.CastExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.CastExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CastExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.CastExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CastExpr.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CastExpr.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.expr.LiteralExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr.clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.LiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.LiteralExpr.isLiteralExpr()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr.asLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.LiteralExpr.ifLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LiteralExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LiteralExpr.clone()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.ast.expr.Expression, java.lang.String)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.expr.FieldAccessExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.FieldAccessExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.FieldAccessExpr.getName()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.FieldAccessExpr.getScope()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()"], ["com.github.javaparser.metamodel.FieldAccessExprMetaModel", "com.github.javaparser.ast.expr.FieldAccessExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.isFieldAccessExpr()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.asFieldAccessExpr()"], ["void", "com.github.javaparser.ast.expr.FieldAccessExpr.ifFieldAccessExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.FieldAccessExpr>)"], ["com.github.javaparser.resolution.declarations.ResolvedValueDeclaration", "com.github.javaparser.ast.expr.FieldAccessExpr.resolve()"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.isInternal()"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.isTopLevel()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.FieldAccessExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.FieldAccessExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["java.lang.Object", "com.github.javaparser.ast.expr.FieldAccessExpr.resolve()"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr()"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntry>)"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntry>)"], ["<R, A> R", "com.github.javaparser.ast.expr.SwitchExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SwitchExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.expr.SwitchExpr.getEntry(int)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SwitchExpr.getSelector()"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr.setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntry>)"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr.setSelector(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.SwitchExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr.clone()"], ["boolean", "com.github.javaparser.ast.expr.SwitchExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.SwitchExpr.isSwitchExpr()"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.SwitchExpr.asSwitchExpr()"], ["void", "com.github.javaparser.ast.expr.SwitchExpr.ifSwitchExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.SwitchExpr>)"], ["com.github.javaparser.metamodel.SwitchExprMetaModel", "com.github.javaparser.ast.expr.SwitchExpr.getMetaModel()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.SwitchExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SwitchExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SwitchExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SwitchExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SwitchExpr.clone()"], ["com.github.javaparser.ast.nodeTypes.SwitchNode", "com.github.javaparser.ast.expr.SwitchExpr.clone()"], ["com.github.javaparser.ast.nodeTypes.SwitchNode", "com.github.javaparser.ast.expr.SwitchExpr.setSelector(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.nodeTypes.SwitchNode", "com.github.javaparser.ast.expr.SwitchExpr.setEntries(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.expr.ThisExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ThisExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.setTypeName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.ThisExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.removeClassName()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.clone()"], ["com.github.javaparser.metamodel.ThisExprMetaModel", "com.github.javaparser.ast.expr.ThisExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ThisExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ThisExpr.isThisExpr()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.asThisExpr()"], ["void", "com.github.javaparser.ast.expr.ThisExpr.ifThisExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ThisExpr>)"], ["com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration", "com.github.javaparser.ast.expr.ThisExpr.resolve()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.removeTypeName()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ThisExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ThisExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ThisExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ThisExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ThisExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ThisExpr.resolve()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName(java.lang.String)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.SimpleName.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SimpleName.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.lang.String", "com.github.javaparser.ast.expr.SimpleName.getIdentifier()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName.setIdentifier(java.lang.String)"], ["boolean", "com.github.javaparser.ast.expr.SimpleName.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.expr.SimpleName.asString()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName.clone()"], ["com.github.javaparser.metamodel.SimpleNameMetaModel", "com.github.javaparser.ast.expr.SimpleName.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.SimpleName.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SimpleName.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SimpleName.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SimpleName.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SimpleName.setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr()"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr(char)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.escape(java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.CharLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.CharLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.CharLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["char", "com.github.javaparser.ast.expr.CharLiteralExpr.asChar()"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.setChar(char)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()"], ["com.github.javaparser.metamodel.CharLiteralExprMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.CharLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.CharLiteralExpr.isCharLiteralExpr()"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.asCharLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.CharLiteralExpr.ifCharLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.CharLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMemberValue()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.setMemberValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.isSingleMemberAnnotationExpr()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.asSingleMemberAnnotationExpr()"], ["void", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.ifSingleMemberAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.SingleMemberAnnotationExpr>)"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr(boolean)"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr(com.github.javaparser.TokenRange, boolean)"], ["<R, A> R", "com.github.javaparser.ast.expr.BooleanLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.BooleanLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getValue()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.setValue(boolean)"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()"], ["com.github.javaparser.metamodel.BooleanLiteralExprMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.isBooleanLiteralExpr()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.asBooleanLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.BooleanLiteralExpr.ifBooleanLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.BooleanLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.expr.NameExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.NameExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.NameExpr.getName()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr.setName(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.expr.NameExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr.clone()"], ["com.github.javaparser.metamodel.NameExprMetaModel", "com.github.javaparser.ast.expr.NameExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.NameExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.NameExpr.isNameExpr()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr.asNameExpr()"], ["void", "com.github.javaparser.ast.expr.NameExpr.ifNameExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.NameExpr>)"], ["com.github.javaparser.resolution.declarations.ResolvedValueDeclaration", "com.github.javaparser.ast.expr.NameExpr.resolve()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.NameExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.NameExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.NameExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NameExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.NameExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NameExpr.setName(com.github.javaparser.ast.expr.SimpleName)"], ["java.lang.Object", "com.github.javaparser.ast.expr.NameExpr.resolve()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.expr.SuperExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SuperExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.setTypeName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.SuperExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.clone()"], ["com.github.javaparser.metamodel.SuperExprMetaModel", "com.github.javaparser.ast.expr.SuperExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.SuperExpr.isSuperExpr()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.asSuperExpr()"], ["void", "com.github.javaparser.ast.expr.SuperExpr.ifSuperExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.SuperExpr>)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.removeClassName()"], ["boolean", "com.github.javaparser.ast.expr.SuperExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.removeTypeName()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.SuperExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SuperExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SuperExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SuperExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SuperExpr.clone()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.booleanType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.charType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.byteType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.shortType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.intType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.longType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.floatType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.doubleType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.ast.type.PrimitiveType$Primitive)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.ast.type.PrimitiveType$Primitive, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.PrimitiveType$Primitive, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.PrimitiveType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.PrimitiveType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.PrimitiveType$Primitive", "com.github.javaparser.ast.type.PrimitiveType.getType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.PrimitiveType.toBoxedType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.setType(com.github.javaparser.ast.type.PrimitiveType$Primitive)"], ["java.lang.String", "com.github.javaparser.ast.type.PrimitiveType.asString()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.PrimitiveType.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.clone()"], ["com.github.javaparser.metamodel.PrimitiveTypeMetaModel", "com.github.javaparser.ast.type.PrimitiveType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.PrimitiveType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.PrimitiveType.isPrimitiveType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.asPrimitiveType()"], ["void", "com.github.javaparser.ast.type.PrimitiveType.ifPrimitiveType(java.util.function.Consumer<com.github.javaparser.ast.type.PrimitiveType>)"], ["com.github.javaparser.resolution.types.ResolvedPrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.resolve()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.PrimitiveType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.PrimitiveType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.PrimitiveType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.PrimitiveType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.PrimitiveType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.PrimitiveType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.PrimitiveType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.PrimitiveType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.PrimitiveType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["<R, A> R", "com.github.javaparser.ast.type.IntersectionType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.IntersectionType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.setElements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.IntersectionType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.IntersectionType.asString()"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.clone()"], ["com.github.javaparser.metamodel.IntersectionTypeMetaModel", "com.github.javaparser.ast.type.IntersectionType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.IntersectionType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.IntersectionType.isIntersectionType()"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.asIntersectionType()"], ["void", "com.github.javaparser.ast.type.IntersectionType.ifIntersectionType(java.util.function.Consumer<com.github.javaparser.ast.type.IntersectionType>)"], ["com.github.javaparser.resolution.types.ResolvedIntersectionType", "com.github.javaparser.ast.type.IntersectionType.resolve()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.IntersectionType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.IntersectionType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.IntersectionType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.IntersectionType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.IntersectionType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.IntersectionType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.IntersectionType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.IntersectionType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.IntersectionType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.ReferenceType.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType.clone()"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.ReferenceType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.ReferenceType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.ReferenceType.isReferenceType()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType.asReferenceType()"], ["void", "com.github.javaparser.ast.type.ReferenceType.ifReferenceType(java.util.function.Consumer<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.ReferenceType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ReferenceType.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.ReferenceType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ReferenceType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.ReferenceType.clone()"], ["com.github.javaparser.ast.Node$PreOrderIterator", "com.github.javaparser.ast.Node$PreOrderIterator(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Node$PreOrderIterator.hasNext()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node$PreOrderIterator.next()"], ["java.lang.Object", "com.github.javaparser.ast.Node$PreOrderIterator.next()"], ["com.github.javaparser.ast.Node$TreeTraversal[]", "com.github.javaparser.ast.Node$TreeTraversal.values()"], ["com.github.javaparser.ast.Node$TreeTraversal", "com.github.javaparser.ast.Node$TreeTraversal.valueOf(java.lang.String)"], ["com.github.javaparser.ast.Node$ObserverRegistrationMode[]", "com.github.javaparser.ast.Node$ObserverRegistrationMode.values()"], ["com.github.javaparser.ast.Node$ObserverRegistrationMode", "com.github.javaparser.ast.Node$ObserverRegistrationMode.valueOf(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithConstructors.com.github.javaparser.ast.body.ConstructorDeclaration addConstructor(com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.com.github.javaparser.ast.expr.AnnotationExpr getAnnotation(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N setAnnotation(int, com.github.javaparser.ast.expr.AnnotationExpr)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addAnnotation(com.github.javaparser.ast.expr.AnnotationExpr)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addAnnotation(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.com.github.javaparser.ast.expr.NormalAnnotationExpr addAndGetAnnotation(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.com.github.javaparser.ast.expr.NormalAnnotationExpr addAndGetAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addMarkerAnnotation(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addMarkerAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>, com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.boolean isAnnotationPresent(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter getParameter(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N setParameter(int, com.github.javaparser.ast.body.Parameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(com.github.javaparser.ast.body.Parameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(com.github.javaparser.ast.body.Parameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.boolean hasParametersOfType(java.lang.String...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.boolean hasParametersOfType(java.lang.Class<?>...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithOptionalLabel.T setLabel(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithRange.boolean containsWithin(com.github.javaparser.ast.Node)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.N setMember(int, com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.N addMember(com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addField(java.lang.Class<?>, java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addField(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addFieldWithInitializer(java.lang.Class<?>, java.lang.String, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addFieldWithInitializer(java.lang.String, java.lang.String, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addFieldWithInitializer(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPrivateField(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPrivateField(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPrivateField(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPublicField(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPublicField(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPublicField(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addProtectedField(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addProtectedField(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addProtectedField(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.MethodDeclaration addMethod(java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.stmt.BlockStmt addInitializer()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.stmt.BlockStmt addStaticInitializer()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.boolean isEmpty()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithBody.com.github.javaparser.ast.stmt.BlockStmt createBlockStatementAsBody()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithBody.boolean hasEmptyBody()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N addModifier(com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N removeModifier(com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N setModifier(com.github.javaparser.ast.Modifier$Keyword, boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.boolean hasModifier(com.github.javaparser.ast.Modifier$Keyword)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N setModifiers(com.github.javaparser.ast.Modifier$Keyword...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.com.github.javaparser.ast.AccessSpecifier getAccessSpecifier()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithName.N setName(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithName.java.lang.String getNameAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.com.github.javaparser.ast.stmt.BlockStmt createBody()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithType.N setType(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithType.N setType(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithType.java.lang.String getTypeAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithDeclaration.java.lang.String getDeclarationAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithDeclaration.java.lang.String getDeclarationAsString(boolean, boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.body.VariableDeclarator getVariable(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.N setVariable(int, com.github.javaparser.ast.body.VariableDeclarator)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.N addVariable(com.github.javaparser.ast.body.VariableDeclarator)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.type.Type getCommonType()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.type.Type getElementType()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.N setAllTypes(com.github.javaparser.ast.type.Type)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.boolean isPrivate()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.N setPrivate(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier.boolean isStatic()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier.N setStatic(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier.boolean isStrictfp()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier.N setStrictfp(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.com.github.javaparser.ast.expr.Expression getArgument(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.N addArgument(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.N addArgument(com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.N setArgument(int, com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithOptionalBlockStmt.com.github.javaparser.ast.stmt.BlockStmt createBody()"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.description.JavadocDescription.parseText(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.description.JavadocDescription()"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.description.JavadocDescription(java.util.List<com.github.javaparser.javadoc.description.JavadocDescriptionElement>)"], ["boolean", "com.github.javaparser.javadoc.description.JavadocDescription.addElement(com.github.javaparser.javadoc.description.JavadocDescriptionElement)"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocDescription.toText()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocDescription.isEmpty()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocDescription.equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.description.JavadocDescription.hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocDescription.toString()"], ["com.github.javaparser.javadoc.description.JavadocInlineTag$Type[]", "com.github.javaparser.javadoc.description.JavadocInlineTag$Type.values()"], ["com.github.javaparser.javadoc.description.JavadocInlineTag$Type", "com.github.javaparser.javadoc.description.JavadocInlineTag$Type.valueOf(java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag", "com.github.javaparser.javadoc.JavadocBlockTag(com.github.javaparser.javadoc.JavadocBlockTag$Type, java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag", "com.github.javaparser.javadoc.JavadocBlockTag(java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag", "com.github.javaparser.javadoc.JavadocBlockTag.createParamBlockTag(java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag$Type", "com.github.javaparser.javadoc.JavadocBlockTag.getType()"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.JavadocBlockTag.getContent()"], ["java.lang.String", "com.github.javaparser.javadoc.JavadocBlockTag.getTagName()"], ["java.lang.String", "com.github.javaparser.javadoc.JavadocBlockTag.toText()"], ["boolean", "com.github.javaparser.javadoc.JavadocBlockTag.equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.JavadocBlockTag.hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.JavadocBlockTag.toString()"], ["com.github.javaparser.ParserConfiguration$LanguageLevel[]", "com.github.javaparser.ParserConfiguration$LanguageLevel.values()"], ["com.github.javaparser.ParserConfiguration$LanguageLevel", "com.github.javaparser.ParserConfiguration$LanguageLevel.valueOf(java.lang.String)"], ["com.github.javaparser.ParseResult", "com.github.javaparser.ParseResult(T, java.util.List<com.github.javaparser.Problem>, com.github.javaparser.ast.comments.CommentsCollection)"], ["boolean", "com.github.javaparser.ParseResult.isSuccessful()"], ["void", "com.github.javaparser.ParseResult.ifSuccessful(java.util.function.Consumer<T>)"], ["com.github.javaparser.Problem", "com.github.javaparser.ParseResult.getProblem(int)"], ["java.lang.String", "com.github.javaparser.ParseResult.toString()"], ["com.github.javaparser.TokenTypes", "com.github.javaparser.TokenTypes()"], ["boolean", "com.github.javaparser.TokenTypes.isWhitespace(int)"], ["boolean", "com.github.javaparser.TokenTypes.isEndOfLineToken(int)"], ["boolean", "com.github.javaparser.TokenTypes.isWhitespaceOrComment(int)"], ["boolean", "com.github.javaparser.TokenTypes.isSpaceOrTab(int)"], ["boolean", "com.github.javaparser.TokenTypes.isComment(int)"], ["int", "com.github.javaparser.TokenTypes.eolTokenKind()"], ["int", "com.github.javaparser.TokenTypes.spaceTokenKind()"], ["com.github.javaparser.JavaToken$Category", "com.github.javaparser.TokenTypes.getCategory(int)"], ["com.github.javaparser.JavaToken$Kind[]", "com.github.javaparser.JavaToken$Kind.values()"], ["com.github.javaparser.JavaToken$Kind", "com.github.javaparser.JavaToken$Kind.valueOf(java.lang.String)"], ["com.github.javaparser.JavaToken$Kind", "com.github.javaparser.JavaToken$Kind.valueOf(int)"], ["int", "com.github.javaparser.JavaToken$Kind.getKind()"], ["com.github.javaparser.JavaParserBuild", "com.github.javaparser.JavaParserBuild()"], ["com.github.javaparser.StringProvider", "com.github.javaparser.StringProvider(java.lang.String)"], ["int", "com.github.javaparser.StringProvider.read(char[], int, int)"], ["void", "com.github.javaparser.StringProvider.close()"], ["com.github.javaparser.StreamProvider", "com.github.javaparser.StreamProvider(java.io.Reader)"], ["com.github.javaparser.StreamProvider", "com.github.javaparser.StreamProvider(java.io.InputStream)"], ["com.github.javaparser.StreamProvider", "com.github.javaparser.StreamProvider(java.io.InputStream, java.lang.String)"], ["int", "com.github.javaparser.StreamProvider.read(char[], int, int)"], ["void", "com.github.javaparser.StreamProvider.close()"], ["com.github.javaparser.printer.PrettyPrinter", "com.github.javaparser.printer.PrettyPrinter()"], ["com.github.javaparser.printer.PrettyPrinter", "com.github.javaparser.printer.PrettyPrinter(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrinter.print(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.PrettyPrintVisitor", "com.github.javaparser.printer.PrettyPrintVisitor(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrintVisitor.getSource()"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrintVisitor.toString()"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter()"], ["<N extends com.github.javaparser.ast.Node> N", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.setup(N)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.print(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.print(com.github.javaparser.ast.Node, java.io.Writer)"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$1.remove()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.RemovedGroup$1.hasNext()"], ["com.github.javaparser.printer.lexicalpreservation.Removed", "com.github.javaparser.printer.lexicalpreservation.RemovedGroup$1.next()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.RemovedGroup$1.next()"], ["com.github.javaparser.printer.lexicalpreservation.changes.NoChange", "com.github.javaparser.printer.lexicalpreservation.changes.NoChange()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.NoChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange", "com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange(com.github.javaparser.ast.observer.ObservableProperty, int, com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange", "com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange(com.github.javaparser.ast.observer.ObservableProperty, int)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange", "com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange(com.github.javaparser.ast.observer.ObservableProperty, int, com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getProperty()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getOldValue()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getNewValue()"], ["com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange(com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["default", "com.github.javaparser.printer.lexicalpreservation.changes.Change.boolean evaluate(com.github.javaparser.printer.concretesyntaxmodel.CsmConditional, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.DifferenceElement", "com.github.javaparser.printer.lexicalpreservation.DifferenceElement.added(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.lexicalpreservation.DifferenceElement", "com.github.javaparser.printer.lexicalpreservation.DifferenceElement.removed(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.lexicalpreservation.DifferenceElement", "com.github.javaparser.printer.lexicalpreservation.DifferenceElement.kept(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.lexicalpreservation.Difference$MatchClassification[]", "com.github.javaparser.printer.lexicalpreservation.Difference$MatchClassification.values()"], ["com.github.javaparser.printer.lexicalpreservation.Difference$MatchClassification", "com.github.javaparser.printer.lexicalpreservation.Difference$MatchClassification.valueOf(java.lang.String)"], ["int", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator.toToken(com.github.javaparser.ast.Modifier)"], ["com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator(java.util.Iterator<E>, com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator$Provider<E>)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator.hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator.next()"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator.remove()"], ["com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.onType(java.lang.String, java.lang.String, java.util.List<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$Bound>)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.boolean declaredOnType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.boolean declaredOnMethod()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.boolean declaredOnConstructor()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.java.lang.String getPackageName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.java.lang.String getClassName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.java.lang.String getQualifiedName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.boolean hasLowerBound()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.boolean hasUpperBound()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.com.github.javaparser.resolution.types.ResolvedType getLowerBound()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration.com.github.javaparser.resolution.types.ResolvedType getUpperBound()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration.boolean isField()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration.com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration asField()"], ["java.lang.String", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.getName()"], ["boolean", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.declaredOnType()"], ["boolean", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.declaredOnMethod()"], ["boolean", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.declaredOnConstructor()"], ["java.lang.String", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.getContainerQualifiedName()"], ["java.lang.String", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.getContainerId()"], ["com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.getContainer()"], ["java.lang.String", "com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration$1.toString()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration.boolean isInterface()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean hasName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean isField()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean isVariable()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean isEnumConstant()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean isParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean isType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.boolean isMethod()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration asField()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration asParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration asType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration asMethod()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedDeclaration.com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration asEnumConstant()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeParametrizable.boolean isGeneric()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.java.lang.String getPackageName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.java.lang.String getClassName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.java.lang.String getQualifiedName()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.java.lang.String getSignature()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.java.lang.String getQualifiedSignature()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration getLastParam()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedMethodLikeDeclaration.boolean hasVariadicParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration asReferenceType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration getField(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration getVisibleField(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.boolean hasField(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.boolean hasVisibleField(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.boolean canBeAssignedTo(com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration.boolean hasAnnotation(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration.boolean isEnumConstant()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration.com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration asEnumConstant()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration getInternalType(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean hasInternalType(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean isClass()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean isInterface()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean isEnum()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean isTypeParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean isType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.boolean isAnonymousClass()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration asType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedClassDeclaration asClass()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedInterfaceDeclaration asInterface()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration asEnum()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration asTypeParameter()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration asReferenceType()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedTypeDeclaration.java.lang.String getId()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration.boolean isEnum()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration.com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration asEnum()"], ["default", "com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration.boolean hasEnumConstant(java.lang.String)"], ["default", "com.github.javaparser.resolution.declarations.ResolvedEnumDeclaration.com.github.javaparser.resolution.declarations.ResolvedEnumConstantDeclaration getEnumConstant(java.lang.String)"], ["com.github.javaparser.resolution.types.ResolvedTypeVariable", "com.github.javaparser.resolution.types.ResolvedTypeVariable(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration)"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedTypeVariable.toString()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedTypeVariable.qualifiedName()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.ResolvedTypeVariable.hashCode()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.isArray()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.isPrimitive()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedTypeVariable.replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType, java.util.Map<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.isReferenceType()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedTypeVariable.describe()"], ["com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration", "com.github.javaparser.resolution.types.ResolvedTypeVariable.asTypeParameter()"], ["com.github.javaparser.resolution.types.ResolvedTypeVariable", "com.github.javaparser.resolution.types.ResolvedTypeVariable.asTypeVariable()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.isTypeVariable()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedTypeVariable.mention(java.util.List<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration>)"], ["com.github.javaparser.resolution.types.ResolvedUnionType", "com.github.javaparser.resolution.types.ResolvedUnionType(java.util.List<com.github.javaparser.resolution.types.ResolvedType>)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedUnionType.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.ResolvedUnionType.hashCode()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedUnionType.describe()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedUnionType.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedUnionType.isUnionType()"], ["com.github.javaparser.resolution.types.ResolvedUnionType", "com.github.javaparser.resolution.types.ResolvedUnionType.asUnionType()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.describe()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.getBound()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.isConstraint()"], ["com.github.javaparser.resolution.types.ResolvedLambdaConstraintType", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.asConstraintType()"], ["com.github.javaparser.resolution.types.ResolvedLambdaConstraintType", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.bound(com.github.javaparser.resolution.types.ResolvedType)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedLambdaConstraintType.toString()"], ["com.github.javaparser.resolution.types.ResolvedArrayType", "com.github.javaparser.resolution.types.ResolvedArrayType(com.github.javaparser.resolution.types.ResolvedType)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedArrayType.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.ResolvedArrayType.hashCode()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedArrayType.toString()"], ["com.github.javaparser.resolution.types.ResolvedArrayType", "com.github.javaparser.resolution.types.ResolvedArrayType.asArrayType()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedArrayType.isArray()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedArrayType.describe()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedArrayType.getComponentType()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedArrayType.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedArrayType.replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType, java.util.Map<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>)"], ["com.github.javaparser.resolution.types.ResolvedWildcard", "com.github.javaparser.resolution.types.ResolvedWildcard.superBound(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.ResolvedWildcard", "com.github.javaparser.resolution.types.ResolvedWildcard.extendsBound(com.github.javaparser.resolution.types.ResolvedType)"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedWildcard.toString()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isWildcard()"], ["com.github.javaparser.resolution.types.ResolvedWildcard", "com.github.javaparser.resolution.types.ResolvedWildcard.asWildcard()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.ResolvedWildcard.hashCode()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedWildcard.describe()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isSuper()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isExtends()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isBounded()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedWildcard.getBoundedType()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedWildcard.replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType, java.util.Map<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.mention(java.util.List<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration>)"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isUpperBounded()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedWildcard.isLowerBounded()"], ["com.github.javaparser.utils.Log", "com.github.javaparser.utils.Log()"], ["void", "com.github.javaparser.utils.Log.setAdapter(com.github.javaparser.utils.Log$Adapter)"], ["void", "com.github.javaparser.utils.Log.trace(java.lang.String, java.util.function.Supplier<java.lang.Object>...)"], ["void", "com.github.javaparser.utils.Log.info(java.lang.String, java.util.function.Supplier<java.lang.Object>...)"], ["void", "com.github.javaparser.utils.Log.error(java.lang.Throwable)"], ["void", "com.github.javaparser.utils.Log.error(java.lang.Throwable, java.lang.String, java.util.function.Supplier<java.lang.Object>...)"], ["void", "com.github.javaparser.utils.Log.error(java.lang.String, java.util.function.Supplier<java.lang.Object>...)"], ["com.github.javaparser.utils.VisitorSet", "com.github.javaparser.utils.VisitorSet(com.github.javaparser.ast.visitor.GenericVisitor<java.lang.Integer, java.lang.Void>, com.github.javaparser.ast.visitor.GenericVisitor<java.lang.Boolean, com.github.javaparser.ast.visitor.Visitable>)"], ["boolean", "com.github.javaparser.utils.VisitorSet.add(N)"], ["boolean", "com.github.javaparser.utils.VisitorSet.addAll(java.util.Collection<? extends N>)"], ["void", "com.github.javaparser.utils.VisitorSet.clear()"], ["boolean", "com.github.javaparser.utils.VisitorSet.contains(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.VisitorSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.utils.VisitorSet.isEmpty()"], ["boolean", "com.github.javaparser.utils.VisitorSet.remove(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.VisitorSet.removeAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.utils.VisitorSet.retainAll(java.util.Collection<?>)"], ["int", "com.github.javaparser.utils.VisitorSet.size()"], ["java.lang.Object[]", "com.github.javaparser.utils.VisitorSet.toArray()"], ["<T> T[]", "com.github.javaparser.utils.VisitorSet.toArray(T[])"], ["java.lang.String", "com.github.javaparser.utils.VisitorSet.toString()"], ["boolean", "com.github.javaparser.utils.VisitorSet.add(java.lang.Object)"], ["default", "com.github.javaparser.utils.CollectionStrategy.java.nio.file.PathMatcher getPathMatcher(java.lang.String)"], ["boolean", "com.github.javaparser.utils.VisitorSet$1.hasNext()"], ["N", "com.github.javaparser.utils.VisitorSet$1.next()"], ["void", "com.github.javaparser.utils.VisitorSet$1.remove()"], ["java.lang.Object", "com.github.javaparser.utils.VisitorSet$1.next()"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.ParserCollectionStrategy$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.ParserCollectionStrategy$1.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.ParserCollectionStrategy$1.postVisitDirectory(java.nio.file.Path, java.io.IOException)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.ParserCollectionStrategy$1.postVisitDirectory(java.lang.Object, java.io.IOException)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.ParserCollectionStrategy$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.ParserCollectionStrategy$1.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$2.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$2.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$2.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$2.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["<R, A> R", "com.github.javaparser.utils.VisitorList$EqualsHashcodeOverridingFacade.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.utils.VisitorList$EqualsHashcodeOverridingFacade.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["int", "com.github.javaparser.utils.VisitorList$EqualsHashcodeOverridingFacade.hashCode()"], ["boolean", "com.github.javaparser.utils.VisitorList$EqualsHashcodeOverridingFacade.equals(java.lang.Object)"], ["com.github.javaparser.utils.SeparatedItemStringBuilder", "com.github.javaparser.utils.SeparatedItemStringBuilder(java.lang.String, java.lang.String, java.lang.String)"], ["com.github.javaparser.utils.SeparatedItemStringBuilder", "com.github.javaparser.utils.SeparatedItemStringBuilder.append(java.lang.CharSequence, java.lang.Object...)"], ["boolean", "com.github.javaparser.utils.SeparatedItemStringBuilder.hasItems()"], ["java.lang.String", "com.github.javaparser.utils.SeparatedItemStringBuilder.toString()"], ["boolean", "com.github.javaparser.utils.VisitorList$2.hasNext()"], ["N", "com.github.javaparser.utils.VisitorList$2.next()"], ["void", "com.github.javaparser.utils.VisitorList$2.remove()"], ["void", "com.github.javaparser.utils.VisitorList$2.add(N)"], ["boolean", "com.github.javaparser.utils.VisitorList$2.hasPrevious()"], ["int", "com.github.javaparser.utils.VisitorList$2.nextIndex()"], ["N", "com.github.javaparser.utils.VisitorList$2.previous()"], ["int", "com.github.javaparser.utils.VisitorList$2.previousIndex()"], ["void", "com.github.javaparser.utils.VisitorList$2.set(N)"], ["void", "com.github.javaparser.utils.VisitorList$2.add(java.lang.Object)"], ["void", "com.github.javaparser.utils.VisitorList$2.set(java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList$2.previous()"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList$2.next()"], ["int", "com.github.javaparser.utils.StringEscapeUtils$UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)"], ["com.github.javaparser.utils.Log$SilentAdapter", "com.github.javaparser.utils.Log$SilentAdapter()"], ["void", "com.github.javaparser.utils.Log$SilentAdapter.info(java.util.function.Supplier<java.lang.String>)"], ["void", "com.github.javaparser.utils.Log$SilentAdapter.trace(java.util.function.Supplier<java.lang.String>)"], ["void", "com.github.javaparser.utils.Log$SilentAdapter.error(java.util.function.Supplier<java.lang.Throwable>, java.util.function.Supplier<java.lang.String>)"], ["com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator", "com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator(com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator...)"], ["int", "com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer)"], ["com.github.javaparser.utils.VisitorMap", "com.github.javaparser.utils.VisitorMap(com.github.javaparser.ast.visitor.GenericVisitor<java.lang.Integer, java.lang.Void>, com.github.javaparser.ast.visitor.GenericVisitor<java.lang.Boolean, com.github.javaparser.ast.visitor.Visitable>)"], ["int", "com.github.javaparser.utils.VisitorMap.size()"], ["boolean", "com.github.javaparser.utils.VisitorMap.isEmpty()"], ["boolean", "com.github.javaparser.utils.VisitorMap.containsKey(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.VisitorMap.containsValue(java.lang.Object)"], ["V", "com.github.javaparser.utils.VisitorMap.get(java.lang.Object)"], ["V", "com.github.javaparser.utils.VisitorMap.put(N, V)"], ["V", "com.github.javaparser.utils.VisitorMap.remove(java.lang.Object)"], ["void", "com.github.javaparser.utils.VisitorMap.putAll(java.util.Map<? extends N, ? extends V>)"], ["void", "com.github.javaparser.utils.VisitorMap.clear()"], ["java.util.Set<java.util.Map$Entry<N, V>>", "com.github.javaparser.utils.VisitorMap.entrySet()"], ["java.lang.Object", "com.github.javaparser.utils.VisitorMap.put(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.utils.VisitorList", "com.github.javaparser.utils.VisitorList(com.github.javaparser.ast.visitor.GenericVisitor<java.lang.Integer, java.lang.Void>, com.github.javaparser.ast.visitor.GenericVisitor<java.lang.Boolean, com.github.javaparser.ast.visitor.Visitable>)"], ["boolean", "com.github.javaparser.utils.VisitorList.add(N)"], ["void", "com.github.javaparser.utils.VisitorList.add(int, N)"], ["boolean", "com.github.javaparser.utils.VisitorList.addAll(java.util.Collection<? extends N>)"], ["boolean", "com.github.javaparser.utils.VisitorList.addAll(int, java.util.Collection<? extends N>)"], ["void", "com.github.javaparser.utils.VisitorList.clear()"], ["boolean", "com.github.javaparser.utils.VisitorList.contains(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.VisitorList.containsAll(java.util.Collection<?>)"], ["N", "com.github.javaparser.utils.VisitorList.get(int)"], ["int", "com.github.javaparser.utils.VisitorList.indexOf(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.VisitorList.isEmpty()"], ["int", "com.github.javaparser.utils.VisitorList.lastIndexOf(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.VisitorList.remove(java.lang.Object)"], ["N", "com.github.javaparser.utils.VisitorList.remove(int)"], ["boolean", "com.github.javaparser.utils.VisitorList.removeAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.utils.VisitorList.retainAll(java.util.Collection<?>)"], ["N", "com.github.javaparser.utils.VisitorList.set(int, N)"], ["int", "com.github.javaparser.utils.VisitorList.size()"], ["java.lang.Object[]", "com.github.javaparser.utils.VisitorList.toArray()"], ["<T> T[]", "com.github.javaparser.utils.VisitorList.toArray(T[])"], ["java.lang.String", "com.github.javaparser.utils.VisitorList.toString()"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList.remove(int)"], ["void", "com.github.javaparser.utils.VisitorList.add(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList.set(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList.get(int)"], ["boolean", "com.github.javaparser.utils.VisitorList.add(java.lang.Object)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$ParallelParse$1.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$ParallelParse$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$ParallelParse$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$ParallelParse$1.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["com.github.javaparser.utils.ParserCollectionStrategy", "com.github.javaparser.utils.ParserCollectionStrategy()"], ["com.github.javaparser.utils.ParserCollectionStrategy", "com.github.javaparser.utils.ParserCollectionStrategy(com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.utils.ProjectRoot", "com.github.javaparser.utils.ParserCollectionStrategy.collect(java.nio.file.Path)"], ["java.lang.String", "com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator.translate(java.lang.CharSequence)"], ["void", "com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer)"], ["com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator", "com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator.with(com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator...)"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList$3.remove(int)"], ["void", "com.github.javaparser.utils.VisitorList$3.add(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList$3.set(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.utils.VisitorList$3.get(int)"], ["boolean", "com.github.javaparser.utils.VisitorList$3.add(java.lang.Object)"], ["<R, A> R", "com.github.javaparser.utils.VisitorMap$EqualsHashcodeOverridingFacade.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.utils.VisitorMap$EqualsHashcodeOverridingFacade.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["int", "com.github.javaparser.utils.VisitorMap$EqualsHashcodeOverridingFacade.hashCode()"], ["boolean", "com.github.javaparser.utils.VisitorMap$EqualsHashcodeOverridingFacade.equals(java.lang.Object)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt(com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.DoStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.DoStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.DoStmt.getBody()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.DoStmt.getCondition()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.setCondition(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.DoStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.clone()"], ["com.github.javaparser.metamodel.DoStmtMetaModel", "com.github.javaparser.ast.stmt.DoStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.DoStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.DoStmt.isDoStmt()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.asDoStmt()"], ["void", "com.github.javaparser.ast.stmt.DoStmt.ifDoStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.DoStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.DoStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.DoStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.DoStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.DoStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.DoStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.DoStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.DoStmt.setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntry>)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntry>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.SwitchStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.SwitchStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.SwitchEntry", "com.github.javaparser.ast.stmt.SwitchStmt.getEntry(int)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.SwitchStmt.getSelector()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntry>)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.setSelector(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.SwitchStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.clone()"], ["com.github.javaparser.metamodel.SwitchStmtMetaModel", "com.github.javaparser.ast.stmt.SwitchStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.SwitchStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.SwitchStmt.isSwitchStmt()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.asSwitchStmt()"], ["void", "com.github.javaparser.ast.stmt.SwitchStmt.ifSwitchStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.SwitchStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.SwitchStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.SwitchStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.SwitchStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SwitchStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.SwitchStmt.clone()"], ["com.github.javaparser.ast.nodeTypes.SwitchNode", "com.github.javaparser.ast.stmt.SwitchStmt.clone()"], ["com.github.javaparser.ast.nodeTypes.SwitchNode", "com.github.javaparser.ast.stmt.SwitchStmt.setSelector(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.nodeTypes.SwitchNode", "com.github.javaparser.ast.stmt.SwitchStmt.setEntries(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.TryStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.TryStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.TryStmt.getTryBlock()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setCatchClauses(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setFinallyBlock(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setTryBlock(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setResources(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["boolean", "com.github.javaparser.ast.stmt.TryStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.removeFinallyBlock()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.removeTryBlock()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.clone()"], ["com.github.javaparser.metamodel.TryStmtMetaModel", "com.github.javaparser.ast.stmt.TryStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.TryStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.TryStmt.isTryStmt()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.asTryStmt()"], ["void", "com.github.javaparser.ast.stmt.TryStmt.ifTryStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.TryStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.TryStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.TryStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.TryStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.TryStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.TryStmt.clone()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ThrowStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ThrowStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ThrowStmt.getExpression()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ThrowStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt.clone()"], ["com.github.javaparser.metamodel.ThrowStmtMetaModel", "com.github.javaparser.ast.stmt.ThrowStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ThrowStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ThrowStmt.isThrowStmt()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt.asThrowStmt()"], ["void", "com.github.javaparser.ast.stmt.ThrowStmt.ifThrowStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ThrowStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ThrowStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ThrowStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ThrowStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ThrowStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ThrowStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ThrowStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ExpressionStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ExpressionStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ExpressionStmt.getExpression()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ExpressionStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()"], ["com.github.javaparser.metamodel.ExpressionStmtMetaModel", "com.github.javaparser.ast.stmt.ExpressionStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ExpressionStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.ExpressionStmt.isExpressionStmt()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt.asExpressionStmt()"], ["void", "com.github.javaparser.ast.stmt.ExpressionStmt.ifExpressionStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.ExpressionStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ExpressionStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ExpressionStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExpressionStmt.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt()"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)"], ["<R, A> R", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getClassDeclaration()"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.setClassDeclaration(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)"], ["boolean", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()"], ["com.github.javaparser.metamodel.LocalClassDeclarationStmtMetaModel", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.isLocalClassDeclarationStmt()"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.asLocalClassDeclarationStmt()"], ["void", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.ifLocalClassDeclarationStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.LocalClassDeclarationStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()"], ["com.github.javaparser.ast.stmt.SwitchEntry$Type[]", "com.github.javaparser.ast.stmt.SwitchEntry$Type.values()"], ["com.github.javaparser.ast.stmt.SwitchEntry$Type", "com.github.javaparser.ast.stmt.SwitchEntry$Type.valueOf(java.lang.String)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.WhileStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.WhileStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.WhileStmt.getBody()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.WhileStmt.getCondition()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.setCondition(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.WhileStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.clone()"], ["com.github.javaparser.metamodel.WhileStmtMetaModel", "com.github.javaparser.ast.stmt.WhileStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.WhileStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.WhileStmt.isWhileStmt()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.asWhileStmt()"], ["void", "com.github.javaparser.ast.stmt.WhileStmt.ifWhileStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.WhileStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.WhileStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.WhileStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.WhileStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.WhileStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.WhileStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.WhileStmt.setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.WhileStmt.setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt()"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt.setStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["boolean", "com.github.javaparser.ast.stmt.BlockStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt.clone()"], ["com.github.javaparser.metamodel.BlockStmtMetaModel", "com.github.javaparser.ast.stmt.BlockStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.BlockStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.BlockStmt.isBlockStmt()"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt.asBlockStmt()"], ["void", "com.github.javaparser.ast.stmt.BlockStmt.ifBlockStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.BlockStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.BlockStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.BlockStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.BlockStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.BlockStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.BlockStmt.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.BlockStmt.setStatements(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt()"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.stmt.EmptyStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.EmptyStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.stmt.EmptyStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt.clone()"], ["com.github.javaparser.metamodel.EmptyStmtMetaModel", "com.github.javaparser.ast.stmt.EmptyStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.EmptyStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.EmptyStmt.isEmptyStmt()"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt.asEmptyStmt()"], ["void", "com.github.javaparser.ast.stmt.EmptyStmt.ifEmptyStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.EmptyStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.EmptyStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.EmptyStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.EmptyStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.EmptyStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.EmptyStmt.clone()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.TokenRange, com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.CatchClause.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.CatchClause.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.stmt.CatchClause.getParameter()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause.setParameter(com.github.javaparser.ast.body.Parameter)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.CatchClause.getBody()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["boolean", "com.github.javaparser.ast.stmt.CatchClause.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause.clone()"], ["com.github.javaparser.metamodel.CatchClauseMetaModel", "com.github.javaparser.ast.stmt.CatchClause.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.CatchClause.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.CatchClause.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.CatchClause.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.CatchClause.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.CatchClause.setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt(java.lang.String, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.LabeledStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.LabeledStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.LabeledStmt.getStatement()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.setStatement(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.stmt.LabeledStmt.getLabel()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.LabeledStmt.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.clone()"], ["com.github.javaparser.metamodel.LabeledStmtMetaModel", "com.github.javaparser.ast.stmt.LabeledStmt.getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.LabeledStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.stmt.LabeledStmt.isLabeledStmt()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.asLabeledStmt()"], ["void", "com.github.javaparser.ast.stmt.LabeledStmt.ifLabeledStmt(java.util.function.Consumer<com.github.javaparser.ast.stmt.LabeledStmt>)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.LabeledStmt.getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.LabeledStmt.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.LabeledStmt.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.LabeledStmt.clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.LabeledStmt.clone()"], ["com.github.javaparser.ast.Modifier$Keyword[]", "com.github.javaparser.ast.Modifier$Keyword.values()"], ["com.github.javaparser.ast.Modifier$Keyword", "com.github.javaparser.ast.Modifier$Keyword.valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.Modifier$Keyword.asString()"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment()"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment(java.lang.String)"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.comments.BlockComment.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.comments.BlockComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.comments.BlockComment.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment.clone()"], ["com.github.javaparser.metamodel.BlockCommentMetaModel", "com.github.javaparser.ast.comments.BlockComment.getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.BlockComment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.comments.BlockComment.isBlockComment()"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment.asBlockComment()"], ["void", "com.github.javaparser.ast.comments.BlockComment.ifBlockComment(java.util.function.Consumer<com.github.javaparser.ast.comments.BlockComment>)"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.BlockComment.getMetaModel()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.BlockComment.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.BlockComment.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.BlockComment.clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.BlockComment.clone()"], ["com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor()"], ["int", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.hashCode(com.github.javaparser.ast.Node)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Void)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentHashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor()"], ["boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.equals(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.VarType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.Modifier, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.GenericVisitorWithDefaults", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults()"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.defaultAction(com.github.javaparser.ast.Node, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.defaultAction(com.github.javaparser.ast.NodeList, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.CompilationUnit, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ForEachStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.Parameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.Name, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.ArrayType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.UnionType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.SwitchEntry, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.UnknownType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.VoidType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.WildcardType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.comments.LineComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.NodeList, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.body.ReceiverParameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.type.VarType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.Modifier, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SwitchExpr, A)"], ["com.github.javaparser.ast.visitor.CloneVisitor", "com.github.javaparser.ast.visitor.CloneVisitor()"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["int", "com.github.javaparser.ast.visitor.HashCodeVisitor.hashCode(com.github.javaparser.ast.Node)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Void)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.VoidVisitorWithDefaults", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults()"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.defaultAction(com.github.javaparser.ast.Node, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.defaultAction(com.github.javaparser.ast.NodeList, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.CompilationUnit, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ForEachStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.comments.LineComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.Parameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.Name, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.ArrayType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.UnionType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.SwitchEntry, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.UnknownType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.VoidType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.WildcardType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.NodeList, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.body.ReceiverParameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.Modifier, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.type.VarType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorWithDefaults.visit(com.github.javaparser.ast.expr.SwitchExpr, A)"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr()"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["<R, A> R", "com.github.javaparser.ast.expr.ArrayInitializerExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ArrayInitializerExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr.setValues(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["boolean", "com.github.javaparser.ast.expr.ArrayInitializerExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()"], ["com.github.javaparser.metamodel.ArrayInitializerExprMetaModel", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ArrayInitializerExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ArrayInitializerExpr.isArrayInitializerExpr()"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr.asArrayInitializerExpr()"], ["void", "com.github.javaparser.ast.expr.ArrayInitializerExpr.ifArrayInitializerExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ArrayInitializerExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr(long)"], ["<R, A> R", "com.github.javaparser.ast.expr.LongLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.LongLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.LongLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["long", "com.github.javaparser.ast.expr.LongLiteralExpr.asLong()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.setLong(long)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()"], ["com.github.javaparser.metamodel.LongLiteralExprMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LongLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.LongLiteralExpr.isLongLiteralExpr()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.asLongLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.LongLiteralExpr.ifLongLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LongLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.Expression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.Expression(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.expr.Expression.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.Expression.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.Expression.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.Expression.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.Expression.isAnnotationExpr()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.Expression.asAnnotationExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isArrayAccessExpr()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.Expression.asArrayAccessExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isArrayCreationExpr()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.Expression.asArrayCreationExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isArrayInitializerExpr()"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.Expression.asArrayInitializerExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isAssignExpr()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.Expression.asAssignExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isBinaryExpr()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.Expression.asBinaryExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isBooleanLiteralExpr()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.Expression.asBooleanLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isCastExpr()"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.Expression.asCastExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isCharLiteralExpr()"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.Expression.asCharLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isClassExpr()"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.Expression.asClassExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isConditionalExpr()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.Expression.asConditionalExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isDoubleLiteralExpr()"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.Expression.asDoubleLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isEnclosedExpr()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.Expression.asEnclosedExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isFieldAccessExpr()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.Expression.asFieldAccessExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isInstanceOfExpr()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.Expression.asInstanceOfExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isIntegerLiteralExpr()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.Expression.asIntegerLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isLambdaExpr()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.Expression.asLambdaExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isLiteralExpr()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.Expression.asLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isLiteralStringValueExpr()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.Expression.asLiteralStringValueExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isLongLiteralExpr()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.Expression.asLongLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isMarkerAnnotationExpr()"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.Expression.asMarkerAnnotationExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isMethodCallExpr()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.Expression.asMethodCallExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isMethodReferenceExpr()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.Expression.asMethodReferenceExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isNameExpr()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.Expression.asNameExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isNormalAnnotationExpr()"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.Expression.asNormalAnnotationExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isNullLiteralExpr()"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.Expression.asNullLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isObjectCreationExpr()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.Expression.asObjectCreationExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isSingleMemberAnnotationExpr()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.Expression.asSingleMemberAnnotationExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isStringLiteralExpr()"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.Expression.asStringLiteralExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isSuperExpr()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.Expression.asSuperExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isThisExpr()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.Expression.asThisExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isTypeExpr()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.Expression.asTypeExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isUnaryExpr()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.Expression.asUnaryExpr()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isVariableDeclarationExpr()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.Expression.asVariableDeclarationExpr()"], ["void", "com.github.javaparser.ast.expr.Expression.ifAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifArrayAccessExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ArrayAccessExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifArrayCreationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ArrayCreationExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifArrayInitializerExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ArrayInitializerExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifAssignExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.AssignExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifBinaryExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.BinaryExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifBooleanLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.BooleanLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifCastExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.CastExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifCharLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.CharLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifClassExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ClassExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifConditionalExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ConditionalExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifDoubleLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.DoubleLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifEnclosedExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.EnclosedExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifFieldAccessExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.FieldAccessExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifInstanceOfExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.InstanceOfExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifIntegerLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.IntegerLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifLambdaExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LambdaExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifLiteralStringValueExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LiteralStringValueExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifLongLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LongLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifMarkerAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.MarkerAnnotationExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifMethodCallExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.MethodCallExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifMethodReferenceExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.MethodReferenceExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifNameExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.NameExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifNormalAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.NormalAnnotationExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifNullLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.NullLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifObjectCreationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ObjectCreationExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifSingleMemberAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.SingleMemberAnnotationExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifStringLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.StringLiteralExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifSuperExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.SuperExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifThisExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ThisExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifTypeExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.TypeExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifUnaryExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.UnaryExpr>)"], ["void", "com.github.javaparser.ast.expr.Expression.ifVariableDeclarationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.VariableDeclarationExpr>)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.expr.Expression.calculateResolvedType()"], ["boolean", "com.github.javaparser.ast.expr.Expression.isSwitchExpr()"], ["com.github.javaparser.ast.expr.SwitchExpr", "com.github.javaparser.ast.expr.Expression.asSwitchExpr()"], ["void", "com.github.javaparser.ast.expr.Expression.ifSwitchExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.SwitchExpr>)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.Expression.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Expression.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.Expression.clone()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(java.lang.String, com.github.javaparser.ast.expr.Expression...)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, java.lang.String)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["<R, A> R", "com.github.javaparser.ast.expr.MethodCallExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MethodCallExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.MethodCallExpr.getName()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["boolean", "com.github.javaparser.ast.expr.MethodCallExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.removeScope()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.clone()"], ["com.github.javaparser.metamodel.MethodCallExprMetaModel", "com.github.javaparser.ast.expr.MethodCallExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MethodCallExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.MethodCallExpr.isMethodCallExpr()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.asMethodCallExpr()"], ["void", "com.github.javaparser.ast.expr.MethodCallExpr.ifMethodCallExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.MethodCallExpr>)"], ["com.github.javaparser.resolution.declarations.ResolvedMethodDeclaration", "com.github.javaparser.ast.expr.MethodCallExpr.resolve()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.MethodCallExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MethodCallExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MethodCallExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MethodCallExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.removeScope()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["java.lang.Object", "com.github.javaparser.ast.expr.MethodCallExpr.resolve()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.AnnotationExpr.getName()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr.setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.AnnotationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr.clone()"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.AnnotationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.AnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.AnnotationExpr.isAnnotationExpr()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr.asAnnotationExpr()"], ["void", "com.github.javaparser.ast.expr.AnnotationExpr.ifAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.resolution.declarations.ResolvedAnnotationDeclaration", "com.github.javaparser.ast.expr.AnnotationExpr.resolve()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.AnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AnnotationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.AnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.AnnotationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.AnnotationExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.AnnotationExpr.setName(com.github.javaparser.ast.expr.Name)"], ["java.lang.Object", "com.github.javaparser.ast.expr.AnnotationExpr.resolve()"], ["com.github.javaparser.ast.expr.AssignExpr$Operator[]", "com.github.javaparser.ast.expr.AssignExpr$Operator.values()"], ["com.github.javaparser.ast.expr.AssignExpr$Operator", "com.github.javaparser.ast.expr.AssignExpr$Operator.valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.AssignExpr$Operator.asString()"], ["com.github.javaparser.ast.expr.UnaryExpr$Operator[]", "com.github.javaparser.ast.expr.UnaryExpr$Operator.values()"], ["com.github.javaparser.ast.expr.UnaryExpr$Operator", "com.github.javaparser.ast.expr.UnaryExpr$Operator.valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.UnaryExpr$Operator.asString()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr$Operator.isPostfix()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr$Operator.isPrefix()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr(int)"], ["<R, A> R", "com.github.javaparser.ast.expr.IntegerLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.IntegerLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.IntegerLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["int", "com.github.javaparser.ast.expr.IntegerLiteralExpr.asInt()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.setInt(int)"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()"], ["com.github.javaparser.metamodel.IntegerLiteralExprMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.IntegerLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.IntegerLiteralExpr.isIntegerLiteralExpr()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.asIntegerLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.IntegerLiteralExpr.ifIntegerLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.IntegerLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr()"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)"], ["<R, A> R", "com.github.javaparser.ast.expr.NormalAnnotationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.NormalAnnotationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.setPairs(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.addPair(java.lang.String, java.lang.String)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.addPair(java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.NormalAnnotationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.NormalAnnotationExprMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.NormalAnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.NormalAnnotationExpr.isNormalAnnotationExpr()"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.asNormalAnnotationExpr()"], ["void", "com.github.javaparser.ast.expr.NormalAnnotationExpr.ifNormalAnnotationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.NormalAnnotationExpr>)"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair()"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair(java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.MemberValuePair.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MemberValuePair.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.MemberValuePair.getName()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MemberValuePair.getValue()"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair.setValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.MemberValuePair.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair.clone()"], ["com.github.javaparser.metamodel.MemberValuePairMetaModel", "com.github.javaparser.ast.expr.MemberValuePair.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MemberValuePair.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MemberValuePair.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MemberValuePair.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MemberValuePair.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MemberValuePair.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.body.VariableDeclarator)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["<R, A> R", "com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["boolean", "com.github.javaparser.ast.expr.VariableDeclarationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()"], ["com.github.javaparser.metamodel.VariableDeclarationExprMetaModel", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.VariableDeclarationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.VariableDeclarationExpr.isVariableDeclarationExpr()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.asVariableDeclarationExpr()"], ["void", "com.github.javaparser.ast.expr.VariableDeclarationExpr.ifVariableDeclarationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.VariableDeclarationExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getValue()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.setValue(java.lang.String)"], ["boolean", "com.github.javaparser.ast.expr.LiteralStringValueExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LiteralStringValueExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.LiteralStringValueExpr.isLiteralStringValueExpr()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.asLiteralStringValueExpr()"], ["void", "com.github.javaparser.ast.expr.LiteralStringValueExpr.ifLiteralStringValueExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LiteralStringValueExpr>)"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()"], ["com.github.javaparser.ast.expr.BinaryExpr$Operator[]", "com.github.javaparser.ast.expr.BinaryExpr$Operator.values()"], ["com.github.javaparser.ast.expr.BinaryExpr$Operator", "com.github.javaparser.ast.expr.BinaryExpr$Operator.valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.BinaryExpr$Operator.asString()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.BinaryExpr$Operator)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.BinaryExpr$Operator)"], ["<R, A> R", "com.github.javaparser.ast.expr.BinaryExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.BinaryExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BinaryExpr.getLeft()"], ["com.github.javaparser.ast.expr.BinaryExpr$Operator", "com.github.javaparser.ast.expr.BinaryExpr.getOperator()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BinaryExpr.getRight()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.setLeft(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.setOperator(com.github.javaparser.ast.expr.BinaryExpr$Operator)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.setRight(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.BinaryExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.clone()"], ["com.github.javaparser.metamodel.BinaryExprMetaModel", "com.github.javaparser.ast.expr.BinaryExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.BinaryExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.BinaryExpr.isBinaryExpr()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.asBinaryExpr()"], ["void", "com.github.javaparser.ast.expr.BinaryExpr.ifBinaryExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.BinaryExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.BinaryExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BinaryExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.BinaryExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.BinaryExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.BinaryExpr.clone()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(com.github.javaparser.ast.expr.Name, java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.Name.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.Name.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.lang.String", "com.github.javaparser.ast.expr.Name.getIdentifier()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.setIdentifier(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.Name.asString()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.setQualifier(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.Name.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.removeQualifier()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.clone()"], ["com.github.javaparser.metamodel.NameMetaModel", "com.github.javaparser.ast.expr.Name.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.Name.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.Name.isTopLevel()"], ["boolean", "com.github.javaparser.ast.expr.Name.isInternal()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.Name.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Name.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.Name.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Name.setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.AssignExpr$Operator)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.AssignExpr$Operator)"], ["<R, A> R", "com.github.javaparser.ast.expr.AssignExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.AssignExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.AssignExpr$Operator", "com.github.javaparser.ast.expr.AssignExpr.getOperator()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AssignExpr.getTarget()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AssignExpr.getValue()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.setOperator(com.github.javaparser.ast.expr.AssignExpr$Operator)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.setTarget(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.setValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.AssignExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.clone()"], ["com.github.javaparser.metamodel.AssignExprMetaModel", "com.github.javaparser.ast.expr.AssignExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.AssignExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.AssignExpr.isAssignExpr()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.asAssignExpr()"], ["void", "com.github.javaparser.ast.expr.AssignExpr.ifAssignExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.AssignExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.AssignExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AssignExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.AssignExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.AssignExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.AssignExpr.clone()"], ["com.github.javaparser.ast.Node$Parsedness[]", "com.github.javaparser.ast.Node$Parsedness.values()"], ["com.github.javaparser.ast.Node$Parsedness", "com.github.javaparser.ast.Node$Parsedness.valueOf(java.lang.String)"], ["com.github.javaparser.ast.Node$ParentsVisitor", "com.github.javaparser.ast.Node$ParentsVisitor(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Node$ParentsVisitor.hasNext()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node$ParentsVisitor.next()"], ["java.lang.Object", "com.github.javaparser.ast.Node$ParentsVisitor.next()"], ["com.github.javaparser.ast.observer.AstObserver$ListChangeType[]", "com.github.javaparser.ast.observer.AstObserver$ListChangeType.values()"], ["com.github.javaparser.ast.observer.AstObserver$ListChangeType", "com.github.javaparser.ast.observer.AstObserver$ListChangeType.valueOf(java.lang.String)"], ["com.github.javaparser.ast.observer.PropagatingAstObserver", "com.github.javaparser.ast.observer.PropagatingAstObserver()"], ["com.github.javaparser.ast.observer.PropagatingAstObserver", "com.github.javaparser.ast.observer.PropagatingAstObserver.transformInPropagatingObserver(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.listChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.listReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.concreteListReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.observer.AstObserverAdapter", "com.github.javaparser.ast.observer.AstObserverAdapter()"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.listChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.listReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.observer.ObservableProperty$Type[]", "com.github.javaparser.ast.observer.ObservableProperty$Type.values()"], ["com.github.javaparser.ast.observer.ObservableProperty$Type", "com.github.javaparser.ast.observer.ObservableProperty$Type.valueOf(java.lang.String)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver$1.concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver$1.concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver$1.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.DataKey", "com.github.javaparser.ast.DataKey()"], ["int", "com.github.javaparser.ast.DataKey.hashCode()"], ["boolean", "com.github.javaparser.ast.DataKey.equals(java.lang.Object)"], ["com.github.javaparser.ast.Node$PostOrderIterator", "com.github.javaparser.ast.Node$PostOrderIterator(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Node$PostOrderIterator.hasNext()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node$PostOrderIterator.next()"], ["java.lang.Object", "com.github.javaparser.ast.Node$PostOrderIterator.next()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.PackageDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.PackageDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.PackageDeclaration.getName()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration.setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.PackageDeclaration.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration.clone()"], ["com.github.javaparser.metamodel.PackageDeclarationMetaModel", "com.github.javaparser.ast.PackageDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.PackageDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.PackageDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.PackageDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.PackageDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.PackageDeclaration.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.PackageDeclaration.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType()"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.type.VoidType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.VoidType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.VoidType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.VoidType.asString()"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType.clone()"], ["com.github.javaparser.metamodel.VoidTypeMetaModel", "com.github.javaparser.ast.type.VoidType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.VoidType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.VoidType.isVoidType()"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType.asVoidType()"], ["void", "com.github.javaparser.ast.type.VoidType.ifVoidType(java.util.function.Consumer<com.github.javaparser.ast.type.VoidType>)"], ["com.github.javaparser.resolution.types.ResolvedVoidType", "com.github.javaparser.ast.type.VoidType.resolve()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.VoidType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.VoidType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.VoidType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.VoidType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.VoidType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.VoidType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.VoidType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.VoidType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.VoidType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.type.ClassOrInterfaceType.getName()"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.isBoxedType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.ClassOrInterfaceType.toUnboxedType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setScope(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.ClassOrInterfaceType.asString()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.removeScope()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()"], ["com.github.javaparser.metamodel.ClassOrInterfaceTypeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.isClassOrInterfaceType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.asClassOrInterfaceType()"], ["void", "com.github.javaparser.ast.type.ClassOrInterfaceType.ifClassOrInterfaceType(java.util.function.Consumer<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.resolution.types.ResolvedReferenceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.resolve()"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.ClassOrInterfaceType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ClassOrInterfaceType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.ClassOrInterfaceType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.type.UnknownType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.UnknownType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.UnknownType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.UnknownType.asString()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType.clone()"], ["com.github.javaparser.metamodel.UnknownTypeMetaModel", "com.github.javaparser.ast.type.UnknownType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.UnknownType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.UnknownType.isUnknownType()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType.asUnknownType()"], ["void", "com.github.javaparser.ast.type.UnknownType.ifUnknownType(java.util.function.Consumer<com.github.javaparser.ast.type.UnknownType>)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.UnknownType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.UnknownType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnknownType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnknownType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.UnknownType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.UnknownType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.UnknownType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.UnknownType.clone()"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.JavadocParser.parse(com.github.javaparser.ast.comments.JavadocComment)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.JavadocParser.parse(java.lang.String)"], ["com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel.from(int)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel.toString()"], ["com.github.javaparser.printer.lexicalpreservation.NodeText$Option[]", "com.github.javaparser.printer.lexicalpreservation.NodeText$Option.values()"], ["com.github.javaparser.printer.lexicalpreservation.NodeText$Option", "com.github.javaparser.printer.lexicalpreservation.NodeText$Option.valueOf(java.lang.String)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementMatchers$1.match(com.github.javaparser.printer.lexicalpreservation.TextElement)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.TextElementMatchers$1.toString()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.getChild()"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.hashCode()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$EmptyIterator.hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$EmptyIterator.next()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$SingleElementIterator.hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$SingleElementIterator.next()"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$SingleElementIterator.remove()"], ["default", "com.github.javaparser.printer.lexicalpreservation.TextElementMatcher.com.github.javaparser.printer.lexicalpreservation.TextElementMatcher and(com.github.javaparser.printer.lexicalpreservation.TextElementMatcher)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$Observer.concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$Observer.concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$Observer.concreteListReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.TextElement", "com.github.javaparser.printer.lexicalpreservation.TextElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElement.match(com.github.javaparser.printer.lexicalpreservation.TextElement)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElement.isWhiteSpaceOrComment()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElement.isChild()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Difference.toString()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isArray()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.int arrayLevel()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isPrimitive()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isNull()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isUnionType()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isReference()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isConstraint()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isReferenceType()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isVoid()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isTypeVariable()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean isWildcard()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedArrayType asArrayType()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedReferenceType asReferenceType()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration asTypeParameter()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedTypeVariable asTypeVariable()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedPrimitiveType asPrimitive()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedWildcard asWildcard()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedLambdaConstraintType asConstraintType()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedUnionType asUnionType()"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedType replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType, java.util.Map<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType>)"], ["default", "com.github.javaparser.resolution.types.ResolvedType.com.github.javaparser.resolution.types.ResolvedType replaceTypeVariables(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType)"], ["default", "com.github.javaparser.resolution.types.ResolvedType.boolean mention(java.util.List<com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration>)"], ["boolean", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.equals(java.lang.Object)"], ["int", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.hashCode()"], ["java.lang.String", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.toString()"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.empty()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.getValue(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration)"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap$Builder", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.toBuilder()"], ["boolean", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.isEmpty()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap.replaceAll(com.github.javaparser.resolution.types.ResolvedType)"], ["default", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParameterValueProvider.com.github.javaparser.resolution.types.ResolvedType useThisTypeParametersOnTheGivenType(com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap$Builder", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap$Builder()"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap$Builder.build()"], ["com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap$Builder", "com.github.javaparser.resolution.types.parametrization.ResolvedTypeParametersMap$Builder.setValue(com.github.javaparser.resolution.declarations.ResolvedTypeParameterDeclaration, com.github.javaparser.resolution.types.ResolvedType)"], ["com.github.javaparser.resolution.types.ResolvedPrimitiveType[]", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.values()"], ["com.github.javaparser.resolution.types.ResolvedPrimitiveType", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.valueOf(java.lang.String)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.byName(java.lang.String)"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.toString()"], ["com.github.javaparser.resolution.types.ResolvedPrimitiveType", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.asPrimitive()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.isArray()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.isPrimitive()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.isReferenceType()"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.describe()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.isTypeVariable()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.isAssignableBy(com.github.javaparser.resolution.types.ResolvedType)"], ["java.lang.String", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.getBoxTypeQName()"], ["boolean", "com.github.javaparser.resolution.types.ResolvedPrimitiveType.isNumeric()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration()"], ["boolean", "com.github.javaparser.ParserConfiguration.isAttributeComments()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setAttributeComments(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isDoNotAssignCommentsPrecedingEmptyLines()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setDoNotAssignCommentsPrecedingEmptyLines(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isIgnoreAnnotationsWhenAttributingComments()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setIgnoreAnnotationsWhenAttributingComments(boolean)"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setStoreTokens(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isStoreTokens()"], ["int", "com.github.javaparser.ParserConfiguration.getTabSize()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setTabSize(int)"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setLexicalPreservationEnabled(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isLexicalPreservationEnabled()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setSymbolResolver(com.github.javaparser.resolution.SymbolResolver)"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setLanguageLevel(com.github.javaparser.ParserConfiguration$LanguageLevel)"], ["com.github.javaparser.ParserConfiguration$LanguageLevel", "com.github.javaparser.ParserConfiguration.getLanguageLevel()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setPreprocessUnicodeEscapes(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isPreprocessUnicodeEscapes()"], ["java.nio.charset.Charset", "com.github.javaparser.ParserConfiguration.getCharacterEncoding()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setCharacterEncoding(java.nio.charset.Charset)"], ["boolean", "com.github.javaparser.TokenRange$1.hasNext()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.TokenRange$1.next()"], ["java.lang.Object", "com.github.javaparser.TokenRange$1.next()"], ["com.github.javaparser.Position", "com.github.javaparser.Position(int, int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.pos(int, int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.withColumn(int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.withLine(int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.right(int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.nextLine()"], ["boolean", "com.github.javaparser.Position.valid()"], ["boolean", "com.github.javaparser.Position.invalid()"], ["com.github.javaparser.Position", "com.github.javaparser.Position.orIfInvalid(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Position.isAfter(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Position.isBefore(com.github.javaparser.Position)"], ["int", "com.github.javaparser.Position.compareTo(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Position.equals(java.lang.Object)"], ["int", "com.github.javaparser.Position.hashCode()"], ["java.lang.String", "com.github.javaparser.Position.toString()"], ["int", "com.github.javaparser.Position.compareTo(java.lang.Object)"], ["com.github.javaparser.JavaToken$Category[]", "com.github.javaparser.JavaToken$Category.values()"], ["com.github.javaparser.JavaToken$Category", "com.github.javaparser.JavaToken$Category.valueOf(java.lang.String)"], ["boolean", "com.github.javaparser.JavaToken$Category.isWhitespaceOrComment()"], ["boolean", "com.github.javaparser.JavaToken$Category.isWhitespace()"], ["boolean", "com.github.javaparser.JavaToken$Category.isEndOfLine()"], ["boolean", "com.github.javaparser.JavaToken$Category.isComment()"], ["boolean", "com.github.javaparser.JavaToken$Category.isWhitespaceButNotEndOfLine()"], ["boolean", "com.github.javaparser.JavaToken$Category.isIdentifier()"], ["boolean", "com.github.javaparser.JavaToken$Category.isKeyword()"], ["boolean", "com.github.javaparser.JavaToken$Category.isLiteral()"], ["boolean", "com.github.javaparser.JavaToken$Category.isSeparator()"], ["boolean", "com.github.javaparser.JavaToken$Category.isOperator()"], ["com.github.javaparser.version.Java12PostProcessor", "com.github.javaparser.version.Java12PostProcessor()"], ["com.github.javaparser.version.Java10PostProcessor", "com.github.javaparser.version.Java10PostProcessor()"], ["com.github.javaparser.version.Java11PostProcessor", "com.github.javaparser.version.Java11PostProcessor()"], ["com.github.javaparser.version.PostProcessors", "com.github.javaparser.version.PostProcessors(com.github.javaparser.ParseResult$PostProcessor...)"], ["com.github.javaparser.version.PostProcessors", "com.github.javaparser.version.PostProcessors.remove(com.github.javaparser.ParseResult$PostProcessor)"], ["com.github.javaparser.version.PostProcessors", "com.github.javaparser.version.PostProcessors.replace(com.github.javaparser.ParseResult$PostProcessor, com.github.javaparser.ParseResult$PostProcessor)"], ["com.github.javaparser.version.PostProcessors", "com.github.javaparser.version.PostProcessors.add(com.github.javaparser.ParseResult$PostProcessor)"], ["void", "com.github.javaparser.version.PostProcessors.process(com.github.javaparser.ParseResult<? extends com.github.javaparser.ast.Node>, com.github.javaparser.ParserConfiguration)"], ["int", "com.github.javaparser.UnicodeEscapeProcessingProvider.read(char[], int, int)"], ["void", "com.github.javaparser.UnicodeEscapeProcessingProvider.close()"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.getterName(java.lang.Class<?>, java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.getterToPropertyName(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.setterName(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.optionalOf(java.lang.String, boolean)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.f(java.lang.String, java.lang.Object...)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.fileInPackageAbsolutePath(java.lang.String, java.lang.String, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.fileInPackageAbsolutePath(java.nio.file.Path, java.lang.String, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.fileInPackageRelativePath(java.lang.String, java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.packageToPath(java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.packageAbsolutePath(java.lang.String, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.packageAbsolutePath(java.nio.file.Path, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.classLoaderRoot(java.lang.Class<?>)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.mavenModuleRoot(java.lang.Class<?>)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.subtractPaths(java.nio.file.Path, java.nio.file.Path)"], ["com.github.javaparser.utils.SourceZip", "com.github.javaparser.utils.SourceZip(java.nio.file.Path)"], ["com.github.javaparser.utils.SourceZip", "com.github.javaparser.utils.SourceZip(java.nio.file.Path, com.github.javaparser.ParserConfiguration)"], ["java.util.List<com.github.javaparser.utils.Pair<java.nio.file.Path, com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>>>", "com.github.javaparser.utils.SourceZip.parse()"], ["com.github.javaparser.utils.SourceZip", "com.github.javaparser.utils.SourceZip.parse(com.github.javaparser.utils.SourceZip$Callback)"], ["java.nio.file.Path", "com.github.javaparser.utils.SourceZip.getZipPath()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.utils.SourceZip.getParserConfiguration()"], ["com.github.javaparser.utils.SourceZip", "com.github.javaparser.utils.SourceZip.setParserConfiguration(com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.utils.ClassUtils", "com.github.javaparser.utils.ClassUtils()"], ["boolean", "com.github.javaparser.utils.ClassUtils.isPrimitiveOrWrapper(java.lang.Class<?>)"], ["boolean", "com.github.javaparser.utils.ClassUtils.isPrimitiveWrapper(java.lang.Class<?>)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$1.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$1.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["com.github.javaparser.utils.Utils", "com.github.javaparser.utils.Utils()"], ["<E> boolean", "com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)"], ["<T> T", "com.github.javaparser.utils.Utils.assertNotNull(T)"], ["java.lang.String", "com.github.javaparser.utils.Utils.assertNonEmpty(java.lang.String)"], ["<T extends java.lang.Number> T", "com.github.javaparser.utils.Utils.assertNonNegative(T)"], ["<T extends java.lang.Number> T", "com.github.javaparser.utils.Utils.assertPositive(T)"], ["java.lang.String", "com.github.javaparser.utils.Utils.escapeEndOfLines(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.readerToString(java.io.Reader)"], ["java.lang.String", "com.github.javaparser.utils.Utils.toCamelCase(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.screamingToCamelCase(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.camelCaseToScreaming(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.nextWord(java.lang.String)"], ["java.lang.StringBuilder", "com.github.javaparser.utils.Utils.indent(java.lang.StringBuilder, int)"], ["java.lang.String", "com.github.javaparser.utils.Utils.capitalize(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.decapitalize(java.lang.String)"], ["boolean", "com.github.javaparser.utils.Utils.valueIsNullOrEmpty(java.lang.Object)"], ["boolean", "com.github.javaparser.utils.Utils.valueIsNullOrEmptyStringOrOptional(java.lang.Object)"], ["<E> void", "com.github.javaparser.utils.Utils.replaceElementByObjectIdentity(java.util.List<E>, E, E)"], ["<E> void", "com.github.javaparser.utils.Utils.removeElementByObjectIdentity(java.util.List<E>, E)"], ["<E> int", "com.github.javaparser.utils.Utils.indexOfElementByObjectIdentity(java.util.List<E>, E)"], ["<T> java.util.Set<T>", "com.github.javaparser.utils.Utils.set(T...)"], ["java.lang.String", "com.github.javaparser.utils.Utils.normalizeEolInTextBlock(java.lang.String, java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.removeFileExtension(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.trimTrailingSpaces(java.lang.String)"], ["com.github.javaparser.utils.SourceRoot$Callback$Result[]", "com.github.javaparser.utils.SourceRoot$Callback$Result.values()"], ["com.github.javaparser.utils.SourceRoot$Callback$Result", "com.github.javaparser.utils.SourceRoot$Callback$Result.valueOf(java.lang.String)"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleRequiresDirective.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleRequiresDirective.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.setModifiers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleRequiresDirective.getName()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresDirective.isTransitive()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.setTransitive(boolean)"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresDirective.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.clone()"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresDirective.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresDirective.isModuleRequiresStmt()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.asModuleRequiresStmt()"], ["void", "com.github.javaparser.ast.modules.ModuleRequiresDirective.ifModuleRequiresStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleRequiresDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresDirective.isModuleRequiresDirective()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.asModuleRequiresDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleRequiresDirective.ifModuleRequiresDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleRequiresDirective>)"], ["com.github.javaparser.metamodel.ModuleRequiresDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleRequiresDirective.getMetaModel()"], ["com.github.javaparser.metamodel.ModuleDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleRequiresDirective.getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleRequiresDirective.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleRequiresDirective.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleRequiresDirective.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleRequiresDirective.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleRequiresDirective.setModifiers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleRequiresDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective()"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleUsesDirective.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleUsesDirective.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleUsesDirective.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective.setType(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective.clone()"], ["boolean", "com.github.javaparser.ast.modules.ModuleUsesDirective.isModuleUsesStmt()"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective.asModuleUsesStmt()"], ["void", "com.github.javaparser.ast.modules.ModuleUsesDirective.ifModuleUsesStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleUsesDirective>)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleUsesDirective.getName()"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective.setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.modules.ModuleUsesDirective.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleUsesDirective.isModuleUsesDirective()"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective.asModuleUsesDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleUsesDirective.ifModuleUsesDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleUsesDirective>)"], ["com.github.javaparser.metamodel.ModuleUsesDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleUsesDirective.getMetaModel()"], ["com.github.javaparser.metamodel.ModuleDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleUsesDirective.getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleUsesDirective.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleUsesDirective.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleUsesDirective.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleUsesDirective.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleUsesDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.ast.expr.Name, boolean)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleDirective>)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleDirective>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleDeclaration.getName()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDeclaration.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDeclaration.isOpen()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setOpen(boolean)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setDirectives(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleDirective>)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.clone()"], ["com.github.javaparser.metamodel.ModuleDeclarationMetaModel", "com.github.javaparser.ast.modules.ModuleDeclaration.getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.addDirective(java.lang.String)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.addDirective(com.github.javaparser.ast.modules.ModuleDirective)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleDeclaration.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDeclaration.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleDeclaration.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDeclaration.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDeclaration.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective()"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleProvidesDirective.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleProvidesDirective.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleProvidesDirective.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective.clone()"], ["boolean", "com.github.javaparser.ast.modules.ModuleProvidesDirective.isModuleProvidesStmt()"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective.asModuleProvidesStmt()"], ["void", "com.github.javaparser.ast.modules.ModuleProvidesDirective.ifModuleProvidesStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleProvidesDirective>)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleProvidesDirective.getName()"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective.setWith(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleProvidesDirective.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleProvidesDirective.isModuleProvidesDirective()"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective.asModuleProvidesDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleProvidesDirective.ifModuleProvidesDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleProvidesDirective>)"], ["com.github.javaparser.metamodel.ModuleProvidesDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleProvidesDirective.getMetaModel()"], ["com.github.javaparser.metamodel.ModuleDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleProvidesDirective.getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleProvidesDirective.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleProvidesDirective.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleProvidesDirective.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleProvidesDirective.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleProvidesDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleDirective()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleDirective(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleDirective.clone()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleExportsStmt()"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleExportsStmt()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleOpensStmt()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleOpensStmt()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleProvidesStmt()"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleProvidesStmt()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleRequiresStmt()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleRequiresStmt()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleUsesStmt()"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleUsesStmt()"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleExportsStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleExportsDirective>)"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleOpensStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleOpensDirective>)"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleProvidesStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleProvidesDirective>)"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleRequiresStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleRequiresDirective>)"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleUsesStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleUsesDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleExportsDirective()"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleExportsDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleExportsDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleExportsDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleOpensDirective()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleOpensDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleOpensDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleOpensDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleProvidesDirective()"], ["com.github.javaparser.ast.modules.ModuleProvidesDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleProvidesDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleProvidesDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleProvidesDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleRequiresDirective()"], ["com.github.javaparser.ast.modules.ModuleRequiresDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleRequiresDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleRequiresDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleRequiresDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDirective.isModuleUsesDirective()"], ["com.github.javaparser.ast.modules.ModuleUsesDirective", "com.github.javaparser.ast.modules.ModuleDirective.asModuleUsesDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleDirective.ifModuleUsesDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleUsesDirective>)"], ["com.github.javaparser.metamodel.ModuleDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleDirective.getMetaModel()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleDirective.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDirective.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleDirective.clone()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleOpensDirective.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleOpensDirective.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleOpensDirective.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleOpensDirective.getName()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective.setModuleNames(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective.clone()"], ["boolean", "com.github.javaparser.ast.modules.ModuleOpensDirective.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleOpensDirective.isModuleOpensStmt()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective.asModuleOpensStmt()"], ["void", "com.github.javaparser.ast.modules.ModuleOpensDirective.ifModuleOpensStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleOpensDirective>)"], ["boolean", "com.github.javaparser.ast.modules.ModuleOpensDirective.isModuleOpensDirective()"], ["com.github.javaparser.ast.modules.ModuleOpensDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective.asModuleOpensDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleOpensDirective.ifModuleOpensDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleOpensDirective>)"], ["com.github.javaparser.metamodel.ModuleOpensDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleOpensDirective.getMetaModel()"], ["com.github.javaparser.metamodel.ModuleDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleOpensDirective.getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleOpensDirective.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleOpensDirective.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleOpensDirective.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleOpensDirective.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleOpensDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective()"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleExportsDirective.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleExportsDirective.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleExportsDirective.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleExportsDirective.getName()"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.setModuleNames(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.clone()"], ["boolean", "com.github.javaparser.ast.modules.ModuleExportsDirective.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleExportsDirective.isModuleExportsStmt()"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.asModuleExportsStmt()"], ["void", "com.github.javaparser.ast.modules.ModuleExportsDirective.ifModuleExportsStmt(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleExportsDirective>)"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.addModuleName(java.lang.String)"], ["boolean", "com.github.javaparser.ast.modules.ModuleExportsDirective.isModuleExportsDirective()"], ["com.github.javaparser.ast.modules.ModuleExportsDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.asModuleExportsDirective()"], ["void", "com.github.javaparser.ast.modules.ModuleExportsDirective.ifModuleExportsDirective(java.util.function.Consumer<com.github.javaparser.ast.modules.ModuleExportsDirective>)"], ["com.github.javaparser.metamodel.ModuleExportsDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleExportsDirective.getMetaModel()"], ["com.github.javaparser.metamodel.ModuleDirectiveMetaModel", "com.github.javaparser.ast.modules.ModuleExportsDirective.getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleDirective", "com.github.javaparser.ast.modules.ModuleExportsDirective.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleExportsDirective.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleExportsDirective.clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleExportsDirective.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleExportsDirective.setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection()"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection(java.util.Collection<com.github.javaparser.ast.comments.Comment>)"], ["void", "com.github.javaparser.ast.comments.CommentsCollection.addComment(com.github.javaparser.ast.comments.Comment)"], ["boolean", "com.github.javaparser.ast.comments.CommentsCollection.contains(com.github.javaparser.ast.comments.Comment)"], ["int", "com.github.javaparser.ast.comments.CommentsCollection.size()"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection.minus(com.github.javaparser.ast.comments.CommentsCollection)"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection.copy()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>, com.github.javaparser.ast.modules.ModuleDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit(com.github.javaparser.TokenRange, com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>, com.github.javaparser.ast.modules.ModuleDeclaration)"], ["<R, A> R", "com.github.javaparser.ast.CompilationUnit.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.CompilationUnit.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.CompilationUnit.getImport(int)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setImports(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setImport(int, com.github.javaparser.ast.ImportDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(com.github.javaparser.ast.ImportDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setPackageDeclaration(com.github.javaparser.ast.PackageDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setType(int, com.github.javaparser.ast.body.TypeDeclaration<?>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addType(com.github.javaparser.ast.body.TypeDeclaration<?>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setPackageDeclaration(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(java.lang.Class<?>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(java.lang.String, boolean, boolean)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addClass(java.lang.String)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addClass(java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addInterface(java.lang.String)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addInterface(java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.CompilationUnit.addEnum(java.lang.String)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.CompilationUnit.addEnum(java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.CompilationUnit.addAnnotationDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.CompilationUnit.addAnnotationDeclaration(java.lang.String, com.github.javaparser.ast.Modifier$Keyword...)"], ["boolean", "com.github.javaparser.ast.CompilationUnit.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.removePackageDeclaration()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setModule(com.github.javaparser.ast.modules.ModuleDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.removeModule()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setStorage(java.nio.file.Path)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.CompilationUnit.setModule(java.lang.String)"], ["void", "com.github.javaparser.ast.CompilationUnit.recalculatePositions()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.clone()"], ["com.github.javaparser.metamodel.CompilationUnitMetaModel", "com.github.javaparser.ast.CompilationUnit.getMetaModel()"], ["boolean", "com.github.javaparser.ast.CompilationUnit.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.CompilationUnit.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.CompilationUnit.clone()"], ["java.lang.Object", "com.github.javaparser.ast.CompilationUnit.clone()"], ["com.github.javaparser.ast.validator.Java1_4Validator", "com.github.javaparser.ast.validator.Java1_4Validator()"], ["com.github.javaparser.ast.validator.Java6Validator", "com.github.javaparser.ast.validator.Java6Validator()"], ["com.github.javaparser.ast.validator.Java1_2Validator", "com.github.javaparser.ast.validator.Java1_2Validator()"], ["void", "com.github.javaparser.ast.validator.ReservedKeywordValidator.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.ReservedKeywordValidator.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.ReservedKeywordValidator.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.ReservedKeywordValidator.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["com.github.javaparser.ast.validator.Java1_0Validator", "com.github.javaparser.ast.validator.Java1_0Validator()"], ["com.github.javaparser.ast.validator.Java12Validator", "com.github.javaparser.ast.validator.Java12Validator()"], ["com.github.javaparser.ast.validator.VisitorValidator", "com.github.javaparser.ast.validator.VisitorValidator()"], ["void", "com.github.javaparser.ast.validator.VisitorValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.VisitorValidator.accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.SingleNodeTypeValidator", "com.github.javaparser.ast.validator.SingleNodeTypeValidator(java.lang.Class<N>, com.github.javaparser.ast.validator.TypedValidator<N>)"], ["void", "com.github.javaparser.ast.validator.SingleNodeTypeValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.SingleNodeTypeValidator.accept(java.lang.Object, java.lang.Object)"], ["default", "com.github.javaparser.ast.validator.TypedValidator.com.github.javaparser.ParseResult$PostProcessor postProcessor()"], ["default", "com.github.javaparser.ast.validator.TypedValidator.void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator()"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator()"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.VarValidator", "com.github.javaparser.ast.validator.chunks.VarValidator(boolean)"], ["void", "com.github.javaparser.ast.validator.chunks.VarValidator.accept(com.github.javaparser.ast.type.VarType, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.VarValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.VarValidator.accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.CommonValidators", "com.github.javaparser.ast.validator.chunks.CommonValidators()"], ["com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator()"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.ModifierValidator", "com.github.javaparser.ast.validator.chunks.ModifierValidator(boolean, boolean, boolean)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.validator.TreeVisitorValidator", "com.github.javaparser.ast.validator.TreeVisitorValidator(com.github.javaparser.ast.validator.Validator)"], ["void", "com.github.javaparser.ast.validator.TreeVisitorValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.TreeVisitorValidator.accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.Java1_1Validator", "com.github.javaparser.ast.validator.Java1_1Validator()"], ["com.github.javaparser.ast.validator.Java9Validator", "com.github.javaparser.ast.validator.Java9Validator()"], ["com.github.javaparser.ast.validator.Java11Validator", "com.github.javaparser.ast.validator.Java11Validator()"], ["com.github.javaparser.ast.validator.Java1_3Validator", "com.github.javaparser.ast.validator.Java1_3Validator()"], ["com.github.javaparser.ast.validator.SimpleValidator", "com.github.javaparser.ast.validator.SimpleValidator(java.lang.Class<N>, java.util.function.Predicate<N>, java.util.function.BiConsumer<N, com.github.javaparser.ast.validator.ProblemReporter>)"], ["com.github.javaparser.ast.validator.Java8Validator", "com.github.javaparser.ast.validator.Java8Validator()"], ["com.github.javaparser.ast.visitor.GenericVisitorAdapter", "com.github.javaparser.ast.visitor.GenericVisitorAdapter()"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForEachStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntry, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.NodeList, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.ReceiverParameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.VarType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.Modifier, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SwitchExpr, A)"], ["com.github.javaparser.ast.visitor.VoidVisitorAdapter", "com.github.javaparser.ast.visitor.VoidVisitorAdapter()"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForEachStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntry, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.NodeList, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.ReceiverParameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.VarType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.Modifier, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SwitchExpr, A)"], ["com.github.javaparser.ast.visitor.NoCommentEqualsVisitor", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor()"], ["boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.equals(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.VarType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.Modifier, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.NoCommentEqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.GenericListVisitorAdapter", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter()"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SwitchExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.Modifier, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.VarType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ReceiverParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresDirective, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForEachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntry, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.EnclosedExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.EnclosedExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.EnclosedExpr.getInner()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.setInner(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.EnclosedExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.removeInner()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.clone()"], ["com.github.javaparser.metamodel.EnclosedExprMetaModel", "com.github.javaparser.ast.expr.EnclosedExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.EnclosedExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.EnclosedExpr.isEnclosedExpr()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.asEnclosedExpr()"], ["void", "com.github.javaparser.ast.expr.EnclosedExpr.ifEnclosedExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.EnclosedExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.EnclosedExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.EnclosedExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.EnclosedExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.EnclosedExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.EnclosedExpr.clone()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.UnaryExpr$Operator)"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.UnaryExpr$Operator)"], ["<R, A> R", "com.github.javaparser.ast.expr.UnaryExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.UnaryExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.UnaryExpr.getExpression()"], ["com.github.javaparser.ast.expr.UnaryExpr$Operator", "com.github.javaparser.ast.expr.UnaryExpr.getOperator()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.setOperator(com.github.javaparser.ast.expr.UnaryExpr$Operator)"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.isPostfix()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.isPrefix()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.clone()"], ["com.github.javaparser.metamodel.UnaryExprMetaModel", "com.github.javaparser.ast.expr.UnaryExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.isUnaryExpr()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.asUnaryExpr()"], ["void", "com.github.javaparser.ast.expr.UnaryExpr.ifUnaryExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.UnaryExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.UnaryExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.UnaryExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.UnaryExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.UnaryExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.UnaryExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.UnaryExpr.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr()"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.expr.NullLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.NullLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.NullLiteralExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NullLiteralExprMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.NullLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.NullLiteralExpr.isNullLiteralExpr()"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr.asNullLiteralExpr()"], ["void", "com.github.javaparser.ast.expr.NullLiteralExpr.ifNullLiteralExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.NullLiteralExpr>)"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.expr.ObjectCreationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ObjectCreationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["void", "com.github.javaparser.ast.expr.ObjectCreationExpr.addAnonymousClassBody(com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.expr.ObjectCreationExpr.getType()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setAnonymousClassBody(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setType(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["boolean", "com.github.javaparser.ast.expr.ObjectCreationExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.removeScope()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()"], ["com.github.javaparser.metamodel.ObjectCreationExprMetaModel", "com.github.javaparser.ast.expr.ObjectCreationExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ObjectCreationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.ObjectCreationExpr.isObjectCreationExpr()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.asObjectCreationExpr()"], ["void", "com.github.javaparser.ast.expr.ObjectCreationExpr.ifObjectCreationExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.ObjectCreationExpr>)"], ["com.github.javaparser.resolution.declarations.ResolvedConstructorDeclaration", "com.github.javaparser.ast.expr.ObjectCreationExpr.resolve()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ObjectCreationExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ObjectCreationExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ObjectCreationExpr.getType()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.removeScope()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setScope(com.github.javaparser.ast.expr.Expression)"], ["java.lang.Object", "com.github.javaparser.ast.expr.ObjectCreationExpr.resolve()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ReferenceType)"], ["<R, A> R", "com.github.javaparser.ast.expr.InstanceOfExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.InstanceOfExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.InstanceOfExpr.getExpression()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.expr.InstanceOfExpr.getType()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.setType(com.github.javaparser.ast.type.ReferenceType)"], ["boolean", "com.github.javaparser.ast.expr.InstanceOfExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()"], ["com.github.javaparser.metamodel.InstanceOfExprMetaModel", "com.github.javaparser.ast.expr.InstanceOfExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.InstanceOfExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.InstanceOfExpr.isInstanceOfExpr()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.asInstanceOfExpr()"], ["void", "com.github.javaparser.ast.expr.InstanceOfExpr.ifInstanceOfExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.InstanceOfExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.InstanceOfExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.InstanceOfExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.InstanceOfExpr.setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.InstanceOfExpr.getType()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.InstanceOfExpr.setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.Statement, boolean)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.Statement, boolean)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.expr.LambdaExpr.getBody()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.setBody(com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.expr.LambdaExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.LambdaExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.isEnclosingParameters()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.setEnclosingParameters(boolean)"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.clone()"], ["com.github.javaparser.metamodel.LambdaExprMetaModel", "com.github.javaparser.ast.expr.LambdaExpr.getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.isLambdaExpr()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.asLambdaExpr()"], ["void", "com.github.javaparser.ast.expr.LambdaExpr.ifLambdaExpr(java.util.function.Consumer<com.github.javaparser.ast.expr.LambdaExpr>)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LambdaExpr.getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LambdaExpr.clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LambdaExpr.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LambdaExpr.clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LambdaExpr.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LambdaExpr.setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.NodeList", "com.github.javaparser.ast.NodeList()"], ["com.github.javaparser.ast.NodeList", "com.github.javaparser.ast.NodeList(java.util.Collection<N>)"], ["com.github.javaparser.ast.NodeList", "com.github.javaparser.ast.NodeList(N...)"], ["boolean", "com.github.javaparser.ast.NodeList.add(N)"], ["boolean", "com.github.javaparser.ast.NodeList.remove(com.github.javaparser.ast.Node)"], ["N", "com.github.javaparser.ast.NodeList.removeFirst()"], ["N", "com.github.javaparser.ast.NodeList.removeLast()"], ["<X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X>", "com.github.javaparser.ast.NodeList.nodeList(X...)"], ["<X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X>", "com.github.javaparser.ast.NodeList.nodeList(java.util.Collection<X>)"], ["<X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X>", "com.github.javaparser.ast.NodeList.nodeList(com.github.javaparser.ast.NodeList<X>)"], ["boolean", "com.github.javaparser.ast.NodeList.contains(N)"], ["int", "com.github.javaparser.ast.NodeList.size()"], ["N", "com.github.javaparser.ast.NodeList.get(int)"], ["N", "com.github.javaparser.ast.NodeList.set(int, N)"], ["N", "com.github.javaparser.ast.NodeList.remove(int)"], ["boolean", "com.github.javaparser.ast.NodeList.isEmpty()"], ["void", "com.github.javaparser.ast.NodeList.sort(java.util.Comparator<? super N>)"], ["void", "com.github.javaparser.ast.NodeList.addAll(com.github.javaparser.ast.NodeList<N>)"], ["void", "com.github.javaparser.ast.NodeList.add(int, N)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.NodeList.getParentNodeForChildren()"], ["<R, A> R", "com.github.javaparser.ast.NodeList.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.NodeList.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["void", "com.github.javaparser.ast.NodeList.forEach(java.util.function.Consumer<? super N>)"], ["boolean", "com.github.javaparser.ast.NodeList.contains(java.lang.Object)"], ["java.lang.Object[]", "com.github.javaparser.ast.NodeList.toArray()"], ["<T> T[]", "com.github.javaparser.ast.NodeList.toArray(T[])"], ["boolean", "com.github.javaparser.ast.NodeList.remove(java.lang.Object)"], ["boolean", "com.github.javaparser.ast.NodeList.containsAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.ast.NodeList.addAll(java.util.Collection<? extends N>)"], ["boolean", "com.github.javaparser.ast.NodeList.addAll(int, java.util.Collection<? extends N>)"], ["boolean", "com.github.javaparser.ast.NodeList.removeAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.ast.NodeList.retainAll(java.util.Collection<?>)"], ["void", "com.github.javaparser.ast.NodeList.replaceAll(java.util.function.UnaryOperator<N>)"], ["boolean", "com.github.javaparser.ast.NodeList.removeIf(java.util.function.Predicate<? super N>)"], ["void", "com.github.javaparser.ast.NodeList.clear()"], ["boolean", "com.github.javaparser.ast.NodeList.equals(java.lang.Object)"], ["int", "com.github.javaparser.ast.NodeList.hashCode()"], ["int", "com.github.javaparser.ast.NodeList.indexOf(java.lang.Object)"], ["int", "com.github.javaparser.ast.NodeList.lastIndexOf(java.lang.Object)"], ["void", "com.github.javaparser.ast.NodeList.unregister(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.NodeList.register(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.NodeList.isRegistered(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.NodeList.replace(N, N)"], ["boolean", "com.github.javaparser.ast.NodeList.isNonEmpty()"], ["void", "com.github.javaparser.ast.NodeList.ifNonEmpty(java.util.function.Consumer<? super com.github.javaparser.ast.NodeList<N>>)"], ["<T extends com.github.javaparser.ast.Node> java.util.stream.Collector<T, com.github.javaparser.ast.NodeList<T>, com.github.javaparser.ast.NodeList<T>>", "com.github.javaparser.ast.NodeList.toNodeList()"], ["java.lang.String", "com.github.javaparser.ast.NodeList.toString()"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.remove(int)"], ["void", "com.github.javaparser.ast.NodeList.add(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.set(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.get(int)"], ["boolean", "com.github.javaparser.ast.NodeList.add(java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.setParentNode(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.observer.ObservableProperty[]", "com.github.javaparser.ast.observer.ObservableProperty.values()"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.ast.observer.ObservableProperty.valueOf(java.lang.String)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.ast.observer.ObservableProperty.fromCamelCaseName(java.lang.String)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isDerived()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isAboutNodes()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isAboutValues()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isMultiple()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isSingle()"], ["java.lang.String", "com.github.javaparser.ast.observer.ObservableProperty.camelCaseName()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsSingleReference(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.NodeList<? extends com.github.javaparser.ast.Node>", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsMultipleReference(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsStringAttribute(com.github.javaparser.ast.Node)"], ["java.lang.Boolean", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsBooleanAttribute(com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.ast.observer.ObservableProperty.getRawValue(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isNull(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isNullOrNotPresent(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isNullOrEmpty(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.PrimitiveType$Primitive[]", "com.github.javaparser.ast.type.PrimitiveType$Primitive.values()"], ["com.github.javaparser.ast.type.PrimitiveType$Primitive", "com.github.javaparser.ast.type.PrimitiveType$Primitive.valueOf(java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.PrimitiveType$Primitive.toBoxedType()"], ["java.lang.String", "com.github.javaparser.ast.type.PrimitiveType$Primitive.asString()"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ArrayType$Origin, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.setTokenRange(com.github.javaparser.TokenRange)"], ["com.github.javaparser.ast.type.ArrayType$Origin", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.getOrigin()"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.setOrigin(com.github.javaparser.ast.type.ArrayType$Origin)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.type.Type.getAnnotation(int)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type.getElementType()"], ["int", "com.github.javaparser.ast.type.Type.getArrayLevel()"], ["boolean", "com.github.javaparser.ast.type.Type.remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type.clone()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.Type.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.Type.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.Type.isArrayType()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.Type.asArrayType()"], ["boolean", "com.github.javaparser.ast.type.Type.isClassOrInterfaceType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.Type.asClassOrInterfaceType()"], ["boolean", "com.github.javaparser.ast.type.Type.isIntersectionType()"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.Type.asIntersectionType()"], ["boolean", "com.github.javaparser.ast.type.Type.isPrimitiveType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.Type.asPrimitiveType()"], ["boolean", "com.github.javaparser.ast.type.Type.isReferenceType()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.Type.asReferenceType()"], ["boolean", "com.github.javaparser.ast.type.Type.isTypeParameter()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.Type.asTypeParameter()"], ["boolean", "com.github.javaparser.ast.type.Type.isUnionType()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.Type.asUnionType()"], ["boolean", "com.github.javaparser.ast.type.Type.isUnknownType()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.Type.asUnknownType()"], ["boolean", "com.github.javaparser.ast.type.Type.isVoidType()"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.Type.asVoidType()"], ["boolean", "com.github.javaparser.ast.type.Type.isWildcardType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.Type.asWildcardType()"], ["void", "com.github.javaparser.ast.type.Type.ifArrayType(java.util.function.Consumer<com.github.javaparser.ast.type.ArrayType>)"], ["void", "com.github.javaparser.ast.type.Type.ifClassOrInterfaceType(java.util.function.Consumer<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["void", "com.github.javaparser.ast.type.Type.ifIntersectionType(java.util.function.Consumer<com.github.javaparser.ast.type.IntersectionType>)"], ["void", "com.github.javaparser.ast.type.Type.ifPrimitiveType(java.util.function.Consumer<com.github.javaparser.ast.type.PrimitiveType>)"], ["void", "com.github.javaparser.ast.type.Type.ifReferenceType(java.util.function.Consumer<com.github.javaparser.ast.type.ReferenceType>)"], ["void", "com.github.javaparser.ast.type.Type.ifTypeParameter(java.util.function.Consumer<com.github.javaparser.ast.type.TypeParameter>)"], ["void", "com.github.javaparser.ast.type.Type.ifUnionType(java.util.function.Consumer<com.github.javaparser.ast.type.UnionType>)"], ["void", "com.github.javaparser.ast.type.Type.ifUnknownType(java.util.function.Consumer<com.github.javaparser.ast.type.UnknownType>)"], ["void", "com.github.javaparser.ast.type.Type.ifVoidType(java.util.function.Consumer<com.github.javaparser.ast.type.VoidType>)"], ["void", "com.github.javaparser.ast.type.Type.ifWildcardType(java.util.function.Consumer<com.github.javaparser.ast.type.WildcardType>)"], ["boolean", "com.github.javaparser.ast.type.Type.isVarType()"], ["com.github.javaparser.ast.type.VarType", "com.github.javaparser.ast.type.Type.asVarType()"], ["void", "com.github.javaparser.ast.type.Type.ifVarType(java.util.function.Consumer<com.github.javaparser.ast.type.VarType>)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.Type.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.Type.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.Type.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.Type.resolve()"], ["com.github.javaparser.resolution.types.ResolvedArrayType", "com.github.javaparser.ast.type.ArrayType.resolve()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.type.ArrayType$Origin, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.AnnotationExpr...)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.type.ArrayType$Origin, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.ArrayType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.ArrayType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.getComponentType()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.setComponentType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.wrapInArrayTypes(com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>...)"], ["com.github.javaparser.utils.Pair<com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>>", "com.github.javaparser.ast.type.ArrayType.unwrapArrayTypes(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType$Origin", "com.github.javaparser.ast.type.ArrayType.getOrigin()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.setOrigin(com.github.javaparser.ast.type.ArrayType$Origin)"], ["boolean", "com.github.javaparser.ast.type.ArrayType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.ArrayType.asString()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.clone()"], ["com.github.javaparser.metamodel.ArrayTypeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.ArrayType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.ArrayType.isArrayType()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.asArrayType()"], ["void", "com.github.javaparser.ast.type.ArrayType.ifArrayType(java.util.function.Consumer<com.github.javaparser.ast.type.ArrayType>)"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ArrayType.clone()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.ArrayType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.ArrayType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ArrayType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.ArrayType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ArrayType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.setElements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.UnionType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.UnionType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.type.UnionType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.UnionType.asString()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.clone()"], ["com.github.javaparser.metamodel.UnionTypeMetaModel", "com.github.javaparser.ast.type.UnionType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.UnionType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.UnionType.isUnionType()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.asUnionType()"], ["void", "com.github.javaparser.ast.type.UnionType.ifUnionType(java.util.function.Consumer<com.github.javaparser.ast.type.UnionType>)"], ["com.github.javaparser.resolution.types.ResolvedUnionType", "com.github.javaparser.ast.type.UnionType.resolve()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.UnionType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.UnionType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnionType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnionType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.UnionType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.UnionType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.UnionType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.UnionType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.UnionType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.WildcardType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.WildcardType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setExtendedType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setSuperType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.WildcardType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.WildcardType.asString()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.removeExtendedType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.removeSuperType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.clone()"], ["com.github.javaparser.metamodel.WildcardTypeMetaModel", "com.github.javaparser.ast.type.WildcardType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.WildcardType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType)"], ["boolean", "com.github.javaparser.ast.type.WildcardType.isWildcardType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.asWildcardType()"], ["void", "com.github.javaparser.ast.type.WildcardType.ifWildcardType(java.util.function.Consumer<com.github.javaparser.ast.type.WildcardType>)"], ["com.github.javaparser.resolution.types.ResolvedWildcard", "com.github.javaparser.ast.type.WildcardType.resolve()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.WildcardType.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.WildcardType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.WildcardType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.WildcardType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.WildcardType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.WildcardType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.WildcardType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.WildcardType.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.WildcardType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.ArrayType$Origin[]", "com.github.javaparser.ast.type.ArrayType$Origin.values()"], ["com.github.javaparser.ast.type.ArrayType$Origin", "com.github.javaparser.ast.type.ArrayType$Origin.valueOf(java.lang.String)"], ["com.github.javaparser.ast.type.VarType", "com.github.javaparser.ast.type.VarType()"], ["com.github.javaparser.ast.type.VarType", "com.github.javaparser.ast.type.VarType(com.github.javaparser.TokenRange)"], ["com.github.javaparser.ast.type.VarType", "com.github.javaparser.ast.type.VarType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.VarType.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.VarType.asString()"], ["com.github.javaparser.ast.type.VarType", "com.github.javaparser.ast.type.VarType.clone()"], ["com.github.javaparser.metamodel.VarTypeMetaModel", "com.github.javaparser.ast.type.VarType.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.VarType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.VarType.resolve()"], ["<R, A> R", "com.github.javaparser.ast.type.VarType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.VarType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.type.VarType.isVarType()"], ["com.github.javaparser.ast.type.VarType", "com.github.javaparser.ast.type.VarType.asVarType()"], ["void", "com.github.javaparser.ast.type.VarType.ifVarType(java.util.function.Consumer<com.github.javaparser.ast.type.VarType>)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.VarType.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.VarType.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.VarType.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.VarType.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.VarType.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.VarType.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.VarType.clone()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(java.lang.String)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.TypeParameter.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.TypeParameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.type.TypeParameter.getName()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.setTypeBound(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.TypeParameter.remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.TypeParameter.asString()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.clone()"], ["com.github.javaparser.metamodel.TypeParameterMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.TypeParameter.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.type.TypeParameter.isTypeParameter()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.asTypeParameter()"], ["void", "com.github.javaparser.ast.type.TypeParameter.ifTypeParameter(java.util.function.Consumer<com.github.javaparser.ast.type.TypeParameter>)"], ["com.github.javaparser.resolution.types.ResolvedTypeVariable", "com.github.javaparser.ast.type.TypeParameter.resolve()"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.TypeParameter.clone()"], ["com.github.javaparser.resolution.types.ResolvedType", "com.github.javaparser.ast.type.TypeParameter.resolve()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.TypeParameter.clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.TypeParameter.setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.ast.type.TypeParameter.resolve()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.TypeParameter.clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.TypeParameter.clone()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.TypeParameter.setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.TypeParameter.setAnnotations(com.github.javaparser.ast.NodeList)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.java.lang.String getId()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.N setId(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.com.github.javaparser.ast.type.ClassOrInterfaceType getImplementedTypes(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N setImplementedType(int, com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplementedType(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplements(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplements(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplementedType(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplementedType(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.boolean isPublic()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.N setPublic(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N setName(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.java.lang.String getNameAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.com.github.javaparser.ast.expr.NameExpr getNameAsExpression()"], ["com.github.javaparser.javadoc.description.JavadocDescriptionElement", "com.github.javaparser.javadoc.description.JavadocInlineTag.fromText(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocInlineTag", "com.github.javaparser.javadoc.description.JavadocInlineTag(java.lang.String, com.github.javaparser.javadoc.description.JavadocInlineTag$Type, java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocInlineTag$Type", "com.github.javaparser.javadoc.description.JavadocInlineTag.getType()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocInlineTag.getContent()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocInlineTag.getName()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocInlineTag.toText()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocInlineTag.equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.description.JavadocInlineTag.hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocInlineTag.toString()"]]}