{
    "spring-messaging-5.3.18.jar": [
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate$TemporaryReplyChannel.setSendFailed(boolean)",
            "public void setSendFailed(boolean)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.GenericMessagingTemplate$TemporaryReplyChannel.receive()",
            "public org.springframework.messaging.Message<?> receive()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.GenericMessagingTemplate$TemporaryReplyChannel.receive(long)",
            "public org.springframework.messaging.Message<?> receive(long)"
        ],
        [
            "boolean",
            "org.springframework.messaging.core.GenericMessagingTemplate$TemporaryReplyChannel.send(org.springframework.messaging.Message<?>)",
            "public boolean send(org.springframework.messaging.Message<?>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.core.GenericMessagingTemplate$TemporaryReplyChannel.send(org.springframework.messaging.Message<?>, long)",
            "public boolean send(org.springframework.messaging.Message<?>, long)"
        ],
        [
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver",
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver()",
            "public org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver()"
        ],
        [
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver",
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.messaging.MessageChannel",
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver.resolveDestination(java.lang.String)",
            "public org.springframework.messaging.MessageChannel resolveDestination(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.core.BeanFactoryMessageChannelDestinationResolver.resolveDestination(java.lang.String)",
            "public java.lang.Object resolveDestination(java.lang.String) throws org.springframework.messaging.core.DestinationResolutionException"
        ],
        [
            "org.springframework.messaging.core.CachingDestinationResolverProxy",
            "org.springframework.messaging.core.CachingDestinationResolverProxy()",
            "public org.springframework.messaging.core.CachingDestinationResolverProxy()"
        ],
        [
            "org.springframework.messaging.core.CachingDestinationResolverProxy",
            "org.springframework.messaging.core.CachingDestinationResolverProxy(org.springframework.messaging.core.DestinationResolver<D>)",
            "public org.springframework.messaging.core.CachingDestinationResolverProxy(org.springframework.messaging.core.DestinationResolver<D>)"
        ],
        [
            "void",
            "org.springframework.messaging.core.CachingDestinationResolverProxy.setTargetDestinationResolver(org.springframework.messaging.core.DestinationResolver<D>)",
            "public void setTargetDestinationResolver(org.springframework.messaging.core.DestinationResolver<D>)"
        ],
        [
            "void",
            "org.springframework.messaging.core.CachingDestinationResolverProxy.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "D",
            "org.springframework.messaging.core.CachingDestinationResolverProxy.resolveDestination(java.lang.String)",
            "public D resolveDestination(java.lang.String) throws org.springframework.messaging.core.DestinationResolutionException"
        ],
        [
            "org.springframework.messaging.core.AbstractMessageSendingTemplate",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate()",
            "public org.springframework.messaging.core.AbstractMessageSendingTemplate()"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.setDefaultDestination(D)",
            "public void setDefaultDestination(D)"
        ],
        [
            "D",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.getDefaultDestination()",
            "public D getDefaultDestination()"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.setMessageConverter(org.springframework.messaging.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "org.springframework.messaging.converter.MessageConverter",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.getMessageConverter()",
            "public org.springframework.messaging.converter.MessageConverter getMessageConverter()"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.send(org.springframework.messaging.Message<?>)",
            "public void send(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.send(D, org.springframework.messaging.Message<?>)",
            "public void send(D, org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(java.lang.Object)",
            "public void convertAndSend(java.lang.Object) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(D, java.lang.Object)",
            "public void convertAndSend(D, java.lang.Object) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void convertAndSend(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(java.lang.Object, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSend(java.lang.Object, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(D, java.lang.Object, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSend(D, java.lang.Object, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSend(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "org.springframework.messaging.core.GenericMessagingTemplate",
            "org.springframework.messaging.core.GenericMessagingTemplate()",
            "public org.springframework.messaging.core.GenericMessagingTemplate()"
        ],
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate.setSendTimeout(long)",
            "public void setSendTimeout(long)"
        ],
        [
            "long",
            "org.springframework.messaging.core.GenericMessagingTemplate.getSendTimeout()",
            "public long getSendTimeout()"
        ],
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate.setReceiveTimeout(long)",
            "public void setReceiveTimeout(long)"
        ],
        [
            "long",
            "org.springframework.messaging.core.GenericMessagingTemplate.getReceiveTimeout()",
            "public long getReceiveTimeout()"
        ],
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate.setSendTimeoutHeader(java.lang.String)",
            "public void setSendTimeoutHeader(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.core.GenericMessagingTemplate.getSendTimeoutHeader()",
            "public java.lang.String getSendTimeoutHeader()"
        ],
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate.setReceiveTimeoutHeader(java.lang.String)",
            "public void setReceiveTimeoutHeader(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.core.GenericMessagingTemplate.getReceiveTimeoutHeader()",
            "public java.lang.String getReceiveTimeoutHeader()"
        ],
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate.setThrowExceptionOnLateReply(boolean)",
            "public void setThrowExceptionOnLateReply(boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.core.GenericMessagingTemplate.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate()",
            "public org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate()"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.setDestinationResolver(org.springframework.messaging.core.DestinationResolver<D>)",
            "public void setDestinationResolver(org.springframework.messaging.core.DestinationResolver<D>)"
        ],
        [
            "org.springframework.messaging.core.DestinationResolver<D>",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.getDestinationResolver()",
            "public org.springframework.messaging.core.DestinationResolver<D> getDestinationResolver()"
        ],
        [
            "void",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.send(java.lang.String, org.springframework.messaging.Message<?>)",
            "public void send(java.lang.String, org.springframework.messaging.Message<?>)"
        ],
        [
            "<T> void",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertAndSend(java.lang.String, T)",
            "public <T> void convertAndSend(java.lang.String, T)"
        ],
        [
            "<T> void",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertAndSend(java.lang.String, T, java.util.Map<java.lang.String, java.lang.Object>)",
            "public <T> void convertAndSend(java.lang.String, T, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "<T> void",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertAndSend(java.lang.String, T, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> void convertAndSend(java.lang.String, T, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "<T> void",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertAndSend(java.lang.String, T, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> void convertAndSend(java.lang.String, T, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.receive(java.lang.String)",
            "public org.springframework.messaging.Message<?> receive(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.receiveAndConvert(java.lang.String, java.lang.Class<T>)",
            "public <T> T receiveAndConvert(java.lang.String, java.lang.Class<T>)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.sendAndReceive(java.lang.String, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.Message<?> sendAndReceive(java.lang.String, org.springframework.messaging.Message<?>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractDestinationResolvingMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "org.springframework.messaging.core.DestinationResolutionException",
            "org.springframework.messaging.core.DestinationResolutionException(java.lang.String)",
            "public org.springframework.messaging.core.DestinationResolutionException(java.lang.String)"
        ],
        [
            "org.springframework.messaging.core.DestinationResolutionException",
            "org.springframework.messaging.core.DestinationResolutionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.core.DestinationResolutionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.core.AbstractMessageReceivingTemplate",
            "org.springframework.messaging.core.AbstractMessageReceivingTemplate()",
            "public org.springframework.messaging.core.AbstractMessageReceivingTemplate()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.AbstractMessageReceivingTemplate.receive()",
            "public org.springframework.messaging.Message<?> receive()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.AbstractMessageReceivingTemplate.receive(D)",
            "public org.springframework.messaging.Message<?> receive(D)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessageReceivingTemplate.receiveAndConvert(java.lang.Class<T>)",
            "public <T> T receiveAndConvert(java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessageReceivingTemplate.receiveAndConvert(D, java.lang.Class<T>)",
            "public <T> T receiveAndConvert(D, java.lang.Class<T>)"
        ],
        [
            "org.springframework.messaging.core.AbstractMessagingTemplate",
            "org.springframework.messaging.core.AbstractMessagingTemplate()",
            "public org.springframework.messaging.core.AbstractMessagingTemplate()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.AbstractMessagingTemplate.sendAndReceive(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.Message<?> sendAndReceive(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.core.AbstractMessagingTemplate.sendAndReceive(D, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.Message<?> sendAndReceive(D, org.springframework.messaging.Message<?>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessagingTemplate.convertSendAndReceive(java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessagingTemplate.convertSendAndReceive(D, java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(D, java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessagingTemplate.convertSendAndReceive(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessagingTemplate.convertSendAndReceive(java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessagingTemplate.convertSendAndReceive(D, java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(D, java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "<T> T",
            "org.springframework.messaging.core.AbstractMessagingTemplate.convertSendAndReceive(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(D, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "org.springframework.messaging.MessageHandlingException",
            "org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.MessageHandlingException",
            "org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>, java.lang.String)",
            "public org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>, java.lang.String)"
        ],
        [
            "org.springframework.messaging.MessageHandlingException",
            "org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>, java.lang.Throwable)",
            "public org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.MessageHandlingException",
            "org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.MessageHandlingException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod",
            "org.springframework.messaging.handler.HandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.messaging.handler.HandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod",
            "org.springframework.messaging.handler.HandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.messaging.handler.HandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod",
            "org.springframework.messaging.handler.HandlerMethod(java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Method)",
            "public org.springframework.messaging.handler.HandlerMethod(java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.HandlerMethod.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.messaging.handler.HandlerMethod.getLogger()",
            "public org.apache.commons.logging.Log getLogger()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.HandlerMethod.getBean()",
            "public java.lang.Object getBean()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.messaging.handler.HandlerMethod.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.messaging.handler.HandlerMethod.getBeanType()",
            "public java.lang.Class<?> getBeanType()"
        ],
        [
            "org.springframework.core.MethodParameter[]",
            "org.springframework.messaging.handler.HandlerMethod.getMethodParameters()",
            "public org.springframework.core.MethodParameter[] getMethodParameters()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.messaging.handler.HandlerMethod.getReturnType()",
            "public org.springframework.core.MethodParameter getReturnType()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.messaging.handler.HandlerMethod.getReturnValueType(java.lang.Object)",
            "public org.springframework.core.MethodParameter getReturnValueType(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.HandlerMethod.isVoid()",
            "public boolean isVoid()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.messaging.handler.HandlerMethod.getMethodAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A getMethodAnnotation(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.messaging.handler.HandlerMethod.hasMethodAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean hasMethodAnnotation(java.lang.Class<A>)"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod",
            "org.springframework.messaging.handler.HandlerMethod.getResolvedFromHandlerMethod()",
            "public org.springframework.messaging.handler.HandlerMethod getResolvedFromHandlerMethod()"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod",
            "org.springframework.messaging.handler.HandlerMethod.createWithResolvedBean()",
            "public org.springframework.messaging.handler.HandlerMethod createWithResolvedBean()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.HandlerMethod.getShortLogMessage()",
            "public java.lang.String getShortLogMessage()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.HandlerMethod.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.HandlerMethod.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.HandlerMethod.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.handler.AbstractMessageCondition",
            "org.springframework.messaging.handler.AbstractMessageCondition()",
            "public org.springframework.messaging.handler.AbstractMessageCondition()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.AbstractMessageCondition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.AbstractMessageCondition.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.AbstractMessageCondition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter(org.springframework.messaging.handler.HandlerMethod, java.lang.Object)",
            "public org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter(org.springframework.messaging.handler.HandlerMethod, java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter.getParameterType()",
            "public java.lang.Class<?> getParameterType()"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter clone()"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter clone()"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.core.annotation.SynthesizingMethodParameter clone()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition(java.lang.String...)",
            "public org.springframework.messaging.handler.DestinationPatternsMessageCondition(java.lang.String...)"
        ],
        [
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition(java.lang.String[], org.springframework.util.PathMatcher)",
            "public org.springframework.messaging.handler.DestinationPatternsMessageCondition(java.lang.String[], org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition(java.lang.String[], org.springframework.util.RouteMatcher)",
            "public org.springframework.messaging.handler.DestinationPatternsMessageCondition(java.lang.String[], org.springframework.util.RouteMatcher)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.getPatterns()",
            "public java.util.Set<java.lang.String> getPatterns()"
        ],
        [
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.combine(org.springframework.messaging.handler.DestinationPatternsMessageCondition)",
            "public org.springframework.messaging.handler.DestinationPatternsMessageCondition combine(org.springframework.messaging.handler.DestinationPatternsMessageCondition)"
        ],
        [
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.getMatchingCondition(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.handler.DestinationPatternsMessageCondition getMatchingCondition(org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.compareTo(org.springframework.messaging.handler.DestinationPatternsMessageCondition, org.springframework.messaging.Message<?>)",
            "public int compareTo(org.springframework.messaging.handler.DestinationPatternsMessageCondition, org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.compareTo(java.lang.Object, org.springframework.messaging.Message)",
            "public int compareTo(java.lang.Object, org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.getMatchingCondition(org.springframework.messaging.Message)",
            "public java.lang.Object getMatchingCondition(org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.annotation.support.AbstractNamedValueMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.AnnotationExceptionHandlerMethodResolver",
            "org.springframework.messaging.handler.annotation.support.AnnotationExceptionHandlerMethodResolver(java.lang.Class<?>)",
            "public org.springframework.messaging.handler.annotation.support.AnnotationExceptionHandlerMethodResolver(java.lang.Class<?>)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory()",
            "public org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.setMessageConverter(org.springframework.messaging.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.setValidator(org.springframework.validation.Validator)",
            "public void setValidator(org.springframework.validation.Validator)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.setCustomArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public void setCustomArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.setArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public void setArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod",
            "org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory.createInvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod createInvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter)",
            "public org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator)",
            "public org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator, boolean)",
            "public org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator, boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.annotation.support.PayloadMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException",
            "org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter)",
            "public org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException",
            "org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)",
            "public org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)"
        ],
        [
            "org.springframework.validation.BindingResult",
            "org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException.getBindingResult()",
            "public final org.springframework.validation.BindingResult getBindingResult()"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver()",
            "public org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver()"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter)",
            "public org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.annotation.support.MessageMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver(org.springframework.messaging.converter.MessageConverter)",
            "public org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator)",
            "public org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator, boolean)",
            "public org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver(org.springframework.messaging.converter.MessageConverter, org.springframework.validation.Validator, boolean)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.MethodArgumentTypeMismatchException",
            "org.springframework.messaging.handler.annotation.support.MethodArgumentTypeMismatchException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, java.lang.String)",
            "public org.springframework.messaging.handler.annotation.support.MethodArgumentTypeMismatchException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, java.lang.String)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver(org.springframework.core.convert.ConversionService)",
            "public org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver(org.springframework.core.convert.ConversionService)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver()",
            "public org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.annotation.support.HeadersMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver(org.springframework.core.convert.ConversionService, org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver(org.springframework.core.convert.ConversionService, org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.support.HeaderMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.annotation.reactive.AbstractNamedValueMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver(java.util.List<? extends org.springframework.core.codec.Decoder<?>>, org.springframework.validation.Validator, org.springframework.core.ReactiveAdapterRegistry, boolean)",
            "public org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver(java.util.List<? extends org.springframework.core.codec.Decoder<?>>, org.springframework.validation.Validator, org.springframework.core.ReactiveAdapterRegistry, boolean)"
        ],
        [
            "java.util.List<org.springframework.core.codec.Decoder<?>>",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver.getDecoders()",
            "public java.util.List<org.springframework.core.codec.Decoder<?>> getDecoders()"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver.getAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getAdapterRegistry()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver.isUseDefaultResolution()",
            "public boolean isUseDefaultResolution()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.messaging.handler.annotation.reactive.PayloadMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public final reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolver(org.springframework.core.convert.ConversionService)",
            "public org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolver(org.springframework.core.convert.ConversionService)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.reactive.DestinationVariableMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolver()",
            "public org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.annotation.reactive.HeadersMethodArgumentResolver.resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgumentValue(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver(org.springframework.core.convert.ConversionService, org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver(org.springframework.core.convert.ConversionService, org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.reactive.HeaderMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.annotation.reactive.ContinuationHandlerMethodArgumentResolver",
            "org.springframework.messaging.handler.annotation.reactive.ContinuationHandlerMethodArgumentResolver()",
            "public org.springframework.messaging.handler.annotation.reactive.ContinuationHandlerMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.annotation.reactive.ContinuationHandlerMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.messaging.handler.annotation.reactive.ContinuationHandlerMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler()",
            "public org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.setDecoders(java.util.List<? extends org.springframework.core.codec.Decoder<?>>)",
            "public void setDecoders(java.util.List<? extends org.springframework.core.codec.Decoder<?>>)"
        ],
        [
            "java.util.List<? extends org.springframework.core.codec.Decoder<?>>",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.getDecoders()",
            "public java.util.List<? extends org.springframework.core.codec.Decoder<?>> getDecoders()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.setValidator(org.springframework.validation.Validator)",
            "public void setValidator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.setRouteMatcher(org.springframework.util.RouteMatcher)",
            "public void setRouteMatcher(org.springframework.util.RouteMatcher)"
        ],
        [
            "org.springframework.util.RouteMatcher",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.getRouteMatcher()",
            "public org.springframework.util.RouteMatcher getRouteMatcher()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.getConversionService()",
            "public org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.registerMessagingAdvice(org.springframework.messaging.handler.MessagingAdviceBean)",
            "public void registerMessagingAdvice(org.springframework.messaging.handler.MessagingAdviceBean)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.annotation.reactive.MessageMappingMessageHandler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.messaging.handler.CompositeMessageCondition",
            "org.springframework.messaging.handler.CompositeMessageCondition(org.springframework.messaging.handler.MessageCondition<?>...)",
            "public org.springframework.messaging.handler.CompositeMessageCondition(org.springframework.messaging.handler.MessageCondition<?>...)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.MessageCondition<?>>",
            "org.springframework.messaging.handler.CompositeMessageCondition.getMessageConditions()",
            "public java.util.List<org.springframework.messaging.handler.MessageCondition<?>> getMessageConditions()"
        ],
        [
            "<T extends org.springframework.messaging.handler.MessageCondition<T>> T",
            "org.springframework.messaging.handler.CompositeMessageCondition.getCondition(java.lang.Class<T>)",
            "public <T extends org.springframework.messaging.handler.MessageCondition<T>> T getCondition(java.lang.Class<T>)"
        ],
        [
            "org.springframework.messaging.handler.CompositeMessageCondition",
            "org.springframework.messaging.handler.CompositeMessageCondition.combine(org.springframework.messaging.handler.CompositeMessageCondition)",
            "public org.springframework.messaging.handler.CompositeMessageCondition combine(org.springframework.messaging.handler.CompositeMessageCondition)"
        ],
        [
            "org.springframework.messaging.handler.CompositeMessageCondition",
            "org.springframework.messaging.handler.CompositeMessageCondition.getMatchingCondition(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.handler.CompositeMessageCondition getMatchingCondition(org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.CompositeMessageCondition.compareTo(org.springframework.messaging.handler.CompositeMessageCondition, org.springframework.messaging.Message<?>)",
            "public int compareTo(org.springframework.messaging.handler.CompositeMessageCondition, org.springframework.messaging.Message<?>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.CompositeMessageCondition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.CompositeMessageCondition.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.CompositeMessageCondition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.messaging.handler.CompositeMessageCondition.compareTo(java.lang.Object, org.springframework.messaging.Message)",
            "public int compareTo(java.lang.Object, org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.CompositeMessageCondition.getMatchingCondition(org.springframework.messaging.Message)",
            "public java.lang.Object getMatchingCondition(org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.CompositeMessageCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter(org.springframework.messaging.handler.HandlerMethod, int)",
            "public org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter(org.springframework.messaging.handler.HandlerMethod, int)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.getContainingClass()",
            "public java.lang.Class<?> getContainingClass()"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.getMethodAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> T getMethodAnnotation(java.lang.Class<T>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> boolean",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.hasMethodAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> boolean hasMethodAnnotation(java.lang.Class<T>)"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.clone()",
            "public org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter clone()"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.clone()",
            "public org.springframework.core.annotation.SynthesizingMethodParameter clone()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.messaging.handler.invocation.ListenableFutureReturnValueHandler",
            "org.springframework.messaging.handler.invocation.ListenableFutureReturnValueHandler()",
            "public org.springframework.messaging.handler.invocation.ListenableFutureReturnValueHandler()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.ListenableFutureReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.messaging.handler.invocation.ListenableFutureReturnValueHandler.toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)",
            "public org.springframework.util.concurrent.ListenableFuture<?> toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$MatchComparator",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$MatchComparator(java.util.Comparator<T>)",
            "public org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$MatchComparator(java.util.Comparator<T>)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$MatchComparator.compare(org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match, org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match)",
            "public int compare(org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match, org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$MatchComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$ReturnValueListenableFutureCallback",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$ReturnValueListenableFutureCallback(org.springframework.messaging.handler.invocation.InvocableHandlerMethod, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$ReturnValueListenableFutureCallback(org.springframework.messaging.handler.invocation.InvocableHandlerMethod, org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$ReturnValueListenableFutureCallback.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$ReturnValueListenableFutureCallback.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.handler.invocation.CompletableFutureReturnValueHandler",
            "org.springframework.messaging.handler.invocation.CompletableFutureReturnValueHandler()",
            "public org.springframework.messaging.handler.invocation.CompletableFutureReturnValueHandler()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.CompletableFutureReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.messaging.handler.invocation.CompletableFutureReturnValueHandler.toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)",
            "public org.springframework.util.concurrent.ListenableFuture<?> toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler",
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler()",
            "public org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler()"
        ],
        [
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler",
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler.isAsyncReturnValue(java.lang.Object, org.springframework.core.MethodParameter)",
            "public boolean isAsyncReturnValue(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.messaging.handler.invocation.ReactiveReturnValueHandler.toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)",
            "public org.springframework.util.concurrent.ListenableFuture<?> toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$Match",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$Match(T, org.springframework.messaging.handler.HandlerMethod)",
            "public org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$Match(T, org.springframework.messaging.handler.HandlerMethod)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler$Match.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter(org.springframework.messaging.handler.invocation.InvocableHandlerMethod, java.lang.Object)",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter(org.springframework.messaging.handler.invocation.InvocableHandlerMethod, java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.getParameterType()",
            "public java.lang.Class<?> getParameterType()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.getGenericParameterType()",
            "public java.lang.reflect.Type getGenericParameterType()"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.clone()",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter clone()"
        ],
        [
            "org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.clone()",
            "public org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter clone()"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.clone()",
            "public org.springframework.core.annotation.SynthesizingMethodParameter clone()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod$AsyncResultMethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite()",
            "public org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite()"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.addResolver(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver)",
            "public org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite addResolver(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver)"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.addResolvers(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver...)",
            "public org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite addResolvers(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.addResolvers(java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite addResolvers(java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.getResolvers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler()",
            "public org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.setDestinationPrefixes(java.util.Collection<java.lang.String>)",
            "public void setDestinationPrefixes(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getDestinationPrefixes()",
            "public java.util.Collection<java.lang.String> getDestinationPrefixes()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.setCustomArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public void setCustomArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getCustomArgumentResolvers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> getCustomArgumentResolvers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.setCustomReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)",
            "public void setCustomReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getCustomReturnValueHandlers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> getCustomReturnValueHandlers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.setArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)",
            "public void setArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver>",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getArgumentResolvers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> getArgumentResolvers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.setReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)",
            "public void setReturnValueHandlers(java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getReturnValueHandlers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> getReturnValueHandlers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.Map<T, org.springframework.messaging.handler.HandlerMethod>",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.getHandlerMethods()",
            "public java.util.Map<T, org.springframework.messaging.handler.HandlerMethod> getHandlerMethods()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(org.springframework.messaging.Message<?>)",
            "public void handleMessage(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod(org.springframework.messaging.handler.HandlerMethod)",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod(org.springframework.messaging.handler.HandlerMethod)"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setMessageMethodArgumentResolvers(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite)",
            "public void setMessageMethodArgumentResolvers(org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(org.springframework.messaging.Message<?>, java.lang.Object...)",
            "public java.lang.Object invoke(org.springframework.messaging.Message<?>, java.lang.Object...) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite()",
            "public org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.getLogger()",
            "public org.apache.commons.logging.Log getLogger()"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.getReturnValueHandlers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> getReturnValueHandlers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.clear()",
            "public void clear()"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.addHandler(org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler)",
            "public org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite addHandler(org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler)"
        ],
        [
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.addHandlers(java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)",
            "public org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite addHandlers(java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.isAsyncReturnValue(java.lang.Object, org.springframework.core.MethodParameter)",
            "public boolean isAsyncReturnValue(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite.toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)",
            "public org.springframework.util.concurrent.ListenableFuture<?> toListenableFuture(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.hasExceptionMappings()",
            "public boolean hasExceptionMappings()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethod(java.lang.Throwable)",
            "public java.lang.reflect.Method resolveMethod(java.lang.Throwable)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver.resolveMethodByExceptionType(java.lang.Class<? extends java.lang.Throwable>)",
            "public java.lang.reflect.Method resolveMethodByExceptionType(java.lang.Class<? extends java.lang.Throwable>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.AbstractAsyncReturnValueHandler",
            "org.springframework.messaging.handler.invocation.AbstractAsyncReturnValueHandler()",
            "public org.springframework.messaging.handler.invocation.AbstractAsyncReturnValueHandler()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.AbstractAsyncReturnValueHandler.isAsyncReturnValue(java.lang.Object, org.springframework.core.MethodParameter)",
            "public boolean isAsyncReturnValue(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.AbstractAsyncReturnValueHandler.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException",
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter)",
            "public org.springframework.messaging.handler.invocation.MethodArgumentResolutionException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException",
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, java.lang.String)",
            "public org.springframework.messaging.handler.invocation.MethodArgumentResolutionException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, java.lang.String)"
        ],
        [
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException",
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.handler.invocation.MethodArgumentResolutionException(org.springframework.messaging.Message<?>, org.springframework.core.MethodParameter, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.messaging.handler.invocation.MethodArgumentResolutionException.getMethodParameter()",
            "public final org.springframework.core.MethodParameter getMethodParameter()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.messaging.handler.invocation.reactive.SyncHandlerMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public default reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(org.reactivestreams.Subscription)",
            "public final void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.onNext(T)",
            "public final void onNext(T)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.onError(java.lang.Throwable)",
            "public final void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.onComplete()",
            "public final void onComplete()"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.request(long)",
            "public void request(long)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteBarrier.subscribe(org.reactivestreams.Subscriber<? super T>)",
            "public void subscribe(org.reactivestreams.Subscriber<? super T>)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$MatchComparator.compare(org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$Match<T>, org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$Match<T>)",
            "public int compare(org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$Match<T>, org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$Match<T>)"
        ],
        [
            "int",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$MatchComparator.compare(java.lang.Object, java.lang.Object)",
            "public int compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler$Match.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite()",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite()"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.addResolver(org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver)",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite addResolver(org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.addResolvers(org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver...)",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite addResolvers(org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.addResolvers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>)",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite addResolvers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.getResolvers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite.getArgumentResolver(org.springframework.core.MethodParameter)",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver getArgumentResolver(org.springframework.core.MethodParameter)"
        ],
        [
            "java.util.List<org.springframework.core.codec.Encoder<?>>",
            "org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler.getEncoders()",
            "public java.util.List<org.springframework.core.codec.Encoder<?>> getEncoders()"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler.getAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getAdapterRegistry()"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.handler.invocation.reactive.AbstractEncoderMethodReturnValueHandler.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator(org.reactivestreams.Publisher<? extends T>, java.util.function.Function<org.reactivestreams.Publisher<T>, org.reactivestreams.Publisher<java.lang.Void>>)",
            "public org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator(org.reactivestreams.Publisher<? extends T>, java.util.function.Function<org.reactivestreams.Publisher<T>, org.reactivestreams.Publisher<java.lang.Void>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator.scanUnsafe(reactor.core.Scannable$Attr)",
            "public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator.subscribe(reactor.core.CoreSubscriber<? super java.lang.Void>)",
            "public void subscribe(reactor.core.CoreSubscriber<? super java.lang.Void>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler()",
            "public org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setHandlerPredicate(java.util.function.Predicate<java.lang.Class<?>>)",
            "public void setHandlerPredicate(java.util.function.Predicate<java.lang.Class<?>>)"
        ],
        [
            "java.util.function.Predicate<java.lang.Class<?>>",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getHandlerPredicate()",
            "public java.util.function.Predicate<java.lang.Class<?>> getHandlerPredicate()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setHandlers(java.util.List<java.lang.Object>)",
            "public void setHandlers(java.util.List<java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setArgumentResolverConfigurer(org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer)",
            "public void setArgumentResolverConfigurer(org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getArgumentResolverConfigurer()",
            "public org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer getArgumentResolverConfigurer()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setReturnValueHandlerConfigurer(org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer)",
            "public void setReturnValueHandlerConfigurer(org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getReturnValueHandlerConfigurer()",
            "public org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer getReturnValueHandlerConfigurer()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)",
            "public void setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getReactiveAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getReactiveAdapterRegistry()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "java.util.Map<T, org.springframework.messaging.handler.HandlerMethod>",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getHandlerMethods()",
            "public java.util.Map<T, org.springframework.messaging.handler.HandlerMethod> getHandlerMethods()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, T>",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.getDestinationLookup()",
            "public org.springframework.util.MultiValueMap<java.lang.String, T> getDestinationLookup()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.registerHandlerMethod(java.lang.Object, java.lang.reflect.Method, T)",
            "public final void registerHandlerMethod(java.lang.Object, java.lang.reflect.Method, T)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.handler.invocation.reactive.AbstractMethodMessageHandler.handleMessage(org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleMessage(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper(java.util.function.Function<java.lang.Class<?>, org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver>)",
            "public org.springframework.messaging.handler.invocation.reactive.InvocableHelper(java.util.function.Function<java.lang.Class<?>, org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.addArgumentResolvers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>)",
            "public void addArgumentResolvers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.getArgumentResolvers()",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolverComposite getArgumentResolvers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.addReturnValueHandlers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler>)",
            "public void addReturnValueHandlers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler>)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)",
            "public void setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.getReactiveAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry getReactiveAdapterRegistry()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.registerExceptionHandlerAdvice(org.springframework.messaging.handler.MessagingAdviceBean, org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver)",
            "public void registerExceptionHandlerAdvice(org.springframework.messaging.handler.MessagingAdviceBean, org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.initMessageMappingMethod(org.springframework.messaging.handler.HandlerMethod)",
            "public org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod initMessageMappingMethod(org.springframework.messaging.handler.HandlerMethod)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.initExceptionHandlerMethod(org.springframework.messaging.handler.HandlerMethod, java.lang.Throwable)",
            "public org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod initExceptionHandlerMethod(org.springframework.messaging.handler.HandlerMethod, java.lang.Throwable)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHelper.handleMessage(org.springframework.messaging.handler.HandlerMethod, org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleMessage(org.springframework.messaging.handler.HandlerMethod, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer",
            "org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer()",
            "public org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer.addCustomHandler(org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler...)",
            "public void addCustomHandler(org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler...)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler>",
            "org.springframework.messaging.handler.invocation.reactive.ReturnValueHandlerConfigurer.getCustomHandlers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler> getCustomHandlers()"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod(org.springframework.messaging.handler.HandlerMethod)",
            "public org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod(org.springframework.messaging.handler.HandlerMethod)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod.setArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>)",
            "public void setArgumentResolvers(java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod.getResolvers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "org.springframework.core.ParameterNameDiscoverer",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod.getParameterNameDiscoverer()",
            "public org.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod.setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)",
            "public void setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.messaging.handler.invocation.reactive.InvocableHandlerMethod.invoke(org.springframework.messaging.Message<?>, java.lang.Object...)",
            "public reactor.core.publisher.Mono<java.lang.Object> invoke(org.springframework.messaging.Message<?>, java.lang.Object...)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite()",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite()"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler>",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite.getReturnValueHandlers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler> getReturnValueHandlers()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite.clear()",
            "public void clear()"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite.addHandler(org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler)",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite addHandler(org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite.addHandlers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler>)",
            "public org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite addHandlers(java.util.List<? extends org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandler>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.handler.invocation.reactive.HandlerMethodReturnValueHandlerComposite.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer",
            "org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer()",
            "public org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer.addCustomResolver(org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver...)",
            "public void addCustomResolver(org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver...)"
        ],
        [
            "java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver>",
            "org.springframework.messaging.handler.invocation.reactive.ArgumentResolverConfigurer.getCustomResolvers()",
            "public java.util.List<org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver> getCustomResolvers()"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$State[]",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$State.values()",
            "public static org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$State[] values()"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$State",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$State.valueOf(java.lang.String)",
            "public static org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier(reactor.core.CoreSubscriber<? super java.lang.Void>, org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator<T>.WriteBarrier)",
            "public org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier(reactor.core.CoreSubscriber<? super java.lang.Void>, org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator<T>.WriteBarrier)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.connect()",
            "public void connect()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.onNext(java.lang.Void)",
            "public void onNext(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.onComplete()",
            "public void onComplete()"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.request(long)",
            "public void request(long)"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.messaging.handler.invocation.reactive.ChannelSendOperator$WriteCompletionBarrier.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.messaging.MessageChannel.boolean send(org.springframework.messaging.Message<?>)",
            "public default boolean send(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.MessageDeliveryException",
            "org.springframework.messaging.MessageDeliveryException(java.lang.String)",
            "public org.springframework.messaging.MessageDeliveryException(java.lang.String)"
        ],
        [
            "org.springframework.messaging.MessageDeliveryException",
            "org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.MessageDeliveryException",
            "org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>, java.lang.String)",
            "public org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>, java.lang.String)"
        ],
        [
            "org.springframework.messaging.MessageDeliveryException",
            "org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>, java.lang.Throwable)",
            "public org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.MessageDeliveryException",
            "org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.MessageDeliveryException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.util.Map<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.toNativeHeaderMap()",
            "public java.util.Map<java.lang.String, java.util.List<java.lang.String>> toNativeHeaderMap()"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.setImmutable()",
            "public void setImmutable()"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.copyHeaders(java.util.Map<java.lang.String, ?>)",
            "public void copyHeaders(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>)",
            "public void copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.containsNativeHeader(java.lang.String)",
            "public boolean containsNativeHeader(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.getNativeHeader(java.lang.String)",
            "public java.util.List<java.lang.String> getNativeHeader(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.getFirstNativeHeader(java.lang.String)",
            "public java.lang.String getFirstNativeHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.setNativeHeader(java.lang.String, java.lang.String)",
            "public void setNativeHeader(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.setNativeHeaderValues(java.lang.String, java.util.List<java.lang.String>)",
            "public void setNativeHeaderValues(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.addNativeHeader(java.lang.String, java.lang.String)",
            "public void addNativeHeader(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.addNativeHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addNativeHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.removeNativeHeader(java.lang.String)",
            "public java.util.List<java.lang.String> removeNativeHeader(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.NativeMessageHeaderAccessor.getFirstNativeHeader(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.lang.String getFirstNativeHeader(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.messaging.support.AbstractSubscribableChannel",
            "org.springframework.messaging.support.AbstractSubscribableChannel()",
            "public org.springframework.messaging.support.AbstractSubscribableChannel()"
        ],
        [
            "java.util.Set<org.springframework.messaging.MessageHandler>",
            "org.springframework.messaging.support.AbstractSubscribableChannel.getSubscribers()",
            "public java.util.Set<org.springframework.messaging.MessageHandler> getSubscribers()"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractSubscribableChannel.hasSubscription(org.springframework.messaging.MessageHandler)",
            "public boolean hasSubscription(org.springframework.messaging.MessageHandler)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractSubscribableChannel.subscribe(org.springframework.messaging.MessageHandler)",
            "public boolean subscribe(org.springframework.messaging.MessageHandler)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractSubscribableChannel.unsubscribe(org.springframework.messaging.MessageHandler)",
            "public boolean unsubscribe(org.springframework.messaging.MessageHandler)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders",
            "org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders.getRawHeaders()",
            "public java.util.Map<java.lang.String, java.lang.Object> getRawHeaders()"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders.setImmutable()",
            "public void setImmutable()"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders.isMutable()",
            "public boolean isMutable()"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderAccessor",
            "org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders.getAccessor()",
            "public org.springframework.messaging.support.MessageHeaderAccessor getAccessor()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ChannelInterceptor.preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public default org.springframework.messaging.Message<?> preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "default",
            "org.springframework.messaging.support.ChannelInterceptor.void postSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean)",
            "public default void postSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean)"
        ],
        [
            "default",
            "org.springframework.messaging.support.ChannelInterceptor.void afterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)",
            "public default void afterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)"
        ],
        [
            "default",
            "org.springframework.messaging.support.ChannelInterceptor.boolean preReceive(org.springframework.messaging.MessageChannel)",
            "public default boolean preReceive(org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ChannelInterceptor.postReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public default org.springframework.messaging.Message<?> postReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "default",
            "org.springframework.messaging.support.ChannelInterceptor.void afterReceiveCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, java.lang.Exception)",
            "public default void afterReceiveCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, java.lang.Exception)"
        ],
        [
            "org.springframework.messaging.support.GenericMessage",
            "org.springframework.messaging.support.GenericMessage(T)",
            "public org.springframework.messaging.support.GenericMessage(T)"
        ],
        [
            "org.springframework.messaging.support.GenericMessage",
            "org.springframework.messaging.support.GenericMessage(T, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.messaging.support.GenericMessage(T, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.messaging.support.GenericMessage",
            "org.springframework.messaging.support.GenericMessage(T, org.springframework.messaging.MessageHeaders)",
            "public org.springframework.messaging.support.GenericMessage(T, org.springframework.messaging.MessageHeaders)"
        ],
        [
            "T",
            "org.springframework.messaging.support.GenericMessage.getPayload()",
            "public T getPayload()"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.messaging.support.GenericMessage.getHeaders()",
            "public org.springframework.messaging.MessageHeaders getHeaders()"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.GenericMessage.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.support.GenericMessage.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.GenericMessage.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.support.ExecutorSubscribableChannel",
            "org.springframework.messaging.support.ExecutorSubscribableChannel()",
            "public org.springframework.messaging.support.ExecutorSubscribableChannel()"
        ],
        [
            "org.springframework.messaging.support.ExecutorSubscribableChannel",
            "org.springframework.messaging.support.ExecutorSubscribableChannel(java.util.concurrent.Executor)",
            "public org.springframework.messaging.support.ExecutorSubscribableChannel(java.util.concurrent.Executor)"
        ],
        [
            "java.util.concurrent.Executor",
            "org.springframework.messaging.support.ExecutorSubscribableChannel.getExecutor()",
            "public java.util.concurrent.Executor getExecutor()"
        ],
        [
            "void",
            "org.springframework.messaging.support.ExecutorSubscribableChannel.setInterceptors(java.util.List<org.springframework.messaging.support.ChannelInterceptor>)",
            "public void setInterceptors(java.util.List<org.springframework.messaging.support.ChannelInterceptor>)"
        ],
        [
            "void",
            "org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(org.springframework.messaging.support.ChannelInterceptor)",
            "public void addInterceptor(org.springframework.messaging.support.ChannelInterceptor)"
        ],
        [
            "void",
            "org.springframework.messaging.support.ExecutorSubscribableChannel.addInterceptor(int, org.springframework.messaging.support.ChannelInterceptor)",
            "public void addInterceptor(int, org.springframework.messaging.support.ChannelInterceptor)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.ExecutorSubscribableChannel.sendInternal(org.springframework.messaging.Message<?>, long)",
            "public boolean sendInternal(org.springframework.messaging.Message<?>, long)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderAccessor",
            "org.springframework.messaging.support.MessageHeaderAccessor()",
            "public org.springframework.messaging.support.MessageHeaderAccessor()"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderAccessor",
            "org.springframework.messaging.support.MessageHeaderAccessor(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.support.MessageHeaderAccessor(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setLeaveMutable(boolean)",
            "public void setLeaveMutable(boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setImmutable()",
            "public void setImmutable()"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.MessageHeaderAccessor.isMutable()",
            "public boolean isMutable()"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.MessageHeaderAccessor.isModified()",
            "public boolean isModified()"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.messaging.support.MessageHeaderAccessor.getMessageHeaders()",
            "public org.springframework.messaging.MessageHeaders getMessageHeaders()"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.messaging.support.MessageHeaderAccessor.toMessageHeaders()",
            "public org.springframework.messaging.MessageHeaders toMessageHeaders()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.messaging.support.MessageHeaderAccessor.toMap()",
            "public java.util.Map<java.lang.String, java.lang.Object> toMap()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.support.MessageHeaderAccessor.getHeader(java.lang.String)",
            "public java.lang.Object getHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setHeader(java.lang.String, java.lang.Object)",
            "public void setHeader(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setHeaderIfAbsent(java.lang.String, java.lang.Object)",
            "public void setHeaderIfAbsent(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.removeHeader(java.lang.String)",
            "public void removeHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.removeHeaders(java.lang.String...)",
            "public void removeHeaders(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.copyHeaders(java.util.Map<java.lang.String, ?>)",
            "public void copyHeaders(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>)",
            "public void copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.UUID",
            "org.springframework.messaging.support.MessageHeaderAccessor.getId()",
            "public java.util.UUID getId()"
        ],
        [
            "java.lang.Long",
            "org.springframework.messaging.support.MessageHeaderAccessor.getTimestamp()",
            "public java.lang.Long getTimestamp()"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setContentType(org.springframework.util.MimeType)",
            "public void setContentType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.support.MessageHeaderAccessor.getContentType()",
            "public org.springframework.util.MimeType getContentType()"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setReplyChannelName(java.lang.String)",
            "public void setReplyChannelName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setReplyChannel(org.springframework.messaging.MessageChannel)",
            "public void setReplyChannel(org.springframework.messaging.MessageChannel)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.support.MessageHeaderAccessor.getReplyChannel()",
            "public java.lang.Object getReplyChannel()"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setErrorChannelName(java.lang.String)",
            "public void setErrorChannelName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.MessageHeaderAccessor.setErrorChannel(org.springframework.messaging.MessageChannel)",
            "public void setErrorChannel(org.springframework.messaging.MessageChannel)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.support.MessageHeaderAccessor.getErrorChannel()",
            "public java.lang.Object getErrorChannel()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.MessageHeaderAccessor.getShortLogMessage(java.lang.Object)",
            "public java.lang.String getShortLogMessage(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.MessageHeaderAccessor.getDetailedLogMessage(java.lang.Object)",
            "public java.lang.String getDetailedLogMessage(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.MessageHeaderAccessor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderAccessor",
            "org.springframework.messaging.support.MessageHeaderAccessor.getAccessor(org.springframework.messaging.Message<?>)",
            "public static org.springframework.messaging.support.MessageHeaderAccessor getAccessor(org.springframework.messaging.Message<?>)"
        ],
        [
            "<T extends org.springframework.messaging.support.MessageHeaderAccessor> T",
            "org.springframework.messaging.support.MessageHeaderAccessor.getAccessor(org.springframework.messaging.Message<?>, java.lang.Class<T>)",
            "public static <T extends org.springframework.messaging.support.MessageHeaderAccessor> T getAccessor(org.springframework.messaging.Message<?>, java.lang.Class<T>)"
        ],
        [
            "<T extends org.springframework.messaging.support.MessageHeaderAccessor> T",
            "org.springframework.messaging.support.MessageHeaderAccessor.getAccessor(org.springframework.messaging.MessageHeaders, java.lang.Class<T>)",
            "public static <T extends org.springframework.messaging.support.MessageHeaderAccessor> T getAccessor(org.springframework.messaging.MessageHeaders, java.lang.Class<T>)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderAccessor",
            "org.springframework.messaging.support.MessageHeaderAccessor.getMutableAccessor(org.springframework.messaging.Message<?>)",
            "public static org.springframework.messaging.support.MessageHeaderAccessor getMutableAccessor(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.support.AbstractHeaderMapper",
            "org.springframework.messaging.support.AbstractHeaderMapper()",
            "public org.springframework.messaging.support.AbstractHeaderMapper()"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractHeaderMapper.setInboundPrefix(java.lang.String)",
            "public void setInboundPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractHeaderMapper.setOutboundPrefix(java.lang.String)",
            "public void setOutboundPrefix(java.lang.String)"
        ],
        [
            "org.springframework.messaging.support.ImmutableMessageChannelInterceptor",
            "org.springframework.messaging.support.ImmutableMessageChannelInterceptor()",
            "public org.springframework.messaging.support.ImmutableMessageChannelInterceptor()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ImmutableMessageChannelInterceptor.preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.Message<?> preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer()",
            "public org.springframework.messaging.support.IdTimestampMessageHeaderInitializer()"
        ],
        [
            "void",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer.setIdGenerator(org.springframework.util.IdGenerator)",
            "public void setIdGenerator(org.springframework.util.IdGenerator)"
        ],
        [
            "org.springframework.util.IdGenerator",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer.getIdGenerator()",
            "public org.springframework.util.IdGenerator getIdGenerator()"
        ],
        [
            "void",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer.setDisableIdGeneration()",
            "public void setDisableIdGeneration()"
        ],
        [
            "void",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer.setEnableTimestamp(boolean)",
            "public void setEnableTimestamp(boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer.isEnableTimestamp()",
            "public boolean isEnableTimestamp()"
        ],
        [
            "void",
            "org.springframework.messaging.support.IdTimestampMessageHeaderInitializer.initHeaders(org.springframework.messaging.support.MessageHeaderAccessor)",
            "public void initHeaders(org.springframework.messaging.support.MessageHeaderAccessor)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setHeaders(org.springframework.messaging.support.MessageHeaderAccessor)",
            "public org.springframework.messaging.support.MessageBuilder<T> setHeaders(org.springframework.messaging.support.MessageHeaderAccessor)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setHeader(java.lang.String, java.lang.Object)",
            "public org.springframework.messaging.support.MessageBuilder<T> setHeader(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setHeaderIfAbsent(java.lang.String, java.lang.Object)",
            "public org.springframework.messaging.support.MessageBuilder<T> setHeaderIfAbsent(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.removeHeaders(java.lang.String...)",
            "public org.springframework.messaging.support.MessageBuilder<T> removeHeaders(java.lang.String...)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.removeHeader(java.lang.String)",
            "public org.springframework.messaging.support.MessageBuilder<T> removeHeader(java.lang.String)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.copyHeaders(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.messaging.support.MessageBuilder<T> copyHeaders(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.messaging.support.MessageBuilder<T> copyHeadersIfAbsent(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setReplyChannel(org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.support.MessageBuilder<T> setReplyChannel(org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setReplyChannelName(java.lang.String)",
            "public org.springframework.messaging.support.MessageBuilder<T> setReplyChannelName(java.lang.String)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setErrorChannel(org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.support.MessageBuilder<T> setErrorChannel(org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.setErrorChannelName(java.lang.String)",
            "public org.springframework.messaging.support.MessageBuilder<T> setErrorChannelName(java.lang.String)"
        ],
        [
            "org.springframework.messaging.Message<T>",
            "org.springframework.messaging.support.MessageBuilder.build()",
            "public org.springframework.messaging.Message<T> build()"
        ],
        [
            "<T> org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.fromMessage(org.springframework.messaging.Message<T>)",
            "public static <T> org.springframework.messaging.support.MessageBuilder<T> fromMessage(org.springframework.messaging.Message<T>)"
        ],
        [
            "<T> org.springframework.messaging.support.MessageBuilder<T>",
            "org.springframework.messaging.support.MessageBuilder.withPayload(T)",
            "public static <T> org.springframework.messaging.support.MessageBuilder<T> withPayload(T)"
        ],
        [
            "<T> org.springframework.messaging.Message<T>",
            "org.springframework.messaging.support.MessageBuilder.createMessage(T, org.springframework.messaging.MessageHeaders)",
            "public static <T> org.springframework.messaging.Message<T> createMessage(T, org.springframework.messaging.MessageHeaders)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.applyPreSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.Message<?> applyPreSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.applyPostSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean)",
            "public void applyPostSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.triggerAfterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)",
            "public void triggerAfterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.applyPreReceive(org.springframework.messaging.MessageChannel)",
            "public boolean applyPreReceive(org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.applyPostReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.Message<?> applyPostReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.triggerAfterReceiveCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, java.lang.Exception)",
            "public void triggerAfterReceiveCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, java.lang.Exception)"
        ],
        [
            "org.springframework.messaging.support.ErrorMessage",
            "org.springframework.messaging.support.ErrorMessage(java.lang.Throwable)",
            "public org.springframework.messaging.support.ErrorMessage(java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.support.ErrorMessage",
            "org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.messaging.support.ErrorMessage",
            "org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, org.springframework.messaging.MessageHeaders)",
            "public org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, org.springframework.messaging.MessageHeaders)"
        ],
        [
            "org.springframework.messaging.support.ErrorMessage",
            "org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.support.ErrorMessage",
            "org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.support.ErrorMessage",
            "org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, org.springframework.messaging.MessageHeaders, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.support.ErrorMessage(java.lang.Throwable, org.springframework.messaging.MessageHeaders, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ErrorMessage.getOriginalMessage()",
            "public org.springframework.messaging.Message<?> getOriginalMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.ErrorMessage.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.support.AbstractMessageChannel",
            "org.springframework.messaging.support.AbstractMessageChannel()",
            "public org.springframework.messaging.support.AbstractMessageChannel()"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.messaging.support.AbstractMessageChannel.getLogger()",
            "public org.apache.commons.logging.Log getLogger()"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.AbstractMessageChannel.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel.setInterceptors(java.util.List<org.springframework.messaging.support.ChannelInterceptor>)",
            "public void setInterceptors(java.util.List<org.springframework.messaging.support.ChannelInterceptor>)"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(org.springframework.messaging.support.ChannelInterceptor)",
            "public void addInterceptor(org.springframework.messaging.support.ChannelInterceptor)"
        ],
        [
            "void",
            "org.springframework.messaging.support.AbstractMessageChannel.addInterceptor(int, org.springframework.messaging.support.ChannelInterceptor)",
            "public void addInterceptor(int, org.springframework.messaging.support.ChannelInterceptor)"
        ],
        [
            "java.util.List<org.springframework.messaging.support.ChannelInterceptor>",
            "org.springframework.messaging.support.AbstractMessageChannel.getInterceptors()",
            "public java.util.List<org.springframework.messaging.support.ChannelInterceptor> getInterceptors()"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractMessageChannel.removeInterceptor(org.springframework.messaging.support.ChannelInterceptor)",
            "public boolean removeInterceptor(org.springframework.messaging.support.ChannelInterceptor)"
        ],
        [
            "org.springframework.messaging.support.ChannelInterceptor",
            "org.springframework.messaging.support.AbstractMessageChannel.removeInterceptor(int)",
            "public org.springframework.messaging.support.ChannelInterceptor removeInterceptor(int)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractMessageChannel.send(org.springframework.messaging.Message<?>)",
            "public final boolean send(org.springframework.messaging.Message<?>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.AbstractMessageChannel.send(org.springframework.messaging.Message<?>, long)",
            "public final boolean send(org.springframework.messaging.Message<?>, long)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.support.AbstractMessageChannel.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask",
            "org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageHandler)",
            "public org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageHandler)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.getMessage()",
            "public org.springframework.messaging.Message<?> getMessage()"
        ],
        [
            "org.springframework.messaging.MessageHandler",
            "org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.getMessageHandler()",
            "public org.springframework.messaging.MessageHandler getMessageHandler()"
        ],
        [
            "void",
            "org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run()",
            "public void run()"
        ],
        [
            "org.springframework.messaging.support.ChannelInterceptorAdapter",
            "org.springframework.messaging.support.ChannelInterceptorAdapter()",
            "public org.springframework.messaging.support.ChannelInterceptorAdapter()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ChannelInterceptorAdapter.preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.Message<?> preSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "void",
            "org.springframework.messaging.support.ChannelInterceptorAdapter.postSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean)",
            "public void postSend(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.support.ChannelInterceptorAdapter.afterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)",
            "public void afterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)"
        ],
        [
            "boolean",
            "org.springframework.messaging.support.ChannelInterceptorAdapter.preReceive(org.springframework.messaging.MessageChannel)",
            "public boolean preReceive(org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ChannelInterceptorAdapter.postReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.Message<?> postReceive(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel)"
        ],
        [
            "void",
            "org.springframework.messaging.support.ChannelInterceptorAdapter.afterReceiveCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, java.lang.Exception)",
            "public void afterReceiveCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, java.lang.Exception)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.support.ExecutorChannelInterceptor.beforeHandle(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler)",
            "public default org.springframework.messaging.Message<?> beforeHandle(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler)"
        ],
        [
            "default",
            "org.springframework.messaging.support.ExecutorChannelInterceptor.void afterMessageHandled(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler, java.lang.Exception)",
            "public default void afterMessageHandled(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler, java.lang.Exception)"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.messaging.MessageHeaders(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.messaging.MessageHeaders(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.UUID",
            "org.springframework.messaging.MessageHeaders.getId()",
            "public java.util.UUID getId()"
        ],
        [
            "java.lang.Long",
            "org.springframework.messaging.MessageHeaders.getTimestamp()",
            "public java.lang.Long getTimestamp()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.MessageHeaders.getReplyChannel()",
            "public java.lang.Object getReplyChannel()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.MessageHeaders.getErrorChannel()",
            "public java.lang.Object getErrorChannel()"
        ],
        [
            "<T> T",
            "org.springframework.messaging.MessageHeaders.get(java.lang.Object, java.lang.Class<T>)",
            "public <T> T get(java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.MessageHeaders.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.messaging.MessageHeaders.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>",
            "org.springframework.messaging.MessageHeaders.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.MessageHeaders.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.messaging.MessageHeaders.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.messaging.MessageHeaders.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "int",
            "org.springframework.messaging.MessageHeaders.size()",
            "public int size()"
        ],
        [
            "java.util.Collection<java.lang.Object>",
            "org.springframework.messaging.MessageHeaders.values()",
            "public java.util.Collection<java.lang.Object> values()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.MessageHeaders.put(java.lang.String, java.lang.Object)",
            "public java.lang.Object put(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.MessageHeaders.putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.Object>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.MessageHeaders.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.MessageHeaders.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.messaging.MessageHeaders.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.MessageHeaders.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.MessageHeaders.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.MessageHeaders.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter",
            "org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter(com.google.protobuf.ExtensionRegistry)",
            "public org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter(com.google.protobuf.ExtensionRegistry)"
        ],
        [
            "org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter",
            "org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)",
            "public org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)"
        ],
        [
            "org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter",
            "org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer, com.google.protobuf.ExtensionRegistry)",
            "public org.springframework.messaging.converter.ProtobufJsonFormatMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer, com.google.protobuf.ExtensionRegistry)"
        ],
        [
            "org.springframework.messaging.converter.MarshallingMessageConverter",
            "org.springframework.messaging.converter.MarshallingMessageConverter()",
            "public org.springframework.messaging.converter.MarshallingMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.MarshallingMessageConverter",
            "org.springframework.messaging.converter.MarshallingMessageConverter(org.springframework.util.MimeType...)",
            "public org.springframework.messaging.converter.MarshallingMessageConverter(org.springframework.util.MimeType...)"
        ],
        [
            "org.springframework.messaging.converter.MarshallingMessageConverter",
            "org.springframework.messaging.converter.MarshallingMessageConverter(org.springframework.oxm.Marshaller)",
            "public org.springframework.messaging.converter.MarshallingMessageConverter(org.springframework.oxm.Marshaller)"
        ],
        [
            "void",
            "org.springframework.messaging.converter.MarshallingMessageConverter.setMarshaller(org.springframework.oxm.Marshaller)",
            "public void setMarshaller(org.springframework.oxm.Marshaller)"
        ],
        [
            "org.springframework.oxm.Marshaller",
            "org.springframework.messaging.converter.MarshallingMessageConverter.getMarshaller()",
            "public org.springframework.oxm.Marshaller getMarshaller()"
        ],
        [
            "void",
            "org.springframework.messaging.converter.MarshallingMessageConverter.setUnmarshaller(org.springframework.oxm.Unmarshaller)",
            "public void setUnmarshaller(org.springframework.oxm.Unmarshaller)"
        ],
        [
            "org.springframework.oxm.Unmarshaller",
            "org.springframework.messaging.converter.MarshallingMessageConverter.getUnmarshaller()",
            "public org.springframework.oxm.Unmarshaller getUnmarshaller()"
        ],
        [
            "org.springframework.messaging.converter.CompositeMessageConverter",
            "org.springframework.messaging.converter.CompositeMessageConverter(java.util.Collection<org.springframework.messaging.converter.MessageConverter>)",
            "public org.springframework.messaging.converter.CompositeMessageConverter(java.util.Collection<org.springframework.messaging.converter.MessageConverter>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.converter.CompositeMessageConverter.fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)",
            "public java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.converter.CompositeMessageConverter.fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object)",
            "public java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.converter.CompositeMessageConverter.toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders)",
            "public org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.converter.CompositeMessageConverter.toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object)",
            "public org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object)"
        ],
        [
            "java.util.List<org.springframework.messaging.converter.MessageConverter>",
            "org.springframework.messaging.converter.CompositeMessageConverter.getConverters()",
            "public java.util.List<org.springframework.messaging.converter.MessageConverter> getConverters()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.converter.CompositeMessageConverter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.converter.DefaultContentTypeResolver",
            "org.springframework.messaging.converter.DefaultContentTypeResolver()",
            "public org.springframework.messaging.converter.DefaultContentTypeResolver()"
        ],
        [
            "void",
            "org.springframework.messaging.converter.DefaultContentTypeResolver.setDefaultMimeType(org.springframework.util.MimeType)",
            "public void setDefaultMimeType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.converter.DefaultContentTypeResolver.getDefaultMimeType()",
            "public org.springframework.util.MimeType getDefaultMimeType()"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.converter.DefaultContentTypeResolver.resolve(org.springframework.messaging.MessageHeaders)",
            "public org.springframework.util.MimeType resolve(org.springframework.messaging.MessageHeaders)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.converter.DefaultContentTypeResolver.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.converter.KotlinSerializationJsonMessageConverter",
            "org.springframework.messaging.converter.KotlinSerializationJsonMessageConverter()",
            "public org.springframework.messaging.converter.KotlinSerializationJsonMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.KotlinSerializationJsonMessageConverter",
            "org.springframework.messaging.converter.KotlinSerializationJsonMessageConverter(kotlinx.serialization.json.Json)",
            "public org.springframework.messaging.converter.KotlinSerializationJsonMessageConverter(kotlinx.serialization.json.Json)"
        ],
        [
            "org.springframework.messaging.converter.SimpleMessageConverter",
            "org.springframework.messaging.converter.SimpleMessageConverter()",
            "public org.springframework.messaging.converter.SimpleMessageConverter()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.converter.SimpleMessageConverter.fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)",
            "public java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.converter.SimpleMessageConverter.toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders)",
            "public org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders)"
        ],
        [
            "org.springframework.messaging.converter.MappingJackson2MessageConverter",
            "org.springframework.messaging.converter.MappingJackson2MessageConverter()",
            "public org.springframework.messaging.converter.MappingJackson2MessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.MappingJackson2MessageConverter",
            "org.springframework.messaging.converter.MappingJackson2MessageConverter(org.springframework.util.MimeType...)",
            "public org.springframework.messaging.converter.MappingJackson2MessageConverter(org.springframework.util.MimeType...)"
        ],
        [
            "void",
            "org.springframework.messaging.converter.MappingJackson2MessageConverter.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "com.fasterxml.jackson.databind.ObjectMapper",
            "org.springframework.messaging.converter.MappingJackson2MessageConverter.getObjectMapper()",
            "public com.fasterxml.jackson.databind.ObjectMapper getObjectMapper()"
        ],
        [
            "void",
            "org.springframework.messaging.converter.MappingJackson2MessageConverter.setPrettyPrint(boolean)",
            "public void setPrettyPrint(boolean)"
        ],
        [
            "org.springframework.messaging.converter.ByteArrayMessageConverter",
            "org.springframework.messaging.converter.ByteArrayMessageConverter()",
            "public org.springframework.messaging.converter.ByteArrayMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.GenericMessageConverter",
            "org.springframework.messaging.converter.GenericMessageConverter()",
            "public org.springframework.messaging.converter.GenericMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.GenericMessageConverter",
            "org.springframework.messaging.converter.GenericMessageConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.messaging.converter.GenericMessageConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.converter.GenericMessageConverter.fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)",
            "public java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.messaging.converter.MessageConversionException",
            "org.springframework.messaging.converter.MessageConversionException(java.lang.String)",
            "public org.springframework.messaging.converter.MessageConversionException(java.lang.String)"
        ],
        [
            "org.springframework.messaging.converter.MessageConversionException",
            "org.springframework.messaging.converter.MessageConversionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.converter.MessageConversionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.converter.MessageConversionException",
            "org.springframework.messaging.converter.MessageConversionException(org.springframework.messaging.Message<?>, java.lang.String)",
            "public org.springframework.messaging.converter.MessageConversionException(org.springframework.messaging.Message<?>, java.lang.String)"
        ],
        [
            "org.springframework.messaging.converter.MessageConversionException",
            "org.springframework.messaging.converter.MessageConversionException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.converter.MessageConversionException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.converter.ProtobufMessageConverter",
            "org.springframework.messaging.converter.ProtobufMessageConverter()",
            "public org.springframework.messaging.converter.ProtobufMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.ProtobufMessageConverter",
            "org.springframework.messaging.converter.ProtobufMessageConverter(com.google.protobuf.ExtensionRegistry)",
            "public org.springframework.messaging.converter.ProtobufMessageConverter(com.google.protobuf.ExtensionRegistry)"
        ],
        [
            "org.springframework.messaging.converter.StringMessageConverter",
            "org.springframework.messaging.converter.StringMessageConverter()",
            "public org.springframework.messaging.converter.StringMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.StringMessageConverter",
            "org.springframework.messaging.converter.StringMessageConverter(java.nio.charset.Charset)",
            "public org.springframework.messaging.converter.StringMessageConverter(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.messaging.converter.JsonbMessageConverter",
            "org.springframework.messaging.converter.JsonbMessageConverter()",
            "public org.springframework.messaging.converter.JsonbMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.JsonbMessageConverter",
            "org.springframework.messaging.converter.JsonbMessageConverter(javax.json.bind.JsonbConfig)",
            "public org.springframework.messaging.converter.JsonbMessageConverter(javax.json.bind.JsonbConfig)"
        ],
        [
            "org.springframework.messaging.converter.JsonbMessageConverter",
            "org.springframework.messaging.converter.JsonbMessageConverter(javax.json.bind.Jsonb)",
            "public org.springframework.messaging.converter.JsonbMessageConverter(javax.json.bind.Jsonb)"
        ],
        [
            "void",
            "org.springframework.messaging.converter.JsonbMessageConverter.setJsonb(javax.json.bind.Jsonb)",
            "public void setJsonb(javax.json.bind.Jsonb)"
        ],
        [
            "javax.json.bind.Jsonb",
            "org.springframework.messaging.converter.JsonbMessageConverter.getJsonb()",
            "public javax.json.bind.Jsonb getJsonb()"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.messaging.converter.AbstractMessageConverter.getSupportedMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getSupportedMimeTypes()"
        ],
        [
            "void",
            "org.springframework.messaging.converter.AbstractMessageConverter.setContentTypeResolver(org.springframework.messaging.converter.ContentTypeResolver)",
            "public void setContentTypeResolver(org.springframework.messaging.converter.ContentTypeResolver)"
        ],
        [
            "org.springframework.messaging.converter.ContentTypeResolver",
            "org.springframework.messaging.converter.AbstractMessageConverter.getContentTypeResolver()",
            "public org.springframework.messaging.converter.ContentTypeResolver getContentTypeResolver()"
        ],
        [
            "void",
            "org.springframework.messaging.converter.AbstractMessageConverter.setStrictContentTypeMatch(boolean)",
            "public void setStrictContentTypeMatch(boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.converter.AbstractMessageConverter.isStrictContentTypeMatch()",
            "public boolean isStrictContentTypeMatch()"
        ],
        [
            "void",
            "org.springframework.messaging.converter.AbstractMessageConverter.setSerializedPayloadClass(java.lang.Class<?>)",
            "public void setSerializedPayloadClass(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.messaging.converter.AbstractMessageConverter.getSerializedPayloadClass()",
            "public java.lang.Class<?> getSerializedPayloadClass()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.converter.AbstractMessageConverter.fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)",
            "public final java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.converter.AbstractMessageConverter.fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object)",
            "public final java.lang.Object fromMessage(org.springframework.messaging.Message<?>, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.converter.AbstractMessageConverter.toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders)",
            "public final org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.converter.AbstractMessageConverter.toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object)",
            "public final org.springframework.messaging.Message<?> toMessage(java.lang.Object, org.springframework.messaging.MessageHeaders, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport",
            "org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)",
            "public org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)"
        ],
        [
            "org.springframework.util.MimeType[]",
            "org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport.supportedMediaTypes()",
            "public org.springframework.util.MimeType[] supportedMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport.supportsWriteOnly(org.springframework.util.MimeType)",
            "public boolean supportsWriteOnly(org.springframework.util.MimeType)"
        ],
        [
            "void",
            "org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport.merge(org.springframework.messaging.Message<?>, java.nio.charset.Charset, org.springframework.util.MimeType, com.google.protobuf.ExtensionRegistry, com.google.protobuf.Message$Builder)",
            "public void merge(org.springframework.messaging.Message<?>, java.nio.charset.Charset, org.springframework.util.MimeType, com.google.protobuf.ExtensionRegistry, com.google.protobuf.Message$Builder) throws java.io.IOException, org.springframework.messaging.converter.MessageConversionException"
        ],
        [
            "void",
            "org.springframework.messaging.converter.ProtobufMessageConverter$ProtobufJavaUtilSupport.print(com.google.protobuf.Message, java.io.OutputStream, org.springframework.util.MimeType, java.nio.charset.Charset)",
            "public void print(com.google.protobuf.Message, java.io.OutputStream, org.springframework.util.MimeType, java.nio.charset.Charset) throws java.io.IOException, org.springframework.messaging.converter.MessageConversionException"
        ],
        [
            "org.springframework.messaging.converter.GsonMessageConverter",
            "org.springframework.messaging.converter.GsonMessageConverter()",
            "public org.springframework.messaging.converter.GsonMessageConverter()"
        ],
        [
            "org.springframework.messaging.converter.GsonMessageConverter",
            "org.springframework.messaging.converter.GsonMessageConverter(com.google.gson.Gson)",
            "public org.springframework.messaging.converter.GsonMessageConverter(com.google.gson.Gson)"
        ],
        [
            "void",
            "org.springframework.messaging.converter.GsonMessageConverter.setGson(com.google.gson.Gson)",
            "public void setGson(com.google.gson.Gson)"
        ],
        [
            "com.google.gson.Gson",
            "org.springframework.messaging.converter.GsonMessageConverter.getGson()",
            "public com.google.gson.Gson getGson()"
        ],
        [
            "org.springframework.messaging.MessagingException",
            "org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.MessagingException",
            "org.springframework.messaging.MessagingException(java.lang.String)",
            "public org.springframework.messaging.MessagingException(java.lang.String)"
        ],
        [
            "org.springframework.messaging.MessagingException",
            "org.springframework.messaging.MessagingException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.MessagingException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.MessagingException",
            "org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>, java.lang.String)",
            "public org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>, java.lang.String)"
        ],
        [
            "org.springframework.messaging.MessagingException",
            "org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>, java.lang.Throwable)",
            "public org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.MessagingException",
            "org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.MessagingException(org.springframework.messaging.Message<?>, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.MessagingException.getFailedMessage()",
            "public org.springframework.messaging.Message<?> getFailedMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.MessagingException.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.messaging.rsocket.RSocketRequester.void dispose()",
            "public default void dispose()"
        ],
        [
            "default",
            "org.springframework.messaging.rsocket.RSocketRequester.boolean isDisposed()",
            "public default boolean isDisposed()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.RSocketRequester.builder()",
            "public static org.springframework.messaging.rsocket.RSocketRequester$Builder builder()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester",
            "org.springframework.messaging.rsocket.RSocketRequester.wrap(io.rsocket.RSocket, org.springframework.util.MimeType, org.springframework.util.MimeType, org.springframework.messaging.rsocket.RSocketStrategies)",
            "public static org.springframework.messaging.rsocket.RSocketRequester wrap(io.rsocket.RSocket, org.springframework.util.MimeType, org.springframework.util.MimeType, org.springframework.messaging.rsocket.RSocketStrategies)"
        ],
        [
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor(org.springframework.core.codec.Decoder<?>...)",
            "public org.springframework.messaging.rsocket.DefaultMetadataExtractor(org.springframework.core.codec.Decoder<?>...)"
        ],
        [
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor(java.util.List<org.springframework.core.codec.Decoder<?>>)",
            "public org.springframework.messaging.rsocket.DefaultMetadataExtractor(java.util.List<org.springframework.core.codec.Decoder<?>>)"
        ],
        [
            "java.util.List<? extends org.springframework.core.codec.Decoder<?>>",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor.getDecoders()",
            "public java.util.List<? extends org.springframework.core.codec.Decoder<?>> getDecoders()"
        ],
        [
            "<T> void",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor.metadataToExtract(org.springframework.util.MimeType, java.lang.Class<T>, java.util.function.BiConsumer<T, java.util.Map<java.lang.String, java.lang.Object>>)",
            "public <T> void metadataToExtract(org.springframework.util.MimeType, java.lang.Class<T>, java.util.function.BiConsumer<T, java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "<T> void",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor.metadataToExtract(org.springframework.util.MimeType, org.springframework.core.ParameterizedTypeReference<T>, java.util.function.BiConsumer<T, java.util.Map<java.lang.String, java.lang.Object>>)",
            "public <T> void metadataToExtract(org.springframework.util.MimeType, org.springframework.core.ParameterizedTypeReference<T>, java.util.function.BiConsumer<T, java.util.Map<java.lang.String, java.lang.Object>>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor.extract(io.rsocket.Payload, org.springframework.util.MimeType)",
            "public java.util.Map<java.lang.String, java.lang.Object> extract(io.rsocket.Payload, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.encoder(org.springframework.core.codec.Encoder<?>...)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder encoder(org.springframework.core.codec.Encoder<?>...)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.decoder(org.springframework.core.codec.Decoder<?>...)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder decoder(org.springframework.core.codec.Decoder<?>...)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.encoders(java.util.function.Consumer<java.util.List<org.springframework.core.codec.Encoder<?>>>)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder encoders(java.util.function.Consumer<java.util.List<org.springframework.core.codec.Encoder<?>>>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.decoders(java.util.function.Consumer<java.util.List<org.springframework.core.codec.Decoder<?>>>)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder decoders(java.util.function.Consumer<java.util.List<org.springframework.core.codec.Decoder<?>>>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.routeMatcher(org.springframework.util.RouteMatcher)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder routeMatcher(org.springframework.util.RouteMatcher)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.reactiveAdapterStrategy(org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder reactiveAdapterStrategy(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.dataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder dataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.metadataExtractor(org.springframework.messaging.rsocket.MetadataExtractor)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder metadataExtractor(org.springframework.messaging.rsocket.MetadataExtractor)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.metadataExtractorRegistry(java.util.function.Consumer<org.springframework.messaging.rsocket.MetadataExtractorRegistry>)",
            "public org.springframework.messaging.rsocket.RSocketStrategies$Builder metadataExtractorRegistry(java.util.function.Consumer<org.springframework.messaging.rsocket.MetadataExtractorRegistry>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies$DefaultRSocketStrategiesBuilder.build()",
            "public org.springframework.messaging.rsocket.RSocketStrategies build()"
        ],
        [
            "default",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistry.void metadataToExtract(org.springframework.util.MimeType, java.lang.Class<?>, java.lang.String)",
            "public default void metadataToExtract(org.springframework.util.MimeType, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "default",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistry.void metadataToExtract(org.springframework.util.MimeType, org.springframework.core.ParameterizedTypeReference<?>, java.lang.String)",
            "public default void metadataToExtract(org.springframework.util.MimeType, org.springframework.core.ParameterizedTypeReference<?>, java.lang.String)"
        ],
        [
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec(org.springframework.messaging.rsocket.DefaultRSocketRequester, java.lang.String, java.lang.Object...)",
            "public org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec(org.springframework.messaging.rsocket.DefaultRSocketRequester, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec(org.springframework.messaging.rsocket.DefaultRSocketRequester, java.lang.Object, org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec(org.springframework.messaging.rsocket.DefaultRSocketRequester, java.lang.Object, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.metadata(java.lang.Object, org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec metadata(java.lang.Object, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.metadata(java.util.function.Consumer<org.springframework.messaging.rsocket.RSocketRequester$MetadataSpec<?>>)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec metadata(java.util.function.Consumer<org.springframework.messaging.rsocket.RSocketRequester$MetadataSpec<?>>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.data(java.lang.Object)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec data(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.data(java.lang.Object, java.lang.Class<?>)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec data(java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.data(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec data(java.lang.Object, org.springframework.core.ParameterizedTypeReference<?>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.sendMetadata()",
            "public reactor.core.publisher.Mono<java.lang.Void> sendMetadata()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.send()",
            "public reactor.core.publisher.Mono<java.lang.Void> send()"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.retrieveMono(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Mono<T> retrieveMono(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.retrieveMono(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Mono<T> retrieveMono(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.retrieveFlux(java.lang.Class<T>)",
            "public <T> reactor.core.publisher.Flux<T> retrieveFlux(java.lang.Class<T>)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.retrieveFlux(org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> reactor.core.publisher.Flux<T> retrieveFlux(org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.data(java.lang.Object, org.springframework.core.ParameterizedTypeReference)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec data(java.lang.Object, org.springframework.core.ParameterizedTypeReference)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.data(java.lang.Object, java.lang.Class)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec data(java.lang.Object, java.lang.Class)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.data(java.lang.Object)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec data(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$MetadataSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester$DefaultRequestSpec.metadata(java.lang.Object, org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.RSocketRequester$MetadataSpec metadata(java.lang.Object, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataEncoder",
            "org.springframework.messaging.rsocket.MetadataEncoder.route(java.lang.String, java.lang.Object...)",
            "public org.springframework.messaging.rsocket.MetadataEncoder route(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataEncoder",
            "org.springframework.messaging.rsocket.MetadataEncoder.metadata(java.lang.Object, org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.MetadataEncoder metadata(java.lang.Object, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataEncoder",
            "org.springframework.messaging.rsocket.MetadataEncoder.metadataAndOrRoute(java.util.Map<java.lang.Object, org.springframework.util.MimeType>, java.lang.String, java.lang.Object[])",
            "public org.springframework.messaging.rsocket.MetadataEncoder metadataAndOrRoute(java.util.Map<java.lang.Object, org.springframework.util.MimeType>, java.lang.String, java.lang.Object[])"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.messaging.rsocket.MetadataEncoder.encode()",
            "public reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> encode()"
        ],
        [
            "java.util.List<org.springframework.core.codec.Encoder<?>>",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies.encoders()",
            "public java.util.List<org.springframework.core.codec.Encoder<?>> encoders()"
        ],
        [
            "java.util.List<org.springframework.core.codec.Decoder<?>>",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies.decoders()",
            "public java.util.List<org.springframework.core.codec.Decoder<?>> decoders()"
        ],
        [
            "org.springframework.util.RouteMatcher",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies.routeMatcher()",
            "public org.springframework.util.RouteMatcher routeMatcher()"
        ],
        [
            "org.springframework.core.ReactiveAdapterRegistry",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies.reactiveAdapterRegistry()",
            "public org.springframework.core.ReactiveAdapterRegistry reactiveAdapterRegistry()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies.dataBufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory dataBufferFactory()"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataExtractor",
            "org.springframework.messaging.rsocket.DefaultRSocketStrategies.metadataExtractor()",
            "public org.springframework.messaging.rsocket.MetadataExtractor metadataExtractor()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.dataMimeType(org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder dataMimeType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.metadataMimeType(org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder metadataMimeType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.setupData(java.lang.Object)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder setupData(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.setupRoute(java.lang.String, java.lang.Object...)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder setupRoute(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.setupMetadata(java.lang.Object, org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder setupMetadata(java.lang.Object, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.rsocketStrategies(org.springframework.messaging.rsocket.RSocketStrategies)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketStrategies(org.springframework.messaging.rsocket.RSocketStrategies)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.rsocketStrategies(java.util.function.Consumer<org.springframework.messaging.rsocket.RSocketStrategies$Builder>)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketStrategies(java.util.function.Consumer<org.springframework.messaging.rsocket.RSocketStrategies$Builder>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.rsocketConnector(org.springframework.messaging.rsocket.RSocketConnectorConfigurer)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder rsocketConnector(org.springframework.messaging.rsocket.RSocketConnectorConfigurer)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$Builder",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.apply(java.util.function.Consumer<org.springframework.messaging.rsocket.RSocketRequester$Builder>)",
            "public org.springframework.messaging.rsocket.RSocketRequester$Builder apply(java.util.function.Consumer<org.springframework.messaging.rsocket.RSocketRequester$Builder>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.tcp(java.lang.String, int)",
            "public org.springframework.messaging.rsocket.RSocketRequester tcp(java.lang.String, int)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.websocket(java.net.URI)",
            "public org.springframework.messaging.rsocket.RSocketRequester websocket(java.net.URI)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.transport(io.rsocket.transport.ClientTransport)",
            "public org.springframework.messaging.rsocket.RSocketRequester transport(io.rsocket.transport.ClientTransport)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.transports(org.reactivestreams.Publisher<java.util.List<io.rsocket.loadbalance.LoadbalanceTarget>>, io.rsocket.loadbalance.LoadbalanceStrategy)",
            "public org.springframework.messaging.rsocket.RSocketRequester transports(org.reactivestreams.Publisher<java.util.List<io.rsocket.loadbalance.LoadbalanceTarget>>, io.rsocket.loadbalance.LoadbalanceStrategy)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.messaging.rsocket.RSocketRequester>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.connectTcp(java.lang.String, int)",
            "public reactor.core.publisher.Mono<org.springframework.messaging.rsocket.RSocketRequester> connectTcp(java.lang.String, int)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.messaging.rsocket.RSocketRequester>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.connectWebSocket(java.net.URI)",
            "public reactor.core.publisher.Mono<org.springframework.messaging.rsocket.RSocketRequester> connectWebSocket(java.net.URI)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.messaging.rsocket.RSocketRequester>",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.connect(io.rsocket.transport.ClientTransport)",
            "public reactor.core.publisher.Mono<org.springframework.messaging.rsocket.RSocketRequester> connect(io.rsocket.transport.ClientTransport)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.Builder.getMetadataMimeType()",
            "public org.springframework.util.MimeType getMetadataMimeType()"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketPayloadReturnValueHandler",
            "org.springframework.messaging.rsocket.annotation.support.RSocketPayloadReturnValueHandler(java.util.List<org.springframework.core.codec.Encoder<?>>, org.springframework.core.ReactiveAdapterRegistry)",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketPayloadReturnValueHandler(java.util.List<org.springframework.core.codec.Encoder<?>>, org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition(io.rsocket.frame.FrameType...)",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition(io.rsocket.frame.FrameType...)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition(java.util.Collection<io.rsocket.frame.FrameType>)",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition(java.util.Collection<io.rsocket.frame.FrameType>)"
        ],
        [
            "java.util.Set<io.rsocket.frame.FrameType>",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.getFrameTypes()",
            "public java.util.Set<io.rsocket.frame.FrameType> getFrameTypes()"
        ],
        [
            "io.rsocket.frame.FrameType",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.getFrameType(org.springframework.messaging.Message<?>)",
            "public static io.rsocket.frame.FrameType getFrameType(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.combine(org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition)",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition combine(org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.getMatchingCondition(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition getMatchingCondition(org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.compareTo(org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition, org.springframework.messaging.Message<?>)",
            "public int compareTo(org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.getCondition(int, int)",
            "public static org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition getCondition(int, int)"
        ],
        [
            "int",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.compareTo(java.lang.Object, org.springframework.messaging.Message)",
            "public int compareTo(java.lang.Object, org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.getMatchingCondition(org.springframework.messaging.Message)",
            "public java.lang.Object getMatchingCondition(org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.annotation.support.RSocketFrameTypeMessageCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.handleConnectionSetupPayload(io.rsocket.ConnectionSetupPayload)",
            "public reactor.core.publisher.Mono<java.lang.Void> handleConnectionSetupPayload(io.rsocket.ConnectionSetupPayload)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.fireAndForget(io.rsocket.Payload)",
            "public reactor.core.publisher.Mono<java.lang.Void> fireAndForget(io.rsocket.Payload)"
        ],
        [
            "reactor.core.publisher.Mono<io.rsocket.Payload>",
            "org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.requestResponse(io.rsocket.Payload)",
            "public reactor.core.publisher.Mono<io.rsocket.Payload> requestResponse(io.rsocket.Payload)"
        ],
        [
            "reactor.core.publisher.Flux<io.rsocket.Payload>",
            "org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.requestStream(io.rsocket.Payload)",
            "public reactor.core.publisher.Flux<io.rsocket.Payload> requestStream(io.rsocket.Payload)"
        ],
        [
            "reactor.core.publisher.Flux<io.rsocket.Payload>",
            "org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.requestChannel(org.reactivestreams.Publisher<io.rsocket.Payload>)",
            "public reactor.core.publisher.Flux<io.rsocket.Payload> requestChannel(org.reactivestreams.Publisher<io.rsocket.Payload>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.messaging.rsocket.annotation.support.MessagingRSocket.metadataPush(io.rsocket.Payload)",
            "public reactor.core.publisher.Mono<java.lang.Void> metadataPush(io.rsocket.Payload)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler()",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setEncoders(java.util.List<? extends org.springframework.core.codec.Encoder<?>>)",
            "public void setEncoders(java.util.List<? extends org.springframework.core.codec.Encoder<?>>)"
        ],
        [
            "java.util.List<? extends org.springframework.core.codec.Encoder<?>>",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.getEncoders()",
            "public java.util.List<? extends org.springframework.core.codec.Encoder<?>> getEncoders()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setDecoders(java.util.List<? extends org.springframework.core.codec.Decoder<?>>)",
            "public void setDecoders(java.util.List<? extends org.springframework.core.codec.Decoder<?>>)"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setRouteMatcher(org.springframework.util.RouteMatcher)",
            "public void setRouteMatcher(org.springframework.util.RouteMatcher)"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)",
            "public void setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry)"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setMetadataExtractor(org.springframework.messaging.rsocket.MetadataExtractor)",
            "public void setMetadataExtractor(org.springframework.messaging.rsocket.MetadataExtractor)"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataExtractor",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.getMetadataExtractor()",
            "public org.springframework.messaging.rsocket.MetadataExtractor getMetadataExtractor()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setRSocketStrategies(org.springframework.messaging.rsocket.RSocketStrategies)",
            "public void setRSocketStrategies(org.springframework.messaging.rsocket.RSocketStrategies)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.getRSocketStrategies()",
            "public org.springframework.messaging.rsocket.RSocketStrategies getRSocketStrategies()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setDefaultDataMimeType(org.springframework.util.MimeType)",
            "public void setDefaultDataMimeType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.getDefaultDataMimeType()",
            "public org.springframework.util.MimeType getDefaultDataMimeType()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.setDefaultMetadataMimeType(org.springframework.util.MimeType)",
            "public void setDefaultMetadataMimeType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.getDefaultMetadataMimeType()",
            "public org.springframework.util.MimeType getDefaultMetadataMimeType()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "io.rsocket.SocketAcceptor",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.responder()",
            "public io.rsocket.SocketAcceptor responder()"
        ],
        [
            "io.rsocket.SocketAcceptor",
            "org.springframework.messaging.rsocket.annotation.support.RSocketMessageHandler.responder(org.springframework.messaging.rsocket.RSocketStrategies, java.lang.Object...)",
            "public static io.rsocket.SocketAcceptor responder(org.springframework.messaging.rsocket.RSocketStrategies, java.lang.Object...)"
        ],
        [
            "org.springframework.messaging.rsocket.annotation.support.RSocketRequesterMethodArgumentResolver",
            "org.springframework.messaging.rsocket.annotation.support.RSocketRequesterMethodArgumentResolver()",
            "public org.springframework.messaging.rsocket.annotation.support.RSocketRequesterMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.messaging.rsocket.annotation.support.RSocketRequesterMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.messaging.rsocket.annotation.support.RSocketRequesterMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public reactor.core.publisher.Mono<java.lang.Object> resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "io.rsocket.core.RSocketClient",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.rsocketClient()",
            "public io.rsocket.core.RSocketClient rsocketClient()"
        ],
        [
            "io.rsocket.RSocket",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.rsocket()",
            "public io.rsocket.RSocket rsocket()"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.dataMimeType()",
            "public org.springframework.util.MimeType dataMimeType()"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.metadataMimeType()",
            "public org.springframework.util.MimeType metadataMimeType()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.route(java.lang.String, java.lang.Object...)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec route(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequester$RequestSpec",
            "org.springframework.messaging.rsocket.DefaultRSocketRequester.metadata(java.lang.Object, org.springframework.util.MimeType)",
            "public org.springframework.messaging.rsocket.RSocketRequester$RequestSpec metadata(java.lang.Object, org.springframework.util.MimeType)"
        ],
        [
            "<T> org.springframework.core.codec.Encoder<T>",
            "org.springframework.messaging.rsocket.RSocketStrategies.encoder(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public default <T> org.springframework.core.codec.Encoder<T> encoder(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "<T> org.springframework.core.codec.Decoder<T>",
            "org.springframework.messaging.rsocket.RSocketStrategies.decoder(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public default <T> org.springframework.core.codec.Decoder<T> decoder(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "default",
            "org.springframework.messaging.rsocket.RSocketStrategies.org.springframework.messaging.rsocket.RSocketStrategies$Builder mutate()",
            "public default org.springframework.messaging.rsocket.RSocketStrategies$Builder mutate()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies",
            "org.springframework.messaging.rsocket.RSocketStrategies.create()",
            "public static org.springframework.messaging.rsocket.RSocketStrategies create()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketStrategies$Builder",
            "org.springframework.messaging.rsocket.RSocketStrategies.builder()",
            "public static org.springframework.messaging.rsocket.RSocketStrategies$Builder builder()"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor$EntryExtractor.extract(io.netty.buffer.ByteBuf, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void extract(io.netty.buffer.ByteBuf, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.rsocket.DefaultMetadataExtractor$EntryExtractor.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.MetadataEncoder$MetadataEntry.value()",
            "public java.lang.Object value()"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.rsocket.MetadataEncoder$MetadataEntry.mimeType()",
            "public org.springframework.util.MimeType mimeType()"
        ],
        [
            "org.springframework.messaging.rsocket.PayloadUtils",
            "org.springframework.messaging.rsocket.PayloadUtils()",
            "public org.springframework.messaging.rsocket.PayloadUtils()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.messaging.rsocket.PayloadUtils.retainDataAndReleasePayload(io.rsocket.Payload, org.springframework.core.io.buffer.DataBufferFactory)",
            "public static org.springframework.core.io.buffer.DataBuffer retainDataAndReleasePayload(io.rsocket.Payload, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "io.rsocket.Payload",
            "org.springframework.messaging.rsocket.PayloadUtils.createPayload(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBuffer)",
            "public static io.rsocket.Payload createPayload(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "io.rsocket.Payload",
            "org.springframework.messaging.rsocket.PayloadUtils.createPayload(org.springframework.core.io.buffer.DataBuffer)",
            "public static io.rsocket.Payload createPayload(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "org.springframework.messaging.tcp.FixedIntervalReconnectStrategy",
            "org.springframework.messaging.tcp.FixedIntervalReconnectStrategy(long)",
            "public org.springframework.messaging.tcp.FixedIntervalReconnectStrategy(long)"
        ],
        [
            "java.lang.Long",
            "org.springframework.messaging.tcp.FixedIntervalReconnectStrategy.getTimeToNextAttempt(int)",
            "public java.lang.Long getTimeToNextAttempt(int)"
        ],
        [
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(java.lang.String, int, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>)",
            "public org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(java.lang.String, int, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>)"
        ],
        [
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(java.util.function.Function<reactor.netty.tcp.TcpClient, reactor.netty.tcp.TcpClient>, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>)",
            "public org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(java.util.function.Function<reactor.netty.tcp.TcpClient, reactor.netty.tcp.TcpClient>, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>)"
        ],
        [
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(reactor.netty.tcp.TcpClient, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>)",
            "public org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient(reactor.netty.tcp.TcpClient, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>)"
        ],
        [
            "void",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient.setLogger(org.apache.commons.logging.Log)",
            "public void setLogger(org.apache.commons.logging.Log)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient.getLogger()",
            "public org.apache.commons.logging.Log getLogger()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient.connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>)",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient.connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>, org.springframework.messaging.tcp.ReconnectStrategy)",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> connect(org.springframework.messaging.tcp.TcpConnectionHandler<P>, org.springframework.messaging.tcp.ReconnectStrategy)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient.shutdown()",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> shutdown()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection(reactor.netty.NettyInbound, reactor.netty.NettyOutbound, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>, reactor.core.publisher.Sinks$Empty<java.lang.Void>)",
            "public org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection(reactor.netty.NettyInbound, reactor.netty.NettyOutbound, org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P>, reactor.core.publisher.Sinks$Empty<java.lang.Void>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection.send(org.springframework.messaging.Message<P>)",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> send(org.springframework.messaging.Message<P>)"
        ],
        [
            "void",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection.onReadInactivity(java.lang.Runnable, long)",
            "public void onReadInactivity(java.lang.Runnable, long)"
        ],
        [
            "void",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection.onWriteInactivity(java.lang.Runnable, long)",
            "public void onWriteInactivity(java.lang.Runnable, long)"
        ],
        [
            "void",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpConnection.close()",
            "public void close()"
        ],
        [
            "org.reactivestreams.Publisher<java.lang.Void>",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient$ReactorNettyHandler.apply(reactor.netty.NettyInbound, reactor.netty.NettyOutbound)",
            "public org.reactivestreams.Publisher<java.lang.Void> apply(reactor.netty.NettyInbound, reactor.netty.NettyOutbound)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient$ReactorNettyHandler.apply(java.lang.Object, java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.tcp.reactor.AbstractNioBufferReactorNettyCodec",
            "org.springframework.messaging.tcp.reactor.AbstractNioBufferReactorNettyCodec()",
            "public org.springframework.messaging.tcp.reactor.AbstractNioBufferReactorNettyCodec()"
        ],
        [
            "java.util.Collection<org.springframework.messaging.Message<P>>",
            "org.springframework.messaging.tcp.reactor.AbstractNioBufferReactorNettyCodec.decode(io.netty.buffer.ByteBuf)",
            "public java.util.Collection<org.springframework.messaging.Message<P>> decode(io.netty.buffer.ByteBuf)"
        ],
        [
            "void",
            "org.springframework.messaging.tcp.reactor.AbstractNioBufferReactorNettyCodec.encode(org.springframework.messaging.Message<P>, io.netty.buffer.ByteBuf)",
            "public void encode(org.springframework.messaging.Message<P>, io.netty.buffer.ByteBuf)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompEncoder",
            "org.springframework.messaging.simp.stomp.StompEncoder()",
            "public org.springframework.messaging.simp.stomp.StompEncoder()"
        ],
        [
            "byte[]",
            "org.springframework.messaging.simp.stomp.StompEncoder.encode(org.springframework.messaging.Message<byte[]>)",
            "public byte[] encode(org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "byte[]",
            "org.springframework.messaging.simp.stomp.StompEncoder.encode(java.util.Map<java.lang.String, java.lang.Object>, byte[])",
            "public byte[] encode(java.util.Map<java.lang.String, java.lang.Object>, byte[])"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompCommand",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsClientMessage()",
            "public org.springframework.messaging.simp.stomp.StompCommand updateStompCommandAsClientMessage()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.updateStompCommandAsServerMessage()",
            "public void updateStompCommandAsServerMessage()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompCommand",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand()",
            "public org.springframework.messaging.simp.stomp.StompCommand getCommand()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.isHeartbeat()",
            "public boolean isHeartbeat()"
        ],
        [
            "long[]",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHeartbeat()",
            "public long[] getHeartbeat()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAcceptVersion(java.lang.String)",
            "public void setAcceptVersion(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAcceptVersion()",
            "public java.util.Set<java.lang.String> getAcceptVersion()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHost(java.lang.String)",
            "public void setHost(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getHost()",
            "public java.lang.String getHost()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setDestination(java.lang.String)",
            "public void setDestination(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setContentType(org.springframework.util.MimeType)",
            "public void setContentType(org.springframework.util.MimeType)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setSubscriptionId(java.lang.String)",
            "public void setSubscriptionId(java.lang.String)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getContentLength()",
            "public java.lang.Integer getContentLength()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setContentLength(int)",
            "public void setContentLength(int)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setHeartbeat(long, long)",
            "public void setHeartbeat(long, long)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setAck(java.lang.String)",
            "public void setAck(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getAck()",
            "public java.lang.String getAck()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setNack(java.lang.String)",
            "public void setNack(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getNack()",
            "public java.lang.String getNack()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setLogin(java.lang.String)",
            "public void setLogin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getLogin()",
            "public java.lang.String getLogin()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setPasscode(java.lang.String)",
            "public void setPasscode(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getPasscode()",
            "public java.lang.String getPasscode()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceiptId(java.lang.String)",
            "public void setReceiptId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getReceiptId()",
            "public java.lang.String getReceiptId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setReceipt(java.lang.String)",
            "public void setReceipt(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getReceipt()",
            "public java.lang.String getReceipt()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessage(java.lang.String)",
            "public void setMessage(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getMessageId()",
            "public java.lang.String getMessageId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setMessageId(java.lang.String)",
            "public void setMessageId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getVersion()",
            "public java.lang.String getVersion()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.setVersion(java.lang.String)",
            "public void setVersion(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getShortLogMessage(java.lang.Object)",
            "public java.lang.String getShortLogMessage(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getDetailedLogMessage(java.lang.Object)",
            "public java.lang.String getDetailedLogMessage(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.create(org.springframework.messaging.simp.stomp.StompCommand)",
            "public static org.springframework.messaging.simp.stomp.StompHeaderAccessor create(org.springframework.messaging.simp.stomp.StompCommand)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.create(org.springframework.messaging.simp.stomp.StompCommand, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public static org.springframework.messaging.simp.stomp.StompHeaderAccessor create(org.springframework.messaging.simp.stomp.StompCommand, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.createForHeartbeat()",
            "public static org.springframework.messaging.simp.stomp.StompHeaderAccessor createForHeartbeat()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.wrap(org.springframework.messaging.Message<?>)",
            "public static org.springframework.messaging.simp.stomp.StompHeaderAccessor wrap(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompCommand",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getCommand(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static org.springframework.messaging.simp.stomp.StompCommand getCommand(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getPasscode(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.lang.String getPasscode(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor.getContentLength(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public static java.lang.Integer getContentLength(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompReactorNettyCodec",
            "org.springframework.messaging.simp.stomp.StompReactorNettyCodec()",
            "public org.springframework.messaging.simp.stomp.StompReactorNettyCodec()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompReactorNettyCodec",
            "org.springframework.messaging.simp.stomp.StompReactorNettyCodec(org.springframework.messaging.simp.stomp.StompDecoder)",
            "public org.springframework.messaging.simp.stomp.StompReactorNettyCodec(org.springframework.messaging.simp.stomp.StompDecoder)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompReactorNettyCodec",
            "org.springframework.messaging.simp.stomp.StompReactorNettyCodec(org.springframework.messaging.simp.stomp.StompDecoder, org.springframework.messaging.simp.stomp.StompEncoder)",
            "public org.springframework.messaging.simp.stomp.StompReactorNettyCodec(org.springframework.messaging.simp.stomp.StompDecoder, org.springframework.messaging.simp.stomp.StompEncoder)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompCommand[]",
            "org.springframework.messaging.simp.stomp.StompCommand.values()",
            "public static org.springframework.messaging.simp.stomp.StompCommand[] values()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompCommand",
            "org.springframework.messaging.simp.stomp.StompCommand.valueOf(java.lang.String)",
            "public static org.springframework.messaging.simp.stomp.StompCommand valueOf(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageType",
            "org.springframework.messaging.simp.stomp.StompCommand.getMessageType()",
            "public org.springframework.messaging.simp.SimpMessageType getMessageType()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompCommand.requiresDestination()",
            "public boolean requiresDestination()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompCommand.requiresSubscriptionId()",
            "public boolean requiresSubscriptionId()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompCommand.requiresContentLength()",
            "public boolean requiresContentLength()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompCommand.isBodyAllowed()",
            "public boolean isBodyAllowed()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompDecoder",
            "org.springframework.messaging.simp.stomp.StompDecoder()",
            "public org.springframework.messaging.simp.stomp.StompDecoder()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompDecoder.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.stomp.StompDecoder.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "java.util.List<org.springframework.messaging.Message<byte[]>>",
            "org.springframework.messaging.simp.stomp.StompDecoder.decode(java.nio.ByteBuffer)",
            "public java.util.List<org.springframework.messaging.Message<byte[]>> decode(java.nio.ByteBuffer)"
        ],
        [
            "java.util.List<org.springframework.messaging.Message<byte[]>>",
            "org.springframework.messaging.simp.stomp.StompDecoder.decode(java.nio.ByteBuffer, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public java.util.List<org.springframework.messaging.Message<byte[]>> decode(java.nio.ByteBuffer, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient()",
            "public org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient()"
        ],
        [
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient(java.lang.String, int)",
            "public org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient(java.lang.String, int)"
        ],
        [
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient(org.springframework.messaging.tcp.TcpOperations<byte[]>)",
            "public org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient(org.springframework.messaging.tcp.TcpOperations<byte[]>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient.connect(org.springframework.messaging.simp.stomp.StompSessionHandler)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> connect(org.springframework.messaging.simp.stomp.StompSessionHandler)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient.connect(org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> connect(org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompSessionHandler)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient.shutdown()",
            "public void shutdown()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.ReactorNettyTcpStompClient.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>)",
            "public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setRelayHost(java.lang.String)",
            "public void setRelayHost(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getRelayHost()",
            "public java.lang.String getRelayHost()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setRelayPort(int)",
            "public void setRelayPort(int)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getRelayPort()",
            "public int getRelayPort()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setClientLogin(java.lang.String)",
            "public void setClientLogin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getClientLogin()",
            "public java.lang.String getClientLogin()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setClientPasscode(java.lang.String)",
            "public void setClientPasscode(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getClientPasscode()",
            "public java.lang.String getClientPasscode()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemLogin(java.lang.String)",
            "public void setSystemLogin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemLogin()",
            "public java.lang.String getSystemLogin()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemPasscode(java.lang.String)",
            "public void setSystemPasscode(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemPasscode()",
            "public java.lang.String getSystemPasscode()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemHeartbeatSendInterval(long)",
            "public void setSystemHeartbeatSendInterval(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemHeartbeatSendInterval()",
            "public long getSystemHeartbeatSendInterval()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemHeartbeatReceiveInterval(long)",
            "public void setSystemHeartbeatReceiveInterval(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemHeartbeatReceiveInterval()",
            "public long getSystemHeartbeatReceiveInterval()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setSystemSubscriptions(java.util.Map<java.lang.String, org.springframework.messaging.MessageHandler>)",
            "public void setSystemSubscriptions(java.util.Map<java.lang.String, org.springframework.messaging.MessageHandler>)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.messaging.MessageHandler>",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getSystemSubscriptions()",
            "public java.util.Map<java.lang.String, org.springframework.messaging.MessageHandler> getSystemSubscriptions()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setVirtualHost(java.lang.String)",
            "public void setVirtualHost(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getVirtualHost()",
            "public java.lang.String getVirtualHost()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setTcpClient(org.springframework.messaging.tcp.TcpOperations<byte[]>)",
            "public void setTcpClient(org.springframework.messaging.tcp.TcpOperations<byte[]>)"
        ],
        [
            "org.springframework.messaging.tcp.TcpOperations<byte[]>",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getTcpClient()",
            "public org.springframework.messaging.tcp.TcpOperations<byte[]> getTcpClient()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getStatsInfo()",
            "public java.lang.String getStatsInfo()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$Stats",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getStats()",
            "public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$Stats getStats()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getConnectionCount()",
            "public int getConnectionCount()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.getTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler getTaskScheduler()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$WriteInactivityTask$1.onSuccess(java.lang.Void)",
            "public void onSuccess(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$WriteInactivityTask$1.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$WriteInactivityTask$1.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReadInactivityTask.run()",
            "public void run()"
        ],
        [
            "org.springframework.messaging.simp.stomp.DefaultStompSession",
            "org.springframework.messaging.simp.stomp.DefaultStompSession(org.springframework.messaging.simp.stomp.StompSessionHandler, org.springframework.messaging.simp.stomp.StompHeaders)",
            "public org.springframework.messaging.simp.stomp.DefaultStompSession(org.springframework.messaging.simp.stomp.StompSessionHandler, org.springframework.messaging.simp.stomp.StompHeaders)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getConnectHeaders()",
            "public org.springframework.messaging.simp.stomp.StompHeaderAccessor getConnectHeaders()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSessionHandler",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getSessionHandler()",
            "public org.springframework.messaging.simp.stomp.StompSessionHandler getSessionHandler()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession>",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getSessionFuture()",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.messaging.simp.stomp.StompSession> getSessionFuture()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.setMessageConverter(org.springframework.messaging.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "org.springframework.messaging.converter.MessageConverter",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getMessageConverter()",
            "public org.springframework.messaging.converter.MessageConverter getMessageConverter()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler getTaskScheduler()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.setReceiptTimeLimit(long)",
            "public void setReceiptTimeLimit(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.getReceiptTimeLimit()",
            "public long getReceiptTimeLimit()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.setAutoReceipt(boolean)",
            "public void setAutoReceipt(boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.isAutoReceiptEnabled()",
            "public boolean isAutoReceiptEnabled()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.isConnected()",
            "public boolean isConnected()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSession$Receiptable",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.send(java.lang.String, java.lang.Object)",
            "public org.springframework.messaging.simp.stomp.StompSession$Receiptable send(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSession$Receiptable",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.send(org.springframework.messaging.simp.stomp.StompHeaders, java.lang.Object)",
            "public org.springframework.messaging.simp.stomp.StompSession$Receiptable send(org.springframework.messaging.simp.stomp.StompHeaders, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSession$Subscription",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.subscribe(java.lang.String, org.springframework.messaging.simp.stomp.StompFrameHandler)",
            "public org.springframework.messaging.simp.stomp.StompSession$Subscription subscribe(java.lang.String, org.springframework.messaging.simp.stomp.StompFrameHandler)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSession$Subscription",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.subscribe(org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompFrameHandler)",
            "public org.springframework.messaging.simp.stomp.StompSession$Subscription subscribe(org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompFrameHandler)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSession$Receiptable",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.acknowledge(java.lang.String, boolean)",
            "public org.springframework.messaging.simp.stomp.StompSession$Receiptable acknowledge(java.lang.String, boolean)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSession$Receiptable",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.acknowledge(org.springframework.messaging.simp.stomp.StompHeaders, boolean)",
            "public org.springframework.messaging.simp.stomp.StompSession$Receiptable acknowledge(org.springframework.messaging.simp.stomp.StompHeaders, boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.disconnect()",
            "public void disconnect()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.disconnect(org.springframework.messaging.simp.stomp.StompHeaders)",
            "public void disconnect(org.springframework.messaging.simp.stomp.StompHeaders)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnected(org.springframework.messaging.tcp.TcpConnection<byte[]>)",
            "public void afterConnected(org.springframework.messaging.tcp.TcpConnection<byte[]>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnectFailure(java.lang.Throwable)",
            "public void afterConnectFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.handleMessage(org.springframework.messaging.Message<byte[]>)",
            "public void handleMessage(org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.handleFailure(java.lang.Throwable)",
            "public void handleFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnectionClosed()",
            "public void afterConnectionClosed()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter",
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter()",
            "public org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter.getPayloadType(org.springframework.messaging.simp.stomp.StompHeaders)",
            "public java.lang.reflect.Type getPayloadType(org.springframework.messaging.simp.stomp.StompHeaders)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter.handleFrame(org.springframework.messaging.simp.stomp.StompHeaders, java.lang.Object)",
            "public void handleFrame(org.springframework.messaging.simp.stomp.StompHeaders, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter.afterConnected(org.springframework.messaging.simp.stomp.StompSession, org.springframework.messaging.simp.stomp.StompHeaders)",
            "public void afterConnected(org.springframework.messaging.simp.stomp.StompSession, org.springframework.messaging.simp.stomp.StompHeaders)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter.handleException(org.springframework.messaging.simp.stomp.StompSession, org.springframework.messaging.simp.stomp.StompCommand, org.springframework.messaging.simp.stomp.StompHeaders, byte[], java.lang.Throwable)",
            "public void handleException(org.springframework.messaging.simp.stomp.StompSession, org.springframework.messaging.simp.stomp.StompCommand, org.springframework.messaging.simp.stomp.StompHeaders, byte[], java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter.handleTransportError(org.springframework.messaging.simp.stomp.StompSession, java.lang.Throwable)",
            "public void handleTransportError(org.springframework.messaging.simp.stomp.StompSession, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompClientSupport",
            "org.springframework.messaging.simp.stomp.StompClientSupport()",
            "public org.springframework.messaging.simp.stomp.StompClientSupport()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompClientSupport.setMessageConverter(org.springframework.messaging.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "org.springframework.messaging.converter.MessageConverter",
            "org.springframework.messaging.simp.stomp.StompClientSupport.getMessageConverter()",
            "public org.springframework.messaging.converter.MessageConverter getMessageConverter()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompClientSupport.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.messaging.simp.stomp.StompClientSupport.getTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler getTaskScheduler()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompClientSupport.setDefaultHeartbeat(long[])",
            "public void setDefaultHeartbeat(long[])"
        ],
        [
            "long[]",
            "org.springframework.messaging.simp.stomp.StompClientSupport.getDefaultHeartbeat()",
            "public long[] getDefaultHeartbeat()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompClientSupport.isDefaultHeartbeatEnabled()",
            "public boolean isDefaultHeartbeatEnabled()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompClientSupport.setReceiptTimeLimit(long)",
            "public void setReceiptTimeLimit(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.stomp.StompClientSupport.getReceiptTimeLimit()",
            "public long getReceiptTimeLimit()"
        ],
        [
            "java.lang.Void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$VoidCallable.call()",
            "public java.lang.Void call()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$VoidCallable.call()",
            "public java.lang.Object call() throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompConversionException",
            "org.springframework.messaging.simp.stomp.StompConversionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.messaging.simp.stomp.StompConversionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompConversionException",
            "org.springframework.messaging.simp.stomp.StompConversionException(java.lang.String)",
            "public org.springframework.messaging.simp.stomp.StompConversionException(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.getConnectHeaders()",
            "public org.springframework.messaging.simp.stomp.StompHeaderAccessor getConnectHeaders()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.afterConnected(org.springframework.messaging.tcp.TcpConnection<byte[]>)",
            "public void afterConnected(org.springframework.messaging.tcp.TcpConnection<byte[]>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.afterConnectFailure(java.lang.Throwable)",
            "public void afterConnectFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.handleMessage(org.springframework.messaging.Message<byte[]>)",
            "public void handleMessage(org.springframework.messaging.Message<byte[]>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.handleFailure(java.lang.Throwable)",
            "public void handleFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.afterConnectionClosed()",
            "public void afterConnectionClosed()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.forward(org.springframework.messaging.Message<?>, org.springframework.messaging.simp.stomp.StompHeaderAccessor)",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> forward(org.springframework.messaging.Message<?>, org.springframework.messaging.simp.stomp.StompHeaderAccessor)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.clearConnection()",
            "public void clearConnection()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription(org.springframework.messaging.simp.stomp.DefaultStompSession, org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompFrameHandler)",
            "public org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription(org.springframework.messaging.simp.stomp.DefaultStompSession, org.springframework.messaging.simp.stomp.StompHeaders, org.springframework.messaging.simp.stomp.StompFrameHandler)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription.getSubscriptionId()",
            "public java.lang.String getSubscriptionId()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaders",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription.getSubscriptionHeaders()",
            "public org.springframework.messaging.simp.stomp.StompHeaders getSubscriptionHeaders()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompFrameHandler",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription.getHandler()",
            "public org.springframework.messaging.simp.stomp.StompFrameHandler getHandler()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription.unsubscribe()",
            "public void unsubscribe()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription.unsubscribe(org.springframework.messaging.simp.stomp.StompHeaders)",
            "public void unsubscribe(org.springframework.messaging.simp.stomp.StompHeaders)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$DefaultSubscription.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder",
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder(org.springframework.messaging.simp.stomp.StompDecoder, int)",
            "public org.springframework.messaging.simp.stomp.BufferingStompDecoder(org.springframework.messaging.simp.stomp.StompDecoder, int)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompDecoder",
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder.getStompDecoder()",
            "public final org.springframework.messaging.simp.stomp.StompDecoder getStompDecoder()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSizeLimit()",
            "public final int getBufferSizeLimit()"
        ],
        [
            "java.util.List<org.springframework.messaging.Message<byte[]>>",
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder.decode(java.nio.ByteBuffer)",
            "public java.util.List<org.springframework.messaging.Message<byte[]>> decode(java.nio.ByteBuffer)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder.getBufferSize()",
            "public int getBufferSize()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.messaging.simp.stomp.BufferingStompDecoder.getExpectedContentLength()",
            "public java.lang.Integer getExpectedContentLength()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaders",
            "org.springframework.messaging.simp.stomp.StompHeaders()",
            "public org.springframework.messaging.simp.stomp.StompHeaders()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setContentType(org.springframework.util.MimeType)",
            "public void setContentType(org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.util.MimeType",
            "org.springframework.messaging.simp.stomp.StompHeaders.getContentType()",
            "public org.springframework.util.MimeType getContentType()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setContentLength(long)",
            "public void setContentLength(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.stomp.StompHeaders.getContentLength()",
            "public long getContentLength()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setReceipt(java.lang.String)",
            "public void setReceipt(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getReceipt()",
            "public java.lang.String getReceipt()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setHost(java.lang.String)",
            "public void setHost(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getHost()",
            "public java.lang.String getHost()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setAcceptVersion(java.lang.String...)",
            "public void setAcceptVersion(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.messaging.simp.stomp.StompHeaders.getAcceptVersion()",
            "public java.lang.String[] getAcceptVersion()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setLogin(java.lang.String)",
            "public void setLogin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getLogin()",
            "public java.lang.String getLogin()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setPasscode(java.lang.String)",
            "public void setPasscode(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getPasscode()",
            "public java.lang.String getPasscode()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setHeartbeat(long[])",
            "public void setHeartbeat(long[])"
        ],
        [
            "long[]",
            "org.springframework.messaging.simp.stomp.StompHeaders.getHeartbeat()",
            "public long[] getHeartbeat()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompHeaders.isHeartbeatEnabled()",
            "public boolean isHeartbeatEnabled()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setSession(java.lang.String)",
            "public void setSession(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getSession()",
            "public java.lang.String getSession()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setServer(java.lang.String)",
            "public void setServer(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getServer()",
            "public java.lang.String getServer()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setDestination(java.lang.String)",
            "public void setDestination(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getDestination()",
            "public java.lang.String getDestination()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getId()",
            "public java.lang.String getId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setAck(java.lang.String)",
            "public void setAck(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getAck()",
            "public java.lang.String getAck()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setSubscription(java.lang.String)",
            "public void setSubscription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getSubscription()",
            "public java.lang.String getSubscription()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setMessageId(java.lang.String)",
            "public void setMessageId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getMessageId()",
            "public java.lang.String getMessageId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setReceiptId(java.lang.String)",
            "public void setReceiptId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getReceiptId()",
            "public java.lang.String getReceiptId()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.messaging.simp.stomp.StompHeaders.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompHeaders.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompHeaders.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompHeaders.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompHeaders.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.messaging.simp.stomp.StompHeaders.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.messaging.simp.stomp.StompHeaders.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.messaging.simp.stomp.StompHeaders.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.messaging.simp.stomp.StompHeaders.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.messaging.simp.stomp.StompHeaders.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.messaging.simp.stomp.StompHeaders.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.stomp.StompHeaders.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompHeaders.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaders.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaders",
            "org.springframework.messaging.simp.stomp.StompHeaders.readOnlyStompHeaders(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public static org.springframework.messaging.simp.stomp.StompHeaders readOnlyStompHeaders(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompHeaders.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.stomp.StompHeaders.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.stomp.StompHeaders.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.stomp.StompHeaders.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.stomp.StompHeaders.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler$1.onSuccess(java.lang.Void)",
            "public void onSuccess(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler$1.onFailure(java.lang.Throwable)",
            "public void onFailure(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$RelayConnectionHandler$1.onSuccess(java.lang.Object)",
            "public void onSuccess(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor$StompPasscode",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor$StompPasscode(java.lang.String)",
            "public org.springframework.messaging.simp.stomp.StompHeaderAccessor$StompPasscode(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompHeaderAccessor$StompPasscode.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.stomp.ConnectionLostException",
            "org.springframework.messaging.simp.stomp.ConnectionLostException(java.lang.String)",
            "public org.springframework.messaging.simp.stomp.ConnectionLostException(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.incrementConnectCount()",
            "public void incrementConnectCount()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.incrementConnectedCount()",
            "public void incrementConnectedCount()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.incrementDisconnectCount()",
            "public void incrementDisconnectCount()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.getTotalHandlers()",
            "public int getTotalHandlers()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.getTotalConnect()",
            "public int getTotalConnect()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.getTotalConnected()",
            "public int getTotalConnected()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.getTotalDisconnect()",
            "public int getTotalDisconnect()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$DefaultStats.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$SystemSessionConnectionHandler",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$SystemSessionConnectionHandler(org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler, org.springframework.messaging.simp.stomp.StompHeaderAccessor)",
            "public org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$SystemSessionConnectionHandler(org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler, org.springframework.messaging.simp.stomp.StompHeaderAccessor)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$SystemSessionConnectionHandler.afterConnectionClosed()",
            "public void afterConnectionClosed()"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.lang.Void>",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$SystemSessionConnectionHandler.forward(org.springframework.messaging.Message<?>, org.springframework.messaging.simp.stomp.StompHeaderAccessor)",
            "public org.springframework.util.concurrent.ListenableFuture<java.lang.Void> forward(org.springframework.messaging.Message<?>, org.springframework.messaging.simp.stomp.StompHeaderAccessor)"
        ],
        [
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler(org.springframework.messaging.simp.stomp.DefaultStompSession, java.lang.String)",
            "public org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler(org.springframework.messaging.simp.stomp.DefaultStompSession, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler.getReceiptId()",
            "public java.lang.String getReceiptId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler.addReceiptTask(java.lang.Runnable)",
            "public void addReceiptTask(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler.addReceiptLostTask(java.lang.Runnable)",
            "public void addReceiptLostTask(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler.handleReceiptReceived()",
            "public void handleReceiptReceived()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$ReceiptHandler.handleReceiptNotReceived()",
            "public void handleReceiptNotReceived()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$ClientSendMessageCountTask.run()",
            "public void run()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.DefaultStompSession$WriteInactivityTask.run()",
            "public void run()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompEncoder$DefaultResult.add(byte[])",
            "public void add(byte[])"
        ],
        [
            "void",
            "org.springframework.messaging.simp.stomp.StompEncoder$DefaultResult.add(byte)",
            "public void add(byte)"
        ],
        [
            "byte[]",
            "org.springframework.messaging.simp.stomp.StompEncoder$DefaultResult.toByteArray()",
            "public byte[] toByteArray()"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition(org.springframework.messaging.simp.SimpMessageType)",
            "public org.springframework.messaging.simp.SimpMessageTypeMessageCondition(org.springframework.messaging.simp.SimpMessageType)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageType",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.getMessageType()",
            "public org.springframework.messaging.simp.SimpMessageType getMessageType()"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.combine(org.springframework.messaging.simp.SimpMessageTypeMessageCondition)",
            "public org.springframework.messaging.simp.SimpMessageTypeMessageCondition combine(org.springframework.messaging.simp.SimpMessageTypeMessageCondition)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.getMatchingCondition(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.simp.SimpMessageTypeMessageCondition getMatchingCondition(org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.compareTo(org.springframework.messaging.simp.SimpMessageTypeMessageCondition, org.springframework.messaging.Message<?>)",
            "public int compareTo(org.springframework.messaging.simp.SimpMessageTypeMessageCondition, org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.compareTo(java.lang.Object, org.springframework.messaging.Message)",
            "public int compareTo(java.lang.Object, org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.getMatchingCondition(org.springframework.messaging.Message)",
            "public java.lang.Object getMatchingCondition(org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessagingTemplate",
            "org.springframework.messaging.simp.SimpMessagingTemplate(org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.simp.SimpMessagingTemplate(org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.MessageChannel",
            "org.springframework.messaging.simp.SimpMessagingTemplate.getMessageChannel()",
            "public org.springframework.messaging.MessageChannel getMessageChannel()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.setUserDestinationPrefix(java.lang.String)",
            "public void setUserDestinationPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessagingTemplate.getUserDestinationPrefix()",
            "public java.lang.String getUserDestinationPrefix()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.setSendTimeout(long)",
            "public void setSendTimeout(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.SimpMessagingTemplate.getSendTimeout()",
            "public long getSendTimeout()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.SimpMessagingTemplate.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.send(org.springframework.messaging.Message<?>)",
            "public void send(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object)",
            "public void convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessagingTemplate.convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSendToUser(java.lang.String, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "org.springframework.messaging.simp.SimpLogging",
            "org.springframework.messaging.simp.SimpLogging()",
            "public org.springframework.messaging.simp.SimpLogging()"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.messaging.simp.SimpLogging.forLogName(java.lang.Class<?>)",
            "public static org.apache.commons.logging.Log forLogName(java.lang.Class<?>)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.messaging.simp.SimpLogging.forLog(org.apache.commons.logging.Log)",
            "public static org.apache.commons.logging.Log forLog(org.apache.commons.logging.Log)"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser()",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser()"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser(org.springframework.messaging.simp.user.SimpUser)",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser(org.springframework.messaging.simp.user.SimpUser)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.security.Principal",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.hasSessions()",
            "public boolean hasSessions()"
        ],
        [
            "org.springframework.messaging.simp.user.SimpSession",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.getSession(java.lang.String)",
            "public org.springframework.messaging.simp.user.SimpSession getSession(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.setSessions(java.util.Set<org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession>)",
            "public void setSessions(java.util.Set<org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession>)"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSession>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.getSessions()",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSession> getSessions()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationResult",
            "org.springframework.messaging.simp.user.UserDestinationResult(java.lang.String, java.util.Set<java.lang.String>, java.lang.String, java.lang.String)",
            "public org.springframework.messaging.simp.user.UserDestinationResult(java.lang.String, java.util.Set<java.lang.String>, java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationResult.getSourceDestination()",
            "public java.lang.String getSourceDestination()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.messaging.simp.user.UserDestinationResult.getTargetDestinations()",
            "public java.util.Set<java.lang.String> getTargetDestinations()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationResult.getSubscribeDestination()",
            "public java.lang.String getSubscribeDestination()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationResult.getUser()",
            "public java.lang.String getUser()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationResult.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.SubscribableChannel, org.springframework.messaging.simp.user.UserDestinationResolver)",
            "public org.springframework.messaging.simp.user.UserDestinationMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.SubscribableChannel, org.springframework.messaging.simp.user.UserDestinationResolver)"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationResolver",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.getUserDestinationResolver()",
            "public org.springframework.messaging.simp.user.UserDestinationResolver getUserDestinationResolver()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.setBroadcastDestination(java.lang.String)",
            "public void setBroadcastDestination(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBroadcastDestination()",
            "public java.lang.String getBroadcastDestination()"
        ],
        [
            "org.springframework.messaging.core.MessageSendingOperations<java.lang.String>",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.getBrokerMessagingTemplate()",
            "public org.springframework.messaging.core.MessageSendingOperations<java.lang.String> getBrokerMessagingTemplate()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.start()",
            "public final void start()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.stop()",
            "public final void stop()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.stop(java.lang.Runnable)",
            "public final void stop(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.isRunning()",
            "public final boolean isRunning()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.handleMessage(org.springframework.messaging.Message<?>)",
            "public void handleMessage(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.messaging.simp.user.SimpSession>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$SessionLookup.findSessions(java.lang.String)",
            "public java.util.Map<java.lang.String, org.springframework.messaging.simp.user.SimpSession> findSessions(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver(org.springframework.messaging.simp.user.SimpUserRegistry)",
            "public org.springframework.messaging.simp.user.DefaultUserDestinationResolver(org.springframework.messaging.simp.user.SimpUserRegistry)"
        ],
        [
            "org.springframework.messaging.simp.user.SimpUserRegistry",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.getSimpUserRegistry()",
            "public org.springframework.messaging.simp.user.SimpUserRegistry getSimpUserRegistry()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setUserDestinationPrefix(java.lang.String)",
            "public void setUserDestinationPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.getDestinationPrefix()",
            "public java.lang.String getDestinationPrefix()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setRemoveLeadingSlash(boolean)",
            "public void setRemoveLeadingSlash(boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.isRemoveLeadingSlash()",
            "public boolean isRemoveLeadingSlash()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.setPathMatcher(org.springframework.util.PathMatcher)",
            "public void setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationResult",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.resolveDestination(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.simp.user.UserDestinationResult resolveDestination(org.springframework.messaging.Message<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler$BroadcastHandler",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler$BroadcastHandler(org.springframework.messaging.core.MessageSendingOperations<java.lang.String>, java.lang.String)",
            "public org.springframework.messaging.simp.user.UserDestinationMessageHandler$BroadcastHandler(org.springframework.messaging.core.MessageSendingOperations<java.lang.String>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler$BroadcastHandler.getBroadcastDestination()",
            "public java.lang.String getBroadcastDestination()"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler$BroadcastHandler.preHandle(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.Message<?> preHandle(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler$BroadcastHandler.handleUnresolved(org.springframework.messaging.Message<?>)",
            "public void handleUnresolved(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot()",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot()"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot(java.lang.String, org.springframework.messaging.simp.user.SimpUserRegistry)",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot(java.lang.String, org.springframework.messaging.simp.user.SimpUserRegistry)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.getId()",
            "public java.lang.String getId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.setUserMap(java.util.Map<java.lang.String, org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser>)",
            "public void setUserMap(java.util.Map<java.lang.String, org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser>)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.getUserMap()",
            "public java.util.Map<java.lang.String, org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser> getUserMap()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.isExpired(long)",
            "public boolean isExpired(long)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.init(long, org.springframework.messaging.simp.user.MultiServerUserRegistry$SessionLookup)",
            "public void init(long, org.springframework.messaging.simp.user.MultiServerUserRegistry$SessionLookup)"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSubscription>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher)",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$UserRegistrySnapshot.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler$UserRegistryTask.run()",
            "public void run()"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription()",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription()"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription(org.springframework.messaging.simp.user.SimpSubscription)",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription(org.springframework.messaging.simp.user.SimpSubscription)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.getId()",
            "public java.lang.String getId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.setSession(org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession)",
            "public void setSession(org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession)"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.getSession()",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession getSession()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.setDestination(java.lang.String)",
            "public void setDestination(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.getDestination()",
            "public java.lang.String getDestination()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.SimpSession",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription.getSession()",
            "public org.springframework.messaging.simp.user.SimpSession getSession()"
        ],
        [
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult(java.lang.String, java.lang.String, java.lang.String, java.util.Set<java.lang.String>, java.lang.String)",
            "public org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult(java.lang.String, java.lang.String, java.lang.String, java.util.Set<java.lang.String>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult.getSourceDestination()",
            "public java.lang.String getSourceDestination()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult.getActualDestination()",
            "public java.lang.String getActualDestination()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult.getSubscribeDestination()",
            "public java.lang.String getSubscribeDestination()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult.getSessionIds()",
            "public java.util.Set<java.lang.String> getSessionIds()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult.getUser()",
            "public java.lang.String getUser()"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession()",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession()"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession(org.springframework.messaging.simp.user.SimpSession)",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession(org.springframework.messaging.simp.user.SimpSession)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.setUser(org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser)",
            "public void setUser(org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser)"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.getUser()",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpUser getUser()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.setSubscriptions(java.util.Set<org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription>)",
            "public void setSubscriptions(java.util.Set<org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSubscription>)"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSubscription>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.getSubscriptions()",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> getSubscriptions()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.user.SimpUser",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry$TransferSimpSession.getUser()",
            "public org.springframework.messaging.simp.user.SimpUser getUser()"
        ],
        [
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler(org.springframework.messaging.simp.user.MultiServerUserRegistry, org.springframework.messaging.simp.SimpMessagingTemplate, java.lang.String, org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.messaging.simp.user.UserRegistryMessageHandler(org.springframework.messaging.simp.user.MultiServerUserRegistry, org.springframework.messaging.simp.SimpMessagingTemplate, java.lang.String, org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler.getBroadcastDestination()",
            "public java.lang.String getBroadcastDestination()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler.setRegistryExpirationPeriod(long)",
            "public void setRegistryExpirationPeriod(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler.getRegistryExpirationPeriod()",
            "public long getRegistryExpirationPeriod()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler.onApplicationEvent(org.springframework.messaging.simp.broker.BrokerAvailabilityEvent)",
            "public void onApplicationEvent(org.springframework.messaging.simp.broker.BrokerAvailabilityEvent)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler.handleMessage(org.springframework.messaging.Message<?>)",
            "public void handleMessage(org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.UserRegistryMessageHandler.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "org.springframework.messaging.simp.user.MultiServerUserRegistry",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry(org.springframework.messaging.simp.user.SimpUserRegistry)",
            "public org.springframework.messaging.simp.user.MultiServerUserRegistry(org.springframework.messaging.simp.user.SimpUserRegistry)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.getOrder()",
            "public int getOrder()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.supportsEventType(java.lang.Class<? extends org.springframework.context.ApplicationEvent>)",
            "public boolean supportsEventType(java.lang.Class<? extends org.springframework.context.ApplicationEvent>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.supportsSourceType(java.lang.Class<?>)",
            "public boolean supportsSourceType(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "org.springframework.messaging.simp.user.SimpUser",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.getUser(java.lang.String)",
            "public org.springframework.messaging.simp.user.SimpUser getUser(java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpUser>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.getUsers()",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpUser> getUsers()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.getUserCount()",
            "public int getUserCount()"
        ],
        [
            "java.util.Set<org.springframework.messaging.simp.user.SimpSubscription>",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher)",
            "public java.util.Set<org.springframework.messaging.simp.user.SimpSubscription> findSubscriptions(org.springframework.messaging.simp.user.SimpSubscriptionMatcher)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.user.MultiServerUserRegistry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.config.AbstractBrokerRegistration",
            "org.springframework.messaging.simp.config.AbstractBrokerRegistration(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, java.lang.String[])",
            "public org.springframework.messaging.simp.config.AbstractBrokerRegistration(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, java.lang.String[])"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.TaskExecutorRegistration()",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration()"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.TaskExecutorRegistration(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.TaskExecutorRegistration.corePoolSize(int)",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration corePoolSize(int)"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.TaskExecutorRegistration.maxPoolSize(int)",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration maxPoolSize(int)"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.TaskExecutorRegistration.keepAliveSeconds(int)",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration keepAliveSeconds(int)"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.TaskExecutorRegistration.queueCapacity(int)",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration queueCapacity(int)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration$1.supports(java.lang.Class<?>)",
            "public boolean supports(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration$1.validate(java.lang.Object, org.springframework.validation.Errors)",
            "public void validate(java.lang.Object, org.springframework.validation.Errors)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "org.springframework.messaging.support.AbstractSubscribableChannel",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.clientInboundChannel(org.springframework.core.task.TaskExecutor)",
            "public org.springframework.messaging.support.AbstractSubscribableChannel clientInboundChannel(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.clientInboundChannelExecutor()",
            "public org.springframework.core.task.TaskExecutor clientInboundChannelExecutor()"
        ],
        [
            "org.springframework.messaging.support.AbstractSubscribableChannel",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.clientOutboundChannel(org.springframework.core.task.TaskExecutor)",
            "public org.springframework.messaging.support.AbstractSubscribableChannel clientOutboundChannel(org.springframework.core.task.TaskExecutor)"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.clientOutboundChannelExecutor()",
            "public org.springframework.core.task.TaskExecutor clientOutboundChannelExecutor()"
        ],
        [
            "org.springframework.messaging.support.AbstractSubscribableChannel",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerChannel(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.core.task.TaskExecutor)",
            "public org.springframework.messaging.support.AbstractSubscribableChannel brokerChannel(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.core.task.TaskExecutor)"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerChannelExecutor(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)",
            "public org.springframework.core.task.TaskExecutor brokerChannelExecutor(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)"
        ],
        [
            "org.springframework.util.PathMatcher",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.getPathMatcher(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)",
            "public final org.springframework.util.PathMatcher getPathMatcher(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpAnnotationMethodMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.SimpMessagingTemplate, org.springframework.messaging.converter.CompositeMessageConverter)",
            "public org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler simpAnnotationMethodMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.SimpMessagingTemplate, org.springframework.messaging.converter.CompositeMessageConverter)"
        ],
        [
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.simpleBrokerMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.UserDestinationResolver)",
            "public org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler simpleBrokerMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.UserDestinationResolver)"
        ],
        [
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.stompBrokerRelayMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.UserDestinationMessageHandler, org.springframework.messaging.MessageHandler, org.springframework.messaging.simp.user.UserDestinationResolver)",
            "public org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler stompBrokerRelayMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.UserDestinationMessageHandler, org.springframework.messaging.MessageHandler, org.springframework.messaging.simp.user.UserDestinationResolver)"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationMessageHandler",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.userDestinationMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.UserDestinationResolver)",
            "public org.springframework.messaging.simp.user.UserDestinationMessageHandler userDestinationMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.UserDestinationResolver)"
        ],
        [
            "org.springframework.messaging.MessageHandler",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.userRegistryMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.messaging.simp.SimpMessagingTemplate, org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.messaging.MessageHandler userRegistryMessageHandler(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.messaging.simp.SimpMessagingTemplate, org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.messageBrokerTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler messageBrokerTaskScheduler()"
        ],
        [
            "org.springframework.messaging.simp.SimpMessagingTemplate",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessagingTemplate(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.converter.CompositeMessageConverter)",
            "public org.springframework.messaging.simp.SimpMessagingTemplate brokerMessagingTemplate(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.converter.CompositeMessageConverter)"
        ],
        [
            "org.springframework.messaging.converter.CompositeMessageConverter",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.brokerMessageConverter()",
            "public org.springframework.messaging.converter.CompositeMessageConverter brokerMessageConverter()"
        ],
        [
            "org.springframework.messaging.simp.user.UserDestinationResolver",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.userDestinationResolver(org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)",
            "public org.springframework.messaging.simp.user.UserDestinationResolver userDestinationResolver(org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)"
        ],
        [
            "org.springframework.messaging.simp.user.SimpUserRegistry",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.userRegistry(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)",
            "public org.springframework.messaging.simp.user.SimpUserRegistry userRegistry(org.springframework.messaging.support.AbstractSubscribableChannel, org.springframework.messaging.support.AbstractSubscribableChannel)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "org.springframework.messaging.simp.config.ChannelRegistration",
            "org.springframework.messaging.simp.config.ChannelRegistration()",
            "public org.springframework.messaging.simp.config.ChannelRegistration()"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor()",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration taskExecutor()"
        ],
        [
            "org.springframework.messaging.simp.config.TaskExecutorRegistration",
            "org.springframework.messaging.simp.config.ChannelRegistration.taskExecutor(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)",
            "public org.springframework.messaging.simp.config.TaskExecutorRegistration taskExecutor(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor)"
        ],
        [
            "org.springframework.messaging.simp.config.ChannelRegistration",
            "org.springframework.messaging.simp.config.ChannelRegistration.interceptors(org.springframework.messaging.support.ChannelInterceptor...)",
            "public org.springframework.messaging.simp.config.ChannelRegistration interceptors(org.springframework.messaging.support.ChannelInterceptor...)"
        ],
        [
            "org.springframework.messaging.simp.config.ChannelRegistration",
            "org.springframework.messaging.simp.config.ChannelRegistration.setInterceptors(org.springframework.messaging.support.ChannelInterceptor...)",
            "public org.springframework.messaging.simp.config.ChannelRegistration setInterceptors(org.springframework.messaging.support.ChannelInterceptor...)"
        ],
        [
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration",
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, java.lang.String[])",
            "public org.springframework.messaging.simp.config.SimpleBrokerRegistration(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, java.lang.String[])"
        ],
        [
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration",
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.messaging.simp.config.SimpleBrokerRegistration setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration",
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration.setHeartbeatValue(long[])",
            "public org.springframework.messaging.simp.config.SimpleBrokerRegistration setHeartbeatValue(long[])"
        ],
        [
            "void",
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration.setSelectorHeaderName(java.lang.String)",
            "public void setSelectorHeaderName(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, java.lang.String[])",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, java.lang.String[])"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setRelayHost(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setRelayHost(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setRelayPort(int)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setRelayPort(int)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setClientLogin(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setClientLogin(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setClientPasscode(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setClientPasscode(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setSystemLogin(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setSystemLogin(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setSystemPasscode(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setSystemPasscode(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setSystemHeartbeatSendInterval(long)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setSystemHeartbeatSendInterval(long)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setSystemHeartbeatReceiveInterval(long)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setSystemHeartbeatReceiveInterval(long)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setVirtualHost(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setVirtualHost(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setTcpClient(org.springframework.messaging.tcp.TcpOperations<byte[]>)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setTcpClient(org.springframework.messaging.tcp.TcpOperations<byte[]>)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setAutoStartup(boolean)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setAutoStartup(boolean)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setUserDestinationBroadcast(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setUserDestinationBroadcast(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration.setUserRegistryBroadcast(java.lang.String)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration setUserRegistryBroadcast(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.config.MessageBrokerRegistry",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel)",
            "public org.springframework.messaging.simp.config.MessageBrokerRegistry(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel)"
        ],
        [
            "org.springframework.messaging.simp.config.SimpleBrokerRegistration",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.enableSimpleBroker(java.lang.String...)",
            "public org.springframework.messaging.simp.config.SimpleBrokerRegistration enableSimpleBroker(java.lang.String...)"
        ],
        [
            "org.springframework.messaging.simp.config.StompBrokerRelayRegistration",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.enableStompBrokerRelay(java.lang.String...)",
            "public org.springframework.messaging.simp.config.StompBrokerRelayRegistration enableStompBrokerRelay(java.lang.String...)"
        ],
        [
            "org.springframework.messaging.simp.config.ChannelRegistration",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.configureBrokerChannel()",
            "public org.springframework.messaging.simp.config.ChannelRegistration configureBrokerChannel()"
        ],
        [
            "org.springframework.messaging.simp.config.MessageBrokerRegistry",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.setApplicationDestinationPrefixes(java.lang.String...)",
            "public org.springframework.messaging.simp.config.MessageBrokerRegistry setApplicationDestinationPrefixes(java.lang.String...)"
        ],
        [
            "org.springframework.messaging.simp.config.MessageBrokerRegistry",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.setUserDestinationPrefix(java.lang.String)",
            "public org.springframework.messaging.simp.config.MessageBrokerRegistry setUserDestinationPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.setUserRegistryOrder(int)",
            "public void setUserRegistryOrder(int)"
        ],
        [
            "org.springframework.messaging.simp.config.MessageBrokerRegistry",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.setPathMatcher(org.springframework.util.PathMatcher)",
            "public org.springframework.messaging.simp.config.MessageBrokerRegistry setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.messaging.simp.config.MessageBrokerRegistry",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.setCacheLimit(int)",
            "public org.springframework.messaging.simp.config.MessageBrokerRegistry setCacheLimit(int)"
        ],
        [
            "org.springframework.messaging.simp.config.MessageBrokerRegistry",
            "org.springframework.messaging.simp.config.MessageBrokerRegistry.setPreservePublishOrder(boolean)",
            "public org.springframework.messaging.simp.config.MessageBrokerRegistry setPreservePublishOrder(boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setMessageTypeIfNotSet(org.springframework.messaging.simp.SimpMessageType)",
            "public void setMessageTypeIfNotSet(org.springframework.messaging.simp.SimpMessageType)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageType",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getMessageType()",
            "public org.springframework.messaging.simp.SimpMessageType getMessageType()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setDestination(java.lang.String)",
            "public void setDestination(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination()",
            "public java.lang.String getDestination()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSubscriptionId(java.lang.String)",
            "public void setSubscriptionId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getSubscriptionId()",
            "public java.lang.String getSubscriptionId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionId(java.lang.String)",
            "public void setSessionId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setSessionAttributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setSessionAttributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getSessionAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getSessionAttributes()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUser(java.security.Principal)",
            "public void setUser(java.security.Principal)"
        ],
        [
            "java.security.Principal",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getUser()",
            "public java.security.Principal getUser()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.setUserChangeCallback(java.util.function.Consumer<java.security.Principal>)",
            "public void setUserChangeCallback(java.util.function.Consumer<java.security.Principal>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getShortLogMessage(java.lang.Object)",
            "public java.lang.String getShortLogMessage(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDetailedLogMessage(java.lang.Object)",
            "public java.lang.String getDetailedLogMessage(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.create()",
            "public static org.springframework.messaging.simp.SimpMessageHeaderAccessor create()"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.create(org.springframework.messaging.simp.SimpMessageType)",
            "public static org.springframework.messaging.simp.SimpMessageHeaderAccessor create(org.springframework.messaging.simp.SimpMessageType)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.wrap(org.springframework.messaging.Message<?>)",
            "public static org.springframework.messaging.simp.SimpMessageHeaderAccessor wrap(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageType",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getMessageType(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static org.springframework.messaging.simp.SimpMessageType getMessageType(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getDestination(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.lang.String getDestination(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getSubscriptionId(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.lang.String getSubscriptionId(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getSessionId(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.lang.String getSessionId(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getSessionAttributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.util.Map<java.lang.String, java.lang.Object> getSessionAttributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.security.Principal",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getUser(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static java.security.Principal getUser(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "long[]",
            "org.springframework.messaging.simp.SimpMessageHeaderAccessor.getHeartbeat(java.util.Map<java.lang.String, java.lang.Object>)",
            "public static long[] getHeartbeat(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.messaging.simp.SimpAttributesContextHolder",
            "org.springframework.messaging.simp.SimpAttributesContextHolder()",
            "public org.springframework.messaging.simp.SimpAttributesContextHolder()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributesContextHolder.resetAttributes()",
            "public static void resetAttributes()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributesContextHolder.setAttributes(org.springframework.messaging.simp.SimpAttributes)",
            "public static void setAttributes(org.springframework.messaging.simp.SimpAttributes)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributesContextHolder.setAttributesFromMessage(org.springframework.messaging.Message<?>)",
            "public static void setAttributesFromMessage(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.SimpAttributes",
            "org.springframework.messaging.simp.SimpAttributesContextHolder.getAttributes()",
            "public static org.springframework.messaging.simp.SimpAttributes getAttributes()"
        ],
        [
            "org.springframework.messaging.simp.SimpAttributes",
            "org.springframework.messaging.simp.SimpAttributesContextHolder.currentAttributes()",
            "public static org.springframework.messaging.simp.SimpAttributes currentAttributes() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler$UnsentDisconnectChannelInterceptor.afterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)",
            "public void afterSendCompletion(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, boolean, java.lang.Exception)"
        ],
        [
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry()",
            "public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.setPathMatcher(org.springframework.util.PathMatcher)",
            "public void setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.util.PathMatcher",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getPathMatcher()",
            "public org.springframework.util.PathMatcher getPathMatcher()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.setCacheLimit(int)",
            "public void setCacheLimit(int)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getCacheLimit()",
            "public int getCacheLimit()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.setSelectorHeaderName(java.lang.String)",
            "public void setSelectorHeaderName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.getSelectorHeaderName()",
            "public java.lang.String getSelectorHeaderName()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.unregisterAllSubscriptions(java.lang.String)",
            "public void unregisterAllSubscriptions(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator$CallbackInterceptor.afterMessageHandled(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler, java.lang.Exception)",
            "public void afterMessageHandled(org.springframework.messaging.Message<?>, org.springframework.messaging.MessageChannel, org.springframework.messaging.MessageHandler, java.lang.Exception)"
        ],
        [
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator",
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator(org.springframework.messaging.MessageChannel, org.apache.commons.logging.Log)",
            "public org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator(org.springframework.messaging.MessageChannel, org.apache.commons.logging.Log)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator.send(org.springframework.messaging.Message<?>)",
            "public boolean send(org.springframework.messaging.Message<?>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator.send(org.springframework.messaging.Message<?>, long)",
            "public boolean send(org.springframework.messaging.Message<?>, long)"
        ],
        [
            "java.lang.Runnable",
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator.getNextMessageTask(org.springframework.messaging.Message<?>)",
            "public static java.lang.Runnable getNextMessageTask(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.OrderedMessageChannelDecorator.configureInterceptor(org.springframework.messaging.MessageChannel, boolean)",
            "public static void configureInterceptor(org.springframework.messaging.MessageChannel, boolean)"
        ],
        [
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo(java.lang.String, java.security.Principal, org.springframework.messaging.MessageChannel, long[], long[])",
            "public org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo(java.lang.String, java.security.Principal, org.springframework.messaging.MessageChannel, long[], long[])"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.security.Principal",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getUser()",
            "public java.security.Principal getUser()"
        ],
        [
            "org.springframework.messaging.MessageChannel",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getClientOutboundChannel()",
            "public org.springframework.messaging.MessageChannel getClientOutboundChannel()"
        ],
        [
            "long",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getReadInterval()",
            "public long getReadInterval()"
        ],
        [
            "long",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getWriteInterval()",
            "public long getWriteInterval()"
        ],
        [
            "long",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getLastReadTime()",
            "public long getLastReadTime()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.setLastReadTime(long)",
            "public void setLastReadTime(long)"
        ],
        [
            "long",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.getLastWriteTime()",
            "public long getLastWriteTime()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$SessionInfo.setLastWriteTime(long)",
            "public void setLastWriteTime(long)"
        ],
        [
            "org.springframework.messaging.simp.broker.BrokerAvailabilityEvent",
            "org.springframework.messaging.simp.broker.BrokerAvailabilityEvent(boolean, java.lang.Object)",
            "public org.springframework.messaging.simp.broker.BrokerAvailabilityEvent(boolean, java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.BrokerAvailabilityEvent.isBrokerAvailable()",
            "public boolean isBrokerAvailable()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.BrokerAvailabilityEvent.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler$HeartbeatTask.run()",
            "public void run()"
        ],
        [
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel)",
            "public org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel)"
        ],
        [
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>)",
            "public org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>)"
        ],
        [
            "org.springframework.messaging.SubscribableChannel",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.getClientInboundChannel()",
            "public org.springframework.messaging.SubscribableChannel getClientInboundChannel()"
        ],
        [
            "org.springframework.messaging.MessageChannel",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.getClientOutboundChannel()",
            "public org.springframework.messaging.MessageChannel getClientOutboundChannel()"
        ],
        [
            "org.springframework.messaging.SubscribableChannel",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.getBrokerChannel()",
            "public org.springframework.messaging.SubscribableChannel getBrokerChannel()"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.getDestinationPrefixes()",
            "public java.util.Collection<java.lang.String> getDestinationPrefixes()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.setUserDestinationPredicate(java.util.function.Predicate<java.lang.String>)",
            "public void setUserDestinationPredicate(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.setPreservePublishOrder(boolean)",
            "public void setPreservePublishOrder(boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.isPreservePublishOrder()",
            "public boolean isPreservePublishOrder()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)",
            "public void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)"
        ],
        [
            "org.springframework.context.ApplicationEventPublisher",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.getApplicationEventPublisher()",
            "public org.springframework.context.ApplicationEventPublisher getApplicationEventPublisher()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.setAutoStartup(boolean)",
            "public void setAutoStartup(boolean)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.isAutoStartup()",
            "public boolean isAutoStartup()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.stop()",
            "public void stop()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.stop(java.lang.Runnable)",
            "public final void stop(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.isRunning()",
            "public final boolean isRunning()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.isBrokerAvailable()",
            "public boolean isBrokerAvailable()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(org.springframework.messaging.Message<?>)",
            "public void handleMessage(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription(java.lang.String, java.lang.String, boolean, org.springframework.expression.Expression)",
            "public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription(java.lang.String, java.lang.String, boolean, org.springframework.expression.Expression)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.getDestination()",
            "public java.lang.String getDestination()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.isPattern()",
            "public boolean isPattern()"
        ],
        [
            "org.springframework.expression.Expression",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.getSelector()",
            "public org.springframework.expression.Expression getSelector()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.util.LinkedMultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$DestinationCache.getSubscriptions(java.lang.String)",
            "public org.springframework.util.LinkedMultiValueMap<java.lang.String, java.lang.String> getSubscriptions(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$DestinationCache.updateAfterNewSubscription(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)",
            "public void updateAfterNewSubscription(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$DestinationCache.updateAfterRemovedSubscription(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)",
            "public void updateAfterRemovedSubscription(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$DestinationCache.updateAfterRemovedSession(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo)",
            "public void updateAfterRemovedSession(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo)"
        ],
        [
            "java.util.Collection<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription>",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo.getSubscriptions()",
            "public java.util.Collection<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription> getSubscriptions()"
        ],
        [
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo.getSubscription(java.lang.String)",
            "public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription getSubscription(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo.addSubscription(org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)",
            "public void addSubscription(org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)"
        ],
        [
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo.removeSubscription(java.lang.String)",
            "public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription removeSubscription(java.lang.String)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.getSpecificTargetClasses()",
            "public java.lang.Class<?>[] getSpecificTargetClasses()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.expression.TypedValue",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SimpMessageHeaderPropertyAccessor.write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object)",
            "public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionRegistry.getSession(java.lang.String)",
            "public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo getSession(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionRegistry.forEachSubscription(java.util.function.BiConsumer<java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription>)",
            "public void forEachSubscription(java.util.function.BiConsumer<java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionRegistry.addSubscription(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)",
            "public void addSubscription(java.lang.String, org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$Subscription)"
        ],
        [
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo",
            "org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionRegistry.removeSubscriptions(java.lang.String)",
            "public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry$SessionInfo removeSubscriptions(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry",
            "org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry()",
            "public org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.registerSubscription(org.springframework.messaging.Message<?>)",
            "public final void registerSubscription(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.unregisterSubscription(org.springframework.messaging.Message<?>)",
            "public final void unregisterSubscription(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.messaging.simp.broker.AbstractSubscriptionRegistry.findSubscriptions(org.springframework.messaging.Message<?>)",
            "public final org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> findSubscriptions(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>)",
            "public org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.SubscribableChannel, java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setSubscriptionRegistry(org.springframework.messaging.simp.broker.SubscriptionRegistry)",
            "public void setSubscriptionRegistry(org.springframework.messaging.simp.broker.SubscriptionRegistry)"
        ],
        [
            "org.springframework.messaging.simp.broker.SubscriptionRegistry",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getSubscriptionRegistry()",
            "public org.springframework.messaging.simp.broker.SubscriptionRegistry getSubscriptionRegistry()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setPathMatcher(org.springframework.util.PathMatcher)",
            "public void setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setCacheLimit(java.lang.Integer)",
            "public void setCacheLimit(java.lang.Integer)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setSelectorHeaderName(java.lang.String)",
            "public void setSelectorHeaderName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getTaskScheduler()",
            "public org.springframework.scheduling.TaskScheduler getTaskScheduler()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setHeartbeatValue(long[])",
            "public void setHeartbeatValue(long[])"
        ],
        [
            "long[]",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getHeartbeatValue()",
            "public long[] getHeartbeatValue()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.startInternal()",
            "public void startInternal()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.stopInternal()",
            "public void stopInternal()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler",
            "org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler(org.springframework.messaging.core.MessageSendingOperations<java.lang.String>)",
            "public org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler(org.springframework.messaging.core.MessageSendingOperations<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$DestinationHelper",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$DestinationHelper(org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, org.springframework.messaging.MessageHeaders, org.springframework.messaging.simp.annotation.SendToUser, org.springframework.messaging.handler.annotation.SendTo)",
            "public org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$DestinationHelper(org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler, org.springframework.messaging.MessageHeaders, org.springframework.messaging.simp.annotation.SendToUser, org.springframework.messaging.handler.annotation.SendTo)"
        ],
        [
            "org.springframework.messaging.handler.annotation.SendTo",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$DestinationHelper.getSendTo()",
            "public org.springframework.messaging.handler.annotation.SendTo getSendTo()"
        ],
        [
            "org.springframework.messaging.simp.annotation.SendToUser",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$DestinationHelper.getSendToUser()",
            "public org.springframework.messaging.simp.annotation.SendToUser getSendToUser()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler$DestinationHelper.expandTemplateVars(java.lang.String)",
            "public java.lang.String expandTemplateVars(java.lang.String)"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.PrincipalMethodArgumentResolver",
            "org.springframework.messaging.simp.annotation.support.PrincipalMethodArgumentResolver()",
            "public org.springframework.messaging.simp.annotation.support.PrincipalMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.annotation.support.PrincipalMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.annotation.support.PrincipalMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler(org.springframework.messaging.simp.SimpMessageSendingOperations, boolean)",
            "public org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler(org.springframework.messaging.simp.SimpMessageSendingOperations, boolean)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setDefaultDestinationPrefix(java.lang.String)",
            "public void setDefaultDestinationPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.getDefaultDestinationPrefix()",
            "public java.lang.String getDefaultDestinationPrefix()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setDefaultUserDestinationPrefix(java.lang.String)",
            "public void setDefaultUserDestinationPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.getDefaultUserDestinationPrefix()",
            "public java.lang.String getDefaultUserDestinationPrefix()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>) throws java.lang.Exception"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.simp.SimpMessageSendingOperations)",
            "public org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler(org.springframework.messaging.SubscribableChannel, org.springframework.messaging.MessageChannel, org.springframework.messaging.simp.SimpMessageSendingOperations)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setDestinationPrefixes(java.util.Collection<java.lang.String>)",
            "public void setDestinationPrefixes(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setMessageConverter(org.springframework.messaging.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.messaging.converter.MessageConverter)"
        ],
        [
            "org.springframework.messaging.converter.MessageConverter",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getMessageConverter()",
            "public org.springframework.messaging.converter.MessageConverter getMessageConverter()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getConversionService()",
            "public org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setPathMatcher(org.springframework.util.PathMatcher)",
            "public void setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "org.springframework.util.PathMatcher",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getPathMatcher()",
            "public org.springframework.util.PathMatcher getPathMatcher()"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setValidator(org.springframework.validation.Validator)",
            "public void setValidator(org.springframework.validation.Validator)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)",
            "public void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)"
        ],
        [
            "org.springframework.messaging.support.MessageHeaderInitializer",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.getHeaderInitializer()",
            "public org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.start()",
            "public final void start()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.stop()",
            "public final void stop()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.stop(java.lang.Runnable)",
            "public final void stop(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.isRunning()",
            "public final boolean isRunning()"
        ],
        [
            "org.springframework.messaging.simp.annotation.support.MissingSessionUserException",
            "org.springframework.messaging.simp.annotation.support.MissingSessionUserException(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.simp.annotation.support.MissingSessionUserException(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.SimpSessionScope",
            "org.springframework.messaging.simp.SimpSessionScope()",
            "public org.springframework.messaging.simp.SimpSessionScope()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpSessionScope.get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)",
            "public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpSessionScope.remove(java.lang.String)",
            "public java.lang.Object remove(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpSessionScope.registerDestructionCallback(java.lang.String, java.lang.Runnable)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpSessionScope.resolveContextualObject(java.lang.String)",
            "public java.lang.Object resolveContextualObject(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpSessionScope.getConversationId()",
            "public java.lang.String getConversationId()"
        ],
        [
            "org.springframework.messaging.simp.SimpAttributes",
            "org.springframework.messaging.simp.SimpAttributes(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.messaging.simp.SimpAttributes(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpAttributes.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributes.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributes.removeAttribute(java.lang.String)",
            "public void removeAttribute(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.messaging.simp.SimpAttributes.getAttributeNames()",
            "public java.lang.String[] getAttributeNames()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributes.registerDestructionCallback(java.lang.String, java.lang.Runnable)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable)"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpAttributes.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpAttributes.getSessionMutex()",
            "public java.lang.Object getSessionMutex()"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.SimpAttributes.isSessionCompleted()",
            "public boolean isSessionCompleted()"
        ],
        [
            "void",
            "org.springframework.messaging.simp.SimpAttributes.sessionCompleted()",
            "public void sessionCompleted()"
        ],
        [
            "org.springframework.messaging.simp.SimpAttributes",
            "org.springframework.messaging.simp.SimpAttributes.fromMessage(org.springframework.messaging.Message<?>)",
            "public static org.springframework.messaging.simp.SimpAttributes fromMessage(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageMappingInfo",
            "org.springframework.messaging.simp.SimpMessageMappingInfo(org.springframework.messaging.simp.SimpMessageTypeMessageCondition, org.springframework.messaging.handler.DestinationPatternsMessageCondition)",
            "public org.springframework.messaging.simp.SimpMessageMappingInfo(org.springframework.messaging.simp.SimpMessageTypeMessageCondition, org.springframework.messaging.handler.DestinationPatternsMessageCondition)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageTypeMessageCondition",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.getMessageTypeMessageCondition()",
            "public org.springframework.messaging.simp.SimpMessageTypeMessageCondition getMessageTypeMessageCondition()"
        ],
        [
            "org.springframework.messaging.handler.DestinationPatternsMessageCondition",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.getDestinationConditions()",
            "public org.springframework.messaging.handler.DestinationPatternsMessageCondition getDestinationConditions()"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageMappingInfo",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.combine(org.springframework.messaging.simp.SimpMessageMappingInfo)",
            "public org.springframework.messaging.simp.SimpMessageMappingInfo combine(org.springframework.messaging.simp.SimpMessageMappingInfo)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageMappingInfo",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.getMatchingCondition(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.simp.SimpMessageMappingInfo getMatchingCondition(org.springframework.messaging.Message<?>)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.compareTo(org.springframework.messaging.simp.SimpMessageMappingInfo, org.springframework.messaging.Message<?>)",
            "public int compareTo(org.springframework.messaging.simp.SimpMessageMappingInfo, org.springframework.messaging.Message<?>)"
        ],
        [
            "boolean",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.compareTo(java.lang.Object, org.springframework.messaging.Message)",
            "public int compareTo(java.lang.Object, org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.getMatchingCondition(org.springframework.messaging.Message)",
            "public java.lang.Object getMatchingCondition(org.springframework.messaging.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.simp.SimpMessageMappingInfo.combine(java.lang.Object)",
            "public java.lang.Object combine(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageType[]",
            "org.springframework.messaging.simp.SimpMessageType.values()",
            "public static org.springframework.messaging.simp.SimpMessageType[] values()"
        ],
        [
            "org.springframework.messaging.simp.SimpMessageType",
            "org.springframework.messaging.simp.SimpMessageType.valueOf(java.lang.String)",
            "public static org.springframework.messaging.simp.SimpMessageType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$2",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$2()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$2()"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$metadataToExtract$2",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$metadataToExtract$2()",
            "public org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$metadataToExtract$2()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveAndAwaitOrNull$2",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveAndAwaitOrNull$2()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveAndAwaitOrNull$2()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveMono$1",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveMono$1()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveMono$1()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.connectAndAwait(org.springframework.messaging.rsocket.RSocketRequester$Builder, io.rsocket.transport.ClientTransport, kotlin.coroutines.Continuation<? super org.springframework.messaging.rsocket.RSocketRequester>)",
            "public static final java.lang.Object connectAndAwait(org.springframework.messaging.rsocket.RSocketRequester$Builder, io.rsocket.transport.ClientTransport, kotlin.coroutines.Continuation<? super org.springframework.messaging.rsocket.RSocketRequester>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.connectTcpAndAwait(org.springframework.messaging.rsocket.RSocketRequester$Builder, java.lang.String, int, kotlin.coroutines.Continuation<? super org.springframework.messaging.rsocket.RSocketRequester>)",
            "public static final java.lang.Object connectTcpAndAwait(org.springframework.messaging.rsocket.RSocketRequester$Builder, java.lang.String, int, kotlin.coroutines.Continuation<? super org.springframework.messaging.rsocket.RSocketRequester>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.connectWebSocketAndAwait(org.springframework.messaging.rsocket.RSocketRequester$Builder, java.net.URI, kotlin.coroutines.Continuation<? super org.springframework.messaging.rsocket.RSocketRequester>)",
            "public static final java.lang.Object connectWebSocketAndAwait(org.springframework.messaging.rsocket.RSocketRequester$Builder, java.net.URI, kotlin.coroutines.Continuation<? super org.springframework.messaging.rsocket.RSocketRequester>)"
        ],
        [
            "<T> org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.dataWithType(org.springframework.messaging.rsocket.RSocketRequester$RequestSpec, java.lang.Object)",
            "public static final <T> org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec dataWithType(org.springframework.messaging.rsocket.RSocketRequester$RequestSpec, java.lang.Object)"
        ],
        [
            "<T> org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.dataWithType(org.springframework.messaging.rsocket.RSocketRequester$RequestSpec, org.reactivestreams.Publisher<T>)",
            "public static final <T> org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec dataWithType(org.springframework.messaging.rsocket.RSocketRequester$RequestSpec, org.reactivestreams.Publisher<T>)"
        ],
        [
            "<T> org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.dataWithType(org.springframework.messaging.rsocket.RSocketRequester$RequestSpec, kotlinx.coroutines.flow.Flow<? extends T>)",
            "public static final <T> org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec dataWithType(org.springframework.messaging.rsocket.RSocketRequester$RequestSpec, kotlinx.coroutines.flow.Flow<? extends T>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.sendAndAwait(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>)",
            "public static final java.lang.Object sendAndAwait(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec, kotlin.coroutines.Continuation<? super kotlin.Unit>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.retrieveAndAwait(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object retrieveAndAwait(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.retrieveAndAwaitOrNull(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec, kotlin.coroutines.Continuation<? super T>)",
            "public static final <T> java.lang.Object retrieveAndAwaitOrNull(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec, kotlin.coroutines.Continuation<? super T>)"
        ],
        [
            "<T> kotlinx.coroutines.flow.Flow<T>",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.retrieveFlow(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec)",
            "public static final <T> kotlinx.coroutines.flow.Flow<T> retrieveFlow(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec)"
        ],
        [
            "<T> reactor.core.publisher.Mono<T>",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.retrieveMono(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec)",
            "public static final <T> reactor.core.publisher.Mono<T> retrieveMono(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec)"
        ],
        [
            "<T> reactor.core.publisher.Flux<T>",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt.retrieveFlux(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec)",
            "public static final <T> reactor.core.publisher.Flux<T> retrieveFlux(org.springframework.messaging.rsocket.RSocketRequester$RetrieveSpec)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$connectWebSocketAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$connectAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$metadataToExtract$1",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$metadataToExtract$1()",
            "public org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$metadataToExtract$1()"
        ],
        [
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$sam$i$java_util_function_BiConsumer$0",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$sam$i$java_util_function_BiConsumer$0(kotlin.jvm.functions.Function2)",
            "public org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$sam$i$java_util_function_BiConsumer$0(kotlin.jvm.functions.Function2)"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt$sam$i$java_util_function_BiConsumer$0.accept(java.lang.Object, java.lang.Object)",
            "public final void accept(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveFlux$1",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveFlux$1()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveFlux$1()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$3",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$3()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$3()"
        ],
        [
            "java.lang.Object",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$connectTcpAndAwait$1.invokeSuspend(java.lang.Object)",
            "public final java.lang.Object invokeSuspend(java.lang.Object)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveFlow$1",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveFlow$1()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveFlow$1()"
        ],
        [
            "<T> void",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt.metadataToExtract(org.springframework.messaging.rsocket.MetadataExtractorRegistry, org.springframework.util.MimeType, java.lang.String)",
            "public static final <T> void metadataToExtract(org.springframework.messaging.rsocket.MetadataExtractorRegistry, org.springframework.util.MimeType, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt.metadataToExtract$default(org.springframework.messaging.rsocket.MetadataExtractorRegistry, org.springframework.util.MimeType, java.lang.String, int, java.lang.Object)",
            "public static void metadataToExtract$default(org.springframework.messaging.rsocket.MetadataExtractorRegistry, org.springframework.util.MimeType, java.lang.String, int, java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.messaging.rsocket.MetadataExtractorRegistryExtensionsKt.metadataToExtract(org.springframework.messaging.rsocket.MetadataExtractorRegistry, org.springframework.util.MimeType, kotlin.jvm.functions.Function2<? super T, ? super java.util.Map<java.lang.String, java.lang.Object>, kotlin.Unit>)",
            "public static final <T> void metadataToExtract(org.springframework.messaging.rsocket.MetadataExtractorRegistry, org.springframework.util.MimeType, kotlin.jvm.functions.Function2<? super T, ? super java.util.Map<java.lang.String, java.lang.Object>, kotlin.Unit>)"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$1",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$1()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$dataWithType$1()"
        ],
        [
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveAndAwait$2",
            "org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveAndAwait$2()",
            "public org.springframework.messaging.rsocket.RSocketRequesterExtensionsKt$retrieveAndAwait$2()"
        ]
    ]
}